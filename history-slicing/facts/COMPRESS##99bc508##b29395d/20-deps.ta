FACT TUPLE :
reference "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.crc"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writtenToOutputStreamForLastEntry"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.sourcePayloadLength"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.totalWrittenToOutputStream"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.def"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(1)"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.OutputStreamCompressor(2)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.create(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(1)"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor.DataOutputCompressor(2)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.SeekableByteChannelCompressor(2)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.ScatterGatherBackingStoreCompressor(2)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.create(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(1)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.getCrc32(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.crc"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.getCrc32(0)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesRead(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.sourcePayloadLength"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesRead(0)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesWrittenForLastEntry(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writtenToOutputStreamForLastEntry"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesWrittenForLastEntry(0)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.getTotalBytesWritten(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.totalWrittenToOutputStream"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.getTotalBytesWritten(0)"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.reset(0)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.write(4)"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.flushDeflater(0)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(2)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.write(4)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writtenToOutputStreamForLastEntry"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.write(4)" "org.apache.commons.compress.archivers.zip.StreamCompressor.crc"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.write(4)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(3)"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.write(4)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(3)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.write(4)" "org.apache.commons.compress.archivers.zip.StreamCompressor.sourcePayloadLength"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.write(4)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.reset(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.crc"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.reset(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.def"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.reset(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.sourcePayloadLength"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.reset(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writtenToOutputStreamForLastEntry"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.reset(0)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.close(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.def"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.close(0)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.flushDeflater(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.def"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.flushDeflater(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(0)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.flushDeflater(0)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(3)" "org.apache.commons.compress.archivers.zip.StreamCompressor.def"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(3)" "org.apache.commons.compress.archivers.zip.StreamCompressor.deflateUntilInputIsNeeded(0)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(3)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.deflateUntilInputIsNeeded(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.def"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.deflateUntilInputIsNeeded(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(0)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.deflateUntilInputIsNeeded(0)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.def"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(3)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(0)"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(3)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(1)"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(3)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(3)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(3)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writtenToOutputStreamForLastEntry"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(3)" "org.apache.commons.compress.archivers.zip.StreamCompressor.totalWrittenToOutputStream"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(3)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(3)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.DEFLATER_BLOCK_SIZE"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.def"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.crc"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.writtenToOutputStreamForLastEntry"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.sourcePayloadLength"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.totalWrittenToOutputStream"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.BUFFER_SIZE"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer" "byte[]"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf" "byte[]"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf"
reference "org.apache.commons.compress.archivers.jar.JarArchiveInputStream" "org.apache.commons.compress.archivers.jar.JarArchiveEntry"
reference "org.apache.commons.compress.archivers.jar.JarArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.jar.JarArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
call "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
contain "org.apache.commons.compress.archivers.jar.JarArchiveInputStream" "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(2)"
contain "org.apache.commons.compress.archivers.jar.JarArchiveInputStream" "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextJarEntry(0)" "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextJarEntry(0)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.jar.JarArchiveInputStream" "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextJarEntry(0)"
call "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextJarEntry(0)"
contain "org.apache.commons.compress.archivers.jar.JarArchiveInputStream" "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(2)"
contain "org.apache.commons.compress.archivers.jar.JarArchiveInputStream" "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(2)"
call "org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(1)" "org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(2)"
contain "org.apache.commons.compress.utils.ServiceLoaderIterator" "org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(1)"
reference "org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(2)" "org.apache.commons.compress.utils.ServiceLoaderIterator.service"
reference "org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(2)" "org.apache.commons.compress.utils.ServiceLoaderIterator.serviceLoaderIterator"
reference "org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(2)" "org.apache.commons.compress.utils.ServiceLoaderIterator.nextServiceLoader"
contain "org.apache.commons.compress.utils.ServiceLoaderIterator" "org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(2)"
reference "org.apache.commons.compress.utils.ServiceLoaderIterator.getNextServiceLoader(0)" "org.apache.commons.compress.utils.ServiceLoaderIterator.nextServiceLoader"
reference "org.apache.commons.compress.utils.ServiceLoaderIterator.getNextServiceLoader(0)" "org.apache.commons.compress.utils.ServiceLoaderIterator.serviceLoaderIterator"
contain "org.apache.commons.compress.utils.ServiceLoaderIterator" "org.apache.commons.compress.utils.ServiceLoaderIterator.getNextServiceLoader(0)"
call "org.apache.commons.compress.utils.ServiceLoaderIterator.hasNext(0)" "org.apache.commons.compress.utils.ServiceLoaderIterator.getNextServiceLoader(0)"
contain "org.apache.commons.compress.utils.ServiceLoaderIterator" "org.apache.commons.compress.utils.ServiceLoaderIterator.hasNext(0)"
call "org.apache.commons.compress.utils.ServiceLoaderIterator.next(0)" "org.apache.commons.compress.utils.ServiceLoaderIterator.getNextServiceLoader(0)"
reference "org.apache.commons.compress.utils.ServiceLoaderIterator.next(0)" "org.apache.commons.compress.utils.ServiceLoaderIterator.service"
reference "org.apache.commons.compress.utils.ServiceLoaderIterator.next(0)" "org.apache.commons.compress.utils.ServiceLoaderIterator.nextServiceLoader"
contain "org.apache.commons.compress.utils.ServiceLoaderIterator" "org.apache.commons.compress.utils.ServiceLoaderIterator.next(0)"
reference "org.apache.commons.compress.utils.ServiceLoaderIterator.remove(0)" "org.apache.commons.compress.utils.ServiceLoaderIterator.service"
contain "org.apache.commons.compress.utils.ServiceLoaderIterator" "org.apache.commons.compress.utils.ServiceLoaderIterator.remove(0)"
contain "org.apache.commons.compress.utils.ServiceLoaderIterator" "org.apache.commons.compress.utils.ServiceLoaderIterator.nextServiceLoader"
contain "org.apache.commons.compress.utils.ServiceLoaderIterator" "org.apache.commons.compress.utils.ServiceLoaderIterator.service"
contain "org.apache.commons.compress.utils.ServiceLoaderIterator" "org.apache.commons.compress.utils.ServiceLoaderIterator.serviceLoaderIterator"
reference "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.utils.ArchiveUtils" "byte[]"
reference "org.apache.commons.compress.utils.ArchiveUtils" "char[]"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.ArchiveUtils(0)"
call "org.apache.commons.compress.utils.ArchiveUtils.toString(1)" "org.apache.commons.compress.archivers.ArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.utils.ArchiveUtils.toString(1)" "org.apache.commons.compress.archivers.ArchiveEntry.getSize(0)"
call "org.apache.commons.compress.utils.ArchiveUtils.toString(1)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.toString(1)"
call "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(4)" "org.apache.commons.compress.utils.ArchiveUtils.isEqual(7)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(4)"
call "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(2)" "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(4)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(2)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(1)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(1)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(3)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.isEqual(7)"
call "org.apache.commons.compress.utils.ArchiveUtils.isEqual(6)" "org.apache.commons.compress.utils.ArchiveUtils.isEqual(7)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.isEqual(6)"
call "org.apache.commons.compress.utils.ArchiveUtils.isEqual(2)" "org.apache.commons.compress.utils.ArchiveUtils.isEqual(7)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.isEqual(2)"
call "org.apache.commons.compress.utils.ArchiveUtils.isEqual(3)" "org.apache.commons.compress.utils.ArchiveUtils.isEqual(7)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.isEqual(3)"
call "org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(6)" "org.apache.commons.compress.utils.ArchiveUtils.isEqual(7)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(6)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(2)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.sanitize(1)"
contain "org.apache.commons.compress.utils.ArchiveUtils" "org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.utils.BitInputStream"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.CompressorInputStream"
call "org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(2)" "org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream(0)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(2)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.oneByte"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(2)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.clearCode"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(2)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.codeSize"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(2)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCode"
call "org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(2)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(2)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.in"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(2)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.close(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.in"
call "org.apache.commons.compress.compressors.lzw.LZWInputStream.close(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.close(0)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.read(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.oneByte"
call "org.apache.commons.compress.compressors.lzw.LZWInputStream.read(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.read(1)"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.read(0)"
call "org.apache.commons.compress.compressors.lzw.LZWInputStream.read(3)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(3)"
call "org.apache.commons.compress.compressors.lzw.LZWInputStream.read(3)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.decompressNextSymbol(0)"
call "org.apache.commons.compress.compressors.lzw.LZWInputStream.read(3)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.count(1)"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.read(3)"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.decompressNextSymbol(0)"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(2)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.setClearCode(1)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.clearCode"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.setClearCode(1)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(1)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.prefixes"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(1)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.characters"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(1)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStack"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(1)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStackLocation"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(1)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.readNextCode(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.codeSize"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.readNextCode(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.in"
call "org.apache.commons.compress.compressors.lzw.LZWInputStream.readNextCode(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.readNextCode(0)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(3)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.tableSize"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(3)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.prefixes"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(3)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.characters"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(3)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.addRepeatOfPreviousCode(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCode"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.addRepeatOfPreviousCode(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCodeFirstChar"
call "org.apache.commons.compress.compressors.lzw.LZWInputStream.addRepeatOfPreviousCode(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(2)"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.addRepeatOfPreviousCode(0)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(2)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStack"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(2)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStackLocation"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(2)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.characters"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(2)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.prefixes"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(2)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCode"
call "org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(2)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(2)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(2)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCodeFirstChar"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(2)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(3)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStack"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(3)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStackLocation"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(3)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.getCodeSize(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.codeSize"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.getCodeSize(0)"
call "org.apache.commons.compress.compressors.lzw.LZWInputStream.resetCodeSize(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.setCodeSize(1)"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.resetCodeSize(0)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.setCodeSize(1)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.codeSize"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.setCodeSize(1)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.incrementCodeSize(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.codeSize"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.incrementCodeSize(0)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.resetPreviousCode(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCode"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.resetPreviousCode(0)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefix(1)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.prefixes"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefix(1)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.setPrefix(2)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.prefixes"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.setPrefix(2)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefixesLength(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.prefixes"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefixesLength(0)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.getClearCode(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.clearCode"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.getClearCode(0)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.getTableSize(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.tableSize"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.getTableSize(0)"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.setTableSize(1)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.tableSize"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.setTableSize(1)"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.DEFAULT_CODE_SIZE"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.UNUSED_PREFIX"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.oneByte" "byte[]"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.oneByte"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.in" "org.apache.commons.compress.utils.BitInputStream"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.in"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.clearCode"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.codeSize"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCodeFirstChar"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCode"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.tableSize"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.prefixes" "int[]"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.prefixes"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.characters" "byte[]"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.characters"
reference "org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStack" "byte[]"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStack"
contain "org.apache.commons.compress.compressors.lzw.LZWInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStackLocation"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream" "byte[]"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(2)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.this$0"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(2)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummyByte"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(2)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.remaining"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(2)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.loc"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(2)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.buffer"
contain "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(2)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.remaining"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummyByte"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.this$0"
call "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipFile.access$600(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.loc"
call "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.buffer"
contain "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.remaining"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummyByte"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.this$0"
call "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipFile.access$600(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.loc"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.buffer"
call "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(3)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(1)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.buffer"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(1)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.this$0"
call "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(1)" "org.apache.commons.compress.archivers.zip.ZipFile.access$600(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummy(0)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummyByte"
contain "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummy(0)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.MAX_BUF_LEN"
contain "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.buffer"
contain "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.remaining"
contain "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.loc"
contain "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummyByte"
reference "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.this$0" "org.apache.commons.compress.archivers.zip.ZipFile"
contain "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.this$0"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.UnicodeExtraFieldPolicy(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.name"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.UnicodeExtraFieldPolicy(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.toString(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.name"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.toString(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.UnicodeExtraFieldPolicy(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.static {...}"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.name"
reference "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.ZipExtraField"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.JarMarker(0)"
reference "org.apache.commons.compress.archivers.zip.JarMarker.getInstance(0)" "org.apache.commons.compress.archivers.zip.JarMarker.DEFAULT"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.getInstance(0)"
reference "org.apache.commons.compress.archivers.zip.JarMarker.getHeaderId(0)" "org.apache.commons.compress.archivers.zip.JarMarker.ID"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.getHeaderId(0)"
reference "org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.JarMarker.NULL"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataLength(0)"
reference "org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.JarMarker.NULL"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryLength(0)"
reference "org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.JarMarker.NO_BYTES"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataData(0)"
reference "org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.JarMarker.NO_BYTES"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryData(0)"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(3)"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(3)"
call "org.apache.commons.compress.archivers.zip.JarMarker.static {...}" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
reference "org.apache.commons.compress.archivers.zip.JarMarker.static {...}" "org.apache.commons.compress.archivers.zip.JarMarker.ID"
reference "org.apache.commons.compress.archivers.zip.JarMarker.static {...}" "org.apache.commons.compress.archivers.zip.JarMarker.NULL"
reference "org.apache.commons.compress.archivers.zip.JarMarker.static {...}" "org.apache.commons.compress.archivers.zip.JarMarker.NO_BYTES"
call "org.apache.commons.compress.archivers.zip.JarMarker.static {...}" "org.apache.commons.compress.archivers.zip.JarMarker.JarMarker(0)"
reference "org.apache.commons.compress.archivers.zip.JarMarker.static {...}" "org.apache.commons.compress.archivers.zip.JarMarker.DEFAULT"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.static {...}"
reference "org.apache.commons.compress.archivers.zip.JarMarker.ID" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.ID"
reference "org.apache.commons.compress.archivers.zip.JarMarker.NULL" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.NULL"
reference "org.apache.commons.compress.archivers.zip.JarMarker.NO_BYTES" "byte[]"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.NO_BYTES"
reference "org.apache.commons.compress.archivers.zip.JarMarker.DEFAULT" "org.apache.commons.compress.archivers.zip.JarMarker"
contain "org.apache.commons.compress.archivers.zip.JarMarker" "org.apache.commons.compress.archivers.zip.JarMarker.DEFAULT"
reference "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.tukaani.xz.LZMA2Options"
reference "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.tukaani.xz.LZMAInputStream"
reference "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.apache.commons.compress.utils.FlushShieldFilterOutputStream"
reference "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.tukaani.xz.LZMAOutputStream"
reference "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.apache.commons.compress.archivers.sevenz.CoderBase"
reference "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.apache.commons.compress.archivers.sevenz.Coder"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.LZMADecoder(0)" "org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(1)"
contain "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.LZMADecoder(0)"
reference "org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(5)" "org.apache.commons.compress.archivers.sevenz.Coder.properties"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(5)" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(5)" "org.tukaani.xz.LZMAInputStream.LZMAInputStream(4)"
contain "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(5)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(2)" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(2)" "org.tukaani.xz.LZMAOutputStream.LZMAOutputStream(3)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(2)" "org.apache.commons.compress.utils.FlushShieldFilterOutputStream.FlushShieldFilterOutputStream(1)"
contain "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(2)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(1)" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(1)" "org.tukaani.xz.LZMA2Options.getPb(0)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(1)" "org.tukaani.xz.LZMA2Options.getLp(0)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(1)" "org.tukaani.xz.LZMA2Options.getLc(0)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(1)" "org.tukaani.xz.LZMA2Options.getDictSize(0)"
contain "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(1)"
reference "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(2)" "org.apache.commons.compress.archivers.sevenz.Coder.properties"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(2)" "org.tukaani.xz.LZMA2Options.LZMA2Options(0)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(2)" "org.tukaani.xz.LZMA2Options.setPb(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(2)" "org.tukaani.xz.LZMA2Options.setLcLp(2)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(2)" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(2)" "org.tukaani.xz.LZMA2Options.setDictSize(1)"
contain "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(2)"
reference "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(1)" "org.apache.commons.compress.archivers.sevenz.Coder.properties"
contain "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(1)" "org.tukaani.xz.LZMA2Options.LZMA2Options(0)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(1)" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(1)" "org.tukaani.xz.LZMA2Options.setDictSize(1)"
contain "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(1)" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(2)"
contain "org.apache.commons.compress.archivers.sevenz.LZMADecoder" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(1)"
reference "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)" "org.apache.commons.compress.utils.BitInputStream.bitsCached"
reference "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)" "org.apache.commons.compress.utils.BitInputStream.bitsCachedSize"
reference "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)" "org.apache.commons.compress.utils.BitInputStream.in"
reference "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)" "org.apache.commons.compress.utils.BitInputStream.byteOrder"
contain "org.apache.commons.compress.utils.BitInputStream" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
reference "org.apache.commons.compress.utils.BitInputStream.close(0)" "org.apache.commons.compress.utils.BitInputStream.in"
contain "org.apache.commons.compress.utils.BitInputStream" "org.apache.commons.compress.utils.BitInputStream.close(0)"
reference "org.apache.commons.compress.utils.BitInputStream.clearBitCache(0)" "org.apache.commons.compress.utils.BitInputStream.bitsCached"
reference "org.apache.commons.compress.utils.BitInputStream.clearBitCache(0)" "org.apache.commons.compress.utils.BitInputStream.bitsCachedSize"
contain "org.apache.commons.compress.utils.BitInputStream" "org.apache.commons.compress.utils.BitInputStream.clearBitCache(0)"
reference "org.apache.commons.compress.utils.BitInputStream.readBits(1)" "org.apache.commons.compress.utils.BitInputStream.bitsCachedSize"
reference "org.apache.commons.compress.utils.BitInputStream.readBits(1)" "org.apache.commons.compress.utils.BitInputStream.in"
reference "org.apache.commons.compress.utils.BitInputStream.readBits(1)" "org.apache.commons.compress.utils.BitInputStream.byteOrder"
reference "org.apache.commons.compress.utils.BitInputStream.readBits(1)" "org.apache.commons.compress.utils.BitInputStream.bitsCached"
reference "org.apache.commons.compress.utils.BitInputStream.readBits(1)" "org.apache.commons.compress.utils.BitInputStream.MASKS"
contain "org.apache.commons.compress.utils.BitInputStream" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
reference "org.apache.commons.compress.utils.BitInputStream.static {...}" "org.apache.commons.compress.utils.BitInputStream.MASKS"
contain "org.apache.commons.compress.utils.BitInputStream" "org.apache.commons.compress.utils.BitInputStream.static {...}"
contain "org.apache.commons.compress.utils.BitInputStream" "org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE"
reference "org.apache.commons.compress.utils.BitInputStream.MASKS" "long[]"
contain "org.apache.commons.compress.utils.BitInputStream" "org.apache.commons.compress.utils.BitInputStream.MASKS"
contain "org.apache.commons.compress.utils.BitInputStream" "org.apache.commons.compress.utils.BitInputStream.in"
contain "org.apache.commons.compress.utils.BitInputStream" "org.apache.commons.compress.utils.BitInputStream.byteOrder"
contain "org.apache.commons.compress.utils.BitInputStream" "org.apache.commons.compress.utils.BitInputStream.bitsCached"
contain "org.apache.commons.compress.utils.BitInputStream" "org.apache.commons.compress.utils.BitInputStream.bitsCachedSize"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.LocalFileHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipUtil"
call "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.LocalFileHeader(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry(1)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.arjFlags"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.name"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getSize(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getSize(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSize"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isDirectory(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isDirectory(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileType"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isHostOsUnix(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeModified"
call "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(1)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMode(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMode(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileAccessMode"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMode(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getUnixMode(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isHostOsUnix(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getUnixMode(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMode(0)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getUnixMode(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getHostOs(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getHostOs(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.hostOS"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getHostOs(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isHostOsUnix(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getHostOs(0)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isHostOsUnix(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMethod(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMethod(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.method"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMethod(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader"
reference "org.apache.commons.compress.archivers.StreamingNotSupportedException" "org.apache.commons.compress.archivers.ArchiveException"
call "org.apache.commons.compress.archivers.StreamingNotSupportedException.StreamingNotSupportedException(1)" "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(1)"
reference "org.apache.commons.compress.archivers.StreamingNotSupportedException.StreamingNotSupportedException(1)" "org.apache.commons.compress.archivers.StreamingNotSupportedException.format"
contain "org.apache.commons.compress.archivers.StreamingNotSupportedException" "org.apache.commons.compress.archivers.StreamingNotSupportedException.StreamingNotSupportedException(1)"
reference "org.apache.commons.compress.archivers.StreamingNotSupportedException.getFormat(0)" "org.apache.commons.compress.archivers.StreamingNotSupportedException.format"
contain "org.apache.commons.compress.archivers.StreamingNotSupportedException" "org.apache.commons.compress.archivers.StreamingNotSupportedException.getFormat(0)"
contain "org.apache.commons.compress.archivers.StreamingNotSupportedException" "org.apache.commons.compress.archivers.StreamingNotSupportedException.serialVersionUID"
contain "org.apache.commons.compress.archivers.StreamingNotSupportedException" "org.apache.commons.compress.archivers.StreamingNotSupportedException.format"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.ZipExtraField"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "byte[]"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(4)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.nameCRC32"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(4)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(4)"
call "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(2)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(4)"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(2)"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData(0)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData(0)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData(0)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.nameCRC32"
call "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(1)"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData(0)"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getNameCRC32(0)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.nameCRC32"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getNameCRC32(0)"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setNameCRC32(1)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.nameCRC32"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setNameCRC32(1)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setNameCRC32(1)"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getUnicodeName(0)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getUnicodeName(0)"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setUnicodeName(1)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setUnicodeName(1)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setUnicodeName(1)"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data"
call "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData(0)"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryData(0)"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data"
call "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData(0)"
call "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryData(0)"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataData(0)"
call "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength(0)"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(2)"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.nameCRC32"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(3)"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(3)"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.nameCRC32"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName" "byte[]"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName"
reference "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data" "byte[]"
contain "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.NID(0)"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kEnd"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kHeader"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kArchiveProperties"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kAdditionalStreamsInfo"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kMainStreamsInfo"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kFilesInfo"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kPackInfo"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kUnpackInfo"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kSubStreamsInfo"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kSize"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kCRC"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kFolder"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kCodersUnpackSize"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kNumUnpackStream"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kEmptyStream"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kEmptyFile"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kAnti"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kName"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kCTime"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kATime"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kMTime"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kWinAttributes"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kComment"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kEncodedHeader"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kStartPos"
contain "org.apache.commons.compress.archivers.sevenz.NID" "org.apache.commons.compress.archivers.sevenz.NID.kDummy"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.CircularBuffer(1)" "org.apache.commons.compress.archivers.zip.CircularBuffer.size"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.CircularBuffer(1)" "org.apache.commons.compress.archivers.zip.CircularBuffer.buffer"
contain "org.apache.commons.compress.archivers.zip.CircularBuffer" "org.apache.commons.compress.archivers.zip.CircularBuffer.CircularBuffer(1)"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.available(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.readIndex"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.available(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.writeIndex"
contain "org.apache.commons.compress.archivers.zip.CircularBuffer" "org.apache.commons.compress.archivers.zip.CircularBuffer.available(0)"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.put(1)" "org.apache.commons.compress.archivers.zip.CircularBuffer.buffer"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.put(1)" "org.apache.commons.compress.archivers.zip.CircularBuffer.writeIndex"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.put(1)" "org.apache.commons.compress.archivers.zip.CircularBuffer.size"
contain "org.apache.commons.compress.archivers.zip.CircularBuffer" "org.apache.commons.compress.archivers.zip.CircularBuffer.put(1)"
call "org.apache.commons.compress.archivers.zip.CircularBuffer.get(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.available(0)"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.get(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.buffer"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.get(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.readIndex"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.get(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.size"
contain "org.apache.commons.compress.archivers.zip.CircularBuffer" "org.apache.commons.compress.archivers.zip.CircularBuffer.get(0)"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.copy(2)" "org.apache.commons.compress.archivers.zip.CircularBuffer.writeIndex"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.copy(2)" "org.apache.commons.compress.archivers.zip.CircularBuffer.buffer"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.copy(2)" "org.apache.commons.compress.archivers.zip.CircularBuffer.size"
contain "org.apache.commons.compress.archivers.zip.CircularBuffer" "org.apache.commons.compress.archivers.zip.CircularBuffer.copy(2)"
contain "org.apache.commons.compress.archivers.zip.CircularBuffer" "org.apache.commons.compress.archivers.zip.CircularBuffer.size"
reference "org.apache.commons.compress.archivers.zip.CircularBuffer.buffer" "byte[]"
contain "org.apache.commons.compress.archivers.zip.CircularBuffer" "org.apache.commons.compress.archivers.zip.CircularBuffer.buffer"
contain "org.apache.commons.compress.archivers.zip.CircularBuffer" "org.apache.commons.compress.archivers.zip.CircularBuffer.readIndex"
contain "org.apache.commons.compress.archivers.zip.CircularBuffer" "org.apache.commons.compress.archivers.zip.CircularBuffer.writeIndex"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipConstants"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry[]"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ExplodingInputStream"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "byte[]"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipUtil"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipMethod"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipLong"
reference "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipShort"
call "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(2)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(2)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(2)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(3)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(2)"
call "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(2)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(3)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(2)"
call "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(3)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(3)"
call "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(4)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(2)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(4)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(2)"
call "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(4)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(4)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.entries"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.nameMap"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.closed"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.shortBuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.dwordBbuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.cfhBbuf"
call "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.2.{...}"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.archiveName"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.encoding"
call "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.zipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.useUnicodeExtraFields"
reference "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.archive"
call "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)" "org.apache.commons.compress.utils.IOUtils.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.getEncoding(0)" "org.apache.commons.compress.archivers.zip.ZipFile.encoding"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.getEncoding(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.close(0)" "org.apache.commons.compress.archivers.zip.ZipFile.closed"
reference "org.apache.commons.compress.archivers.zip.ZipFile.close(0)" "org.apache.commons.compress.archivers.zip.ZipFile.archive"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)" "org.apache.commons.compress.utils.IOUtils.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)" "org.apache.commons.compress.archivers.zip.ZipFile.entries"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(0)" "org.apache.commons.compress.archivers.zip.ZipFile.entries"
reference "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(0)" "org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.nameMap"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(1)" "org.apache.commons.compress.archivers.zip.ZipFile.nameMap"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(1)" "org.apache.commons.compress.archivers.zip.ZipFile.nameMap"
reference "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(1)" "org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.getOffsetEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$000(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(2)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate.test(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(2)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.getOffsetEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$000(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(2)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipFile.3.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipMethod.ordinal(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getSlidingDictionarySize(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getNumberOfShannonFanoTrees(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(3)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummy(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipFile.1.{...}"
call "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isUnixSymlink(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(1)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(1)" "org.apache.commons.compress.archivers.zip.ZipFile.zipEncoding"
call "org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(1)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(1)" "org.apache.commons.compress.archivers.zip.ZipEncoding.decode(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.finalize(0)" "org.apache.commons.compress.archivers.zip.ZipFile.closed"
reference "org.apache.commons.compress.archivers.zip.ZipFile.finalize(0)" "org.apache.commons.compress.archivers.zip.ZipFile.archiveName"
call "org.apache.commons.compress.archivers.zip.ZipFile.finalize(0)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.finalize(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.archive"
call "org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(0)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBuf"
call "org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.CFH_SIG"
call "org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.cfhBbuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.archive"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.OffsetEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.Entry(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(2)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setVersionMadeBy(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setPlatform(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setVersionRequired(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING"
reference "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.zipEncoding"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setGeneralPurposeBit(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setRawFlag(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(2)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setTime(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setCrc(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setCompressedSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setInternalAttributes(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setExternalAttributes(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipEncoding.decode(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setName(2)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$202(2)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.entries"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setCentralDirectoryExtra(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setComment(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.useUnicodeExtraFields"
call "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.NameAndComment(3)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(4)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCompressedSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$202(2)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)"
call "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.archive"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf"
call "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(0)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBuf"
call "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(0)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(0)" "org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(0)" "org.apache.commons.compress.archivers.zip.ZipFile.dwordBbuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(0)" "org.apache.commons.compress.archivers.zip.ZipFile.archive"
call "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(0)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(0)" "org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf"
call "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(0)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(0)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_SIG"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32(0)" "org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32(0)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32(0)" "org.apache.commons.compress.archivers.zip.ZipFile.archive"
call "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32(0)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32(0)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBuf"
call "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG"
call "org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord(0)" "org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(3)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(3)" "org.apache.commons.compress.archivers.zip.ZipFile.archive"
reference "org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(3)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf"
call "org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(3)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(3)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(1)" "org.apache.commons.compress.archivers.zip.ZipFile.archive"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipFile.entries"
call "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.getOffsetEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$200(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipFile.archive"
reference "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf"
call "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipFile.shortBuf"
call "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setExtra(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$002(2)"
call "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.access$400(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.access$500(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(3)"
call "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.getName(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)" "org.apache.commons.compress.archivers.zip.ZipFile.nameMap"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader(0)" "org.apache.commons.compress.archivers.zip.ZipFile.archive"
reference "org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader(0)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf"
call "org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader(0)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader(0)" "org.apache.commons.compress.archivers.zip.ZipFile.wordBuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader(0)"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.access$600(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG"
call "org.apache.commons.compress.archivers.zip.ZipFile.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.static {...}" "org.apache.commons.compress.archivers.zip.ZipFile.CFH_SIG"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.static {...}"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.HASH_SIZE"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.NIBLET_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.BYTE_SHIFT"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.POS_0"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.POS_1"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.POS_2"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.POS_3"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.entries"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.nameMap"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.encoding"
reference "org.apache.commons.compress.archivers.zip.ZipFile.zipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.zipEncoding"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.archiveName"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.archive"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.useUnicodeExtraFields"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.closed"
reference "org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.wordBuf" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.wordBuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf"
reference "org.apache.commons.compress.archivers.zip.ZipFile.shortBuf" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.shortBuf"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.dwordBbuf"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.cfhBbuf"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.CFH_LEN"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.CFH_SIG"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.MIN_EOCD_SIZE"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.MAX_EOCD_SIZE"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.CFD_LOCATOR_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.ZIP64_EOCDL_LENGTH"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.ZIP64_EOCDL_LOCATOR_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.ZIP64_EOCD_CFD_LOCATOR_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.LFH_OFFSET_FOR_FILENAME_LENGTH"
contain "org.apache.commons.compress.archivers.zip.ZipFile" "org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.apache.commons.compress.archivers.sevenz.LZMADecoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.tukaani.xz.X86Options"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.tukaani.xz.PowerPCOptions"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.tukaani.xz.IA64Options"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.tukaani.xz.ARMOptions"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.tukaani.xz.ARMThumbOptions"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.tukaani.xz.SPARCOptions"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.apache.commons.compress.archivers.sevenz.DeltaDecoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.apache.commons.compress.archivers.sevenz.Coders"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.CopyDecoder(0)"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.Coders.1.put(2)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.LZMADecoder.LZMADecoder(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.LZMA2Decoder(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoder(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.BZIP2Decoder(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.AES256SHA256"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256Decoder(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_X86_FILTER"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.tukaani.xz.X86Options.X86Options(0)"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.BCJDecoder(1)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_PPC_FILTER"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.tukaani.xz.PowerPCOptions.PowerPCOptions(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_IA64_FILTER"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.tukaani.xz.IA64Options.IA64Options(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_FILTER"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.tukaani.xz.ARMOptions.ARMOptions(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_THUMB_FILTER"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.tukaani.xz.ARMThumbOptions.ARMThumbOptions(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_SPARC_FILTER"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.tukaani.xz.SPARCOptions.SPARCOptions(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DELTA_FILTER"
call "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}" "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.DeltaDecoder(0)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}"
contain "org.apache.commons.compress.archivers.sevenz.Coders.1" "org.apache.commons.compress.archivers.sevenz.Coders.1.serialVersionUID"
reference "org.apache.commons.compress.archivers.zip.Zip64Mode" "org.apache.commons.compress.archivers.zip.Zip64Mode[]"
reference "org.apache.commons.compress.archivers.zip.Zip64Mode.values(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.$VALUES"
call "org.apache.commons.compress.archivers.zip.Zip64Mode.values(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode[].clone(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64Mode" "org.apache.commons.compress.archivers.zip.Zip64Mode.values(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64Mode" "org.apache.commons.compress.archivers.zip.Zip64Mode.valueOf(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64Mode" "org.apache.commons.compress.archivers.zip.Zip64Mode.Zip64Mode(2)"
call "org.apache.commons.compress.archivers.zip.Zip64Mode.static {...}" "org.apache.commons.compress.archivers.zip.Zip64Mode.Zip64Mode(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64Mode.static {...}" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
reference "org.apache.commons.compress.archivers.zip.Zip64Mode.static {...}" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
reference "org.apache.commons.compress.archivers.zip.Zip64Mode.static {...}" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
reference "org.apache.commons.compress.archivers.zip.Zip64Mode.static {...}" "org.apache.commons.compress.archivers.zip.Zip64Mode.$VALUES"
contain "org.apache.commons.compress.archivers.zip.Zip64Mode" "org.apache.commons.compress.archivers.zip.Zip64Mode.static {...}"
reference "org.apache.commons.compress.archivers.zip.Zip64Mode.Always" "org.apache.commons.compress.archivers.zip.Zip64Mode"
contain "org.apache.commons.compress.archivers.zip.Zip64Mode" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
reference "org.apache.commons.compress.archivers.zip.Zip64Mode.Never" "org.apache.commons.compress.archivers.zip.Zip64Mode"
contain "org.apache.commons.compress.archivers.zip.Zip64Mode" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
reference "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded" "org.apache.commons.compress.archivers.zip.Zip64Mode"
contain "org.apache.commons.compress.archivers.zip.Zip64Mode" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
reference "org.apache.commons.compress.archivers.zip.Zip64Mode.$VALUES" "org.apache.commons.compress.archivers.zip.Zip64Mode[]"
contain "org.apache.commons.compress.archivers.zip.Zip64Mode" "org.apache.commons.compress.archivers.zip.Zip64Mode.$VALUES"
contain "org.apache.commons.compress.archivers.zip.ZipExtraField" "org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId(0)"
contain "org.apache.commons.compress.archivers.zip.ZipExtraField" "org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength(0)"
contain "org.apache.commons.compress.archivers.zip.ZipExtraField" "org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryLength(0)"
contain "org.apache.commons.compress.archivers.zip.ZipExtraField" "org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataData(0)"
contain "org.apache.commons.compress.archivers.zip.ZipExtraField" "org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryData(0)"
contain "org.apache.commons.compress.archivers.zip.ZipExtraField" "org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(3)"
contain "org.apache.commons.compress.archivers.zip.ZipExtraField" "org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(3)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.ZipExtraField"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "byte[]"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.ZipUtil"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.X7875_NewUnix(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.version"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.X7875_NewUnix(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.reset(0)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.X7875_NewUnix(0)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getHeaderId(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.HEADER_ID"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getHeaderId(0)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getUID(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getUID(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.bigToLong(1)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getUID(0)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getGID(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getGID(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.bigToLong(1)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getGID(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(1)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(1)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(1)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(1)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(1)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(1)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(1)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataLength(0)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.ZERO"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryLength(0)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(1)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.reverse(1)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.version"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(1)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData(0)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryData(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.reset(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(1)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.version"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.ZipUtil.reverse(1)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(3)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(3)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.reset(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.ONE_THOUSAND"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.reset(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.reset(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.reset(0)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.toString(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.toString(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.toString(0)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.clone(0)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(1)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.version"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(1)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(1)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(1)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.hashCode(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.version"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.hashCode(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.hashCode(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.hashCode(0)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(1)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnix.static {...}" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.static {...}" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.HEADER_ID"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.static {...}" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.ZERO"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.static {...}" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.ONE_THOUSAND"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.static {...}"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.HEADER_ID" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.HEADER_ID"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnix.ZERO" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.ZERO"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.ONE_THOUSAND"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.serialVersionUID"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.version"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnix" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil"
call "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(2)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.dumpDate"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.previousDumpDate"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.volume"
call "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(4)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.label"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.level"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.filesys"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.devname"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hostname"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.flags"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.firstrec"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.ntrec"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getDumpDate(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.dumpDate"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getDumpDate(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDumpDate(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.dumpDate"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDumpDate(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getPreviousDumpDate(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.previousDumpDate"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getPreviousDumpDate(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setPreviousDumpDate(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.previousDumpDate"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setPreviousDumpDate(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getVolume(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.volume"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getVolume(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setVolume(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.volume"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setVolume(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getLevel(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.level"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getLevel(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLevel(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.level"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLevel(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getLabel(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.label"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getLabel(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLabel(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.label"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLabel(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFilesystem(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.filesys"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFilesystem(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFilesystem(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.filesys"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFilesystem(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getDevname(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.devname"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getDevname(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDevname(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.devname"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDevname(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getHostname(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hostname"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getHostname(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setHostname(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hostname"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setHostname(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFlags(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.flags"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFlags(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFlags(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.flags"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFlags(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFirstRecord(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.firstrec"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFirstRecord(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFirstRecord(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.firstrec"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFirstRecord(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getNTRec(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.ntrec"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getNTRec(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setNTRec(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.ntrec"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setNTRec(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isNewHeader(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.flags"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isNewHeader(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isNewInode(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.flags"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isNewInode(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isCompressed(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.flags"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isCompressed(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isMetaDataOnly(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.flags"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isMetaDataOnly(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isExtendedAttributes(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.flags"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isExtendedAttributes(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hashCode(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.label"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hashCode(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.dumpDate"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hashCode(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hostname"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hashCode(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.devname"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hashCode(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.equals(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.dumpDate"
call "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.equals(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getHostname(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.equals(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getDevname(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.equals(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.dumpDate"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.previousDumpDate"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.volume"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.label"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.level"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.filesys"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.devname"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hostname"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.flags"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.firstrec"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveSummary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.ntrec"
reference "org.apache.commons.compress.archivers.zip.ZipFile.Entry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipFile.Entry" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry"
reference "org.apache.commons.compress.archivers.zip.ZipFile.Entry" "org.apache.commons.compress.archivers.zip.ZipFile"
call "org.apache.commons.compress.archivers.zip.ZipFile.Entry.Entry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.Entry.Entry(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.offsetEntry"
contain "org.apache.commons.compress.archivers.zip.ZipFile.Entry" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.Entry(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.Entry.getOffsetEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.offsetEntry"
contain "org.apache.commons.compress.archivers.zip.ZipFile.Entry" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.getOffsetEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.Entry.hashCode(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.hashCode(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.Entry.hashCode(0)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.offsetEntry"
call "org.apache.commons.compress.archivers.zip.ZipFile.Entry.hashCode(0)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$200(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.Entry" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.hashCode(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.Entry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.Entry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.offsetEntry"
call "org.apache.commons.compress.archivers.zip.ZipFile.Entry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipFile.Entry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$000(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.Entry" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.equals(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.Entry.offsetEntry" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry"
contain "org.apache.commons.compress.archivers.zip.ZipFile.Entry" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.offsetEntry"
reference "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException" "org.apache.commons.compress.archivers.dump.DumpArchiveException"
call "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.UnrecognizedFormatException(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(1)"
contain "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException" "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.UnrecognizedFormatException(0)"
contain "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException" "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.serialVersionUID"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioConstants"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioUtil"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.chksum"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.filesize"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.gid"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.inode"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.maj"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.min"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mtime"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.nlink"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmaj"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmin"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.uid"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.headerSize"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.alignmentBoundary"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.fileFormat"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.name"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(3)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(3)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.fileFormat"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkOldFormat(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.fileFormat"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkOldFormat(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getChksum(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getChksum(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.chksum"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getChksum(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDevice(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkOldFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDevice(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.min"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDevice(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMaj(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMaj(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.maj"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMaj(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMin(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMin(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.min"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMin(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.filesize"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.fileFormat"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getGID(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.gid"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getGID(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderSize(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.headerSize"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderSize(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getAlignmentBoundary(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.alignmentBoundary"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getAlignmentBoundary(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.alignmentBoundary"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.headerSize"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.name"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDataPadCount(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.alignmentBoundary"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDataPadCount(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.filesize"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDataPadCount(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getInode(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.inode"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getInode(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getMode(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getMode(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.name"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getMode(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.name"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getNumberOfLinks(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.nlink"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getNumberOfLinks(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory(0)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getNumberOfLinks(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDevice(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkOldFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDevice(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmin"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDevice(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMaj(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMaj(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmaj"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMaj(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMin(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMin(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmin"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMin(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mtime"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getLastModifiedDate(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime(0)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getLastModifiedDate(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getUID(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.uid"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getUID(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isBlockDevice(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isBlockDevice(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isBlockDevice(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isCharacterDevice(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isCharacterDevice(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isCharacterDevice(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isNetwork(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isNetwork(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isNetwork(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isPipe(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isPipe(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isPipe(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isRegularFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isRegularFile(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isRegularFile(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isSocket(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isSocket(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isSocket(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isSymbolicLink(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isSymbolicLink(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isSymbolicLink(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.chksum"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkOldFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.min"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.maj"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.min"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.filesize"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.gid"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.inode"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.name"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.nlink"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkOldFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmin"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmaj"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmin"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mtime"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.uid"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.hashCode(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.name"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.hashCode(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.name"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.equals(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.fileFormat"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.headerSize"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.alignmentBoundary"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.chksum"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.filesize"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.gid"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.inode"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.maj"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.min"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mtime"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.name"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.nlink"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmaj"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmin"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.uid"
reference "org.apache.commons.compress.archivers.Lister" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.archivers.Lister" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.Lister" "org.apache.commons.compress.archivers.ArchiveException"
reference "org.apache.commons.compress.archivers.Lister" "org.apache.commons.compress.archivers.ArchiveEntry"
contain "org.apache.commons.compress.archivers.Lister" "org.apache.commons.compress.archivers.Lister.Lister(0)"
call "org.apache.commons.compress.archivers.Lister.main(1)" "org.apache.commons.compress.archivers.Lister.usage(0)"
call "org.apache.commons.compress.archivers.Lister.main(1)" "org.apache.commons.compress.archivers.Lister.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.Lister.main(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.Lister.main(1)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.Lister.main(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.Lister" "org.apache.commons.compress.archivers.Lister.main(1)"
reference "org.apache.commons.compress.archivers.Lister.createArchiveInputStream(2)" "org.apache.commons.compress.archivers.Lister.factory"
call "org.apache.commons.compress.archivers.Lister.createArchiveInputStream(2)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.Lister.createArchiveInputStream(2)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
contain "org.apache.commons.compress.archivers.Lister" "org.apache.commons.compress.archivers.Lister.createArchiveInputStream(2)"
contain "org.apache.commons.compress.archivers.Lister" "org.apache.commons.compress.archivers.Lister.usage(0)"
call "org.apache.commons.compress.archivers.Lister.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
reference "org.apache.commons.compress.archivers.Lister.static {...}" "org.apache.commons.compress.archivers.Lister.factory"
contain "org.apache.commons.compress.archivers.Lister" "org.apache.commons.compress.archivers.Lister.static {...}"
reference "org.apache.commons.compress.archivers.Lister.factory" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
contain "org.apache.commons.compress.archivers.Lister" "org.apache.commons.compress.archivers.Lister.factory"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.OutputStreamWrapper(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.this$0"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.OutputStreamWrapper(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.buffer"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.OutputStreamWrapper(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.buffer"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.this$0"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$200(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$300(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$408(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(3)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.this$0"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(3)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$200(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(3)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.buffer"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(3)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$300(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(3)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$400(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(3)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$402(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.flush(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.OutputStreamWrapper(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.BUF_SIZE"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.buffer"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.this$0" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.this$0"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "byte[]"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames(0)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(1)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor(0)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(1)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption(0)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(1)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption(0)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(1)"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(1)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getSlidingDictionarySize(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.slidingDictionarySize"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getSlidingDictionarySize(0)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getNumberOfShannonFanoTrees(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.numberOfShannonFanoTrees"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getNumberOfShannonFanoTrees(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(2)"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(0)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(2)" "org.apache.commons.compress.archivers.zip.ZipShort.putShort(3)"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(2)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(2)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(1)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(1)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(1)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(1)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.slidingDictionarySize"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.numberOfShannonFanoTrees"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.hashCode(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.hashCode(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.hashCode(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.hashCode(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.hashCode(0)"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(1)"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.clone(0)"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.ENCRYPTION_FLAG"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.SLIDING_DICTIONARY_SIZE_FLAG"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.NUMBER_OF_SHANNON_FANO_TREES_FLAG"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.DATA_DESCRIPTOR_FLAG"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.STRONG_ENCRYPTION_FLAG"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.UFT8_NAMES_FLAG"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.slidingDictionarySize"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBit" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.numberOfShannonFanoTrees"
reference "org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(2)" "org.apache.commons.compress.compressors.FileNameUtil.compressSuffix"
reference "org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(2)" "org.apache.commons.compress.compressors.FileNameUtil.uncompressSuffix"
reference "org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(2)" "org.apache.commons.compress.compressors.FileNameUtil.longestCompressedSuffix"
reference "org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(2)" "org.apache.commons.compress.compressors.FileNameUtil.longestUncompressedSuffix"
reference "org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(2)" "org.apache.commons.compress.compressors.FileNameUtil.shortestCompressedSuffix"
reference "org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(2)" "org.apache.commons.compress.compressors.FileNameUtil.shortestUncompressedSuffix"
reference "org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(2)" "org.apache.commons.compress.compressors.FileNameUtil.defaultExtension"
contain "org.apache.commons.compress.compressors.FileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(2)"
reference "org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.shortestCompressedSuffix"
reference "org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.longestCompressedSuffix"
reference "org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.uncompressSuffix"
contain "org.apache.commons.compress.compressors.FileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(1)"
reference "org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.shortestCompressedSuffix"
reference "org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.longestCompressedSuffix"
reference "org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.uncompressSuffix"
contain "org.apache.commons.compress.compressors.FileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(1)"
reference "org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.shortestUncompressedSuffix"
reference "org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.longestUncompressedSuffix"
reference "org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.compressSuffix"
reference "org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.defaultExtension"
contain "org.apache.commons.compress.compressors.FileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.FileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil.compressSuffix"
contain "org.apache.commons.compress.compressors.FileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil.uncompressSuffix"
contain "org.apache.commons.compress.compressors.FileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil.longestCompressedSuffix"
contain "org.apache.commons.compress.compressors.FileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil.shortestCompressedSuffix"
contain "org.apache.commons.compress.compressors.FileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil.longestUncompressedSuffix"
contain "org.apache.commons.compress.compressors.FileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil.shortestUncompressedSuffix"
contain "org.apache.commons.compress.compressors.FileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil.defaultExtension"
reference "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException" "org.apache.commons.compress.archivers.dump.DumpArchiveException"
call "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.UnsupportedCompressionAlgorithmException(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(1)"
contain "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException" "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.UnsupportedCompressionAlgorithmException(0)"
call "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.UnsupportedCompressionAlgorithmException(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(1)"
contain "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException" "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.UnsupportedCompressionAlgorithmException(1)"
contain "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException" "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.serialVersionUID"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream" "org.tukaani.xz.LZMAOutputStream"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream" "org.tukaani.xz.LZMA2Options"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream" "org.apache.commons.compress.compressors.CompressorOutputStream"
call "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.LZMACompressorOutputStream(1)" "org.apache.commons.compress.compressors.CompressorOutputStream.CompressorOutputStream(0)"
call "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.LZMACompressorOutputStream(1)" "org.tukaani.xz.LZMA2Options.LZMA2Options(0)"
call "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.LZMACompressorOutputStream(1)" "org.tukaani.xz.LZMAOutputStream.LZMAOutputStream(3)"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.LZMACompressorOutputStream(1)" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.LZMACompressorOutputStream(1)"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(1)" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.out"
call "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(1)" "org.tukaani.xz.LZMAOutputStream.write(1)"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(1)"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(3)" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.out"
call "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(3)" "org.tukaani.xz.LZMAOutputStream.write(3)"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(3)"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.flush(0)" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.out"
call "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.flush(0)" "org.tukaani.xz.LZMAOutputStream.flush(0)"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.flush(0)"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.out"
call "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.finish(0)" "org.tukaani.xz.LZMAOutputStream.finish(0)"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.finish(0)"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.out"
call "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.close(0)" "org.tukaani.xz.LZMAOutputStream.close(0)"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.close(0)"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.out" "org.tukaani.xz.LZMAOutputStream"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.out"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.FileNameUtil"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.LZMAUtils(0)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(2)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.HEADER_MAGIC"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(2)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.cachedLZMAAvailability"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.DONT_CACHE"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_AVAILABLE"
call "org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable(0)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable(0)"
call "org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable(0)" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(2)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable(0)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(1)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.fileNameUtil"
call "org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(1)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(1)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.fileNameUtil"
call "org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(1)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(1)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(1)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.fileNameUtil"
call "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(1)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(1)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.DONT_CACHE"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(1)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.cachedLZMAAvailability"
call "org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(1)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable(0)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(1)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_AVAILABLE"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(1)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(1)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCachedLZMAAvailability(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.cachedLZMAAvailability"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCachedLZMAAvailability(0)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.static {...}" "org.apache.commons.compress.compressors.lzma.LZMAUtils.HEADER_MAGIC"
call "org.apache.commons.compress.compressors.lzma.LZMAUtils.static {...}" "org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(2)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.static {...}" "org.apache.commons.compress.compressors.lzma.LZMAUtils.fileNameUtil"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.static {...}" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.DONT_CACHE"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.static {...}" "org.apache.commons.compress.compressors.lzma.LZMAUtils.cachedLZMAAvailability"
call "org.apache.commons.compress.compressors.lzma.LZMAUtils.static {...}" "org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(1)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.static {...}"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.fileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.fileNameUtil"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.HEADER_MAGIC" "byte[]"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.HEADER_MAGIC"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.cachedLZMAAvailability" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils" "org.apache.commons.compress.compressors.lzma.LZMAUtils.cachedLZMAAvailability"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect[]"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.values(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.$VALUES"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.values(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect[].clone(0)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.values(0)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.valueOf(1)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.FramedSnappyDialect(4)" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.streamIdentifier"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.FramedSnappyDialect(4)" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.checksumWithCompressedChunks"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.FramedSnappyDialect(4)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.hasStreamIdentifier(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.streamIdentifier"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.hasStreamIdentifier(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.usesChecksumWithCompressedChunks(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.checksumWithCompressedChunks"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.usesChecksumWithCompressedChunks(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.static {...}" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.FramedSnappyDialect(4)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.static {...}" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.STANDARD"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.static {...}" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.static {...}" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.$VALUES"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.static {...}"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.STANDARD" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.STANDARD"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.streamIdentifier"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.checksumWithCompressedChunks"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.$VALUES" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect[]"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.$VALUES"
reference "org.apache.commons.compress.archivers.zip.UnicodePathExtraField" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.UnicodePathExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField"
call "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(0)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(0)"
contain "org.apache.commons.compress.archivers.zip.UnicodePathExtraField" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(0)"
call "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(4)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(4)"
contain "org.apache.commons.compress.archivers.zip.UnicodePathExtraField" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(4)"
call "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(2)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(2)"
contain "org.apache.commons.compress.archivers.zip.UnicodePathExtraField" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(2)"
reference "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.getHeaderId(0)" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UPATH_ID"
contain "org.apache.commons.compress.archivers.zip.UnicodePathExtraField" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.static {...}" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
reference "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.static {...}" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UPATH_ID"
contain "org.apache.commons.compress.archivers.zip.UnicodePathExtraField" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.static {...}"
reference "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UPATH_ID" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.UnicodePathExtraField" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UPATH_ID"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE[]"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.values(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.$VALUES"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.values(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE[].clone(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.values(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.valueOf(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.TYPE(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.code"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.TYPE(3)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.values(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.code"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.TYPE(3)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.WHITEOUT"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.SOCKET"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.LINK"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FILE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.BLKDEV"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.DIRECTORY"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.CHRDEV"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FIFO"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.$VALUES"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.static {...}"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.WHITEOUT" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.WHITEOUT"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.SOCKET" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.SOCKET"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.LINK" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.LINK"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FILE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FILE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.BLKDEV" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.BLKDEV"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.DIRECTORY" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.DIRECTORY"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.CHRDEV" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.CHRDEV"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FIFO" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FIFO"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.code"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.$VALUES" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE[]"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.$VALUES"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.UnixStat"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.ZipExtraField"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField" "byte[]"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.ZipLong"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.mode"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.uid"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.gid"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.link"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.dirFlag"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.crc"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.getHeaderId(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.HEADER_ID"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength(0)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(1)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(1)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getUserId(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getGroupId(0)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.crc"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryData(0)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(1)" "org.apache.commons.compress.archivers.zip.AsiExtraField.uid"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(1)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.getUserId(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.uid"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.getUserId(0)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(1)" "org.apache.commons.compress.archivers.zip.AsiExtraField.gid"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(1)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.getGroupId(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.gid"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.getGroupId(0)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(1)" "org.apache.commons.compress.archivers.zip.AsiExtraField.link"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(1)" "org.apache.commons.compress.archivers.zip.AsiExtraField.mode"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(1)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(1)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(1)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.link"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.isLink(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile(0)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.isLink(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(1)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(1)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(1)" "org.apache.commons.compress.archivers.zip.AsiExtraField.mode"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(1)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.mode"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(0)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(1)" "org.apache.commons.compress.archivers.zip.AsiExtraField.dirFlag"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(1)" "org.apache.commons.compress.archivers.zip.AsiExtraField.mode"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(1)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(1)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(1)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.isDirectory(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.dirFlag"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.isDirectory(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.isLink(0)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.isDirectory(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(2)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.AsiExtraField.crc"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(2)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.AsiExtraField.uid"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.AsiExtraField.gid"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.AsiExtraField.link"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(1)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(1)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(3)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(3)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(1)" "org.apache.commons.compress.archivers.zip.AsiExtraField.isLink(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(1)" "org.apache.commons.compress.archivers.zip.AsiExtraField.isDirectory(0)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(1)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.clone(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.crc"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.clone(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraField.static {...}" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.static {...}" "org.apache.commons.compress.archivers.zip.AsiExtraField.HEADER_ID"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.static {...}"
reference "org.apache.commons.compress.archivers.zip.AsiExtraField.HEADER_ID" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.HEADER_ID"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.WORD"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.mode"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.uid"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.gid"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.link"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.dirFlag"
contain "org.apache.commons.compress.archivers.zip.AsiExtraField" "org.apache.commons.compress.archivers.zip.AsiExtraField.crc"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.DEFAULT_RCDSIZE"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.DEFAULT_BLKSIZE"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.FORMAT_OLDGNU"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.FORMAT_POSIX"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.FORMAT_XSTAR"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.NAMELEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.MODELEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.UIDLEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.GIDLEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.MAXID"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.CHKSUMLEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.CHKSUM_OFFSET"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.SIZELEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.MAXSIZE"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_OFFSET"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.MAGICLEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.VERSION_OFFSET"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.VERSIONLEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.MODTIMELEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.UNAMELEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.GNAMELEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.DEVLEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.PREFIXLEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.ATIMELEN_GNU"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.CTIMELEN_GNU"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.OFFSETLEN_GNU"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LONGNAMESLEN_GNU"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.PAD2LEN_GNU"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.SPARSELEN_GNU"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.ISEXTENDEDLEN_GNU"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.REALSIZELEN_GNU"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.SPARSELEN_GNU_SPARSE"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.ISEXTENDEDLEN_GNU_SPARSE"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_OLDNORM"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_NORMAL"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_LINK"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_SYMLINK"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_CHR"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_BLK"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_DIR"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_FIFO"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_CONTIG"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_GNUTYPE_LONGLINK"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_GNUTYPE_LONGNAME"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_GNUTYPE_SPARSE"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_PAX_EXTENDED_HEADER_LC"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_PAX_EXTENDED_HEADER_UC"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.LF_PAX_GLOBAL_EXTENDED_HEADER"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_POSIX"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.VERSION_POSIX"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_GNU"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.VERSION_GNU_SPACE"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.VERSION_GNU_ZERO"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_ANT"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.VERSION_ANT"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.GNU_LONGLINK"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_XSTAR"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.XSTAR_MAGIC_OFFSET"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.XSTAR_MAGIC_LEN"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.PREFIXLEN_XSTAR"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.ATIMELEN_XSTAR"
contain "org.apache.commons.compress.archivers.tar.TarConstants" "org.apache.commons.compress.archivers.tar.TarConstants.CTIMELEN_XSTAR"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioConstants"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.utils.ArchiveUtils"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioUtil"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipEncoding"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)" "org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closed"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.crc"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.nextArtificalDeviceAndInode"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.out"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entryFormat"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.blockSize"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.encoding"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.zipEncoding"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(2)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(2)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.ensureOpen(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closed"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.ensureOpen(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finished"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.ensureOpen(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entryFormat"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.written"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.out"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(1)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.count(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getInode(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMin(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.nextArtificalDeviceAndInode"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getMode(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getUID(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getGID(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getNumberOfLinks(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMaj(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMaj(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMin(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getChksum(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getInode(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDevice(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.nextArtificalDeviceAndInode"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getMode(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getUID(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getGID(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getNumberOfLinks(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDevice(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getInode(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDevice(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.nextArtificalDeviceAndInode"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getMode(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getUID(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getGID(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getNumberOfLinks(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDevice(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finished"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.ensureOpen(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.written"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDataPadCount(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.crc"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getChksum(0)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.ensureOpen(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entry"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.written"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.out"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.crc"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.count(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.ensureOpen(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entry"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entryFormat"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.getBytesWritten(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.blockSize"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finished"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closed"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.out"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.out"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.count(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(3)" "org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(3)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.out"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.count(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(3)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.out"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.count(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(3)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.zipEncoding"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(1)" "org.apache.commons.compress.archivers.zip.ZipEncoding.encode(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.out"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.count(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finished"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(2)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entry"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closed"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finished"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entryFormat"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.crc"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.written"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.out"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.blockSize"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.nextArtificalDeviceAndInode"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.zipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.zipEncoding"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.encoding"
reference "org.apache.commons.compress.archivers.dump.InvalidFormatException" "org.apache.commons.compress.archivers.dump.DumpArchiveException"
call "org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(1)"
contain "org.apache.commons.compress.archivers.dump.InvalidFormatException" "org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException(0)"
call "org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(1)"
reference "org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException(1)" "org.apache.commons.compress.archivers.dump.InvalidFormatException.offset"
contain "org.apache.commons.compress.archivers.dump.InvalidFormatException" "org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException(1)"
reference "org.apache.commons.compress.archivers.dump.InvalidFormatException.getOffset(0)" "org.apache.commons.compress.archivers.dump.InvalidFormatException.offset"
contain "org.apache.commons.compress.archivers.dump.InvalidFormatException" "org.apache.commons.compress.archivers.dump.InvalidFormatException.getOffset(0)"
contain "org.apache.commons.compress.archivers.dump.InvalidFormatException" "org.apache.commons.compress.archivers.dump.InvalidFormatException.serialVersionUID"
contain "org.apache.commons.compress.archivers.dump.InvalidFormatException" "org.apache.commons.compress.archivers.dump.InvalidFormatException.offset"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarConstants"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry[]"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "byte[]"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarUtils"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.utils.ArchiveUtils"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.name"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.size"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkName"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.magic"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.version"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupName"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMajor"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMinor"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userName"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.file"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.preserveLeadingSlashes"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(2)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.name"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.mode"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.modTime"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userName"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(3)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.magic"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.version"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.name"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.size"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkName"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.magic"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.version"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupName"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMajor"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMinor"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(2)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.file"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.mode"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.modTime"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userName"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(2)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.hashCode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.hashCode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDescendent(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDescendent(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.name"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.preserveLeadingSlashes"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(2)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.name"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.mode"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkName"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkName"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getUserId(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getUserId(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongUserId(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongUserId(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getGroupId(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getGroupId(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongGroupId(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongGroupId(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getUserName(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userName"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getUserName(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userName"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getGroupName(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupName"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getGroupName(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupName"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setIds(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setIds(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setIds(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setNames(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setNames(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setNames(2)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.modTime"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.modTime"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getModTime(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.modTime"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getModTime(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getModTime(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCheckSumOK(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.checkSumOK"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCheckSumOK(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.file"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getFile(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.mode"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getMode(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.size"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.size"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMajor(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMajor"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMajor(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMajor(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMajor"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMajor(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMinor(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMinor"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMinor(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMinor(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMinor"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMinor(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getRealSize(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.realSize"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getRealSize(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNUSparse(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isOldGNUSparse(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNUSparse(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNUSparse(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNUSparse(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isOldGNUSparse(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isOldGNUSparse(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNUSparse(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.paxGNUSparse"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNUSparse(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isStarSparse(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.starSparse"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isStarSparse(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongLinkEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongLinkEntry(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongNameEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongNameEntry(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxHeader(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGlobalPaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGlobalPaxHeader(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.file"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxHeader(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGlobalPaxHeader(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.file"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isFile(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isLink(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isLink(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCharacterDevice(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCharacterDevice(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isBlockDevice(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isBlockDevice(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isFIFO(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isFIFO(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSparse(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNUSparse(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSparse(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isStarSparse(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSparse(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDirectoryEntries(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.file"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDirectoryEntries(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRIES"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDirectoryEntries(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDirectoryEntries(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(1)" "org.apache.commons.compress.archivers.tar.TarUtils.DEFAULT_ENCODING"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(1)" "org.apache.commons.compress.archivers.tar.TarUtils.FALLBACK_ENCODING"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.name"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(5)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.mode"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(5)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.size"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.modTime"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkName"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.magic"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(4)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.version"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userName"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupName"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMajor"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMinor"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)" "org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(4)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(5)" "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(4)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(5)" "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(4)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(5)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(1)" "org.apache.commons.compress.archivers.tar.TarUtils.DEFAULT_ENCODING"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarUtils.parseName(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarUtils.parseName(4)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.name"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(3)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.mode"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.size"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.modTime"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.checkSumOK"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkName"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.magic"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.version"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userName"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupName"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMajor"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMinor"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(2)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(3)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.realSize"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(1)" "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(4)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.paxGNUSparse"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.realSize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.name"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.paxGNUSparse"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.realSize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.name"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillStarSparseData(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.starSparse"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillStarSparseData(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.realSize"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillStarSparseData(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.static {...}" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRIES"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.static {...}"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRIES" "org.apache.commons.compress.archivers.tar.TarArchiveEntry[]"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRIES"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.name"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.preserveLeadingSlashes"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.mode"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.size"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.modTime"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.checkSumOK"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkName"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.magic"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.version"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userName"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupName"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMajor"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMinor"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.realSize"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.paxGNUSparse"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.starSparse"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.file"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.MAX_NAMELEN"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.DEFAULT_DIR_MODE"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.DEFAULT_FILE_MODE"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.MILLIS_PER_SECOND"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.PasswordRequiredException"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "byte[]"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.Coder"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.{...}" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.this$0"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.{...}" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$coder"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.{...}" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$archiveName"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.{...}" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$passwordBytes"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.{...}" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$in"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.{...}" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.isInitialized"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.{...}" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.cipherInputStream"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.{...}"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.init(0)" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.isInitialized"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.init(0)" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.cipherInputStream"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.init(0)" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$coder"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.init(0)" "org.apache.commons.compress.archivers.sevenz.Coder.properties"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.init(0)" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$archiveName"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.init(0)" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$passwordBytes"
call "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.init(0)" "org.apache.commons.compress.PasswordRequiredException.PasswordRequiredException(1)"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.init(0)" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$in"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.init(0)"
call "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.read(0)" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.init(0)"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.read(0)"
call "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.read(3)" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.init(0)"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.read(3)"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.isInitialized"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.cipherInputStream"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$coder" "org.apache.commons.compress.archivers.sevenz.Coder"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$coder"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$archiveName"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$passwordBytes" "byte[]"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$passwordBytes"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$in"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.this$0" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.this$0"
reference "org.apache.commons.compress.archivers.zip.NioZipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.zip.NioZipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
reference "org.apache.commons.compress.archivers.zip.NioZipEncoding.NioZipEncoding(1)" "org.apache.commons.compress.archivers.zip.NioZipEncoding.charset"
contain "org.apache.commons.compress.archivers.zip.NioZipEncoding" "org.apache.commons.compress.archivers.zip.NioZipEncoding.NioZipEncoding(1)"
reference "org.apache.commons.compress.archivers.zip.NioZipEncoding.canEncode(1)" "org.apache.commons.compress.archivers.zip.NioZipEncoding.charset"
contain "org.apache.commons.compress.archivers.zip.NioZipEncoding" "org.apache.commons.compress.archivers.zip.NioZipEncoding.canEncode(1)"
reference "org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(1)" "org.apache.commons.compress.archivers.zip.NioZipEncoding.charset"
call "org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBuffer(2)"
call "org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.appendSurrogate(2)"
contain "org.apache.commons.compress.archivers.zip.NioZipEncoding" "org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(1)"
reference "org.apache.commons.compress.archivers.zip.NioZipEncoding.decode(1)" "org.apache.commons.compress.archivers.zip.NioZipEncoding.charset"
contain "org.apache.commons.compress.archivers.zip.NioZipEncoding" "org.apache.commons.compress.archivers.zip.NioZipEncoding.decode(1)"
contain "org.apache.commons.compress.archivers.zip.NioZipEncoding" "org.apache.commons.compress.archivers.zip.NioZipEncoding.charset"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipParameters"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "byte[]"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)" "org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.buf"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.bufUsed"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.inf"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.crc"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.endReached"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.oneByte"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.parameters"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.in"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.decompressConcatenated"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.getMetaData(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.parameters"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.getMetaData(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.$assertionsDisabled"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.decompressConcatenated"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.in"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.parameters"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readLittleEndianInt(1)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(1)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(1)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(1)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readToNull(1)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(1)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(1)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.inf"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.crc"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readToNull(1)"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readLittleEndianInt(1)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.oneByte"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(3)"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.endReached"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.inf"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.in"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.buf"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.bufUsed"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.crc"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.count(1)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readLittleEndianInt(1)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.decompressConcatenated"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(3)"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(2)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.close(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.inf"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.close(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.in"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.close(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.static {...}" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.$assertionsDisabled"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.static {...}"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.FHCRC"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.FEXTRA"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.FNAME"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.FCOMMENT"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.FRESERVED"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.in"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.decompressConcatenated"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.buf" "byte[]"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.buf"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.bufUsed"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.inf"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.crc"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.endReached"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.oneByte" "byte[]"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.oneByte"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.parameters" "org.apache.commons.compress.compressors.gzip.GzipParameters"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.parameters"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.$assertionsDisabled"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.ZipExtraField"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "byte[]"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.ZipUtil"
contain "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.UnparseableExtraFieldData(0)"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getHeaderId(0)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.HEADER_ID"
contain "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getHeaderId(0)"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.localFileData"
call "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
contain "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataLength(0)"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.centralDirectoryData"
call "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
contain "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryLength(0)"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.localFileData"
call "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.copy(1)"
contain "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataData(0)"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.centralDirectoryData"
call "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataData(0)"
call "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.copy(1)"
contain "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryData(0)"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.localFileData"
contain "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(3)"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.centralDirectoryData"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.localFileData"
call "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(3)"
contain "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(3)"
call "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.static {...}" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.static {...}" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.HEADER_ID"
contain "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.static {...}"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.HEADER_ID" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.HEADER_ID"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.localFileData" "byte[]"
contain "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.localFileData"
reference "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.centralDirectoryData" "byte[]"
contain "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.centralDirectoryData"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.OutputStreamCompressor(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(1)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.OutputStreamCompressor(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.os"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.OutputStreamCompressor(2)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.writeOut(3)" "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.os"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.writeOut(3)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.os"
contain "org.apache.commons.compress.parallel.InputStreamSupplier" "org.apache.commons.compress.parallel.InputStreamSupplier.get(0)"
reference "org.apache.commons.compress.archivers.dump.Dirent.Dirent(4)" "org.apache.commons.compress.archivers.dump.Dirent.ino"
reference "org.apache.commons.compress.archivers.dump.Dirent.Dirent(4)" "org.apache.commons.compress.archivers.dump.Dirent.parentIno"
reference "org.apache.commons.compress.archivers.dump.Dirent.Dirent(4)" "org.apache.commons.compress.archivers.dump.Dirent.type"
reference "org.apache.commons.compress.archivers.dump.Dirent.Dirent(4)" "org.apache.commons.compress.archivers.dump.Dirent.name"
contain "org.apache.commons.compress.archivers.dump.Dirent" "org.apache.commons.compress.archivers.dump.Dirent.Dirent(4)"
reference "org.apache.commons.compress.archivers.dump.Dirent.getIno(0)" "org.apache.commons.compress.archivers.dump.Dirent.ino"
contain "org.apache.commons.compress.archivers.dump.Dirent" "org.apache.commons.compress.archivers.dump.Dirent.getIno(0)"
reference "org.apache.commons.compress.archivers.dump.Dirent.getParentIno(0)" "org.apache.commons.compress.archivers.dump.Dirent.parentIno"
contain "org.apache.commons.compress.archivers.dump.Dirent" "org.apache.commons.compress.archivers.dump.Dirent.getParentIno(0)"
reference "org.apache.commons.compress.archivers.dump.Dirent.getType(0)" "org.apache.commons.compress.archivers.dump.Dirent.type"
contain "org.apache.commons.compress.archivers.dump.Dirent" "org.apache.commons.compress.archivers.dump.Dirent.getType(0)"
reference "org.apache.commons.compress.archivers.dump.Dirent.getName(0)" "org.apache.commons.compress.archivers.dump.Dirent.name"
contain "org.apache.commons.compress.archivers.dump.Dirent" "org.apache.commons.compress.archivers.dump.Dirent.getName(0)"
reference "org.apache.commons.compress.archivers.dump.Dirent.toString(0)" "org.apache.commons.compress.archivers.dump.Dirent.ino"
reference "org.apache.commons.compress.archivers.dump.Dirent.toString(0)" "org.apache.commons.compress.archivers.dump.Dirent.name"
contain "org.apache.commons.compress.archivers.dump.Dirent" "org.apache.commons.compress.archivers.dump.Dirent.toString(0)"
contain "org.apache.commons.compress.archivers.dump.Dirent" "org.apache.commons.compress.archivers.dump.Dirent.ino"
contain "org.apache.commons.compress.archivers.dump.Dirent" "org.apache.commons.compress.archivers.dump.Dirent.parentIno"
contain "org.apache.commons.compress.archivers.dump.Dirent" "org.apache.commons.compress.archivers.dump.Dirent.type"
contain "org.apache.commons.compress.archivers.dump.Dirent" "org.apache.commons.compress.archivers.dump.Dirent.name"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod[]"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.values(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.$VALUES"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethod.values(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod[].clone(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.values(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.valueOf(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.SevenZMethod(3)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.id"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.SevenZMethod(3)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.getId(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.id"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.getId(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(1)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.id"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.SevenZMethod(3)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.AES256SHA256"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_X86_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_PPC_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_IA64_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_THUMB_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_SPARC_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DELTA_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.$VALUES"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.AES256SHA256" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.AES256SHA256"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_X86_FILTER" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_X86_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_PPC_FILTER" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_PPC_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_IA64_FILTER" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_IA64_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_FILTER" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_THUMB_FILTER" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_THUMB_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_SPARC_FILTER" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_SPARC_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DELTA_FILTER" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DELTA_FILTER"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.id" "byte[]"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.id"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethod.$VALUES" "org.apache.commons.compress.archivers.sevenz.SevenZMethod[]"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethod" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.$VALUES"
reference "org.apache.commons.compress.archivers.zip.ScatterStatistics.ScatterStatistics(2)" "org.apache.commons.compress.archivers.zip.ScatterStatistics.compressionElapsed"
reference "org.apache.commons.compress.archivers.zip.ScatterStatistics.ScatterStatistics(2)" "org.apache.commons.compress.archivers.zip.ScatterStatistics.mergingElapsed"
contain "org.apache.commons.compress.archivers.zip.ScatterStatistics" "org.apache.commons.compress.archivers.zip.ScatterStatistics.ScatterStatistics(2)"
reference "org.apache.commons.compress.archivers.zip.ScatterStatistics.getCompressionElapsed(0)" "org.apache.commons.compress.archivers.zip.ScatterStatistics.compressionElapsed"
contain "org.apache.commons.compress.archivers.zip.ScatterStatistics" "org.apache.commons.compress.archivers.zip.ScatterStatistics.getCompressionElapsed(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterStatistics.getMergingElapsed(0)" "org.apache.commons.compress.archivers.zip.ScatterStatistics.mergingElapsed"
contain "org.apache.commons.compress.archivers.zip.ScatterStatistics" "org.apache.commons.compress.archivers.zip.ScatterStatistics.getMergingElapsed(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterStatistics.toString(0)" "org.apache.commons.compress.archivers.zip.ScatterStatistics.compressionElapsed"
reference "org.apache.commons.compress.archivers.zip.ScatterStatistics.toString(0)" "org.apache.commons.compress.archivers.zip.ScatterStatistics.mergingElapsed"
contain "org.apache.commons.compress.archivers.zip.ScatterStatistics" "org.apache.commons.compress.archivers.zip.ScatterStatistics.toString(0)"
contain "org.apache.commons.compress.archivers.zip.ScatterStatistics" "org.apache.commons.compress.archivers.zip.ScatterStatistics.compressionElapsed"
contain "org.apache.commons.compress.archivers.zip.ScatterStatistics" "org.apache.commons.compress.archivers.zip.ScatterStatistics.mergingElapsed"
reference "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream" "org.tukaani.xz.XZOutputStream"
reference "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream" "org.tukaani.xz.LZMA2Options"
reference "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream" "org.apache.commons.compress.compressors.CompressorOutputStream"
call "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(1)" "org.apache.commons.compress.compressors.CompressorOutputStream.CompressorOutputStream(0)"
call "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(1)" "org.tukaani.xz.LZMA2Options.LZMA2Options(0)"
call "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(1)" "org.tukaani.xz.XZOutputStream.XZOutputStream(2)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(1)" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(2)" "org.apache.commons.compress.compressors.CompressorOutputStream.CompressorOutputStream(0)"
call "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(2)" "org.tukaani.xz.LZMA2Options.LZMA2Options(1)"
call "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(2)" "org.tukaani.xz.XZOutputStream.XZOutputStream(2)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(2)" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(2)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(1)" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.out"
call "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(1)" "org.tukaani.xz.XZOutputStream.write(1)"
contain "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(1)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(3)" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.out"
call "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(3)" "org.tukaani.xz.XZOutputStream.write(3)"
contain "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(3)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.flush(0)" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.out"
call "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.flush(0)" "org.tukaani.xz.XZOutputStream.flush(0)"
contain "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.flush(0)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.out"
call "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.finish(0)" "org.tukaani.xz.XZOutputStream.finish(0)"
contain "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.finish(0)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.out"
call "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.close(0)" "org.tukaani.xz.XZOutputStream.close(0)"
contain "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.close(0)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.out" "org.tukaani.xz.XZOutputStream"
contain "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.out"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipConstants"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipLong"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "byte[]"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipUtil"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipMethod"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.utils.ArchiveUtils"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(3)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.hitCentralDirectory"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lastStoredEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.entriesRead"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.encoding"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.zipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.useUnicodeExtraFields"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.hitCentralDirectory"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipLong.equals(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipLong.AED_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.CurrentEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$100(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.zipEncoding"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$202(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipEncoding.decode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.useUnicodeExtraFields"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipMethod.getCode(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.BoundedInputStream(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$302(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getSlidingDictionarySize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getNumberOfShannonFanoTrees(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(3)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipMethod.BZIP2"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.entriesRead"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipLong.DD_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipLong.equals(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(1)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.SPLITTING"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(1)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipLong.SINGLE_SEGMENT_SPLIT_MARKER"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$100(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$402(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$200(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipLong.ZIP64_MAGIC"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipLong.equals(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCompressedSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$100(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(3)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipMethod.getCode(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipMethod.BZIP2"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$300(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$500(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$200(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lastStoredEntry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$100(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$600(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$700(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$702(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$602(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(3)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(3)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$700(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$702(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(3)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checksig(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DD_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(2)" "org.apache.commons.compress.archivers.zip.ZipLong.SINGLE_SEGMENT_SPLIT_MARKER"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(2)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checksig(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$100(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$600(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$700(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$702(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lastStoredEntry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$700(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$100(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$200(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$100(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$700(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(0)" "org.apache.commons.compress.utils.ArchiveUtils.sanitize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$700(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(1)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipLong.DD_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipLong.equals(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$100(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCompressedSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$400(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(4)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(4)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lastStoredEntry"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CFH"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.DD"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(4)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(4)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushedBackBytes(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(3)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.entriesRead"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$800(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$900(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$1000(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CFH"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.DD_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.DD"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.static {...}"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.zipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.zipEncoding"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.encoding"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.useUnicodeExtraFields"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.hitCentralDirectory"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lastStoredEntry"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH_LEN"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CFH_LEN"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.TWO_EXP_32"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.entriesRead"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CFH" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CFH"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.DD" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.DD"
contain "org.apache.commons.compress.compressors.CompressorOutputStream" "org.apache.commons.compress.compressors.CompressorOutputStream.CompressorOutputStream(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.1" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.Simple8BitChar(2)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.code"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.Simple8BitChar(2)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.unicode"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.Simple8BitChar(2)"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.compareTo(1)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.unicode"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.compareTo(1)"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.toString(0)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.unicode"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.toString(0)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.code"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.toString(0)"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.equals(1)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.unicode"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.equals(1)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.code"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.equals(1)"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.hashCode(0)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.unicode"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.hashCode(0)"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.compareTo(1)"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.unicode"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.code"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ZipExtraField"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ZipExtraField[]"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.AsiExtraField"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.X7875_NewUnix"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.JarMarker"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.X000A_NTFS"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.X0014_X509Certificates"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.ExtraFieldUtils(0)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(1)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.implementations"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(1)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId(0)"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(1)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(1)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.implementations"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(1)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.UnrecognizedExtraField(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(1)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(1)"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(1)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(1)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(1)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(1)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(2)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(2)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(2)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(2)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.getKey(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.UnparseableExtraFieldData(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(3)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)" "org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)" "org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(3)"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(1)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(1)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(1)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(1)" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(1)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataData(0)"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(1)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(1)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(1)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(1)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(1)" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(1)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryData(0)"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(1)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.static {...}" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.implementations"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.static {...}" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(1)"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.static {...}"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.WORD"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.implementations"
reference "org.apache.commons.compress.archivers.sevenz.CLI.1" "org.apache.commons.compress.archivers.sevenz.CLI"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1" "org.apache.commons.compress.archivers.sevenz.Coders"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.{...}" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.this$0"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.{...}" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.val$inflaterInputStream"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.{...}" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.val$inflater"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.{...}"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.read(0)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.val$inflaterInputStream"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.read(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.read(3)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.val$inflaterInputStream"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.read(3)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.read(1)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.val$inflaterInputStream"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.read(1)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.close(0)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.val$inflaterInputStream"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.close(0)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.val$inflater"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.val$inflaterInputStream"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.val$inflater"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.this$0" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.this$0"
reference "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge" "org.apache.commons.compress.compressors.pack200.StreamBridge"
call "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.InMemoryCachingStreamBridge(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge(1)"
contain "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge" "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.InMemoryCachingStreamBridge(0)"
reference "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.getInputView(0)" "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.out"
contain "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge" "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.getInputView(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2" "org.apache.commons.compress.archivers.sevenz.Coders"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.{...}" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.this$0"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.{...}" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.val$deflaterOutputStream"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.{...}" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.val$deflater"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.{...}"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.write(1)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.val$deflaterOutputStream"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.write(1)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.write(1)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.val$deflaterOutputStream"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.write(1)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.write(3)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.val$deflaterOutputStream"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.write(3)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.close(0)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.val$deflaterOutputStream"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.close(0)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.val$deflater"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.val$deflaterOutputStream"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.val$deflater"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.this$0" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.this$0"
reference "org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream(0)" "org.apache.commons.compress.compressors.CompressorInputStream.bytesRead"
contain "org.apache.commons.compress.compressors.CompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream(0)"
call "org.apache.commons.compress.compressors.CompressorInputStream.count(1)" "org.apache.commons.compress.compressors.CompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.CompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream.count(1)"
reference "org.apache.commons.compress.compressors.CompressorInputStream.count(1)" "org.apache.commons.compress.compressors.CompressorInputStream.bytesRead"
contain "org.apache.commons.compress.compressors.CompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream.count(1)"
reference "org.apache.commons.compress.compressors.CompressorInputStream.pushedBackBytes(1)" "org.apache.commons.compress.compressors.CompressorInputStream.bytesRead"
contain "org.apache.commons.compress.compressors.CompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream.pushedBackBytes(1)"
reference "org.apache.commons.compress.compressors.CompressorInputStream.getCount(0)" "org.apache.commons.compress.compressors.CompressorInputStream.bytesRead"
contain "org.apache.commons.compress.compressors.CompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream.getCount(0)"
reference "org.apache.commons.compress.compressors.CompressorInputStream.getBytesRead(0)" "org.apache.commons.compress.compressors.CompressorInputStream.bytesRead"
contain "org.apache.commons.compress.compressors.CompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream.getBytesRead(0)"
contain "org.apache.commons.compress.compressors.CompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream.bytesRead"
contain "org.apache.commons.compress.compressors.bzip2.Rand" "org.apache.commons.compress.compressors.bzip2.Rand.Rand(0)"
reference "org.apache.commons.compress.compressors.bzip2.Rand.rNums(1)" "org.apache.commons.compress.compressors.bzip2.Rand.RNUMS"
contain "org.apache.commons.compress.compressors.bzip2.Rand" "org.apache.commons.compress.compressors.bzip2.Rand.rNums(1)"
reference "org.apache.commons.compress.compressors.bzip2.Rand.static {...}" "org.apache.commons.compress.compressors.bzip2.Rand.RNUMS"
contain "org.apache.commons.compress.compressors.bzip2.Rand" "org.apache.commons.compress.compressors.bzip2.Rand.static {...}"
reference "org.apache.commons.compress.compressors.bzip2.Rand.RNUMS" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.Rand" "org.apache.commons.compress.compressors.bzip2.Rand.RNUMS"
reference "org.apache.commons.compress.changes.ChangeSet" "org.apache.commons.compress.changes.Change"
reference "org.apache.commons.compress.changes.ChangeSet" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)" "org.apache.commons.compress.changes.ChangeSet.changes"
contain "org.apache.commons.compress.changes.ChangeSet" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSet.delete(1)" "org.apache.commons.compress.changes.Change.Change(2)"
call "org.apache.commons.compress.changes.ChangeSet.delete(1)" "org.apache.commons.compress.changes.ChangeSet.addDeletion(1)"
contain "org.apache.commons.compress.changes.ChangeSet" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSet.deleteDir(1)" "org.apache.commons.compress.changes.Change.Change(2)"
call "org.apache.commons.compress.changes.ChangeSet.deleteDir(1)" "org.apache.commons.compress.changes.ChangeSet.addDeletion(1)"
contain "org.apache.commons.compress.changes.ChangeSet" "org.apache.commons.compress.changes.ChangeSet.deleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSet.add(2)" "org.apache.commons.compress.changes.ChangeSet.add(3)"
contain "org.apache.commons.compress.changes.ChangeSet" "org.apache.commons.compress.changes.ChangeSet.add(2)"
call "org.apache.commons.compress.changes.ChangeSet.add(3)" "org.apache.commons.compress.changes.Change.Change(3)"
call "org.apache.commons.compress.changes.ChangeSet.add(3)" "org.apache.commons.compress.changes.ChangeSet.addAddition(1)"
contain "org.apache.commons.compress.changes.ChangeSet" "org.apache.commons.compress.changes.ChangeSet.add(3)"
call "org.apache.commons.compress.changes.ChangeSet.addAddition(1)" "org.apache.commons.compress.changes.Change.type(0)"
call "org.apache.commons.compress.changes.ChangeSet.addAddition(1)" "org.apache.commons.compress.changes.Change.getInput(0)"
reference "org.apache.commons.compress.changes.ChangeSet.addAddition(1)" "org.apache.commons.compress.changes.ChangeSet.changes"
call "org.apache.commons.compress.changes.ChangeSet.addAddition(1)" "org.apache.commons.compress.changes.Change.getEntry(0)"
call "org.apache.commons.compress.changes.ChangeSet.addAddition(1)" "org.apache.commons.compress.changes.Change.isReplaceMode(0)"
contain "org.apache.commons.compress.changes.ChangeSet" "org.apache.commons.compress.changes.ChangeSet.addAddition(1)"
call "org.apache.commons.compress.changes.ChangeSet.addDeletion(1)" "org.apache.commons.compress.changes.Change.type(0)"
call "org.apache.commons.compress.changes.ChangeSet.addDeletion(1)" "org.apache.commons.compress.changes.Change.targetFile(0)"
reference "org.apache.commons.compress.changes.ChangeSet.addDeletion(1)" "org.apache.commons.compress.changes.ChangeSet.changes"
call "org.apache.commons.compress.changes.ChangeSet.addDeletion(1)" "org.apache.commons.compress.changes.Change.getEntry(0)"
call "org.apache.commons.compress.changes.ChangeSet.addDeletion(1)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
contain "org.apache.commons.compress.changes.ChangeSet" "org.apache.commons.compress.changes.ChangeSet.addDeletion(1)"
reference "org.apache.commons.compress.changes.ChangeSet.getChanges(0)" "org.apache.commons.compress.changes.ChangeSet.changes"
contain "org.apache.commons.compress.changes.ChangeSet" "org.apache.commons.compress.changes.ChangeSet.getChanges(0)"
contain "org.apache.commons.compress.changes.ChangeSet" "org.apache.commons.compress.changes.ChangeSet.changes"
reference "org.apache.commons.compress.archivers.cpio.CpioUtil" "org.apache.commons.compress.archivers.cpio.CpioConstants"
reference "org.apache.commons.compress.archivers.cpio.CpioUtil" "byte[]"
contain "org.apache.commons.compress.archivers.cpio.CpioUtil" "org.apache.commons.compress.archivers.cpio.CpioUtil.CpioUtil(0)"
contain "org.apache.commons.compress.archivers.cpio.CpioUtil" "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioUtil" "org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(2)"
contain "org.apache.commons.compress.archivers.cpio.CpioUtil" "org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(3)"
contain "org.apache.commons.compress.utils.FlushShieldFilterOutputStream" "org.apache.commons.compress.utils.FlushShieldFilterOutputStream.FlushShieldFilterOutputStream(1)"
contain "org.apache.commons.compress.utils.FlushShieldFilterOutputStream" "org.apache.commons.compress.utils.FlushShieldFilterOutputStream.flush(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.this$0"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.{...}"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.initialValue(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.this$0"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.initialValue(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.access$000(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.initialValue(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.access$100(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.initialValue(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.access$200(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.initialValue(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.this$0" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.this$0"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.this$0"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.val$zipArchiveEntryRequestSupplier"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.{...}"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.call(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.this$0"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.call(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.access$400(1)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.call(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.val$zipArchiveEntryRequestSupplier"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.call(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier.get(0)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.call(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.call(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.val$zipArchiveEntryRequestSupplier" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.val$zipArchiveEntryRequestSupplier"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.this$0" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.this$0"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.this$0"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.val$zipArchiveEntryRequest"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.{...}"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.call(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.this$0"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.call(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.access$400(1)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.call(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.val$zipArchiveEntryRequest"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.call(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.call(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.val$zipArchiveEntryRequest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.val$zipArchiveEntryRequest"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.this$0" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.this$0"
reference "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream"
reference "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream" "boolean[]"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(1)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(2)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(1)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setClearCode(1)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(1)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.initializeTables(1)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(1)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getPrefixesLength(0)"
reference "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(1)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.isUsed"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(1)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getClearCode(0)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(1)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setTableSize(1)"
contain "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(1)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(2)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getTableSize(0)"
reference "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(2)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.isUsed"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(2)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setTableSize(1)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(2)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(3)"
contain "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(2)"
reference "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.partialClear(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.isUsed"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.partialClear(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getPrefix(1)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.partialClear(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getClearCode(0)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.partialClear(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setPrefix(2)"
contain "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.partialClear(0)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.readNextCode(0)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getClearCode(0)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getCodeSize(0)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.incrementCodeSize(0)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.partialClear(0)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setTableSize(1)"
reference "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.isUsed"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addRepeatOfPreviousCode(0)"
call "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.expandCodeToOutputStack(2)"
contain "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol(0)"
contain "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.MAX_CODE_SIZE"
contain "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.MAX_TABLE_SIZE"
reference "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.isUsed" "boolean[]"
contain "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream" "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.isUsed"
reference "org.apache.commons.compress.compressors.gzip.GzipUtils" "org.apache.commons.compress.compressors.FileNameUtil"
contain "org.apache.commons.compress.compressors.gzip.GzipUtils" "org.apache.commons.compress.compressors.gzip.GzipUtils.GzipUtils(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(1)" "org.apache.commons.compress.compressors.gzip.GzipUtils.fileNameUtil"
call "org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.gzip.GzipUtils" "org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(1)"
reference "org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(1)" "org.apache.commons.compress.compressors.gzip.GzipUtils.fileNameUtil"
call "org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(1)"
contain "org.apache.commons.compress.compressors.gzip.GzipUtils" "org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(1)"
reference "org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(1)" "org.apache.commons.compress.compressors.gzip.GzipUtils.fileNameUtil"
call "org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.gzip.GzipUtils" "org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(1)"
call "org.apache.commons.compress.compressors.gzip.GzipUtils.static {...}" "org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(2)"
reference "org.apache.commons.compress.compressors.gzip.GzipUtils.static {...}" "org.apache.commons.compress.compressors.gzip.GzipUtils.fileNameUtil"
contain "org.apache.commons.compress.compressors.gzip.GzipUtils" "org.apache.commons.compress.compressors.gzip.GzipUtils.static {...}"
reference "org.apache.commons.compress.compressors.gzip.GzipUtils.fileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil"
contain "org.apache.commons.compress.compressors.gzip.GzipUtils" "org.apache.commons.compress.compressors.gzip.GzipUtils.fileNameUtil"
reference "org.apache.commons.compress.archivers.dump.ShortFileException" "org.apache.commons.compress.archivers.dump.DumpArchiveException"
call "org.apache.commons.compress.archivers.dump.ShortFileException.ShortFileException(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(1)"
contain "org.apache.commons.compress.archivers.dump.ShortFileException" "org.apache.commons.compress.archivers.dump.ShortFileException.ShortFileException(0)"
contain "org.apache.commons.compress.archivers.dump.ShortFileException" "org.apache.commons.compress.archivers.dump.ShortFileException.serialVersionUID"
reference "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipConstants"
reference "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "byte[]"
call "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
reference "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.value"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(2)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(2)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(2)"
reference "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(2)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.value"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(2)"
reference "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.value"
call "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(1)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.value"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(0)"
reference "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.value"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(0)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(1)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(1)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(1)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(2)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(2)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(2)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(2)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(2)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(1)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(2)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(1)"
reference "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.value"
call "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(1)"
reference "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.hashCode(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.value"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.hashCode(0)"
reference "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.toString(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.value"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.toString(0)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.static {...}" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
reference "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.static {...}" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.static {...}"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.serialVersionUID"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_1"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_1_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_1_SHIFT"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_2"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_2_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_2_SHIFT"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_3"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_3_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_3_SHIFT"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_4"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_4_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_4_SHIFT"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_5"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_5_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_5_SHIFT"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_6"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_6_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_6_SHIFT"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_7"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_7_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_7_SHIFT"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.LEFTMOST_BIT_SHIFT"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.LEFTMOST_BIT"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.value"
reference "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteInteger" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags" "org.apache.commons.compress.archivers.arj.LocalFileHeader"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags.Flags(0)"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags.GARBLED"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags.VOLUME"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags.EXTFILE"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags.PATHSYM"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags.BACKUP"
reference "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.Flags"
reference "org.apache.commons.compress.archivers.arj.MainHeader.MainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.extendedHeaderBytes"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.MainHeader(0)"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.archiverVersionNumber"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.minVersionToExtract"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.hostOS"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.arjFlags"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.securityVersion"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.fileType"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.reserved"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.dateTimeCreated"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.dateTimeModified"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.archiveSize"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeFilePosition"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.fileSpecPosition"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeLength"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.encryptionVersion"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.lastChapter"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.arjProtectionFactor"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.arjFlags2"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.name"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.comment"
reference "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)" "org.apache.commons.compress.archivers.arj.MainHeader.extendedHeaderBytes"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.archiverVersionNumber"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.minVersionToExtract"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.hostOS"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.arjFlags"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.securityVersion"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.fileType"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.reserved"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.dateTimeCreated"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.dateTimeModified"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.archiveSize"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeFilePosition"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.fileSpecPosition"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeLength"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.encryptionVersion"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.lastChapter"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.arjProtectionFactor"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.arjFlags2"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.name"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.comment"
reference "org.apache.commons.compress.archivers.arj.MainHeader.extendedHeaderBytes" "byte[]"
contain "org.apache.commons.compress.archivers.arj.MainHeader" "org.apache.commons.compress.archivers.arj.MainHeader.extendedHeaderBytes"
reference "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader"
call "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.X0019_EncryptionRecipientCertificateList(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.X0019_EncryptionRecipientCertificateList(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.PKWareExtraHeader(1)"
contain "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList" "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.X0019_EncryptionRecipientCertificateList(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ZipMethod"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ScatterStatistics"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.StreamCompressor"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(1)" "org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier.get(0)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ScatterZipOutputStream(2)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(0)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.DefaultBackingStoreSupplier(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(2)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(1)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(2)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.streams"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(2)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(2)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.startedAt"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(2)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.compressionDoneAt"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(2)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.{...}"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(2)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.tlScatterStreams"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(2)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.backingStoreSupplier"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(2)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.es"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.es"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(2)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.{...}"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.{...}"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(1)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.es"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.compressionDoneAt"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.streams"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.scatterDoneAt"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(1)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.compressionDoneAt"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.startedAt"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.scatterDoneAt"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage(0)" "org.apache.commons.compress.archivers.zip.ScatterStatistics.ScatterStatistics(2)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage(0)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.access$000(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.access$100(2)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.access$200(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.access$400(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.streams"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.es"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.backingStoreSupplier" "org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.backingStoreSupplier"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.startedAt"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.compressionDoneAt"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.scatterDoneAt"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.tlScatterStreams"
contain "org.apache.commons.compress.archivers.zip.ZipConstants" "org.apache.commons.compress.archivers.zip.ZipConstants.ZipConstants(0)"
contain "org.apache.commons.compress.archivers.zip.ZipConstants" "org.apache.commons.compress.archivers.zip.ZipConstants.BYTE_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipConstants" "org.apache.commons.compress.archivers.zip.ZipConstants.SHORT"
contain "org.apache.commons.compress.archivers.zip.ZipConstants" "org.apache.commons.compress.archivers.zip.ZipConstants.WORD"
contain "org.apache.commons.compress.archivers.zip.ZipConstants" "org.apache.commons.compress.archivers.zip.ZipConstants.DWORD"
contain "org.apache.commons.compress.archivers.zip.ZipConstants" "org.apache.commons.compress.archivers.zip.ZipConstants.INITIAL_VERSION"
contain "org.apache.commons.compress.archivers.zip.ZipConstants" "org.apache.commons.compress.archivers.zip.ZipConstants.DATA_DESCRIPTOR_MIN_VERSION"
contain "org.apache.commons.compress.archivers.zip.ZipConstants" "org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MIN_VERSION"
contain "org.apache.commons.compress.archivers.zip.ZipConstants" "org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MAGIC_SHORT"
contain "org.apache.commons.compress.archivers.zip.ZipConstants" "org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MAGIC"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioConstants"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioUtil"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.utils.ArchiveUtils"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipEncoding"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closed"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryBytesRead"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryEOF"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.tmpbuf"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.crc"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.twoBytesBuf"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.sixBytesBuf"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.in"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.blockSize"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.encoding"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.zipEncoding"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.available(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.available(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryEOF"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.available(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closed"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.in"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closeEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closeEntry(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closed"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entry"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closeEntry(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.twoBytesBuf"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.sixBytesBuf"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getBytesRead(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryBytesRead"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryEOF"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.crc"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skipRemainderOfLastBlock(0)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(3)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entry"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryEOF"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryBytesRead"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDataPadCount(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.crc"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getChksum(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getBytesRead(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(3)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.in"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(3)" "org.apache.commons.compress.utils.IOUtils.readFully(4)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(2)" "org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(2)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(2)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(2)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.utils.ArchiveUtils.sanitize(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getBytesRead(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.utils.ArchiveUtils.sanitize(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getBytesRead(0)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.utils.ArchiveUtils.sanitize(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getBytesRead(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(3)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.in"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.zipEncoding"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(1)" "org.apache.commons.compress.archivers.zip.ZipEncoding.decode(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.tmpbuf"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryEOF"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skipRemainderOfLastBlock(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getBytesRead(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skipRemainderOfLastBlock(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.blockSize"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skipRemainderOfLastBlock(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skipRemainderOfLastBlock(0)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(2)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closed"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entry" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entry"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryBytesRead"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryEOF"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.tmpbuf" "byte[]"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.tmpbuf"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.crc"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.in"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.twoBytesBuf" "byte[]"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.twoBytesBuf"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf" "byte[]"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.sixBytesBuf" "byte[]"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.sixBytesBuf"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.blockSize"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.zipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.zipEncoding"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.encoding"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream" "org.tukaani.xz.LZMAInputStream"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream"
call "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.LZMACompressorInputStream(1)" "org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream(0)"
call "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.LZMACompressorInputStream(1)" "org.tukaani.xz.LZMAInputStream.LZMAInputStream(1)"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.LZMACompressorInputStream(1)" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.in"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.LZMACompressorInputStream(1)"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(0)" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.in"
call "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(0)" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(0)"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(3)" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.in"
call "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(3)" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(3)"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.skip(1)" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.in"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.skip(1)"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.available(0)" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.in"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.available(0)"
reference "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.close(0)" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.in"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(2)"
contain "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.in"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1" "org.apache.commons.compress.archivers.sevenz.CLI.Mode"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1" "org.apache.commons.compress.archivers.sevenz.CLI"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.{...}" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.Mode(4)"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.{...}"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.takeAction(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.takeAction(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.takeAction(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.takeAction(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.takeAction(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.takeAction(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.takeAction(2)" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.getContentMethods(1)"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.takeAction(2)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.getContentMethods(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.getContentMethods(1)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.getContentMethods(1)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.getContentMethods(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.MainHeader.Flags"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveException"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.MainHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.LocalFileHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "byte[]"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "byte[][]"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.utils.BoundedInputStream"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.utils.CRC32VerifyingInputStream"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)" "org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentLocalFileHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentInputStream"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.in"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.charsetName"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.mainHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)" "org.apache.commons.compress.archivers.arj.MainHeader.arjFlags"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)" "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(1)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)" "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(2)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(1)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.close(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.in"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read8(1)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read8(1)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(1)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(1)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(1)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(1)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.charsetName"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(1)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readFully(2)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readFully(2)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.in"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read8(1)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(1)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readFully(2)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(1)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.MainHeader(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.archiverVersionNumber"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.minVersionToExtract"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.hostOS"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.arjFlags"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.securityVersion"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.fileType"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.reserved"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.dateTimeCreated"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.dateTimeModified"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.archiveSize"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeFilePosition"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.fileSpecPosition"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeLength"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.pushedBackBytes(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.encryptionVersion"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.lastChapter"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.arjProtectionFactor"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.arjFlags2"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.name"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.comment"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.in"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.MainHeader.extendedHeaderBytes"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readFully(2)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.LocalFileHeader(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.archiverVersionNumber"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.minVersionToExtract"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.hostOS"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.arjFlags"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.method"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileType"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.reserved"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeModified"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.compressedSize"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSize"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalCrc32"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileSpecPosition"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileAccessMode"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.pushedBackBytes(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.firstChapter"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.lastChapter"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(3)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.name"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.comment"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.in"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readFully(2)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedHeaders"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(3)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(3)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedFilePosition"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(3)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeAccessed"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(3)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeCreated"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(3)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSizeEvenForVolumes"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(3)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.pushedBackBytes(1)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(3)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(2)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getArchiveName(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.mainHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getArchiveName(0)" "org.apache.commons.compress.archivers.arj.MainHeader.name"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getArchiveName(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getArchiveComment(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.mainHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getArchiveComment(0)" "org.apache.commons.compress.archivers.arj.MainHeader.comment"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getArchiveComment(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentInputStream"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.utils.IOUtils.skip(2)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentLocalFileHeader"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.in"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.compressedSize"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.utils.BoundedInputStream.BoundedInputStream(2)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.method"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSize"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalCrc32"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(3)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.canReadEntryData(1)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMethod(0)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.canReadEntryData(1)"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentLocalFileHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.method"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentInputStream"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(3)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ARJ_MAGIC_1"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ARJ_MAGIC_2"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.in"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.charsetName"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.mainHeader" "org.apache.commons.compress.archivers.arj.MainHeader"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.mainHeader"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentLocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentLocalFileHeader"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentInputStream"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2" "org.apache.commons.compress.archivers.sevenz.CLI.Mode"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2" "org.apache.commons.compress.archivers.sevenz.SevenZFile"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2" "org.apache.commons.compress.archivers.sevenz.CLI"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2.{...}" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.Mode(4)"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2.{...}"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2.takeAction(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2.takeAction(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2.takeAction(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2.takeAction(2)" "org.apache.commons.compress.archivers.sevenz.CLI.access$100(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2.takeAction(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(3)"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2.takeAction(2)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream" "org.apache.commons.compress.compressors.deflate.DeflateParameters"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream" "org.apache.commons.compress.compressors.CompressorOutputStream"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(1)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(1)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(2)"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(2)" "org.apache.commons.compress.compressors.CompressorOutputStream.CompressorOutputStream(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(2)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.getCompressionLevel(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(2)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.withZlibHeader(0)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(2)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.deflater"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(2)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(2)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(1)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(1)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(3)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(3)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.flush(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.flush(0)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.finish(0)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.out"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.deflater"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.close(0)"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.deflater"
reference "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder" "org.apache.commons.compress.utils.FlushShieldFilterOutputStream"
reference "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder" "org.tukaani.xz.FinishableWrapperOutputStream"
reference "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder" "org.apache.commons.compress.archivers.sevenz.CoderBase"
reference "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder" "org.tukaani.xz.FilterOptions"
reference "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder" "org.apache.commons.compress.archivers.sevenz.Coders"
call "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.BCJDecoder(1)" "org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(1)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.BCJDecoder(1)" "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.opts"
contain "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder" "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.BCJDecoder(1)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.decode(5)" "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.opts"
call "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.decode(5)" "org.tukaani.xz.FilterOptions.getInputStream(1)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder" "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.decode(5)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(2)" "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.opts"
call "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(2)" "org.tukaani.xz.FinishableWrapperOutputStream.FinishableWrapperOutputStream(1)"
call "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(2)" "org.tukaani.xz.FilterOptions.getOutputStream(1)"
call "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(2)" "org.apache.commons.compress.utils.FlushShieldFilterOutputStream.FlushShieldFilterOutputStream(1)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder" "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(2)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.opts" "org.tukaani.xz.FilterOptions"
contain "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder" "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.opts"
contain "org.apache.commons.compress.archivers.zip.ZipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(1)"
contain "org.apache.commons.compress.archivers.zip.ZipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding.encode(1)"
contain "org.apache.commons.compress.archivers.zip.ZipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding.decode(1)"
reference "org.apache.commons.compress.archivers.sevenz.Coder.Coder(0)" "org.apache.commons.compress.archivers.sevenz.Coder.properties"
contain "org.apache.commons.compress.archivers.sevenz.Coder" "org.apache.commons.compress.archivers.sevenz.Coder.Coder(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coder.decompressionMethodId" "byte[]"
contain "org.apache.commons.compress.archivers.sevenz.Coder" "org.apache.commons.compress.archivers.sevenz.Coder.decompressionMethodId"
contain "org.apache.commons.compress.archivers.sevenz.Coder" "org.apache.commons.compress.archivers.sevenz.Coder.numInStreams"
contain "org.apache.commons.compress.archivers.sevenz.Coder" "org.apache.commons.compress.archivers.sevenz.Coder.numOutStreams"
reference "org.apache.commons.compress.archivers.sevenz.Coder.properties" "byte[]"
contain "org.apache.commons.compress.archivers.sevenz.Coder" "org.apache.commons.compress.archivers.sevenz.Coder.properties"
reference "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder" "org.apache.commons.compress.archivers.sevenz.CoderBase"
call "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256Decoder(0)" "org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(1)"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256Decoder(0)"
call "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(5)" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.{...}"
contain "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder" "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(5)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveEntry"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.utils.ArchiveUtils"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.entryOffset"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.haveUnclosedEntry"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.longFileMode"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.out"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.setLongFileMode(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.longFileMode"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.setLongFileMode(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeArchiveHeader(0)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(1)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeArchiveHeader(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.out"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeArchiveHeader(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.prevEntry"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.haveUnclosedEntry"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.entryOffset"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.out"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.prevEntry"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeArchiveHeader(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.entryOffset"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.haveUnclosedEntry"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(1)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.fill(3)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(1)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.fill(3)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(1)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(1)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.longFileMode"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(1)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.fill(3)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(1)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModified(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(1)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getUserId(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(1)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getGroupId(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(1)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getMode(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(1)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength(0)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(1)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.out"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.count(1)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.entryOffset"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(3)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finished"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finish(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.out"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.prevEntry"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(2)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finished"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(2)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(2)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.haveUnclosedEntry"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finished"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finish(0)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.LONGFILE_ERROR"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.LONGFILE_BSD"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.out"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.entryOffset"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.prevEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.prevEntry"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.haveUnclosedEntry"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.longFileMode"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.ArchiveEntry"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.name"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.name"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCreationDate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCreationDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCreationDate(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCreationDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCreationDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCreationDate(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCreationDate"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.creationDate"
call "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.creationDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCreationDate"
call "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.creationDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasLastModifiedDate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasLastModifiedDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasLastModifiedDate(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasLastModifiedDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasLastModifiedDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasLastModifiedDate(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasLastModifiedDate"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.lastModifiedDate"
call "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.lastModifiedDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasLastModifiedDate"
call "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.lastModifiedDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasAccessDate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasAccessDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasAccessDate(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasAccessDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasAccessDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasAccessDate(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasAccessDate"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.accessDate"
call "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.accessDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasAccessDate"
call "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.accessDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasWindowsAttributes(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasWindowsAttributes"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasWindowsAttributes(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasWindowsAttributes"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getWindowsAttributes(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.windowsAttributes"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getWindowsAttributes(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.windowsAttributes"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCrc(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCrc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCrc(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCrc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrc(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.crc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrc(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrc(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.crc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrc(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrcValue(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.crc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrcValue(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.crc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrc(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedCrc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrc(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrc(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedCrc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrc(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrcValue(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedCrc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrcValue(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrcValue(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedCrc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrcValue(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.size"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.size"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedSize"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedSize(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedSize(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedSize"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedSize(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.contentMethods"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.contentMethods"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.name"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCreationDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasLastModifiedDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasAccessDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.creationDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.lastModifiedDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.accessDate"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasWindowsAttributes"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.windowsAttributes"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCrc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.crc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedCrc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.size"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedSize"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.contentMethods"
reference "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry" "org.apache.commons.compress.archivers.tar.TarConstants"
reference "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry" "org.apache.commons.compress.archivers.tar.TarUtils"
call "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.TarArchiveSparseEntry(1)" "org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(2)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.TarArchiveSparseEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended"
contain "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry" "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.TarArchiveSparseEntry(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended(0)" "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended"
contain "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry" "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry" "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended"
reference "org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.oneByte"
reference "org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.bytesWritten"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream(0)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.finish(0)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(2)"
reference "org.apache.commons.compress.archivers.ArchiveOutputStream.write(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.oneByte"
call "org.apache.commons.compress.archivers.ArchiveOutputStream.write(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.write(3)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.ArchiveOutputStream.count(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.count(1)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.count(1)"
reference "org.apache.commons.compress.archivers.ArchiveOutputStream.count(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.bytesWritten"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.count(1)"
reference "org.apache.commons.compress.archivers.ArchiveOutputStream.getCount(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.bytesWritten"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.getCount(0)"
reference "org.apache.commons.compress.archivers.ArchiveOutputStream.getBytesWritten(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.bytesWritten"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.getBytesWritten(0)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.canWriteEntryData(1)"
reference "org.apache.commons.compress.archivers.ArchiveOutputStream.oneByte" "byte[]"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.oneByte"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.BYTE_MASK"
contain "org.apache.commons.compress.archivers.ArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream.bytesWritten"
contain "org.apache.commons.compress.parallel.ScatterGatherBackingStore" "org.apache.commons.compress.parallel.ScatterGatherBackingStore.getInputStream(0)"
contain "org.apache.commons.compress.parallel.ScatterGatherBackingStore" "org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(3)"
contain "org.apache.commons.compress.parallel.ScatterGatherBackingStore" "org.apache.commons.compress.parallel.ScatterGatherBackingStore.closeForWriting(0)"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "char[]"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
call "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(1)" "char[].clone(0)"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(1)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.highChars"
call "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(1)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.Simple8BitChar(2)"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(1)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.reverseMapping"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(1)"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decodeByte(1)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.highChars"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decodeByte(1)"
call "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncodeChar(1)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encodeHighChar(1)"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncodeChar(1)"
call "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.pushEncodedChar(2)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encodeHighChar(1)"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.pushEncodedChar(2)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.code"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.pushEncodedChar(2)"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encodeHighChar(1)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.reverseMapping"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encodeHighChar(1)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.unicode"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encodeHighChar(1)"
call "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncode(1)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncodeChar(1)"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncode(1)"
call "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encode(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBuffer(2)"
call "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encode(1)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.pushEncodedChar(2)"
call "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encode(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.appendSurrogate(2)"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encode(1)"
call "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decode(1)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decodeByte(1)"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decode(1)"
reference "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.highChars" "char[]"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.highChars"
contain "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.reverseMapping"
reference "org.apache.commons.compress.archivers.zip.Zip64RequiredException" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
call "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64RequiredException" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64RequiredException" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.Zip64RequiredException(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64RequiredException" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.serialVersionUID"
contain "org.apache.commons.compress.archivers.zip.Zip64RequiredException" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.ARCHIVE_TOO_BIG_MESSAGE"
contain "org.apache.commons.compress.archivers.zip.Zip64RequiredException" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.TOO_MANY_ENTRIES_MESSAGE"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2Constants"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "byte[][]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "int[][]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.inUse"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.unseqToSeq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.mtfFreq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selector"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selectorMtf"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.generateMTFValues_yy"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_rfreq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_fave"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_cost"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_code"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues2_pos"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sentMTFValues4_inUse16"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.heap"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.weight"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.parent"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.fmap"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sfmap"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.inUse" "boolean[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.inUse"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.unseqToSeq" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.unseqToSeq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.mtfFreq" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.mtfFreq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selector" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selector"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selectorMtf" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selectorMtf"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.generateMTFValues_yy" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.generateMTFValues_yy"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len" "byte[][]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_rfreq" "int[][]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_rfreq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_fave" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_fave"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_cost" "short[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_cost"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_code" "int[][]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_code"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues2_pos" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues2_pos"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sentMTFValues4_inUse16" "boolean[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sentMTFValues4_inUse16"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.heap" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.heap"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.weight" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.weight"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.parent" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.parent"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.fmap" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.fmap"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sfmap" "char[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sfmap"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.origPtr"
reference "org.apache.commons.compress.compressors.pack200.Pack200Strategy" "org.apache.commons.compress.compressors.pack200.Pack200Strategy[]"
reference "org.apache.commons.compress.compressors.pack200.Pack200Strategy.values(0)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.$VALUES"
call "org.apache.commons.compress.compressors.pack200.Pack200Strategy.values(0)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy[].clone(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200Strategy" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.values(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200Strategy" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.valueOf(1)"
contain "org.apache.commons.compress.compressors.pack200.Pack200Strategy" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.Pack200Strategy(2)"
contain "org.apache.commons.compress.compressors.pack200.Pack200Strategy" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.newStreamBridge(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200Strategy" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.Pack200Strategy(3)"
call "org.apache.commons.compress.compressors.pack200.Pack200Strategy.static {...}" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.1.{...}"
reference "org.apache.commons.compress.compressors.pack200.Pack200Strategy.static {...}" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY"
call "org.apache.commons.compress.compressors.pack200.Pack200Strategy.static {...}" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.2.{...}"
reference "org.apache.commons.compress.compressors.pack200.Pack200Strategy.static {...}" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE"
reference "org.apache.commons.compress.compressors.pack200.Pack200Strategy.static {...}" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.$VALUES"
contain "org.apache.commons.compress.compressors.pack200.Pack200Strategy" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.static {...}"
reference "org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY" "org.apache.commons.compress.compressors.pack200.Pack200Strategy"
contain "org.apache.commons.compress.compressors.pack200.Pack200Strategy" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY"
reference "org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE" "org.apache.commons.compress.compressors.pack200.Pack200Strategy"
contain "org.apache.commons.compress.compressors.pack200.Pack200Strategy" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE"
reference "org.apache.commons.compress.compressors.pack200.Pack200Strategy.$VALUES" "org.apache.commons.compress.compressors.pack200.Pack200Strategy[]"
contain "org.apache.commons.compress.compressors.pack200.Pack200Strategy" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.$VALUES"
reference "org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.compressionLevel"
reference "org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.operatingSystem"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipParameters.getCompressionLevel(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.compressionLevel"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.getCompressionLevel(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.compressionLevel"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(1)"
reference "org.apache.commons.compress.compressors.gzip.GzipParameters.getModificationTime(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.modificationTime"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.getModificationTime(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.modificationTime"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(1)"
reference "org.apache.commons.compress.compressors.gzip.GzipParameters.getFilename(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.filename"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.getFilename(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.filename"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(1)"
reference "org.apache.commons.compress.compressors.gzip.GzipParameters.getComment(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.comment"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.getComment(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.comment"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(1)"
reference "org.apache.commons.compress.compressors.gzip.GzipParameters.getOperatingSystem(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.operatingSystem"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.getOperatingSystem(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.operatingSystem"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(1)"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.compressionLevel"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.modificationTime"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.filename"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.comment"
contain "org.apache.commons.compress.compressors.gzip.GzipParameters" "org.apache.commons.compress.compressors.gzip.GzipParameters.operatingSystem"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator" "org.apache.commons.compress.changes.ChangeSetPerformer"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.hasNext(0)"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.next(0)"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.getInputStream(0)"
contain "org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier" "org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier.get(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.Archive"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.NID"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.StartHeader"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.utils.CRC32VerifyingInputStream"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.Coder"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.Folder"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.BindPair"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.StreamMap"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.utils.BoundedInputStream"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "byte[]"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.Folder[]"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "long[]"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.Coder[]"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.BindPair[]"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry[]"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.Coders"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.CoderBase"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(4)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(4)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(3)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentEntryIndex"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderIndex"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderInputStream"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.channel"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.fileName"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.archive"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.password"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(4)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.channel"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.password"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentEntryIndex"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.archive"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)" "org.apache.commons.compress.archivers.sevenz.Archive.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.getEntries(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.archive"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.getEntries(0)" "org.apache.commons.compress.archivers.sevenz.Archive.files"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getEntries(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.sevenZSignature"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)" "org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderSize"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.channel"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)" "org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderOffset"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)" "org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderCrc"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)" "org.apache.commons.compress.archivers.sevenz.Archive.Archive(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(1)" "org.apache.commons.compress.archivers.sevenz.StartHeader.StartHeader(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.channel"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(1)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.BoundedSeekableByteChannelInputStream(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(1)" "org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(3)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(1)" "org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderOffset"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(1)" "org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderSize"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(1)" "org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderCrc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.Archive.folders"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.Archive.packPos"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.channel"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.Archive.packSizes"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.BoundedSeekableByteChannelInputStream(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.Coder.numInStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.Coder.numOutStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.fileName"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(5)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.Folder.hasCrc"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.archivers.sevenz.Folder.crc"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)" "org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.Archive.folders"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(2)" "org.apache.commons.compress.archivers.sevenz.Archive.packPos"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(2)" "org.apache.commons.compress.archivers.sevenz.Archive.packSizes"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(2)" "org.apache.commons.compress.archivers.sevenz.Archive.packCrcsDefined"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(2)" "org.apache.commons.compress.archivers.sevenz.Archive.packCrcs"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(2)" "org.apache.commons.compress.archivers.sevenz.Archive.folders"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(2)" "org.apache.commons.compress.archivers.sevenz.Folder.totalOutputStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(2)" "org.apache.commons.compress.archivers.sevenz.Folder.unpackSizes"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(2)" "org.apache.commons.compress.archivers.sevenz.Folder.hasCrc"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(2)" "org.apache.commons.compress.archivers.sevenz.Folder.crc"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.Archive.folders"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.Folder.numUnpackSubStreams"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.SubStreamsInfo(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.unpackSizes"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.hasCrc"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.crcs"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.Folder.hasCrc"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.Folder.crc"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)" "org.apache.commons.compress.archivers.sevenz.Archive.subStreamsInfo"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.Folder.Folder(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.Coder.Coder(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.Coder.decompressionMethodId"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.Coder.numInStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.Coder.numOutStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.Coder.properties"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.Folder.coders"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.Folder.totalInputStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.Folder.totalOutputStreams"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.BindPair.BindPair(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.BindPair.inIndex"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.BindPair.outIndex"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.Folder.bindPairs"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)" "org.apache.commons.compress.archivers.sevenz.Folder.packedStreams"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCreationDate(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCreationDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasAccessDate(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasAccessDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasLastModifiedDate(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasWindowsAttributes(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.Archive.subStreamsInfo"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.hasCrc"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.crcs"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.unpackSizes"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.Archive.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)" "org.apache.commons.compress.archivers.sevenz.StreamMap.StreamMap(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)" "org.apache.commons.compress.archivers.sevenz.Archive.folders"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)" "org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstPackStreamIndex"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)" "org.apache.commons.compress.archivers.sevenz.Folder.packedStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)" "org.apache.commons.compress.archivers.sevenz.Archive.packSizes"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)" "org.apache.commons.compress.archivers.sevenz.StreamMap.packStreamOffsets"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)" "org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstFileIndex"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)" "org.apache.commons.compress.archivers.sevenz.Archive.files"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)" "org.apache.commons.compress.archivers.sevenz.StreamMap.fileFolderIndex"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)" "org.apache.commons.compress.archivers.sevenz.Folder.numUnpackSubStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)" "org.apache.commons.compress.archivers.sevenz.Archive.streamMap"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.archive"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.Archive.streamMap"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.StreamMap.fileFolderIndex"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentEntryIndex"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.Archive.files"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderIndex"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderInputStream"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.Archive.folders"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstPackStreamIndex"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.Archive.packPos"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.StreamMap.packStreamOffsets"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.utils.BoundedInputStream.BoundedInputStream(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCrc(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrcValue(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)" "org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.channel"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.archive"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.Archive.packSizes"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.BoundedSeekableByteChannelInputStream(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.Coder.numInStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.Coder.numOutStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.Coder.decompressionMethodId"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.fileName"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.password"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(5)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsFromCoder(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.Folder.hasCrc"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.archivers.sevenz.Folder.crc"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)" "org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.archive"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream(0)" "org.apache.commons.compress.archivers.sevenz.Archive.files"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentEntryIndex"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream(0)" "org.apache.commons.compress.utils.IOUtils.skip(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.sevenZSignature"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.channel"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(1)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.toString(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.archive"
call "org.apache.commons.compress.archivers.sevenz.SevenZFile.toString(0)" "org.apache.commons.compress.archivers.sevenz.Archive.toString(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.toString(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZFile.sevenZSignature"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.static {...}"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SIGNATURE_HEADER_SIZE"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.fileName"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.channel"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.archive" "org.apache.commons.compress.archivers.sevenz.Archive"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.archive"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentEntryIndex"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderIndex"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderInputStream"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.password" "byte[]"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.password"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFile.sevenZSignature" "byte[]"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile.sevenZSignature"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(1)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream(0)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.oneByte"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.endReached"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.in"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.blockSize"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.decompressBuf"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readIndex"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.writeIndex"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readSize(0)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.size"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.uncompressedBytesRemaining"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.oneByte"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(3)"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(0)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.close(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.in"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.close(0)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.available(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.writeIndex"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.available(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readIndex"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.available(0)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.endReached"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.available(0)"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(1)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.decompressBuf"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readIndex"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.blockSize"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.slideBuffer(0)"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(3)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(1)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.uncompressedBytesRemaining"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(1)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.endReached"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(1)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readOneByte(0)"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(1)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readLiteralLength(1)"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(1)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandLiteral(1)"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(1)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandCopy(2)"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(1)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.slideBuffer(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.decompressBuf"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.slideBuffer(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.blockSize"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.slideBuffer(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.writeIndex"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.slideBuffer(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readIndex"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.slideBuffer(0)"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readLiteralLength(1)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readOneByte(0)"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readLiteralLength(1)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandLiteral(1)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.in"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandLiteral(1)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.decompressBuf"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandLiteral(1)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.writeIndex"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandLiteral(1)" "org.apache.commons.compress.utils.IOUtils.readFully(4)"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandLiteral(1)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.count(1)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandLiteral(1)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.blockSize"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandLiteral(1)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandCopy(2)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.blockSize"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandCopy(2)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.decompressBuf"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandCopy(2)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.writeIndex"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandCopy(2)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readOneByte(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.in"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readOneByte(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readOneByte(0)"
call "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readSize(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readOneByte(0)"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readSize(0)"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.getSize(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.size"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.getSize(0)"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.TAG_MASK"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.decompressBuf" "byte[]"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.decompressBuf"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.writeIndex"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readIndex"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.blockSize"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.in"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.size"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.uncompressedBytesRemaining"
reference "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.oneByte" "byte[]"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.oneByte"
contain "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.endReached"
reference "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge" "org.apache.commons.compress.compressors.pack200.StreamBridge"
call "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.TempFileCachingStreamBridge(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge(0)"
reference "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.TempFileCachingStreamBridge(0)" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.f"
reference "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.TempFileCachingStreamBridge(0)" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.out"
contain "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.TempFileCachingStreamBridge(0)"
reference "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.getInputView(0)" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.out"
reference "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.getInputView(0)" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.f"
call "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.getInputView(0)" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.{...}"
contain "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.getInputView(0)"
contain "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.access$000(1)"
contain "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.f"
reference "org.apache.commons.compress.archivers.zip.BinaryTree" "byte[]"
reference "org.apache.commons.compress.archivers.zip.BinaryTree" "int[]"
reference "org.apache.commons.compress.archivers.zip.BinaryTree" "org.apache.commons.compress.archivers.zip.BitStream"
reference "org.apache.commons.compress.archivers.zip.BinaryTree.BinaryTree(1)" "org.apache.commons.compress.archivers.zip.BinaryTree.tree"
contain "org.apache.commons.compress.archivers.zip.BinaryTree" "org.apache.commons.compress.archivers.zip.BinaryTree.BinaryTree(1)"
reference "org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(4)" "org.apache.commons.compress.archivers.zip.BinaryTree.tree"
call "org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(4)" "org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(4)"
contain "org.apache.commons.compress.archivers.zip.BinaryTree" "org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(4)"
call "org.apache.commons.compress.archivers.zip.BinaryTree.read(1)" "org.apache.commons.compress.archivers.zip.BitStream.nextBit(0)"
reference "org.apache.commons.compress.archivers.zip.BinaryTree.read(1)" "org.apache.commons.compress.archivers.zip.BinaryTree.tree"
contain "org.apache.commons.compress.archivers.zip.BinaryTree" "org.apache.commons.compress.archivers.zip.BinaryTree.read(1)"
call "org.apache.commons.compress.archivers.zip.BinaryTree.decode(2)" "org.apache.commons.compress.archivers.zip.BinaryTree.BinaryTree(1)"
call "org.apache.commons.compress.archivers.zip.BinaryTree.decode(2)" "org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(4)"
contain "org.apache.commons.compress.archivers.zip.BinaryTree" "org.apache.commons.compress.archivers.zip.BinaryTree.decode(2)"
contain "org.apache.commons.compress.archivers.zip.BinaryTree" "org.apache.commons.compress.archivers.zip.BinaryTree.UNDEFINED"
contain "org.apache.commons.compress.archivers.zip.BinaryTree" "org.apache.commons.compress.archivers.zip.BinaryTree.NODE"
reference "org.apache.commons.compress.archivers.zip.BinaryTree.tree" "int[]"
contain "org.apache.commons.compress.archivers.zip.BinaryTree" "org.apache.commons.compress.archivers.zip.BinaryTree.tree"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipConstants"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.Zip64RequiredException"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.StreamCompressor"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "byte[]"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipLong"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipMethod"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipUtil"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.comment"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.level"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasCompressionLevelChanged"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.method"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdOffset"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdLength"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.encoding"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.useUTF8Flag"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUTF8"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyBuffer"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.calendarInstance"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.out"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.def"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.comment"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.level"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasCompressionLevelChanged"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.method"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdOffset"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdLength"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.encoding"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.useUTF8Flag"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUTF8"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyBuffer"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.calendarInstance"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.def"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.utils.IOUtils.closeQuietly(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.out"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.comment"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.level"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasCompressionLevelChanged"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.method"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdOffset"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdLength"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.encoding"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.useUTF8Flag"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUTF8"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyBuffer"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.calendarInstance"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.def"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.out"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.encoding"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.useUTF8Flag"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEncoding(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.encoding"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEncoding(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.encoding"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.useUTF8Flag"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUTF8"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getTotalBytesWritten(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdOffset"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdLength"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getTotalBytesWritten(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$000(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getCrc32(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesRead(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$102(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.reset(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$102(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$300(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EMPTY"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(3)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.flushDeflater(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$100(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCompressedSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(1)" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(1)" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.Zip64RequiredException(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$400(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipLong.ZIP64_MAGIC"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$500(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasCompressionLevelChanged"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.def"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.level"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.method"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getTime(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCompressedSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.Zip64RequiredException(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.comment"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.level"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasCompressionLevelChanged"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.method"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(1)" "org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(1)" "org.apache.commons.compress.archivers.zip.ZipMethod.getCode(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(1)" "org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.zip.StreamCompressor.write(4)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.count(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(3)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$302(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyBuffer"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.count(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.out"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.deflate(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.deflate(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.deflate(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getTotalBytesWritten(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$402(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$002(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalFileDataExtra(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipShort.putShort(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUTF8"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.calendarInstance"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getTime(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(4)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipLong.putLong(3)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LZERO"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipLong.ZIP64_MAGIC"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipLong.putLong(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(4)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getComment(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipEncoding.encode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)" "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField(4)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DD_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(1)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.Zip64RequiredException(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCentralDirectoryExtra(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getComment(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipEncoding.encode(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipShort.putShort(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUTF8"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.calendarInstance"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getTime(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(4)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipLong.putLong(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipLong.ZIP64_MAGIC"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipLong.putLong(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZERO"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(3)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(3)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZERO"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.Zip64RequiredException(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdOffset"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdLength"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.comment"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.ZipEncoding.encode(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(3)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdOffset"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdLength"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getTotalBytesWritten(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LZERO"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ONE"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(3)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(3)" "org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(3)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.useUTF8Flag"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(2)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$502(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(1)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(1)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(1)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUTF8"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(1)" "org.apache.commons.compress.archivers.zip.ZipEncoding.encode(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.out"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EMPTY"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZERO"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LZERO"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ONE"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG"
call "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.DD_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DD_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.BUFFER_SIZE"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_VERSION_NEEDED_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_GPB_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_METHOD_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_TIME_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_CRC_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_COMPRESSED_SIZE_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_ORIGINAL_SIZE_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_FILENAME_LENGTH_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_EXTRA_LENGTH_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_FILENAME_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_VERSION_MADE_BY_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_VERSION_NEEDED_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_GPB_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_METHOD_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_TIME_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_CRC_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_COMPRESSED_SIZE_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_ORIGINAL_SIZE_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_FILENAME_LENGTH_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_EXTRA_LENGTH_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_COMMENT_LENGTH_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_DISK_NUMBER_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_INTERNAL_ATTRIBUTES_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_EXTERNAL_ATTRIBUTES_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_LFH_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_FILENAME_OFFSET"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DEFLATED"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DEFAULT_COMPRESSION"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.STORED"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DEFAULT_ENCODING"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EFS_FLAG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EMPTY" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EMPTY"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.comment"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.level"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasCompressionLevelChanged"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.method"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdOffset"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdLength"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZERO" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZERO"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LZERO" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LZERO"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ONE" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ONE"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.encoding"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.def"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.out"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.useUTF8Flag"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUTF8"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode" "org.apache.commons.compress.archivers.zip.Zip64Mode"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyBuffer" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyBuffer"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.calendarInstance"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DD_SIG" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DD_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_SIG" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.2" "org.apache.commons.compress.archivers.ArchiveStreamProvider"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.2" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory.2" "org.apache.commons.compress.archivers.ArchiveStreamFactory.2.{...}"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.2.run(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.access$000(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.2.run(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.2.run(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(3)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.2.run(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.access$100(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.2.run(0)" "org.apache.commons.compress.archivers.ArchiveStreamProvider.getOutputStreamArchiveNames(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory.2" "org.apache.commons.compress.archivers.ArchiveStreamFactory.2.run(0)"
reference "org.apache.commons.compress.compressors.CompressorStreamProvider" "org.apache.commons.compress.compressors.CompressorException"
contain "org.apache.commons.compress.compressors.CompressorStreamProvider" "org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(3)"
contain "org.apache.commons.compress.compressors.CompressorStreamProvider" "org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorOutputStream(2)"
contain "org.apache.commons.compress.compressors.CompressorStreamProvider" "org.apache.commons.compress.compressors.CompressorStreamProvider.getInputStreamCompressorNames(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamProvider" "org.apache.commons.compress.compressors.CompressorStreamProvider.getOutputStreamCompressorNames(0)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.1" "org.apache.commons.compress.archivers.ArchiveStreamProvider"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.1" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory.1" "org.apache.commons.compress.archivers.ArchiveStreamFactory.1.{...}"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.1.run(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.access$000(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.1.run(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.1.run(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(3)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.1.run(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.access$100(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.1.run(0)" "org.apache.commons.compress.archivers.ArchiveStreamProvider.getInputStreamArchiveNames(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory.1" "org.apache.commons.compress.archivers.ArchiveStreamFactory.1.run(0)"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.ZipLong"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.X0017_StrongEncryptionHeader(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.X0017_StrongEncryptionHeader(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.PKWareExtraHeader(1)"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.X0017_StrongEncryptionHeader(0)"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getRecordCount(0)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.rcount"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getRecordCount(0)"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getHashAlgorithm(0)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.hashAlg"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getHashAlgorithm(0)"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getEncryptionAlgorithm(0)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.algId"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getEncryptionAlgorithm(0)"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(2)"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.format"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.getAlgorithmByCode(1)"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.algId"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.bitlen"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.flags"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(2)"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.rcount"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode(1)"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.hashAlg"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.hashSize"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(2)"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.ivData"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.format"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.getAlgorithmByCode(1)"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.algId"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.bitlen"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.flags"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.erdData"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(2)"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.rcount"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.vData"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.vCRC32"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode(1)"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.hashAlg"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.hashSize"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.recipientKeyHash"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.keyBlob"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(3)"
call "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(3)"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.format"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.algId" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.algId"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.bitlen"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.flags"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.rcount"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.hashAlg" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.hashAlg"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.hashSize"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.ivData" "byte[]"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.ivData"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.erdData" "byte[]"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.erdData"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.recipientKeyHash" "byte[]"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.recipientKeyHash"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.keyBlob" "byte[]"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.keyBlob"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.vData" "byte[]"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.vData"
reference "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.vCRC32" "byte[]"
contain "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader" "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.vCRC32"
contain "org.apache.commons.compress.compressors.CompressorException" "org.apache.commons.compress.compressors.CompressorException.CompressorException(1)"
contain "org.apache.commons.compress.compressors.CompressorException" "org.apache.commons.compress.compressors.CompressorException.CompressorException(2)"
contain "org.apache.commons.compress.compressors.CompressorException" "org.apache.commons.compress.compressors.CompressorException.serialVersionUID"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.CompressedEntry(4)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.zipArchiveEntryRequest"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.CompressedEntry(4)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.crc"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.CompressedEntry(4)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.compressedSize"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.CompressedEntry(4)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.size"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.CompressedEntry(4)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.zipArchiveEntryRequest"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getZipArchiveEntry(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.compressedSize"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCompressedSize(1)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.size"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.crc"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(1)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.zipArchiveEntryRequest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.zipArchiveEntryRequest"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.crc"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.compressedSize"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.size"
contain "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo" "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.SubStreamsInfo(0)"
reference "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.unpackSizes" "long[]"
contain "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo" "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.unpackSizes"
contain "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo" "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.hasCrc"
reference "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.crcs" "long[]"
contain "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo" "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.crcs"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.utils.BoundedInputStream"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "byte[]"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(1)" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.STANDARD"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(1)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.oneByte"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.expectedChecksum"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.PureJavaCrc32C(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.checksum"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.in"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.dialect"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.hasStreamIdentifier(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(2)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier(0)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(2)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.oneByte"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(3)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.currentCompressedChunk"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.close(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.in"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.endReached"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(3)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.inUncompressedChunk"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.uncompressedBytesRemaining"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.in"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.currentCompressedChunk"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.available(0)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.inUncompressedChunk"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.uncompressedBytesRemaining"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.in"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.count(1)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.currentCompressedChunk"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.getBytesRead(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(3)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.close(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.count(1)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.checksum"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(3)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.verifyLastChecksumAndReset(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.inUncompressedChunk"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOneByte(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.endReached"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.in"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.pushedBackBytes(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.skipBlock(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readSize(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.uncompressedBytesRemaining"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readCrc(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(1)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.expectedChecksum"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.dialect"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.usesChecksumWithCompressedChunks(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.utils.BoundedInputStream.BoundedInputStream(2)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(1)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.currentCompressedChunk"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.getBytesRead(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readCrc(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.in"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readCrc(0)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readCrc(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readCrc(0)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readSize(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOneByte(0)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readSize(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.skipBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readSize(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.skipBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.in"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.skipBlock(0)" "org.apache.commons.compress.utils.IOUtils.skip(2)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.skipBlock(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.skipBlock(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.in"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier(0)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.count(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(2)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOneByte(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.in"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOneByte(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOneByte(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.verifyLastChecksumAndReset(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.expectedChecksum"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.verifyLastChecksumAndReset(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.checksum"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.verifyLastChecksumAndReset(0)" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.getValue(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.verifyLastChecksumAndReset(0)" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.reset(0)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.verifyLastChecksumAndReset(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(2)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.SZ_SIGNATURE"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(2)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.static {...}" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.SZ_SIGNATURE"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.static {...}"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.MASK_OFFSET"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.STREAM_IDENTIFIER_TYPE"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.COMPRESSED_CHUNK_TYPE"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.UNCOMPRESSED_CHUNK_TYPE"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.PADDING_CHUNK_TYPE"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.MIN_UNSKIPPABLE_TYPE"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.MAX_UNSKIPPABLE_TYPE"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.MAX_SKIPPABLE_TYPE"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.SZ_SIGNATURE" "byte[]"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.SZ_SIGNATURE"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.in"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.dialect" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.dialect"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.currentCompressedChunk" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.currentCompressedChunk"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.oneByte" "byte[]"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.oneByte"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.endReached"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.inUncompressedChunk"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.uncompressedBytesRemaining"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.expectedChecksum"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.checksum" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.checksum"
reference "org.apache.commons.compress.utils.IOUtils" "byte[]"
contain "org.apache.commons.compress.utils.IOUtils" "org.apache.commons.compress.utils.IOUtils.IOUtils(0)"
call "org.apache.commons.compress.utils.IOUtils.copy(2)" "org.apache.commons.compress.utils.IOUtils.copy(3)"
contain "org.apache.commons.compress.utils.IOUtils" "org.apache.commons.compress.utils.IOUtils.copy(2)"
contain "org.apache.commons.compress.utils.IOUtils" "org.apache.commons.compress.utils.IOUtils.copy(3)"
reference "org.apache.commons.compress.utils.IOUtils.skip(2)" "org.apache.commons.compress.utils.IOUtils.SKIP_BUF"
call "org.apache.commons.compress.utils.IOUtils.skip(2)" "org.apache.commons.compress.utils.IOUtils.readFully(4)"
contain "org.apache.commons.compress.utils.IOUtils" "org.apache.commons.compress.utils.IOUtils.skip(2)"
call "org.apache.commons.compress.utils.IOUtils.readFully(2)" "org.apache.commons.compress.utils.IOUtils.readFully(4)"
contain "org.apache.commons.compress.utils.IOUtils" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
contain "org.apache.commons.compress.utils.IOUtils" "org.apache.commons.compress.utils.IOUtils.readFully(4)"
contain "org.apache.commons.compress.utils.IOUtils" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
call "org.apache.commons.compress.utils.IOUtils.toByteArray(1)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
contain "org.apache.commons.compress.utils.IOUtils" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
contain "org.apache.commons.compress.utils.IOUtils" "org.apache.commons.compress.utils.IOUtils.closeQuietly(1)"
reference "org.apache.commons.compress.utils.IOUtils.static {...}" "org.apache.commons.compress.utils.IOUtils.SKIP_BUF"
contain "org.apache.commons.compress.utils.IOUtils" "org.apache.commons.compress.utils.IOUtils.static {...}"
contain "org.apache.commons.compress.utils.IOUtils" "org.apache.commons.compress.utils.IOUtils.COPY_BUF_SIZE"
contain "org.apache.commons.compress.utils.IOUtils" "org.apache.commons.compress.utils.IOUtils.SKIP_BUF_SIZE"
reference "org.apache.commons.compress.utils.IOUtils.SKIP_BUF" "byte[]"
contain "org.apache.commons.compress.utils.IOUtils" "org.apache.commons.compress.utils.IOUtils.SKIP_BUF"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.ZipExtraField"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "byte[]"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.ZipUtil"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.UnrecognizedExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(1)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.headerId"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(1)"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getHeaderId(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.headerId"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.copy(1)"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(1)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.localData"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(1)"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.localData"
call "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataLength(0)"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.localData"
call "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.copy(1)"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataData(0)"
call "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.copy(1)"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(1)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.centralData"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(1)"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.centralData"
call "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataLength(0)"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryLength(0)"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.centralData"
call "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.copy(1)"
call "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataData(0)"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryData(0)"
call "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(1)"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(1)"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.localData"
call "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(1)"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(3)"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.headerId" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.headerId"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.localData" "byte[]"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.localData"
reference "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.centralData" "byte[]"
contain "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.centralData"
reference "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder" "org.apache.commons.compress.archivers.sevenz.CoderBase"
reference "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder" "org.apache.commons.compress.archivers.sevenz.Coders"
call "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.CopyDecoder(0)" "org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(1)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder" "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.CopyDecoder(0)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder" "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.decode(5)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder" "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.encode(2)"
reference "org.apache.commons.compress.archivers.ArchiveStreamProvider" "org.apache.commons.compress.archivers.ArchiveException"
contain "org.apache.commons.compress.archivers.ArchiveStreamProvider" "org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(3)"
contain "org.apache.commons.compress.archivers.ArchiveStreamProvider" "org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(3)"
contain "org.apache.commons.compress.archivers.ArchiveStreamProvider" "org.apache.commons.compress.archivers.ArchiveStreamProvider.getInputStreamArchiveNames(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamProvider" "org.apache.commons.compress.archivers.ArchiveStreamProvider.getOutputStreamArchiveNames(0)"
reference "org.apache.commons.compress.archivers.jar.JarArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
call "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.manifestAttributes"
reference "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.certificates"
contain "org.apache.commons.compress.archivers.jar.JarArchiveEntry" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.manifestAttributes"
reference "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.certificates"
contain "org.apache.commons.compress.archivers.jar.JarArchiveEntry" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.manifestAttributes"
reference "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.certificates"
contain "org.apache.commons.compress.archivers.jar.JarArchiveEntry" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.manifestAttributes"
reference "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.certificates"
contain "org.apache.commons.compress.archivers.jar.JarArchiveEntry" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.jar.JarArchiveEntry.getManifestAttributes(0)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.manifestAttributes"
contain "org.apache.commons.compress.archivers.jar.JarArchiveEntry" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.getManifestAttributes(0)"
reference "org.apache.commons.compress.archivers.jar.JarArchiveEntry.getCertificates(0)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.certificates"
contain "org.apache.commons.compress.archivers.jar.JarArchiveEntry" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.getCertificates(0)"
contain "org.apache.commons.compress.archivers.jar.JarArchiveEntry" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.manifestAttributes"
contain "org.apache.commons.compress.archivers.jar.JarArchiveEntry" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.certificates"
contain "org.apache.commons.compress.archivers.sevenz.BindPair" "org.apache.commons.compress.archivers.sevenz.BindPair.BindPair(0)"
reference "org.apache.commons.compress.archivers.sevenz.BindPair.toString(0)" "org.apache.commons.compress.archivers.sevenz.BindPair.inIndex"
reference "org.apache.commons.compress.archivers.sevenz.BindPair.toString(0)" "org.apache.commons.compress.archivers.sevenz.BindPair.outIndex"
contain "org.apache.commons.compress.archivers.sevenz.BindPair" "org.apache.commons.compress.archivers.sevenz.BindPair.toString(0)"
contain "org.apache.commons.compress.archivers.sevenz.BindPair" "org.apache.commons.compress.archivers.sevenz.BindPair.inIndex"
contain "org.apache.commons.compress.archivers.sevenz.BindPair" "org.apache.commons.compress.archivers.sevenz.BindPair.outIndex"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveException"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.Dirent"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.InvalidFormatException"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "byte[]"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBuf"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.TapeInputStream.TapeInputStream(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.hasHitEOF"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.encoding"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.zipEncoding"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.UnrecognizedFormatException(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.summary"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getNTRec(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isCompressed(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(2)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.blockBuffer"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.Dirent.Dirent(4)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.{...}"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.queue"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getCount(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getBytesRead(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getCount(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getBytesRead(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getBytesRead(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.getBytesRead(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getBytesRead(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getSummary(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.summary"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getSummary(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)" "org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.active"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.CLRI"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.skip(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readIdx"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)" "org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.active"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.BITS"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.skip(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readIdx"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextDumpEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextDumpEntry(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.queue"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.hasHitEOF"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readIdx"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.active"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.skip(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.getBytesRead(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.filepos"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.ADDR"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderHoles(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.END"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entryOffset"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entrySize"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getEntrySize(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBuf"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.recordOffset"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getIno(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.Dirent.getName(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setOffset(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getEntrySize(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.ADDR"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getIno(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.INODE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.blockBuffer"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.read(3)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(2)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.zipEncoding"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(4)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.Dirent.Dirent(4)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.Dirent.getName(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.queue"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.peek(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getIno(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(1)" "org.apache.commons.compress.archivers.dump.Dirent.getName(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(1)" "org.apache.commons.compress.archivers.dump.Dirent.getIno(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(1)" "org.apache.commons.compress.archivers.dump.Dirent.getParentIno(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.hasHitEOF"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.isClosed"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entryOffset"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entrySize"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.active"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBuf"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.recordOffset"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readIdx"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.dump.TapeInputStream.read(3)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.close(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.isClosed"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.close(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.close(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.close(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(2)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.summary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.summary"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.active" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.active"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.isClosed"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.hasHitEOF"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entrySize"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entryOffset"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readIdx"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBuf" "byte[]"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBuf"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.blockBuffer" "byte[]"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.blockBuffer"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.recordOffset"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.filepos"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw" "org.apache.commons.compress.archivers.dump.TapeInputStream"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.queue"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.zipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.zipEncoding"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.encoding"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm[]"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.values(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.$VALUES"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.values(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm[].clone(0)"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.values(0)"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.valueOf(1)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.HashAlgorithm(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.code"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.HashAlgorithm(3)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getCode(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.code"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getCode(0)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode(1)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.codeToEnum"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode(1)"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.HashAlgorithm(3)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.NONE"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.CRC32"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.MD5"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA1"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.RIPEND160"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA256"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA384"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA512"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.$VALUES"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.values(0)"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getCode(0)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.codeToEnum"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.NONE" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.NONE"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.CRC32" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.CRC32"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.MD5" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.MD5"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA1" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA1"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.RIPEND160" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.RIPEND160"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA256" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA256"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA384" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA384"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA512" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA512"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.code"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.codeToEnum"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.$VALUES" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm[]"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.$VALUES"
contain "org.apache.commons.compress.archivers.zip.UnixStat" "org.apache.commons.compress.archivers.zip.UnixStat.PERM_MASK"
contain "org.apache.commons.compress.archivers.zip.UnixStat" "org.apache.commons.compress.archivers.zip.UnixStat.LINK_FLAG"
contain "org.apache.commons.compress.archivers.zip.UnixStat" "org.apache.commons.compress.archivers.zip.UnixStat.FILE_FLAG"
contain "org.apache.commons.compress.archivers.zip.UnixStat" "org.apache.commons.compress.archivers.zip.UnixStat.DIR_FLAG"
contain "org.apache.commons.compress.archivers.zip.UnixStat" "org.apache.commons.compress.archivers.zip.UnixStat.DEFAULT_LINK_PERM"
contain "org.apache.commons.compress.archivers.zip.UnixStat" "org.apache.commons.compress.archivers.zip.UnixStat.DEFAULT_DIR_PERM"
contain "org.apache.commons.compress.archivers.zip.UnixStat" "org.apache.commons.compress.archivers.zip.UnixStat.DEFAULT_FILE_PERM"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2Constants"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "int[][]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "char[][]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "int[]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.inUse"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.seqToUnseq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selector"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selectorMtf"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.unzftab"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.limit"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.base"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.perm"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.minLens"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.cftab"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.getAndMoveToFrontDecode_yy"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.temp_charArray2d"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.recvDecodingTables_pos"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.ll8"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.initTT(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.tt"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.initTT(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.inUse" "boolean[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.inUse"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.seqToUnseq" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.seqToUnseq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selector" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selector"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selectorMtf" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selectorMtf"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.unzftab" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.unzftab"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.limit" "int[][]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.limit"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.base" "int[][]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.base"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.perm" "int[][]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.perm"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.minLens" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.minLens"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.cftab" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.cftab"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.getAndMoveToFrontDecode_yy" "char[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.getAndMoveToFrontDecode_yy"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.temp_charArray2d" "char[][]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.temp_charArray2d"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.recvDecodingTables_pos" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.recvDecodingTables_pos"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.tt" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.tt"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.ll8" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.ll8"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.CRC"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2Constants"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BlockSort"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.CompressorOutputStream"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "byte[]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "int[]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "boolean[]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "byte[][]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "int[][]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "short[]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "char[]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(5)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.heap"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(5)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.weight"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(5)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.parent"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(5)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.chooseBlockSize(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(2)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(2)" "org.apache.commons.compress.compressors.CompressorOutputStream.CompressorOutputStream(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(2)" "org.apache.commons.compress.compressors.bzip2.CRC.CRC(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.crc"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.currentChar"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.runLength"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSize100k"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.allowableBlockSize"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(2)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.closed"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(1)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.last"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.allowableBlockSize"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.currentChar"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.inUse"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.runLength"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.crc"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)" "org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(2)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finalize(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.closed"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finalize(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.closed"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.runLength"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.currentChar"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endCompression(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSorter"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.closed"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.close(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.flush(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.flush(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSize100k"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init(0)" "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSorter"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.combinedCRC"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.crc"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.CRC.initialiseCRC(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.last"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.inUse"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.crc"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.CRC.getFinalCRC(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockCRC"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.combinedCRC"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.last"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSort(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(2)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endCompression(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endCompression(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.combinedCRC"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endCompression(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endCompression(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsFinishedWithStream(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endCompression(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.getBlockSize(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSize100k"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.getBlockSize(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(3)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.closed"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(3)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(1)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(3)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.currentChar"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.runLength"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(1)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(5)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsFinishedWithStream(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsLive"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsFinishedWithStream(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsBuff"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsFinishedWithStream(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsFinishedWithStream(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsLive"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsBuff"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(2)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(2)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(2)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nInUse"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nMTF"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(2)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(2)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(2)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(2)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(2)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(2)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.mtfFreq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nMTF"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(2)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_rfreq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_fave"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_cost"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sfmap"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selector"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nMTF"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(5)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(2)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues2_pos"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selector"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selectorMtf"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(2)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_code"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(5)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(2)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.inUse"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sentMTFValues4_inUse16"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(2)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsLive"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsBuff"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(2)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selectorMtf"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsLive"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsBuff"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(2)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsLive"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsBuff"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(2)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_code"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selector"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sfmap"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nMTF"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsLive"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsBuff"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.origPtr"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(2)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSort(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSorter"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSort(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSort(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.last"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(2)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSort(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.last"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.inUse"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.fmap"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sfmap"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.mtfFreq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.unseqToSeq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.generateMTFValues_yy"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nInUse"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nMTF"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.MIN_BLOCKSIZE"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.MAX_BLOCKSIZE"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.GREATER_ICOST"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.LESSER_ICOST"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.last"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSize100k"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsBuff"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsLive"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.crc" "org.apache.commons.compress.compressors.bzip2.CRC"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.crc"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nInUse"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nMTF"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.currentChar"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.runLength"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockCRC"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.combinedCRC"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.allowableBlockSize"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSorter" "org.apache.commons.compress.compressors.bzip2.BlockSort"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSorter"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.closed"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability[]"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability" "org.apache.commons.compress.compressors.lzma.LZMAUtils"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.values(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.$VALUES"
call "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.values(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability[].clone(0)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.values(0)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.valueOf(1)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CachedAvailability(2)"
call "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.static {...}" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CachedAvailability(2)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.static {...}" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.DONT_CACHE"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.static {...}" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_AVAILABLE"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.static {...}" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.static {...}" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.$VALUES"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.static {...}"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.DONT_CACHE" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.DONT_CACHE"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_AVAILABLE" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_AVAILABLE"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.$VALUES" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability[]"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.$VALUES"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes" "org.apache.commons.compress.archivers.arj.LocalFileHeader"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes" "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes.FileTypes(0)"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes" "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes.BINARY"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes" "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes.SEVEN_BIT_TEXT"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes" "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes.DIRECTORY"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes" "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes.VOLUME_LABEL"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes" "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes.CHAPTER_LABEL"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BZip2Constants"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort" "int[]"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort" "byte[]"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort" "char[]"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort" "boolean[]"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)" "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_ll"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)" "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_hh"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)" "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_dd"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_runningOrder"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_copy"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_bigDone"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)" "org.apache.commons.compress.compressors.bzip2.BlockSort.ftab"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sfmap"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)" "org.apache.commons.compress.compressors.bzip2.BlockSort.quadrant"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.workLimit"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.workDone"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.firstAttempt"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(2)"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.fmap"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.origPtr"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(2)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.fmap"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(3)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(2)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(4)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(3)"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(4)" "org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(3)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(4)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.fmin(2)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(3)" "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_ll"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(3)" "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_hh"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(3)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(1)" "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_ll"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(1)" "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_hh"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(1)"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(4)" "org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(3)"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(4)" "org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(1)"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(4)" "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(4)"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(4)" "org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(3)"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(4)" "org.apache.commons.compress.compressors.bzip2.BlockSort.fmin(2)"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(4)" "org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(4)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(4)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass(0)" "org.apache.commons.compress.compressors.bzip2.BlockSort.eclass"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass(0)" "org.apache.commons.compress.compressors.bzip2.BlockSort.quadrant"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(3)" "org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(3)" "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(4)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(3)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(5)" "org.apache.commons.compress.compressors.bzip2.BlockSort.firstAttempt"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(5)" "org.apache.commons.compress.compressors.bzip2.BlockSort.workDone"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(5)" "org.apache.commons.compress.compressors.bzip2.BlockSort.workLimit"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(5)" "org.apache.commons.compress.compressors.bzip2.BlockSort.INCS"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(5)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.fmap"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(5)" "org.apache.commons.compress.compressors.bzip2.BlockSort.quadrant"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(5)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(5)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(4)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.med3(3)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(5)" "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_ll"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(5)" "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_hh"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(5)" "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_dd"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(5)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.fmap"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(5)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(5)" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(5)"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(5)" "org.apache.commons.compress.compressors.bzip2.BlockSort.med3(3)"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(5)" "org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(4)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(5)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_runningOrder"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_copy"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_bigDone"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.ftab"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.fmap"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.quadrant"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.workLimit"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.firstAttempt"
call "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(5)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)" "org.apache.commons.compress.compressors.bzip2.BlockSort.workDone"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.static {...}" "org.apache.commons.compress.compressors.bzip2.BlockSort.INCS"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.static {...}"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.QSORT_STACK_SIZE"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.FALLBACK_QSORT_STACK_SIZE"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.STACK_SIZE"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.workDone"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.workLimit"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.firstAttempt"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_ll" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_ll"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_hh" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_hh"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_dd" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_dd"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_runningOrder" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_runningOrder"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_copy" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_copy"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_bigDone" "boolean[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_bigDone"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.ftab" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.ftab"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.quadrant" "char[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.quadrant"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.FALLBACK_QSORT_SMALL_THRESH"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.eclass" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.eclass"
reference "org.apache.commons.compress.compressors.bzip2.BlockSort.INCS" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.INCS"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.SMALL_THRESH"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.DEPTH_THRESH"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.WORK_FACTOR"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.SETMASK"
contain "org.apache.commons.compress.compressors.bzip2.BlockSort" "org.apache.commons.compress.compressors.bzip2.BlockSort.CLEARMASK"
reference "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.BindPair"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.Folder(0)"
reference "org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders(0)" "org.apache.commons.compress.archivers.sevenz.Folder.packedStreams"
reference "org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders(0)" "org.apache.commons.compress.archivers.sevenz.Folder.coders"
call "org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders(0)" "org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(1)"
reference "org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders(0)" "org.apache.commons.compress.archivers.sevenz.Folder.bindPairs"
reference "org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders(0)" "org.apache.commons.compress.archivers.sevenz.BindPair.inIndex"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders(0)"
reference "org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(1)" "org.apache.commons.compress.archivers.sevenz.Folder.bindPairs"
reference "org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(1)" "org.apache.commons.compress.archivers.sevenz.BindPair.inIndex"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(1)"
reference "org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(1)" "org.apache.commons.compress.archivers.sevenz.Folder.bindPairs"
reference "org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(1)" "org.apache.commons.compress.archivers.sevenz.BindPair.outIndex"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(1)"
reference "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize(0)" "org.apache.commons.compress.archivers.sevenz.Folder.totalOutputStreams"
call "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize(0)" "org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(1)"
reference "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize(0)" "org.apache.commons.compress.archivers.sevenz.Folder.unpackSizes"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize(0)"
reference "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(1)" "org.apache.commons.compress.archivers.sevenz.Folder.coders"
reference "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(1)" "org.apache.commons.compress.archivers.sevenz.Folder.unpackSizes"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(1)"
reference "org.apache.commons.compress.archivers.sevenz.Folder.toString(0)" "org.apache.commons.compress.archivers.sevenz.Folder.coders"
reference "org.apache.commons.compress.archivers.sevenz.Folder.toString(0)" "org.apache.commons.compress.archivers.sevenz.Folder.totalInputStreams"
reference "org.apache.commons.compress.archivers.sevenz.Folder.toString(0)" "org.apache.commons.compress.archivers.sevenz.Folder.totalOutputStreams"
reference "org.apache.commons.compress.archivers.sevenz.Folder.toString(0)" "org.apache.commons.compress.archivers.sevenz.Folder.bindPairs"
reference "org.apache.commons.compress.archivers.sevenz.Folder.toString(0)" "org.apache.commons.compress.archivers.sevenz.Folder.packedStreams"
reference "org.apache.commons.compress.archivers.sevenz.Folder.toString(0)" "org.apache.commons.compress.archivers.sevenz.Folder.unpackSizes"
reference "org.apache.commons.compress.archivers.sevenz.Folder.toString(0)" "org.apache.commons.compress.archivers.sevenz.Folder.hasCrc"
reference "org.apache.commons.compress.archivers.sevenz.Folder.toString(0)" "org.apache.commons.compress.archivers.sevenz.Folder.crc"
reference "org.apache.commons.compress.archivers.sevenz.Folder.toString(0)" "org.apache.commons.compress.archivers.sevenz.Folder.numUnpackSubStreams"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.toString(0)"
reference "org.apache.commons.compress.archivers.sevenz.Folder.coders" "org.apache.commons.compress.archivers.sevenz.Coder[]"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.coders"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.totalInputStreams"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.totalOutputStreams"
reference "org.apache.commons.compress.archivers.sevenz.Folder.bindPairs" "org.apache.commons.compress.archivers.sevenz.BindPair[]"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.bindPairs"
reference "org.apache.commons.compress.archivers.sevenz.Folder.packedStreams" "long[]"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.packedStreams"
reference "org.apache.commons.compress.archivers.sevenz.Folder.unpackSizes" "long[]"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.unpackSizes"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.hasCrc"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.crc"
contain "org.apache.commons.compress.archivers.sevenz.Folder" "org.apache.commons.compress.archivers.sevenz.Folder.numUnpackSubStreams"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.ZipConstants"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.ZipLong"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.ZipExtraField"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "byte[]"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(2)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(4)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(4)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(4)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(4)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(4)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(4)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getHeaderId(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getHeaderId(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataLength(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.EMPTY"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataData(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(3)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.rawCentralDirectoryData"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(4)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.rawCentralDirectoryData"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(4)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(4)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(4)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(4)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(4)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(4)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(4)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(1)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(1)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(1)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setDiskStartNumber(1)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setDiskStartNumber(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(1)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(1)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(1)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.static {...}" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.static {...}" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.static {...}" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.EMPTY"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.static {...}"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.LFH_MUST_HAVE_BOTH_SIZES_MSG"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.EMPTY" "byte[]"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.EMPTY"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.rawCentralDirectoryData" "byte[]"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.rawCentralDirectoryData"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarConstants"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.utils.CountingOutputStream"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "byte[]"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(3)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(3)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.longFileMode"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.bigNumberMode"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closed"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.haveUnclosedEntry"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForNonAsciiNames"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.utils.CountingOutputStream.CountingOutputStream(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.out"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.encoding"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.zipEncoding"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemLen"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemBuf"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordBuf"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordSize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsPerBlock"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.longFileMode"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.bigNumberMode"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForNonAsciiNames"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getCount(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getBytesWritten(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getCount(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getBytesWritten(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.out"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getBytesWritten(0)" "org.apache.commons.compress.utils.CountingOutputStream.getBytesWritten(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getBytesWritten(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.haveUnclosedEntry"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeEOFRecord(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.padAsNeeded(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.out"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finished"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closed"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.out"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getRecordSize(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordSize"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getRecordSize(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finished"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(6)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.bigNumberMode"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForNonAsciiNames"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.ASCII"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isLink(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(3)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordBuf"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.zipEncoding"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currBytes"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currSize"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currName"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.haveUnclosedEntry"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finished"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.haveUnclosedEntry"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemLen"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemBuf"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currBytes"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currSize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currName"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.haveUnclosedEntry"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currBytes"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currSize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currName"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemLen"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordBuf"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemBuf"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(2)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(3)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.shouldBeReplaced(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.shouldBeReplaced(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeEOFRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordBuf"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeEOFRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeEOFRecord(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.flush(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.out"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.flush(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finished"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(2)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordSize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.out"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsWritten"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(2)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordSize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(2)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.out"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(2)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsWritten"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(2)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.padAsNeeded(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsWritten"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.padAsNeeded(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsPerBlock"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.padAsNeeded(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeEOFRecord(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.padAsNeeded(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(2)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(4)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongGroupId(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getModTime(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongUserId(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMajor(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMinor(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(2)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(3)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(2)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(4)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongGroupId(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getModTime(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongUserId(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMajor(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMinor(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(4)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(4)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(3)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(4)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(6)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.zipEncoding"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(6)" "org.apache.commons.compress.archivers.zip.ZipEncoding.encode(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(6)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.longFileMode"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(6)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(6)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(6)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(6)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(6)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(6)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(6)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(6)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getModTime(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.static {...}" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.ASCII"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.static {...}"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_ERROR"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_TRUNCATE"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_GNU"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_POSIX"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.BIGNUMBER_ERROR"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.BIGNUMBER_STAR"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.BIGNUMBER_POSIX"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currSize"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currName"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currBytes"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordBuf" "byte[]"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordBuf"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemLen"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemBuf" "byte[]"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemBuf"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.longFileMode"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.bigNumberMode"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsWritten"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsPerBlock"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordSize"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closed"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.haveUnclosedEntry"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finished"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.out"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.zipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.zipEncoding"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.encoding"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForNonAsciiNames"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.ASCII" "org.apache.commons.compress.archivers.zip.ZipEncoding"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.ASCII"
contain "org.apache.commons.compress.archivers.sevenz.Archive" "org.apache.commons.compress.archivers.sevenz.Archive.Archive(0)"
reference "org.apache.commons.compress.archivers.sevenz.Archive.toString(0)" "org.apache.commons.compress.archivers.sevenz.Archive.packPos"
reference "org.apache.commons.compress.archivers.sevenz.Archive.toString(0)" "org.apache.commons.compress.archivers.sevenz.Archive.packSizes"
call "org.apache.commons.compress.archivers.sevenz.Archive.toString(0)" "org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(1)"
reference "org.apache.commons.compress.archivers.sevenz.Archive.toString(0)" "org.apache.commons.compress.archivers.sevenz.Archive.packCrcs"
reference "org.apache.commons.compress.archivers.sevenz.Archive.toString(0)" "org.apache.commons.compress.archivers.sevenz.Archive.folders"
call "org.apache.commons.compress.archivers.sevenz.Archive.toString(0)" "org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(1)"
reference "org.apache.commons.compress.archivers.sevenz.Archive.toString(0)" "org.apache.commons.compress.archivers.sevenz.Archive.files"
reference "org.apache.commons.compress.archivers.sevenz.Archive.toString(0)" "org.apache.commons.compress.archivers.sevenz.Archive.streamMap"
contain "org.apache.commons.compress.archivers.sevenz.Archive" "org.apache.commons.compress.archivers.sevenz.Archive.toString(0)"
contain "org.apache.commons.compress.archivers.sevenz.Archive" "org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(1)"
contain "org.apache.commons.compress.archivers.sevenz.Archive" "org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(1)"
contain "org.apache.commons.compress.archivers.sevenz.Archive" "org.apache.commons.compress.archivers.sevenz.Archive.packPos"
reference "org.apache.commons.compress.archivers.sevenz.Archive.packSizes" "long[]"
contain "org.apache.commons.compress.archivers.sevenz.Archive" "org.apache.commons.compress.archivers.sevenz.Archive.packSizes"
contain "org.apache.commons.compress.archivers.sevenz.Archive" "org.apache.commons.compress.archivers.sevenz.Archive.packCrcsDefined"
reference "org.apache.commons.compress.archivers.sevenz.Archive.packCrcs" "long[]"
contain "org.apache.commons.compress.archivers.sevenz.Archive" "org.apache.commons.compress.archivers.sevenz.Archive.packCrcs"
reference "org.apache.commons.compress.archivers.sevenz.Archive.folders" "org.apache.commons.compress.archivers.sevenz.Folder[]"
contain "org.apache.commons.compress.archivers.sevenz.Archive" "org.apache.commons.compress.archivers.sevenz.Archive.folders"
reference "org.apache.commons.compress.archivers.sevenz.Archive.subStreamsInfo" "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo"
contain "org.apache.commons.compress.archivers.sevenz.Archive" "org.apache.commons.compress.archivers.sevenz.Archive.subStreamsInfo"
reference "org.apache.commons.compress.archivers.sevenz.Archive.files" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry[]"
contain "org.apache.commons.compress.archivers.sevenz.Archive" "org.apache.commons.compress.archivers.sevenz.Archive.files"
reference "org.apache.commons.compress.archivers.sevenz.Archive.streamMap" "org.apache.commons.compress.archivers.sevenz.StreamMap"
contain "org.apache.commons.compress.archivers.sevenz.Archive" "org.apache.commons.compress.archivers.sevenz.Archive.streamMap"
reference "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader"
reference "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
call "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.X0016_CertificateIdForCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.X0016_CertificateIdForCentralDirectory(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.PKWareExtraHeader(1)"
contain "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory" "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.X0016_CertificateIdForCentralDirectory(0)"
reference "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.getRecordCount(0)" "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.rcount"
contain "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory" "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.getRecordCount(0)"
reference "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.getHashAlgorithm(0)" "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.hashAlg"
contain "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory" "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.getHashAlgorithm(0)"
call "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(2)"
reference "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.rcount"
call "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode(1)"
reference "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.hashAlg"
contain "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory" "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(3)"
contain "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory" "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.rcount"
reference "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.hashAlg" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
contain "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory" "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.hashAlg"
contain "org.apache.commons.compress.compressors.pack200.Pack200Utils" "org.apache.commons.compress.compressors.pack200.Pack200Utils.Pack200Utils(0)"
call "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(1)" "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(3)"
contain "org.apache.commons.compress.compressors.pack200.Pack200Utils" "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(1)"
call "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(2)" "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(3)"
contain "org.apache.commons.compress.compressors.pack200.Pack200Utils" "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(2)"
call "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(2)" "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(3)"
contain "org.apache.commons.compress.compressors.pack200.Pack200Utils" "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(2)"
contain "org.apache.commons.compress.compressors.pack200.Pack200Utils" "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(3)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.utils.BoundedInputStream"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.archivers.zip.StreamCompressor"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.parallel.ScatterGatherBackingStore"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ScatterZipOutputStream(2)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ScatterZipOutputStream(2)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.backingStore"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ScatterZipOutputStream(2)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.streamCompressor"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ScatterZipOutputStream(2)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getPayloadStream(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(2)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getCrc32(0)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesWrittenForLastEntry(0)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesRead(0)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.CompressedEntry(4)"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.backingStore"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)" "org.apache.commons.compress.parallel.ScatterGatherBackingStore.closeForWriting(0)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)" "org.apache.commons.compress.parallel.ScatterGatherBackingStore.getInputStream(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.compressedSize"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)" "org.apache.commons.compress.utils.BoundedInputStream.BoundedInputStream(2)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)" "org.apache.commons.compress.utils.BoundedInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.backingStore"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close(0)" "org.apache.commons.compress.parallel.ScatterGatherBackingStore.close(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.streamCompressor"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.close(0)"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(2)"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(1)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(2)" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.FileBasedScatterGatherBackingStore(1)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(2)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ScatterZipOutputStream(2)"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(2)"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.backingStore" "org.apache.commons.compress.parallel.ScatterGatherBackingStore"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.backingStore"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.streamCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.streamCompressor"
reference "org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.single"
reference "org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead"
contain "org.apache.commons.compress.archivers.ArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream(0)"
contain "org.apache.commons.compress.archivers.ArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.ArchiveInputStream.read(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.single"
call "org.apache.commons.compress.archivers.ArchiveInputStream.read(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.read(3)"
contain "org.apache.commons.compress.archivers.ArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream.read(0)"
call "org.apache.commons.compress.archivers.ArchiveInputStream.count(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.ArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream.count(1)"
reference "org.apache.commons.compress.archivers.ArchiveInputStream.count(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead"
contain "org.apache.commons.compress.archivers.ArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream.count(1)"
reference "org.apache.commons.compress.archivers.ArchiveInputStream.pushedBackBytes(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead"
contain "org.apache.commons.compress.archivers.ArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream.pushedBackBytes(1)"
reference "org.apache.commons.compress.archivers.ArchiveInputStream.getCount(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead"
contain "org.apache.commons.compress.archivers.ArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream.getCount(0)"
reference "org.apache.commons.compress.archivers.ArchiveInputStream.getBytesRead(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead"
contain "org.apache.commons.compress.archivers.ArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream.getBytesRead(0)"
contain "org.apache.commons.compress.archivers.ArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream.canReadEntryData(1)"
reference "org.apache.commons.compress.archivers.ArchiveInputStream.single" "byte[]"
contain "org.apache.commons.compress.archivers.ArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream.single"
contain "org.apache.commons.compress.archivers.ArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream.BYTE_MASK"
contain "org.apache.commons.compress.archivers.ArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException" "org.apache.commons.compress.archivers.zip.ZipMethod"
call "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.reason"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)"
call "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)" "org.apache.commons.compress.archivers.zip.ZipMethod.name(0)"
call "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.reason"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(1)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.reason"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(1)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(1)"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getFeature(0)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.reason"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getFeature(0)"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getEntry(0)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getEntry(0)"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.reason" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.reason"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.serialVersionUID"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.ZipExtraField"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "byte[]"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.ZipUtil"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.PKWareExtraHeader(1)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.headerId"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.PKWareExtraHeader(1)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getHeaderId(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.headerId"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setLocalFileDataData(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.copy(1)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setLocalFileDataData(1)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.localData"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setLocalFileDataData(1)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.localData"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataLength(0)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.localData"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.copy(1)"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataData(0)"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setCentralDirectoryData(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.copy(1)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setCentralDirectoryData(1)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.centralData"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setCentralDirectoryData(1)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.centralData"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataLength(0)"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryLength(0)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.centralData"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.copy(1)"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataData(0)"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryData(0)"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setLocalFileDataData(1)"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setCentralDirectoryData(1)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.localData"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setLocalFileDataData(1)"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(3)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.headerId" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.headerId"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.localData" "byte[]"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.localData"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.centralData" "byte[]"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.centralData"
reference "org.apache.commons.compress.archivers.zip.FallbackZipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding(0)" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.charsetName"
contain "org.apache.commons.compress.archivers.zip.FallbackZipEncoding" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding(0)"
reference "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding(1)" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.charsetName"
contain "org.apache.commons.compress.archivers.zip.FallbackZipEncoding" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding(1)"
contain "org.apache.commons.compress.archivers.zip.FallbackZipEncoding" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.canEncode(1)"
reference "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.encode(1)" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.charsetName"
contain "org.apache.commons.compress.archivers.zip.FallbackZipEncoding" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.encode(1)"
reference "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.decode(1)" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.charsetName"
contain "org.apache.commons.compress.archivers.zip.FallbackZipEncoding" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.decode(1)"
contain "org.apache.commons.compress.archivers.zip.FallbackZipEncoding" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.charsetName"
contain "org.apache.commons.compress.archivers.sevenz.StreamMap" "org.apache.commons.compress.archivers.sevenz.StreamMap.StreamMap(0)"
reference "org.apache.commons.compress.archivers.sevenz.StreamMap.toString(0)" "org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstPackStreamIndex"
reference "org.apache.commons.compress.archivers.sevenz.StreamMap.toString(0)" "org.apache.commons.compress.archivers.sevenz.StreamMap.packStreamOffsets"
reference "org.apache.commons.compress.archivers.sevenz.StreamMap.toString(0)" "org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstFileIndex"
reference "org.apache.commons.compress.archivers.sevenz.StreamMap.toString(0)" "org.apache.commons.compress.archivers.sevenz.StreamMap.fileFolderIndex"
contain "org.apache.commons.compress.archivers.sevenz.StreamMap" "org.apache.commons.compress.archivers.sevenz.StreamMap.toString(0)"
reference "org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstPackStreamIndex" "int[]"
contain "org.apache.commons.compress.archivers.sevenz.StreamMap" "org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstPackStreamIndex"
reference "org.apache.commons.compress.archivers.sevenz.StreamMap.packStreamOffsets" "long[]"
contain "org.apache.commons.compress.archivers.sevenz.StreamMap" "org.apache.commons.compress.archivers.sevenz.StreamMap.packStreamOffsets"
reference "org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstFileIndex" "int[]"
contain "org.apache.commons.compress.archivers.sevenz.StreamMap" "org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstFileIndex"
reference "org.apache.commons.compress.archivers.sevenz.StreamMap.fileFolderIndex" "int[]"
contain "org.apache.commons.compress.archivers.sevenz.StreamMap" "org.apache.commons.compress.archivers.sevenz.StreamMap.fileFolderIndex"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream" "org.apache.commons.compress.archivers.sevenz.Coders"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.DummyByteAddingInputStream(1)" "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.addDummyByte"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream" "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.DummyByteAddingInputStream(1)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.read(0)" "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.addDummyByte"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream" "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.read(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.read(3)" "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.addDummyByte"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream" "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.read(3)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream" "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.DummyByteAddingInputStream(2)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream" "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.addDummyByte"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.MAGIC_NEW"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.MAGIC_NEW_CRC"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.MAGIC_OLD_ASCII"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.MAGIC_OLD_BINARY"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_NEW"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_NEW_CRC"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_OLD_ASCII"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_OLD_BINARY"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_NEW_MASK"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_OLD_MASK"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.S_IFMT"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISSOCK"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISLNK"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISNWK"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISREG"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISBLK"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISDIR"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISCHR"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISFIFO"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISUID"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISGID"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISVTX"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IRUSR"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IWUSR"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IXUSR"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IRGRP"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IWGRP"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IXGRP"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IROTH"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IWOTH"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IXOTH"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.CPIO_TRAILER"
contain "org.apache.commons.compress.archivers.cpio.CpioConstants" "org.apache.commons.compress.archivers.cpio.CpioConstants.BLOCK_SIZE"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1" "org.apache.commons.compress.utils.CountingOutputStream"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.{...}" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.this$0"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.{...}" "org.apache.commons.compress.utils.CountingOutputStream.CountingOutputStream(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.{...}"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(1)" "org.apache.commons.compress.utils.CountingOutputStream.write(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.this$0"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$100(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(1)" "org.apache.commons.compress.utils.CountingOutputStream.write(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.this$0"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$100(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(3)" "org.apache.commons.compress.utils.CountingOutputStream.write(3)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(3)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.this$0"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(3)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$100(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(3)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.this$0" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.this$0"
reference "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipConstants"
reference "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)" "org.apache.commons.compress.archivers.zip.ZipLong.value"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
call "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(2)"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
call "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(2)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(2)"
reference "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(2)" "org.apache.commons.compress.archivers.zip.ZipLong.value"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(2)"
reference "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)" "org.apache.commons.compress.archivers.zip.ZipLong.value"
call "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(1)"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)" "org.apache.commons.compress.archivers.zip.ZipLong.value"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
call "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(1)" "org.apache.commons.compress.archivers.zip.ZipLong.putLong(3)"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(1)"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.putLong(3)"
reference "org.apache.commons.compress.archivers.zip.ZipLong.putLong(2)" "org.apache.commons.compress.archivers.zip.ZipLong.value"
call "org.apache.commons.compress.archivers.zip.ZipLong.putLong(2)" "org.apache.commons.compress.archivers.zip.ZipLong.putLong(3)"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.putLong(2)"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(2)"
call "org.apache.commons.compress.archivers.zip.ZipLong.getValue(1)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(2)"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(1)"
reference "org.apache.commons.compress.archivers.zip.ZipLong.equals(1)" "org.apache.commons.compress.archivers.zip.ZipLong.value"
call "org.apache.commons.compress.archivers.zip.ZipLong.equals(1)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.equals(1)"
reference "org.apache.commons.compress.archivers.zip.ZipLong.hashCode(0)" "org.apache.commons.compress.archivers.zip.ZipLong.value"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.hashCode(0)"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.clone(0)"
reference "org.apache.commons.compress.archivers.zip.ZipLong.toString(0)" "org.apache.commons.compress.archivers.zip.ZipLong.value"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.toString(0)"
call "org.apache.commons.compress.archivers.zip.ZipLong.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
reference "org.apache.commons.compress.archivers.zip.ZipLong.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipLong.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipLong.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.DD_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipLong.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.ZIP64_MAGIC"
reference "org.apache.commons.compress.archivers.zip.ZipLong.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.SINGLE_SEGMENT_SPLIT_MARKER"
reference "org.apache.commons.compress.archivers.zip.ZipLong.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.AED_SIG"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.static {...}"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.serialVersionUID"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_1"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_1_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_1_SHIFT"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_2"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_2_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_2_SHIFT"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_3"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_3_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_3_SHIFT"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.value"
reference "org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipLong.DD_SIG" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.DD_SIG"
reference "org.apache.commons.compress.archivers.zip.ZipLong.ZIP64_MAGIC" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.ZIP64_MAGIC"
reference "org.apache.commons.compress.archivers.zip.ZipLong.SINGLE_SEGMENT_SPLIT_MARKER" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.SINGLE_SEGMENT_SPLIT_MARKER"
reference "org.apache.commons.compress.archivers.zip.ZipLong.AED_SIG" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.ZipLong" "org.apache.commons.compress.archivers.zip.ZipLong.AED_SIG"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier.get(0)"
reference "org.apache.commons.compress.archivers.tar.TarUtils.1" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.tar.TarUtils.1" "byte[]"
reference "org.apache.commons.compress.archivers.tar.TarUtils.1" "org.apache.commons.compress.archivers.tar.TarUtils"
contain "org.apache.commons.compress.archivers.tar.TarUtils.1" "org.apache.commons.compress.archivers.tar.TarUtils.1.{...}"
contain "org.apache.commons.compress.archivers.tar.TarUtils.1" "org.apache.commons.compress.archivers.tar.TarUtils.1.canEncode(1)"
contain "org.apache.commons.compress.archivers.tar.TarUtils.1" "org.apache.commons.compress.archivers.tar.TarUtils.1.encode(1)"
contain "org.apache.commons.compress.archivers.tar.TarUtils.1" "org.apache.commons.compress.archivers.tar.TarUtils.1.decode(1)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor.DataOutputCompressor(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(1)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor.DataOutputCompressor(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor.raf"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor.DataOutputCompressor(2)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor.writeOut(3)" "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor.raf"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor.writeOut(3)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor.raf"
contain "org.apache.commons.compress.utils.CountingInputStream" "org.apache.commons.compress.utils.CountingInputStream.CountingInputStream(1)"
reference "org.apache.commons.compress.utils.CountingInputStream.read(0)" "org.apache.commons.compress.utils.CountingInputStream.in"
call "org.apache.commons.compress.utils.CountingInputStream.read(0)" "org.apache.commons.compress.utils.CountingInputStream.count(1)"
contain "org.apache.commons.compress.utils.CountingInputStream" "org.apache.commons.compress.utils.CountingInputStream.read(0)"
call "org.apache.commons.compress.utils.CountingInputStream.read(1)" "org.apache.commons.compress.utils.CountingInputStream.read(3)"
contain "org.apache.commons.compress.utils.CountingInputStream" "org.apache.commons.compress.utils.CountingInputStream.read(1)"
reference "org.apache.commons.compress.utils.CountingInputStream.read(3)" "org.apache.commons.compress.utils.CountingInputStream.in"
call "org.apache.commons.compress.utils.CountingInputStream.read(3)" "org.apache.commons.compress.utils.CountingInputStream.count(1)"
contain "org.apache.commons.compress.utils.CountingInputStream" "org.apache.commons.compress.utils.CountingInputStream.read(3)"
reference "org.apache.commons.compress.utils.CountingInputStream.count(1)" "org.apache.commons.compress.utils.CountingInputStream.bytesRead"
contain "org.apache.commons.compress.utils.CountingInputStream" "org.apache.commons.compress.utils.CountingInputStream.count(1)"
reference "org.apache.commons.compress.utils.CountingInputStream.getBytesRead(0)" "org.apache.commons.compress.utils.CountingInputStream.bytesRead"
contain "org.apache.commons.compress.utils.CountingInputStream" "org.apache.commons.compress.utils.CountingInputStream.getBytesRead(0)"
contain "org.apache.commons.compress.utils.CountingInputStream" "org.apache.commons.compress.utils.CountingInputStream.bytesRead"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder" "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder" "org.apache.commons.compress.archivers.sevenz.CoderBase"
reference "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder" "org.apache.commons.compress.archivers.sevenz.Coders"
call "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoder(0)" "org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(1)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoder(0)"
call "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.decode(5)" "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.DummyByteAddingInputStream(2)"
call "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.decode(5)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.{...}"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.decode(5)"
call "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.encode(2)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.numberOptionOrDefault(2)"
call "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.encode(2)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.{...}"
contain "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.encode(2)"
reference "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipConstants"
reference "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)" "org.apache.commons.compress.archivers.zip.ZipShort.value"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(2)"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(2)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(2)"
reference "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(2)" "org.apache.commons.compress.archivers.zip.ZipShort.value"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(2)"
reference "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(0)" "org.apache.commons.compress.archivers.zip.ZipShort.value"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)" "org.apache.commons.compress.archivers.zip.ZipShort.value"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
call "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(1)" "org.apache.commons.compress.archivers.zip.ZipShort.putShort(3)"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(1)"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.putShort(3)"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(2)"
call "org.apache.commons.compress.archivers.zip.ZipShort.getValue(1)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(2)"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(1)"
reference "org.apache.commons.compress.archivers.zip.ZipShort.equals(1)" "org.apache.commons.compress.archivers.zip.ZipShort.value"
call "org.apache.commons.compress.archivers.zip.ZipShort.equals(1)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.equals(1)"
reference "org.apache.commons.compress.archivers.zip.ZipShort.hashCode(0)" "org.apache.commons.compress.archivers.zip.ZipShort.value"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.hashCode(0)"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.clone(0)"
reference "org.apache.commons.compress.archivers.zip.ZipShort.toString(0)" "org.apache.commons.compress.archivers.zip.ZipShort.value"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.toString(0)"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.serialVersionUID"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.BYTE_1_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.BYTE_1_SHIFT"
contain "org.apache.commons.compress.archivers.zip.ZipShort" "org.apache.commons.compress.archivers.zip.ZipShort.value"
reference "org.apache.commons.compress.archivers.sevenz.CLI" "org.apache.commons.compress.archivers.sevenz.SevenZFile"
reference "org.apache.commons.compress.archivers.sevenz.CLI" "org.apache.commons.compress.archivers.sevenz.CLI.Mode"
contain "org.apache.commons.compress.archivers.sevenz.CLI" "org.apache.commons.compress.archivers.sevenz.CLI.CLI(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.main(1)" "org.apache.commons.compress.archivers.sevenz.CLI.usage(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.main(1)" "org.apache.commons.compress.archivers.sevenz.CLI.grabMode(1)"
call "org.apache.commons.compress.archivers.sevenz.CLI.main(1)" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.getMessage(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.main(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.CLI.main(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.CLI.main(1)" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.takeAction(2)"
call "org.apache.commons.compress.archivers.sevenz.CLI.main(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.CLI" "org.apache.commons.compress.archivers.sevenz.CLI.main(1)"
contain "org.apache.commons.compress.archivers.sevenz.CLI" "org.apache.commons.compress.archivers.sevenz.CLI.usage(0)"
reference "org.apache.commons.compress.archivers.sevenz.CLI.grabMode(1)" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.LIST"
contain "org.apache.commons.compress.archivers.sevenz.CLI" "org.apache.commons.compress.archivers.sevenz.CLI.grabMode(1)"
contain "org.apache.commons.compress.archivers.sevenz.CLI" "org.apache.commons.compress.archivers.sevenz.CLI.access$100(0)"
reference "org.apache.commons.compress.archivers.sevenz.CLI.static {...}" "org.apache.commons.compress.archivers.sevenz.CLI.BUF"
contain "org.apache.commons.compress.archivers.sevenz.CLI" "org.apache.commons.compress.archivers.sevenz.CLI.static {...}"
reference "org.apache.commons.compress.archivers.sevenz.CLI.BUF" "byte[]"
contain "org.apache.commons.compress.archivers.sevenz.CLI" "org.apache.commons.compress.archivers.sevenz.CLI.BUF"
reference "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarConstants"
reference "org.apache.commons.compress.archivers.tar.TarUtils" "byte[]"
reference "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.TarUtils(0)"
call "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(3)" "org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(5)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(3)"
call "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(3)" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(3)"
call "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(3)" "org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(4)"
call "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(3)" "org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(4)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(3)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(4)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(4)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(2)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(5)"
reference "org.apache.commons.compress.archivers.tar.TarUtils.parseName(3)" "org.apache.commons.compress.archivers.tar.TarUtils.DEFAULT_ENCODING"
call "org.apache.commons.compress.archivers.tar.TarUtils.parseName(3)" "org.apache.commons.compress.archivers.tar.TarUtils.parseName(4)"
reference "org.apache.commons.compress.archivers.tar.TarUtils.parseName(3)" "org.apache.commons.compress.archivers.tar.TarUtils.FALLBACK_ENCODING"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.parseName(3)"
call "org.apache.commons.compress.archivers.tar.TarUtils.parseName(4)" "org.apache.commons.compress.archivers.zip.ZipEncoding.decode(1)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.parseName(4)"
reference "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(4)" "org.apache.commons.compress.archivers.tar.TarUtils.DEFAULT_ENCODING"
call "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(4)" "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(5)"
reference "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(4)" "org.apache.commons.compress.archivers.tar.TarUtils.FALLBACK_ENCODING"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(4)"
call "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(5)" "org.apache.commons.compress.archivers.zip.ZipEncoding.encode(1)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(5)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(4)"
call "org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(4)" "org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(4)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(4)"
call "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(4)" "org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(4)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(4)"
call "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(4)" "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(4)"
call "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(4)" "org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(5)"
call "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(4)" "org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(5)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(4)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(5)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(5)"
call "org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(4)" "org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(4)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(4)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(1)"
call "org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(1)" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(3)"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(1)"
call "org.apache.commons.compress.archivers.tar.TarUtils.static {...}" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.tar.TarUtils.static {...}" "org.apache.commons.compress.archivers.tar.TarUtils.DEFAULT_ENCODING"
call "org.apache.commons.compress.archivers.tar.TarUtils.static {...}" "org.apache.commons.compress.archivers.tar.TarUtils.1.{...}"
reference "org.apache.commons.compress.archivers.tar.TarUtils.static {...}" "org.apache.commons.compress.archivers.tar.TarUtils.FALLBACK_ENCODING"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.static {...}"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.BYTE_MASK"
reference "org.apache.commons.compress.archivers.tar.TarUtils.DEFAULT_ENCODING" "org.apache.commons.compress.archivers.zip.ZipEncoding"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.DEFAULT_ENCODING"
reference "org.apache.commons.compress.archivers.tar.TarUtils.FALLBACK_ENCODING" "org.apache.commons.compress.archivers.zip.ZipEncoding"
contain "org.apache.commons.compress.archivers.tar.TarUtils" "org.apache.commons.compress.archivers.tar.TarUtils.FALLBACK_ENCODING"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.DumpArchiveConstants(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.TP_SIZE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.NTREC"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.HIGH_DENSITY_NTREC"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.OFS_MAGIC"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.NFS_MAGIC"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.FS_UFS2_MAGIC"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.CHECKSUM"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.LBLSIZE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.NAMELEN"
reference "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.tukaani.xz.LZMA2Options"
reference "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.tukaani.xz.LZMA2InputStream"
reference "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.tukaani.xz.FinishableWrapperOutputStream"
reference "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.apache.commons.compress.archivers.sevenz.CoderBase"
reference "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.apache.commons.compress.archivers.sevenz.Coder"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.LZMA2Decoder(0)" "org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(1)"
contain "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.LZMA2Decoder(0)"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(5)" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(5)" "org.tukaani.xz.LZMA2InputStream.LZMA2InputStream(2)"
contain "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(5)"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(2)" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(2)" "org.tukaani.xz.FinishableWrapperOutputStream.FinishableWrapperOutputStream(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(2)" "org.tukaani.xz.LZMA2Options.getOutputStream(1)"
contain "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(2)"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsAsProperties(1)" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(1)"
contain "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsAsProperties(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(2)" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(1)"
contain "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(2)"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(1)" "org.tukaani.xz.LZMA2Options.getDictSize(0)"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(1)" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(1)"
contain "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(1)"
reference "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(1)" "org.apache.commons.compress.archivers.sevenz.Coder.properties"
contain "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(1)" "org.tukaani.xz.LZMA2Options.LZMA2Options(0)"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(1)" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(1)" "org.tukaani.xz.LZMA2Options.setDictSize(1)"
contain "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(1)"
call "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(1)" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(2)"
contain "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder" "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.ZipLong"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.ZipExtraField"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "byte[]"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.ZipUtil"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.X5455_ExtendedTimestamp(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getHeaderId(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getHeaderId(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit0_modifyTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit1_accessTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit2_createTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit0_modifyTimePresent"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit0_modifyTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit1_accessTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit2_createTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(0)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryData(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit0_modifyTimePresent"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(2)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit1_accessTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit2_createTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(3)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(3)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.flags"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit0_modifyTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit1_accessTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit2_createTimePresent"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getFlags(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.flags"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getFlags(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit0_modifyTimePresent(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit0_modifyTimePresent"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit0_modifyTimePresent(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit1_accessTimePresent(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit1_accessTimePresent"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit1_accessTimePresent(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit2_createTimePresent(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit2_createTimePresent"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit2_createTimePresent(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyTime(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessTime(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateTime(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessJavaTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessJavaTime(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessJavaTime(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateJavaTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateJavaTime(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateJavaTime(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit0_modifyTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.flags"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit1_accessTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.flags"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit2_createTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.flags"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(1)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(1)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(1)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(1)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.flags"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit0_modifyTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit1_accessTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessJavaTime(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit2_createTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateJavaTime(0)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.clone(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.flags"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(1)" "org.apache.commons.compress.archivers.zip.ZipLong.equals(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(1)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.flags"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode(0)" "org.apache.commons.compress.archivers.zip.ZipLong.hashCode(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.static {...}" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.static {...}" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.static {...}"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.serialVersionUID"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.MODIFY_TIME_BIT"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.ACCESS_TIME_BIT"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.CREATE_TIME_BIT"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.flags"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit0_modifyTimePresent"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit1_accessTimePresent"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit2_createTimePresent"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.1" "org.apache.commons.compress.compressors.CompressorStreamProvider"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.1" "org.apache.commons.compress.compressors.CompressorStreamFactory"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory.1" "org.apache.commons.compress.compressors.CompressorStreamFactory.1.{...}"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.1.run(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.access$000(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.1.run(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.1.run(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(3)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.1.run(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.access$100(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.1.run(0)" "org.apache.commons.compress.compressors.CompressorStreamProvider.getInputStreamCompressorNames(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory.1" "org.apache.commons.compress.compressors.CompressorStreamFactory.1.run(0)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.2" "org.apache.commons.compress.compressors.CompressorStreamProvider"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.2" "org.apache.commons.compress.compressors.CompressorStreamFactory"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory.2" "org.apache.commons.compress.compressors.CompressorStreamFactory.2.{...}"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.2.run(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.access$000(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.2.run(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.2.run(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(3)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.2.run(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.access$100(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.2.run(0)" "org.apache.commons.compress.compressors.CompressorStreamProvider.getOutputStreamCompressorNames(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory.2" "org.apache.commons.compress.compressors.CompressorStreamFactory.2.run(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarConstants"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "byte[]"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.utils.ArchiveUtils"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(3)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(2)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(2)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(3)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(3)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(3)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)" "org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.is"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.hasHitEOF"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.encoding"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.zipEncoding"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.recordSize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.blockSize"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.is"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecordSize(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.recordSize"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecordSize(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.available(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.available(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entrySize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.available(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entryOffset"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.available(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entrySize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entryOffset"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.is"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.markSupported(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.mark(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.reset(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.hasHitEOF"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.utils.IOUtils.skip(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.zipEncoding"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entryOffset"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entrySize"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongLinkEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.zip.ZipEncoding.decode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongNameEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGlobalPaxHeader(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readGlobalPaxHeaders(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxHeader(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isOldGNUSparse(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entrySize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.recordSize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.is"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding(0)" "org.apache.commons.compress.utils.IOUtils.skip(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.hasHitEOF"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.recordSize"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(1)" "org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(2)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.recordSize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.is"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord(0)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readGlobalPaxHeaders(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readGlobalPaxHeaders(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readGlobalPaxHeaders(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readGlobalPaxHeaders(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(1)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMinor(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMajor(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillStarSparseData(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse(0)" "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.TarArchiveSparseEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse(0)" "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.is"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.recordSize"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.pushedBackBytes(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.hasHitEOF"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entryOffset"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entrySize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.available(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.is"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSparse(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getCurrentEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getCurrentEntry(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setCurrentEntry(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setCurrentEntry(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isAtEOF(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.hasHitEOF"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isAtEOF(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setAtEOF(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.hasHitEOF"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setAtEOF(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getBytesRead(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.blockSize"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.is"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock(0)" "org.apache.commons.compress.utils.IOUtils.skip(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(2)" "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(4)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(2)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.SMALL_BUFFER_SIZE"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf" "byte[]"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.recordSize"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.blockSize"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.hasHitEOF"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entrySize"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entryOffset"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.is"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.zipEncoding" "org.apache.commons.compress.archivers.zip.ZipEncoding"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.zipEncoding"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.encoding"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStream" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.localDataStart"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.dataStart"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.bytesRead"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.causedUseOfZip64"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.entry"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$000(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$102(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$300(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$100(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$400(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$500(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$302(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$402(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$002(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$502(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.entry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.entry"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.localDataStart"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.dataStart"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.bytesRead"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.causedUseOfZip64"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.hasWritten"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier" "org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.DefaultBackingStoreSupplier(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.storeNum"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.DefaultBackingStoreSupplier(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.get(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.storeNum"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.get(0)" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.FileBasedScatterGatherBackingStore(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.get(0)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.DefaultBackingStoreSupplier(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.storeNum"
reference "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream" "org.apache.commons.compress.archivers.zip.JarMarker"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
reference "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(1)" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.jarMarkerAdded"
contain "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
reference "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(2)" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.jarMarkerAdded"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(2)" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.setEncoding(1)"
contain "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(2)"
reference "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.jarMarkerAdded"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.JarMarker.getInstance(0)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(1)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.jarMarkerAdded"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.{...}" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.this$0"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.{...}"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.compare(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOriginalName(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.compare(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.compare(2)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.this$0" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.this$0"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.SimpleEncodingHolder(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.highChars"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.SimpleEncodingHolder(1)"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.getEncoding(0)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.encoding"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.getEncoding(0)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.highChars"
call "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.getEncoding(0)" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(1)"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.getEncoding(0)"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.highChars" "char[]"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.highChars"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.encoding" "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.encoding"
reference "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability[]"
reference "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability" "org.apache.commons.compress.compressors.xz.XZUtils"
reference "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.values(0)" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.$VALUES"
call "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.values(0)" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability[].clone(0)"
contain "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.values(0)"
contain "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.valueOf(1)"
contain "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CachedAvailability(2)"
call "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.static {...}" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CachedAvailability(2)"
reference "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.static {...}" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.DONT_CACHE"
reference "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.static {...}" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_AVAILABLE"
reference "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.static {...}" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_UNAVAILABLE"
reference "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.static {...}" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.$VALUES"
contain "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.static {...}"
reference "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.DONT_CACHE" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability"
contain "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.DONT_CACHE"
reference "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_AVAILABLE" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability"
contain "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_AVAILABLE"
reference "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_UNAVAILABLE" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability"
contain "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_UNAVAILABLE"
reference "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.$VALUES" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability[]"
contain "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.$VALUES"
reference "org.apache.commons.compress.utils.CRC32VerifyingInputStream" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream"
call "org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(3)" "org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(3)"
contain "org.apache.commons.compress.utils.CRC32VerifyingInputStream" "org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(3)"
call "org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(3)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.ChecksumVerifyingInputStream(4)"
contain "org.apache.commons.compress.utils.CRC32VerifyingInputStream" "org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(3)"
reference "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore" "org.apache.commons.compress.parallel.ScatterGatherBackingStore"
reference "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.FileBasedScatterGatherBackingStore(1)" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.target"
reference "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.FileBasedScatterGatherBackingStore(1)" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.os"
contain "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.FileBasedScatterGatherBackingStore(1)"
reference "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.getInputStream(0)" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.target"
contain "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.getInputStream(0)"
reference "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closeForWriting(0)" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closed"
reference "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closeForWriting(0)" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.os"
contain "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closeForWriting(0)"
reference "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(3)" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.os"
contain "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(3)"
call "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.close(0)" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closeForWriting(0)"
reference "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.close(0)" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.target"
contain "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.close(0)"
contain "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.target"
contain "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.os"
contain "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closed"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.CompressorOutputStream"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200Strategy"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.StreamBridge"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(1)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(1)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(2)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(2)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(3)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(2)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(2)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(2)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(3)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(3)" "org.apache.commons.compress.compressors.CompressorOutputStream.CompressorOutputStream(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(3)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finished"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(3)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.originalOutput"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(3)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.newStreamBridge(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(3)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.streamBridge"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(3)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.properties"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(3)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(1)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(1)" "org.apache.commons.compress.compressors.pack200.StreamBridge.write(1)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(1)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(1)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(1)" "org.apache.commons.compress.compressors.pack200.StreamBridge.write(1)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(1)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(3)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(3)" "org.apache.commons.compress.compressors.pack200.StreamBridge.write(3)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(3)"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.stop(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.originalOutput"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.close(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finished"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.properties"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.originalOutput"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish(0)" "org.apache.commons.compress.utils.IOUtils.closeQuietly(1)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finished"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.originalOutput"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.streamBridge" "org.apache.commons.compress.compressors.pack200.StreamBridge"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.streamBridge"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.properties"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1.{...}" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1.this$0"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1.{...}"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1.close(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1.this$0" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1.this$0"
reference "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.BoundedSeekableByteChannelInputStream(2)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.channel"
reference "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.BoundedSeekableByteChannelInputStream(2)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.bytesRemaining"
reference "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.BoundedSeekableByteChannelInputStream(2)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.buffer"
contain "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.BoundedSeekableByteChannelInputStream(2)"
reference "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(0)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.bytesRemaining"
call "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(0)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(1)"
reference "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(0)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.buffer"
contain "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(0)"
reference "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(3)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.bytesRemaining"
reference "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(3)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.buffer"
call "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(3)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(1)"
reference "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(3)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.channel"
contain "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(3)"
reference "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(1)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.buffer"
reference "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(1)" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.channel"
contain "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(1)"
contain "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.MAX_BUF_LEN"
contain "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.buffer"
contain "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.channel"
contain "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream" "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.bytesRemaining"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.1" "org.apache.commons.compress.archivers.dump.TapeInputStream"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.1" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.1" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.1.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.values(0)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.1.static {...}" "org.apache.commons.compress.archivers.dump.TapeInputStream.1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.1.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ZLIB"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.1.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ordinal(0)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.1.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.BZLIB"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.1.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.LZO"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream.1" "org.apache.commons.compress.archivers.dump.TapeInputStream.1.static {...}"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE" "int[]"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream.1" "org.apache.commons.compress.archivers.dump.TapeInputStream.1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader" "byte[][]"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.LocalFileHeader(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedHeaders"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.LocalFileHeader(0)"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.archiverVersionNumber"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.minVersionToExtract"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.hostOS"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.arjFlags"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.method"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileType"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.reserved"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeModified"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.compressedSize"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSize"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalCrc32"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileSpecPosition"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileAccessMode"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.firstChapter"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.lastChapter"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedFilePosition"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeAccessed"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeCreated"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSizeEvenForVolumes"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.name"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.comment"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)" "org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedHeaders"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.archiverVersionNumber"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.minVersionToExtract"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.hostOS"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.arjFlags"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.method"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileType"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.reserved"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeModified"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.compressedSize"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSize"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalCrc32"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileSpecPosition"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileAccessMode"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.firstChapter"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.lastChapter"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedFilePosition"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeAccessed"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeCreated"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSizeEvenForVolumes"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.name"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.comment"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedHeaders" "byte[][]"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader" "org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedHeaders"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.utils.ServiceLoaderIterator"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamProvider"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.jar.JarArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.StreamingNotSupportedException"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveException"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "byte[]"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.utils.Lists"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.sevenz.SevenZFile"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.utils.Sets"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.findArchiveStreamProviders(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.serviceLoaderIterator(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.findArchiveStreamProviders(0)" "org.apache.commons.compress.utils.Lists.newArrayList(1)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.findArchiveStreamProviders(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(3)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(1)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(3)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.serviceLoaderIterator(0)" "org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(1)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.serviceLoaderIterator(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.1.{...}"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.2.{...}"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(1)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.encoding"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(1)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.getEntryEncoding(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.getEntryEncoding(0)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.encoding"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(1)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.StreamingNotSupportedException.StreamingNotSupportedException(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(3)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(1)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.StreamingNotSupportedException.StreamingNotSupportedException(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(3)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(1)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.StreamingNotSupportedException.StreamingNotSupportedException(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCheckSumOK(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.utils.IOUtils.closeQuietly(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)" "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(1)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveInputStreamProviders"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders(0)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveOutputStreamProviders"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames(0)" "org.apache.commons.compress.utils.Sets.newHashSet(1)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames(0)" "org.apache.commons.compress.utils.Sets.newHashSet(1)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.access$000(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.access$100(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactory.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactory.SINGLETON"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.static {...}"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.TAR_HEADER_SIZE"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.DUMP_SIGNATURE_SIZE"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.SIGNATURE_SIZE"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactory.SINGLETON" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.SINGLETON"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.AR"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ARJ"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.CPIO"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.DUMP"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.JAR"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.TAR"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ZIP"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.SEVEN_Z"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.encoding"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveInputStreamProviders"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactory" "org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveOutputStreamProviders"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE[]"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.values(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.$VALUES"
call "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.values(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE[].clone(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.values(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.valueOf(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.COMPRESSION_TYPE(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.code"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.COMPRESSION_TYPE(3)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.values(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.code"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.COMPRESSION_TYPE(3)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ZLIB"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.BZLIB"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.LZO"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.$VALUES"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.static {...}"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ZLIB" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ZLIB"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.BZLIB" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.BZLIB"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.LZO" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.LZO"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.code"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.$VALUES" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE[]"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.$VALUES"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION[]"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.values(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.$VALUES"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.values(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION[].clone(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.values(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.valueOf(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.PERMISSION(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.code"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.PERMISSION(3)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.find(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.values(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.find(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.code"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.find(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.PERMISSION(3)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETUID"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETGUI"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.STICKY"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_READ"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_WRITE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_EXEC"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_READ"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_WRITE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_EXEC"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_READ"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_WRITE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_EXEC"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.$VALUES"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETUID" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETUID"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETGUI" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETGUI"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.STICKY" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.STICKY"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_READ" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_READ"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_WRITE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_WRITE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_EXEC" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_EXEC"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_READ" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_READ"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_WRITE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_WRITE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_EXEC" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_EXEC"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_READ" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_READ"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_WRITE" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_WRITE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_EXEC" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_EXEC"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.code"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.$VALUES" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION[]"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.$VALUES"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.SeekableByteChannelCompressor(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(1)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.SeekableByteChannelCompressor(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.channel"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.SeekableByteChannelCompressor(2)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.writeOut(3)" "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.channel"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.writeOut(3)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.channel"
contain "org.apache.commons.compress.utils.CharsetNames" "org.apache.commons.compress.utils.CharsetNames.CharsetNames(0)"
contain "org.apache.commons.compress.utils.CharsetNames" "org.apache.commons.compress.utils.CharsetNames.ISO_8859_1"
contain "org.apache.commons.compress.utils.CharsetNames" "org.apache.commons.compress.utils.CharsetNames.US_ASCII"
contain "org.apache.commons.compress.utils.CharsetNames" "org.apache.commons.compress.utils.CharsetNames.UTF_16"
contain "org.apache.commons.compress.utils.CharsetNames" "org.apache.commons.compress.utils.CharsetNames.UTF_16BE"
contain "org.apache.commons.compress.utils.CharsetNames" "org.apache.commons.compress.utils.CharsetNames.UTF_16LE"
contain "org.apache.commons.compress.utils.CharsetNames" "org.apache.commons.compress.utils.CharsetNames.UTF_8"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.HostOs(0)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.DOS"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.PRIMOS"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.UNIX"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.AMIGA"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.MAC_OS"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.OS_2"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.APPLE_GS"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.ATARI_ST"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.NEXT"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.VAX_VMS"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.WIN95"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.WIN32"
reference "org.apache.commons.compress.utils.Lists" "org.apache.commons.compress.utils.Iterators"
contain "org.apache.commons.compress.utils.Lists" "org.apache.commons.compress.utils.Lists.newArrayList(0)"
call "org.apache.commons.compress.utils.Lists.newArrayList(1)" "org.apache.commons.compress.utils.Lists.newArrayList(0)"
call "org.apache.commons.compress.utils.Lists.newArrayList(1)" "org.apache.commons.compress.utils.Iterators.addAll(2)"
contain "org.apache.commons.compress.utils.Lists" "org.apache.commons.compress.utils.Lists.newArrayList(1)"
contain "org.apache.commons.compress.utils.Lists" "org.apache.commons.compress.utils.Lists.Lists(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration" "org.apache.commons.compress.archivers.sevenz.Coders"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration" "org.apache.commons.compress.archivers.sevenz.CoderBase"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.method"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.options"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)" "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)" "org.apache.commons.compress.archivers.sevenz.CoderBase.canAcceptOptions(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.method"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.options"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.method" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.method"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.options"
reference "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"
reference "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream"
reference "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder" "org.apache.commons.compress.archivers.sevenz.CoderBase"
reference "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder" "org.apache.commons.compress.archivers.sevenz.Coders"
call "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.BZIP2Decoder(0)" "org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(1)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder" "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.BZIP2Decoder(0)"
call "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.decode(5)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(1)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder" "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.decode(5)"
call "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.encode(2)" "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.numberOptionOrDefault(2)"
call "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.encode(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(2)"
contain "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder" "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.encode(2)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2Utils" "org.apache.commons.compress.compressors.FileNameUtil"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Utils" "org.apache.commons.compress.compressors.bzip2.BZip2Utils.BZip2Utils(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(1)" "org.apache.commons.compress.compressors.bzip2.BZip2Utils.fileNameUtil"
call "org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Utils" "org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(1)" "org.apache.commons.compress.compressors.bzip2.BZip2Utils.fileNameUtil"
call "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(1)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Utils" "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(1)" "org.apache.commons.compress.compressors.bzip2.BZip2Utils.fileNameUtil"
call "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Utils" "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2Utils.static {...}" "org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(2)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2Utils.static {...}" "org.apache.commons.compress.compressors.bzip2.BZip2Utils.fileNameUtil"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Utils" "org.apache.commons.compress.compressors.bzip2.BZip2Utils.static {...}"
reference "org.apache.commons.compress.compressors.bzip2.BZip2Utils.fileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Utils" "org.apache.commons.compress.compressors.bzip2.BZip2Utils.fileNameUtil"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(1)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary(0)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(1)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(1)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(1)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(1)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen(0)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary(0)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.NAIVE_RESIZE_LIMIT"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data" "byte[]"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannel" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveUtil" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveUtil" "org.apache.commons.compress.archivers.zip.ZipEncoding"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveUtil" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.DumpArchiveUtil(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveUtil" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveUtil" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.getIno(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveUtil" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.getIno(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveUtil" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveUtil" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveUtil" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(4)" "org.apache.commons.compress.archivers.zip.ZipEncoding.decode(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveUtil" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(4)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.NameAndComment(2)" "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.name"
reference "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.NameAndComment(2)" "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.comment"
contain "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment" "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.NameAndComment(2)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment" "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.NameAndComment(3)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment" "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.access$400(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment" "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.access$500(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.name" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment" "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.name"
reference "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.comment" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment" "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.comment"
reference "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.OffsetEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.headerOffset"
reference "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.OffsetEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.dataOffset"
contain "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.OffsetEntry(0)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$000(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.OffsetEntry(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$202(2)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$200(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$002(2)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.headerOffset"
contain "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.dataOffset"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.Feature(1)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.name"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.Feature(1)"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.toString(0)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.name"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.toString(0)"
call "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.static {...}" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.Feature(1)"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.static {...}" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.ENCRYPTION"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.static {...}" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.static {...}" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.static {...}" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.SPLITTING"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.static {...}"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.ENCRYPTION" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.ENCRYPTION"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR"
reference "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.SPLITTING" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.SPLITTING"
contain "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.name"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipMethod"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.UnixStat"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipExtraField"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipExtraField[]"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "byte[]"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.clone(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.clone(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.clone(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.clone(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.clone(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.clone(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.clone(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.clone(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnixMode(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnixMode(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnixMode(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isUnixSymlink(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnixMode(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isUnixSymlink(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFields(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFields(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFields(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFieldsNoCopy(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFieldsNoCopy(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.noExtraFields"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFieldsNoCopy(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFieldsNoCopy(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFields(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableOnly(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMergedFields(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMergedFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMergedFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMergedFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMergedFields(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableOnly(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableOnly(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.noExtraFields"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableOnly(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFields(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipShort.equals(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeUnparseableExtraFieldData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeUnparseableExtraFieldData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeUnparseableExtraFieldData(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)" "org.apache.commons.compress.archivers.zip.ZipShort.equals(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableExtraFieldData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableExtraFieldData(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(1)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(1)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(1)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(1)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalFileDataExtra(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtra(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalFileDataExtra(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.EMPTY"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalFileDataExtra(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCentralDirectoryExtra(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCentralDirectoryExtra(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCentralDirectoryExtra(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawName(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.hashCode(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.hashCode(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataData(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)" "org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryData(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)" "org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(3)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getTime(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getComment(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getTime(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCentralDirectoryExtra(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalFileDataExtra(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionMadeBy(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionMadeBy"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionMadeBy(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionRequired(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionRequired"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionRequired(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getVersionRequired(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionRequired"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getVersionRequired(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getVersionMadeBy(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionMadeBy"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getVersionMadeBy(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawFlag(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawFlag"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawFlag(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setRawFlag(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawFlag"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setRawFlag(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.EMPTY"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.noExtraFields"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.static {...}"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.PLATFORM_UNIX"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.PLATFORM_FAT"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CRC_UNKNOWN"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.SHORT_MASK"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.SHORT_SHIFT"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.EMPTY" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.EMPTY"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionRequired"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionMadeBy"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawFlag"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields" "org.apache.commons.compress.archivers.zip.ZipExtraField[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.noExtraFields" "org.apache.commons.compress.archivers.zip.ZipExtraField[]"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.noExtraFields"
reference "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods" "org.apache.commons.compress.archivers.arj.LocalFileHeader"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.Methods(0)"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.STORED"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.COMPRESSED_MOST"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.COMPRESSED_FASTEST"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.NO_DATA_NO_CRC"
contain "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods" "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.NO_DATA"
reference "org.apache.commons.compress.archivers.zip.ZipFile.1" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.ZipFile.1.{...}" "org.apache.commons.compress.archivers.zip.ZipFile.1.this$0"
reference "org.apache.commons.compress.archivers.zip.ZipFile.1.{...}" "org.apache.commons.compress.archivers.zip.ZipFile.1.val$inflater"
contain "org.apache.commons.compress.archivers.zip.ZipFile.1" "org.apache.commons.compress.archivers.zip.ZipFile.1.{...}"
reference "org.apache.commons.compress.archivers.zip.ZipFile.1.close(0)" "org.apache.commons.compress.archivers.zip.ZipFile.1.val$inflater"
contain "org.apache.commons.compress.archivers.zip.ZipFile.1" "org.apache.commons.compress.archivers.zip.ZipFile.1.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.1" "org.apache.commons.compress.archivers.zip.ZipFile.1.val$inflater"
reference "org.apache.commons.compress.archivers.zip.ZipFile.1.this$0" "org.apache.commons.compress.archivers.zip.ZipFile"
contain "org.apache.commons.compress.archivers.zip.ZipFile.1" "org.apache.commons.compress.archivers.zip.ZipFile.1.this$0"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE[]"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.values(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.$VALUES"
call "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.values(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE[].clone(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.values(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.valueOf(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.SEGMENT_TYPE(3)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.code"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.SEGMENT_TYPE(3)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.find(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.values(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.find(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.code"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.find(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.SEGMENT_TYPE(3)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.TAPE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.INODE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.BITS"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.ADDR"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.END"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.CLRI"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.$VALUES"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.static {...}"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.TAPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.TAPE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.INODE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.INODE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.BITS" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.BITS"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.ADDR" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.ADDR"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.END" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.END"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.CLRI" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.CLRI"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.code"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.$VALUES" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE[]"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.$VALUES"
reference "org.apache.commons.compress.archivers.zip.ZipFile.2" "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
reference "org.apache.commons.compress.archivers.zip.ZipFile.2" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipFile.2" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.ZipFile.2" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry"
reference "org.apache.commons.compress.archivers.zip.ZipFile.2.{...}" "org.apache.commons.compress.archivers.zip.ZipFile.2.this$0"
contain "org.apache.commons.compress.archivers.zip.ZipFile.2" "org.apache.commons.compress.archivers.zip.ZipFile.2.{...}"
call "org.apache.commons.compress.archivers.zip.ZipFile.2.compare(2)" "org.apache.commons.compress.archivers.zip.ZipFile.Entry.getOffsetEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipFile.2.compare(2)" "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$200(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.2" "org.apache.commons.compress.archivers.zip.ZipFile.2.compare(2)"
contain "org.apache.commons.compress.archivers.zip.ZipFile.2" "org.apache.commons.compress.archivers.zip.ZipFile.2.compare(2)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.2.this$0" "org.apache.commons.compress.archivers.zip.ZipFile"
contain "org.apache.commons.compress.archivers.zip.ZipFile.2" "org.apache.commons.compress.archivers.zip.ZipFile.2.this$0"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3" "org.apache.commons.compress.archivers.zip.ZipMethod"
call "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.values(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipFile.3.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.STORED"
call "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.ordinal(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.DEFLATED"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.BZIP2"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.AES_ENCRYPTED"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.ENHANCED_DEFLATED"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_1"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_2"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_3"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_4"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.JPEG"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.LZMA"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.PKWARE_IMPLODING"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.PPMD"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.TOKENIZATION"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.UNKNOWN"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.WAVPACK"
contain "org.apache.commons.compress.archivers.zip.ZipFile.3" "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}"
reference "org.apache.commons.compress.archivers.zip.ZipFile.3.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod" "int[]"
contain "org.apache.commons.compress.archivers.zip.ZipFile.3" "org.apache.commons.compress.archivers.zip.ZipFile.3.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor" "org.apache.commons.compress.parallel.ScatterGatherBackingStore"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.ScatterGatherBackingStoreCompressor(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(1)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.ScatterGatherBackingStoreCompressor(2)" "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.bs"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.ScatterGatherBackingStoreCompressor(2)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.writeOut(3)" "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.bs"
call "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.writeOut(3)" "org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(3)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.writeOut(3)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.bs" "org.apache.commons.compress.parallel.ScatterGatherBackingStore"
contain "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor" "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.bs"
contain "org.apache.commons.compress.utils.Sets" "org.apache.commons.compress.utils.Sets.Sets(0)"
contain "org.apache.commons.compress.utils.Sets" "org.apache.commons.compress.utils.Sets.newHashSet(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZFile"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.utils.CountingOutputStream"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.utils.CountingOutputStream[]"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.NID"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "long[]"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "byte[]"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.Coders"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.CoderBase"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.numNonEmptyStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.crc32"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.compressedCrc32"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fileBytesWritten"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finished"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.contentMethods"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.channel"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(1)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.contentMethods"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finished"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.channel"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(2)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.currentOutputStream"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.utils.CountingOutputStream.flush(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.utils.CountingOutputStream.close(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fileBytesWritten"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.numNonEmptyStreams"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.utils.CountingOutputStream.getBytesWritten(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedSize(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.crc32"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.compressedCrc32"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrcValue(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalCountingStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getCurrentOutputStream(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(3)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getCurrentOutputStream(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(3)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finished"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.channel"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.sevenZSignature"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getCurrentOutputStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.currentOutputStream"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getCurrentOutputStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getCurrentOutputStream(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.OutputStreamWrapper(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(0)" "org.apache.commons.compress.utils.CountingOutputStream.CountingOutputStream(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(0)" "org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(3)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalCountingStreams"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.{...}"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.contentMethods"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.numNonEmptyStreams"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSubStreamsInfo(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.numNonEmptyStreams"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrcValue(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.numNonEmptyStreams"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrcValue(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(2)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(2)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.getId(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(2)" "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(2)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(2)" "org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSubStreamsInfo(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCreationDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasAccessDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasWindowsAttributes(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getWindowsAttributes(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$100(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$200(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$300(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$408(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$400(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$402(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.channel"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.numNonEmptyStreams"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.crc32"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.compressedCrc32"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fileBytesWritten"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finished"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.currentOutputStream" "org.apache.commons.compress.utils.CountingOutputStream"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.currentOutputStream"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalCountingStreams" "org.apache.commons.compress.utils.CountingOutputStream[]"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalCountingStreams"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.contentMethods"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate.test(1)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.UnparseableExtraField(1)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.key"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.UnparseableExtraField(1)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.getKey(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.key"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.getKey(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.static {...}" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.UnparseableExtraField(1)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.static {...}" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.static {...}" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.SKIP"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.static {...}" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.static {...}"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW_KEY"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.SKIP_KEY"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ_KEY"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.SKIP" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.SKIP"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.key"
reference "org.apache.commons.compress.compressors.xz.XZCompressorInputStream" "org.tukaani.xz.XZInputStream"
reference "org.apache.commons.compress.compressors.xz.XZCompressorInputStream" "org.tukaani.xz.SingleXZInputStream"
reference "org.apache.commons.compress.compressors.xz.XZCompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream"
reference "org.apache.commons.compress.compressors.xz.XZCompressorInputStream" "org.tukaani.xz.XZ"
reference "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(2)" "org.tukaani.xz.XZ.HEADER_MAGIC"
contain "org.apache.commons.compress.compressors.xz.XZCompressorInputStream" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(2)"
call "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(1)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.xz.XZCompressorInputStream" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(2)" "org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream(0)"
call "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(2)" "org.tukaani.xz.XZInputStream.XZInputStream(1)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(2)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.in"
call "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(2)" "org.tukaani.xz.SingleXZInputStream.SingleXZInputStream(1)"
contain "org.apache.commons.compress.compressors.xz.XZCompressorInputStream" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(2)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(0)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.in"
call "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(0)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.xz.XZCompressorInputStream" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(0)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.in"
call "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.xz.XZCompressorInputStream" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(3)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.skip(1)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.in"
contain "org.apache.commons.compress.compressors.xz.XZCompressorInputStream" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.skip(1)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.available(0)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.in"
contain "org.apache.commons.compress.compressors.xz.XZCompressorInputStream" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.available(0)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.close(0)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.in"
contain "org.apache.commons.compress.compressors.xz.XZCompressorInputStream" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.xz.XZCompressorInputStream" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.in"
reference "org.apache.commons.compress.archivers.arj.MainHeader.Flags" "org.apache.commons.compress.archivers.arj.MainHeader"
contain "org.apache.commons.compress.archivers.arj.MainHeader.Flags" "org.apache.commons.compress.archivers.arj.MainHeader.Flags.Flags(0)"
contain "org.apache.commons.compress.archivers.arj.MainHeader.Flags" "org.apache.commons.compress.archivers.arj.MainHeader.Flags.GARBLED"
contain "org.apache.commons.compress.archivers.arj.MainHeader.Flags" "org.apache.commons.compress.archivers.arj.MainHeader.Flags.OLD_SECURED_NEW_ANSI_PAGE"
contain "org.apache.commons.compress.archivers.arj.MainHeader.Flags" "org.apache.commons.compress.archivers.arj.MainHeader.Flags.VOLUME"
contain "org.apache.commons.compress.archivers.arj.MainHeader.Flags" "org.apache.commons.compress.archivers.arj.MainHeader.Flags.ARJPROT"
contain "org.apache.commons.compress.archivers.arj.MainHeader.Flags" "org.apache.commons.compress.archivers.arj.MainHeader.Flags.PATHSYM"
contain "org.apache.commons.compress.archivers.arj.MainHeader.Flags" "org.apache.commons.compress.archivers.arj.MainHeader.Flags.BACKUP"
contain "org.apache.commons.compress.archivers.arj.MainHeader.Flags" "org.apache.commons.compress.archivers.arj.MainHeader.Flags.SECURED"
contain "org.apache.commons.compress.archivers.arj.MainHeader.Flags" "org.apache.commons.compress.archivers.arj.MainHeader.Flags.ALTNAME"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipParameters"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.CompressorOutputStream"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters(0)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)" "org.apache.commons.compress.compressors.CompressorOutputStream.CompressorOutputStream(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflateBuffer"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.crc"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.out"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipParameters.getCompressionLevel(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflater"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeHeader(1)"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeHeader(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.getFilename(0)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeHeader(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.getComment(0)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeHeader(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.getModificationTime(0)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeHeader(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.getCompressionLevel(0)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeHeader(1)" "org.apache.commons.compress.compressors.gzip.GzipParameters.getOperatingSystem(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeHeader(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeHeader(1)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeTrailer(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.crc"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeTrailer(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflater"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeTrailer(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeTrailer(0)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(3)"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(1)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(3)"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(1)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflater"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflate(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.crc"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(3)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflate(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflater"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflate(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflateBuffer"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflate(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflate(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflater"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflate(0)"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.finish(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeTrailer(0)"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.finish(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.flush(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.flush(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.closed"
call "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.finish(0)"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflater"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close(0)"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.FNAME"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.FCOMMENT"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.out"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflater"
reference "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflateBuffer" "byte[]"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflateBuffer"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.closed"
contain "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.crc"
reference "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipLong"
reference "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField"
reference "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField"
reference "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException"
reference "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField"
reference "org.apache.commons.compress.archivers.zip.ZipUtil" "byte[]"
reference "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipMethod"
reference "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
reference "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit"
reference "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.ZipUtil(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(1)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(1)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(1)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(3)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(1)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(3)" "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(4)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(3)"
reference "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(4)" "org.apache.commons.compress.archivers.zip.ZipUtil.DOS_TIME_MIN"
call "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(4)" "org.apache.commons.compress.archivers.zip.ZipLong.putLong(3)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(4)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.reverse(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.bigToLong(1)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(1)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(1)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(1)"
reference "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(3)" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UPATH_ID"
call "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(2)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(1)"
reference "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(3)" "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UCOM_ID"
call "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setComment(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(3)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(2)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getNameCRC32(0)"
reference "org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(2)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING"
call "org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(2)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getUnicodeName(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(2)" "org.apache.commons.compress.archivers.zip.ZipEncoding.decode(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(2)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.copy(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.copy(3)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(1)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(1)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(1)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption(0)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(1)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
reference "org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(1)" "org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING"
call "org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(1)" "org.apache.commons.compress.archivers.zip.ZipMethod.getCode(0)"
reference "org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(1)" "org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING"
reference "org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(1)" "org.apache.commons.compress.archivers.zip.ZipMethod.BZIP2"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(1)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(1)"
reference "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.ENCRYPTION"
call "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)" "org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(1)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)" "org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(1)"
reference "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD"
call "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)"
call "org.apache.commons.compress.archivers.zip.ZipUtil.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(1)"
reference "org.apache.commons.compress.archivers.zip.ZipUtil.static {...}" "org.apache.commons.compress.archivers.zip.ZipUtil.DOS_TIME_MIN"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.static {...}"
reference "org.apache.commons.compress.archivers.zip.ZipUtil.DOS_TIME_MIN" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipUtil" "org.apache.commons.compress.archivers.zip.ZipUtil.DOS_TIME_MIN"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.BoundedInputStream(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.this$0"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.BoundedInputStream(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.pos"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.BoundedInputStream(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.max"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.BoundedInputStream(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.in"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.BoundedInputStream(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.max"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.pos"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.in"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.this$0"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$800(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$900(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$708(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(3)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.max"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.pos"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.in"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.this$0"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$1000(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$900(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$700(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$702(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(3)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.skip(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.max"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.skip(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.pos"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.skip(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.in"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.skip(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.available(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.max"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.available(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.pos"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.available(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.in"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.available(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.in"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.max"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.pos"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.this$0" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.this$0"
reference "org.apache.commons.compress.changes.ChangeSetResults.ChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet"
reference "org.apache.commons.compress.changes.ChangeSetResults.ChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetResults.addedFromStream"
reference "org.apache.commons.compress.changes.ChangeSetResults.ChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetResults.deleted"
contain "org.apache.commons.compress.changes.ChangeSetResults" "org.apache.commons.compress.changes.ChangeSetResults.ChangeSetResults(0)"
reference "org.apache.commons.compress.changes.ChangeSetResults.deleted(1)" "org.apache.commons.compress.changes.ChangeSetResults.deleted"
contain "org.apache.commons.compress.changes.ChangeSetResults" "org.apache.commons.compress.changes.ChangeSetResults.deleted(1)"
reference "org.apache.commons.compress.changes.ChangeSetResults.addedFromStream(1)" "org.apache.commons.compress.changes.ChangeSetResults.addedFromStream"
contain "org.apache.commons.compress.changes.ChangeSetResults" "org.apache.commons.compress.changes.ChangeSetResults.addedFromStream(1)"
reference "org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet(1)" "org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet"
contain "org.apache.commons.compress.changes.ChangeSetResults" "org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet(1)"
reference "org.apache.commons.compress.changes.ChangeSetResults.getAddedFromChangeSet(0)" "org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet"
contain "org.apache.commons.compress.changes.ChangeSetResults" "org.apache.commons.compress.changes.ChangeSetResults.getAddedFromChangeSet(0)"
reference "org.apache.commons.compress.changes.ChangeSetResults.getAddedFromStream(0)" "org.apache.commons.compress.changes.ChangeSetResults.addedFromStream"
contain "org.apache.commons.compress.changes.ChangeSetResults" "org.apache.commons.compress.changes.ChangeSetResults.getAddedFromStream(0)"
reference "org.apache.commons.compress.changes.ChangeSetResults.getDeleted(0)" "org.apache.commons.compress.changes.ChangeSetResults.deleted"
contain "org.apache.commons.compress.changes.ChangeSetResults" "org.apache.commons.compress.changes.ChangeSetResults.getDeleted(0)"
reference "org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(1)" "org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet"
reference "org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(1)" "org.apache.commons.compress.changes.ChangeSetResults.addedFromStream"
contain "org.apache.commons.compress.changes.ChangeSetResults" "org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(1)"
contain "org.apache.commons.compress.changes.ChangeSetResults" "org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet"
contain "org.apache.commons.compress.changes.ChangeSetResults" "org.apache.commons.compress.changes.ChangeSetResults.addedFromStream"
contain "org.apache.commons.compress.changes.ChangeSetResults" "org.apache.commons.compress.changes.ChangeSetResults.deleted"
call "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.PureJavaCrc32C(0)" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.reset(0)"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.PureJavaCrc32C(0)"
reference "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.getValue(0)" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.crc"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.getValue(0)"
reference "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.reset(0)" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.crc"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.reset(0)"
reference "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(3)" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.crc"
reference "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(3)" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(3)"
reference "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(1)" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.crc"
reference "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(1)" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(1)"
reference "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.static {...}" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.static {...}"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.crc"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_0_START"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_1_START"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_2_START"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_3_START"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_4_START"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_5_START"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_6_START"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_7_START"
reference "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T" "int[]"
contain "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C" "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T"
reference "org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.zlibHeader"
reference "org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.compressionLevel"
contain "org.apache.commons.compress.compressors.deflate.DeflateParameters" "org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters(0)"
reference "org.apache.commons.compress.compressors.deflate.DeflateParameters.withZlibHeader(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.zlibHeader"
contain "org.apache.commons.compress.compressors.deflate.DeflateParameters" "org.apache.commons.compress.compressors.deflate.DeflateParameters.withZlibHeader(0)"
reference "org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(1)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.zlibHeader"
contain "org.apache.commons.compress.compressors.deflate.DeflateParameters" "org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(1)"
reference "org.apache.commons.compress.compressors.deflate.DeflateParameters.getCompressionLevel(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.compressionLevel"
contain "org.apache.commons.compress.compressors.deflate.DeflateParameters" "org.apache.commons.compress.compressors.deflate.DeflateParameters.getCompressionLevel(0)"
reference "org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(1)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.compressionLevel"
contain "org.apache.commons.compress.compressors.deflate.DeflateParameters" "org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(1)"
contain "org.apache.commons.compress.compressors.deflate.DeflateParameters" "org.apache.commons.compress.compressors.deflate.DeflateParameters.zlibHeader"
contain "org.apache.commons.compress.compressors.deflate.DeflateParameters" "org.apache.commons.compress.compressors.deflate.DeflateParameters.compressionLevel"
contain "org.apache.commons.compress.PasswordRequiredException" "org.apache.commons.compress.PasswordRequiredException.PasswordRequiredException(1)"
contain "org.apache.commons.compress.PasswordRequiredException" "org.apache.commons.compress.PasswordRequiredException.serialVersionUID"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.1" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateParameters"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(1)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(1)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(2)" "org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(2)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.withZlibHeader(0)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(2)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.inflater"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(2)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.in"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(2)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.in"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(0)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.in"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(3)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(3)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.skip(1)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.in"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.skip(1)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.available(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.in"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.available(0)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.in"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.inflater"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(2)"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_1"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2a"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2b"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2c"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2d"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.in"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.inflater"
contain "org.apache.commons.compress.archivers.ArchiveException" "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(1)"
call "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(2)" "org.apache.commons.compress.archivers.ArchiveException.initCause(1)"
contain "org.apache.commons.compress.archivers.ArchiveException" "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(2)"
contain "org.apache.commons.compress.archivers.ArchiveException" "org.apache.commons.compress.archivers.ArchiveException.serialVersionUID"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode" "org.apache.commons.compress.archivers.sevenz.CLI.Mode[]"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode" "org.apache.commons.compress.archivers.sevenz.CLI"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.values(0)" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.$VALUES"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.values(0)" "org.apache.commons.compress.archivers.sevenz.CLI.Mode[].clone(0)"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.values(0)"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.valueOf(1)"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.Mode(3)" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.message"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.Mode(3)"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.getMessage(0)" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.message"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.getMessage(0)"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.takeAction(2)"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.Mode(4)"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.static {...}" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.{...}"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.static {...}" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.LIST"
call "org.apache.commons.compress.archivers.sevenz.CLI.Mode.static {...}" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2.{...}"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.static {...}" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.EXTRACT"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.static {...}" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.$VALUES"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.static {...}"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.LIST" "org.apache.commons.compress.archivers.sevenz.CLI.Mode"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.LIST"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.EXTRACT" "org.apache.commons.compress.archivers.sevenz.CLI.Mode"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.EXTRACT"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.message"
reference "org.apache.commons.compress.archivers.sevenz.CLI.Mode.$VALUES" "org.apache.commons.compress.archivers.sevenz.CLI.Mode[]"
contain "org.apache.commons.compress.archivers.sevenz.CLI.Mode" "org.apache.commons.compress.archivers.sevenz.CLI.Mode.$VALUES"
reference "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.ChecksumVerifyingInputStream(4)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.checksum"
reference "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.ChecksumVerifyingInputStream(4)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.in"
reference "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.ChecksumVerifyingInputStream(4)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.expectedChecksum"
reference "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.ChecksumVerifyingInputStream(4)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.bytesRemaining"
contain "org.apache.commons.compress.utils.ChecksumVerifyingInputStream" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.ChecksumVerifyingInputStream(4)"
reference "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(0)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.bytesRemaining"
reference "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(0)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.in"
reference "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(0)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.checksum"
reference "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(0)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.expectedChecksum"
contain "org.apache.commons.compress.utils.ChecksumVerifyingInputStream" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(0)"
call "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(1)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(3)"
contain "org.apache.commons.compress.utils.ChecksumVerifyingInputStream" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(1)"
reference "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(3)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.in"
reference "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(3)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.checksum"
reference "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(3)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.bytesRemaining"
reference "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(3)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.expectedChecksum"
contain "org.apache.commons.compress.utils.ChecksumVerifyingInputStream" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(3)"
call "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.skip(1)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(0)"
contain "org.apache.commons.compress.utils.ChecksumVerifyingInputStream" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.skip(1)"
reference "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.close(0)" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.in"
contain "org.apache.commons.compress.utils.ChecksumVerifyingInputStream" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.close(0)"
contain "org.apache.commons.compress.utils.ChecksumVerifyingInputStream" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.in"
contain "org.apache.commons.compress.utils.ChecksumVerifyingInputStream" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.bytesRemaining"
contain "org.apache.commons.compress.utils.ChecksumVerifyingInputStream" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.expectedChecksum"
contain "org.apache.commons.compress.utils.ChecksumVerifyingInputStream" "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.checksum"
contain "org.apache.commons.compress.archivers.sevenz.StartHeader" "org.apache.commons.compress.archivers.sevenz.StartHeader.StartHeader(0)"
contain "org.apache.commons.compress.archivers.sevenz.StartHeader" "org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderOffset"
contain "org.apache.commons.compress.archivers.sevenz.StartHeader" "org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderSize"
contain "org.apache.commons.compress.archivers.sevenz.StartHeader" "org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderCrc"
reference "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.CoderBase"
reference "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream"
reference "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder"
reference "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.Coder"
reference "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.Coders.Coders(0)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(1)" "org.apache.commons.compress.archivers.sevenz.Coders.CODER_MAP"
contain "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(1)"
reference "org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(5)" "org.apache.commons.compress.archivers.sevenz.Coder.decompressionMethodId"
call "org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(5)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(1)"
call "org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(5)" "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(1)"
call "org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(5)" "org.apache.commons.compress.archivers.sevenz.CoderBase.decode(5)"
contain "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(5)"
call "org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(3)" "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(1)"
call "org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(3)" "org.apache.commons.compress.archivers.sevenz.CoderBase.encode(2)"
contain "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(3)"
call "org.apache.commons.compress.archivers.sevenz.Coders.static {...}" "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}"
reference "org.apache.commons.compress.archivers.sevenz.Coders.static {...}" "org.apache.commons.compress.archivers.sevenz.Coders.CODER_MAP"
contain "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.Coders.static {...}"
contain "org.apache.commons.compress.archivers.sevenz.Coders" "org.apache.commons.compress.archivers.sevenz.Coders.CODER_MAP"
reference "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.lzw.LZWInputStream"
reference "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.utils.BitInputStream"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(2)"
reference "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.totalCodesRead"
reference "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.in"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
reference "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.blockMode"
reference "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.maxCodeSize"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.setClearCode(1)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.initializeTables(1)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.clearEntries(0)"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)"
reference "org.apache.commons.compress.compressors.z.ZCompressorInputStream.clearEntries(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.blockMode"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.clearEntries(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.setTableSize(1)"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.clearEntries(0)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.readNextCode(0)" "org.apache.commons.compress.compressors.lzw.LZWInputStream.readNextCode(0)"
reference "org.apache.commons.compress.compressors.z.ZCompressorInputStream.readNextCode(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.totalCodesRead"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.readNextCode(0)"
reference "org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.totalCodesRead"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.readNextCode(0)"
reference "org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.in"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading(0)" "org.apache.commons.compress.utils.BitInputStream.clearBitCache(0)"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading(0)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(2)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.getCodeSize(0)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(2)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(3)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(2)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.getTableSize(0)"
reference "org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(2)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.maxCodeSize"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(2)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading(0)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(2)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.incrementCodeSize(0)"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(2)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.readNextCode(0)"
reference "org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.blockMode"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.getClearCode(0)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.clearEntries(0)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading(0)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.resetCodeSize(0)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.resetPreviousCode(0)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.getTableSize(0)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.addRepeatOfPreviousCode(0)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.getCodeSize(0)"
call "org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.expandCodeToOutputStack(2)"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(0)"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(2)"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.MAGIC_1"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.MAGIC_2"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.BLOCK_MODE_MASK"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.MAX_CODE_SIZE_MASK"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.blockMode"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.maxCodeSize"
contain "org.apache.commons.compress.compressors.z.ZCompressorInputStream" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.totalCodesRead"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.utils.ServiceLoaderIterator"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamProvider"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.z.ZCompressorInputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorException"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "byte[]"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.utils.Lists"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.xz.XZUtils"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.lzma.LZMAUtils"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.utils.Sets"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.1.{...}"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.2.{...}"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.findCompressorStreamProviders(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.serviceLoaderIterator(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.findCompressorStreamProviders(0)" "org.apache.commons.compress.utils.Lists.newArrayList(1)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.findCompressorStreamProviders(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getBzip2(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getDeflate(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getGzip(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getLzma(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getPack200(0)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.getSingleton(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getSingleton(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyFramed(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyRaw(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getXz(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getZ(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(3)" "org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(1)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(3)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.serviceLoaderIterator(0)" "org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(1)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.serviceLoaderIterator(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(1)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressConcatenated"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressUntilEOF"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressConcatenated"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressUntilEOF"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(2)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressConcatenated"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.xz.XZUtils.matches(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.LZMACompressorInputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.CompressorException.CompressorException(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)" "org.apache.commons.compress.compressors.CompressorException.CompressorException(1)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)" "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressConcatenated"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.LZMACompressorInputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.CompressorException.CompressorException(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(3)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.CompressorException.CompressorException(1)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)" "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)" "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.LZMACompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)" "org.apache.commons.compress.compressors.CompressorException.CompressorException(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)" "org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)" "org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)" "org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)" "org.apache.commons.compress.compressors.CompressorException.CompressorException(1)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.compressorInputStreamProviders"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders(0)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.compressorOutputStreamProviders"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders(0)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressConcatenated(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressConcatenated"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressConcatenated(0)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressUntilEOF(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressUntilEOF"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressUntilEOF(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames(0)" "org.apache.commons.compress.utils.Sets.newHashSet(1)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames(0)" "org.apache.commons.compress.utils.Sets.newHashSet(1)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames(0)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressUntilEOF"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressConcatenated"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(1)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.access$000(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.access$100(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactory.static {...}" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.static {...}" "org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.static {...}"
reference "org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON" "org.apache.commons.compress.compressors.CompressorStreamFactory"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.BZIP2"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.GZIP"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.PACK200"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.XZ"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.LZMA"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.SNAPPY_FRAMED"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.SNAPPY_RAW"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.Z"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.DEFLATE"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressUntilEOF"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.compressorInputStreamProviders"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.compressorOutputStreamProviders"
contain "org.apache.commons.compress.compressors.CompressorStreamFactory" "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressConcatenated"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm[]"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.values(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.$VALUES"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.values(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm[].clone(0)"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.values(0)"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.valueOf(1)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.EncryptionAlgorithm(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.code"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.EncryptionAlgorithm(3)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.getCode(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.code"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.getCode(0)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.getAlgorithmByCode(1)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.codeToEnum"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.getAlgorithmByCode(1)"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.EncryptionAlgorithm(3)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.DES"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.RC2pre52"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.TripleDES168"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.TripleDES192"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES128"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES192"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES256"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.RC2"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.RC4"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.UNKNOWN"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.$VALUES"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.values(0)"
call "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.getCode(0)"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.codeToEnum"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.DES" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.DES"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.RC2pre52" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.RC2pre52"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.TripleDES168" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.TripleDES168"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.TripleDES192" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.TripleDES192"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES128" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES128"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES192" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES192"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES256" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES256"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.RC2" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.RC2"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.RC4" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.RC4"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.UNKNOWN" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.UNKNOWN"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.code"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.codeToEnum"
reference "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.$VALUES" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm[]"
contain "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.$VALUES"
reference "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator"
reference "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator"
reference "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.changes.ChangeSetResults"
reference "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.changes.Change"
reference "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator"
reference "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.changes.ChangeSet"
reference "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)" "org.apache.commons.compress.changes.ChangeSet.getChanges(0)"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)" "org.apache.commons.compress.changes.ChangeSetPerformer.changes"
contain "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.ArchiveInputStreamIterator(1)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
contain "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.ZipFileIterator(1)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
contain "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetResults.ChangeSetResults(0)"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetPerformer.changes"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.Change.type(0)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.Change.isReplaceMode(0)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.Change.getInput(0)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.Change.getEntry(0)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(3)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet(1)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.hasNext(0)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.next(0)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.Change.targetFile(0)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetResults.deleted(1)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(2)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(1)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.getInputStream(0)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.changes.ChangeSetResults.addedFromStream(1)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)" "org.apache.commons.compress.archivers.ArchiveOutputStream.finish(0)"
contain "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(2)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(2)" "org.apache.commons.compress.changes.Change.type(0)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(2)" "org.apache.commons.compress.changes.Change.targetFile(0)"
contain "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(2)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(3)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(3)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(3)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
contain "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(3)"
contain "org.apache.commons.compress.changes.ChangeSetPerformer" "org.apache.commons.compress.changes.ChangeSetPerformer.changes"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "byte[]"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.permissions"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.summary"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.TapeSegmentHeader(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.permissions"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.summary"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.TapeSegmentHeader(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.simpleName"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(2)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.permissions"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.summary"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.TapeSegmentHeader(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.simpleName"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ino"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.offset"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSimpleName(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.simpleName"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSimpleName(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.simpleName"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getIno(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getIno(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getIno(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getIno(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getNlink(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.nlink"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getNlink(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setNlink(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.nlink"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setNlink(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getCreationTime(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ctime"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getCreationTime(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setCreationTime(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ctime"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setCreationTime(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getGeneration(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.generation"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getGeneration(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGeneration(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.generation"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGeneration(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDeleted(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDeleted"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDeleted(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setDeleted(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDeleted"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setDeleted(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOffset(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.offset"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOffset(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setOffset(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.offset"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setOffset(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getVolume(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.volume"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getVolume(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setVolume(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.volume"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setVolume(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getType(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCount(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderHoles(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderHoles(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getHoles(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderHoles(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCdata(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.hashCode(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ino"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.hashCode(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ino"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.summary"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.equals(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.equals(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.toString(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.toString(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.find(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$002(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$102(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$202(2)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ino"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.nlink"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setAccessTime(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setLastModifiedDate(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ctime"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.generation"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setUserId(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGroupId(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$302(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$402(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$300(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$408(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$500(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getVolume(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.volume"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$102(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$302(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$402(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$300(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$408(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$500(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getName(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.name"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOriginalName(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.originalName"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOriginalName(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.originalName"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDirectory(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.name"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getLastModifiedDate(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mtime"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getLastModifiedDate(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDirectory(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDirectory(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.DIRECTORY"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDirectory(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isFile(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isFile(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FILE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isFile(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSocket(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSocket(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.SOCKET"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSocket(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isChrDev(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isChrDev(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.CHRDEV"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isChrDev(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isBlkDev(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isBlkDev(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.BLKDEV"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isBlkDev(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isFifo(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isFifo(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FIFO"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isFifo(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getType(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getType(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getMode(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mode"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getMode(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mode"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.find(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.permissions"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getPermissions(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.permissions"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getPermissions(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSize(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDirectory(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSize(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.size"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getEntrySize(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.size"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getEntrySize(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSize(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.size"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSize(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setLastModifiedDate(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mtime"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setLastModifiedDate(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getAccessTime(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.atime"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getAccessTime(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setAccessTime(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.atime"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setAccessTime(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getUserId(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.uid"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getUserId(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setUserId(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.uid"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setUserId(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getGroupId(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.gid"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getGroupId(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGroupId(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.gid"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGroupId(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.name"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mode"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.permissions"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.size"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.atime"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mtime"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.uid"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.gid"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.summary" "org.apache.commons.compress.archivers.dump.DumpArchiveSummary"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.summary"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.simpleName"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.originalName"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.volume"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.offset"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ino"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.nlink"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ctime"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.generation"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDeleted"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200Strategy"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.StreamBridge"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(1)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(1)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(1)"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(4)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(3)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(3)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(4)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(3)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(1)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(1)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(1)"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(4)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(3)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(3)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(4)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(3)"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(4)" "org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(4)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.originalInput"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(4)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.newStreamBridge(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(4)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(4)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1.{...}"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(4)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(1)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(1)" "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(1)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(3)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(3)" "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(3)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.available(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.available(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.available(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.markSupported(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.markSupported(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.markSupported(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.mark(1)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.mark(1)" "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.mark(1)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.reset(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.reset(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.reset(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.skip(1)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.skip(1)" "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.skip(1)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.close(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge"
call "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.close(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.stop(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.close(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.originalInput"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.close(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(2)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.SIG_LENGTH"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(2)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.CAFE_DOOD"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(2)"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.static {...}" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.CAFE_DOOD"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.static {...}" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.SIG_LENGTH"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.static {...}"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.originalInput"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge" "org.apache.commons.compress.compressors.pack200.StreamBridge"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge"
reference "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.CAFE_DOOD" "byte[]"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.CAFE_DOOD"
contain "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.SIG_LENGTH"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveException" "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveException" "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveException.initCause(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveException" "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(2)" "org.apache.commons.compress.archivers.dump.DumpArchiveException.initCause(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveException" "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveException" "org.apache.commons.compress.archivers.dump.DumpArchiveException.serialVersionUID"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.ShortFileException"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveException"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream" "byte[]"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.TapeInputStream(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockBuffer"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.TapeInputStream(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.currBlkIdx"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.TapeInputStream(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.TapeInputStream(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.TapeInputStream(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.isCompressed"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.TapeInputStream(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.bytesRead"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.TapeInputStream(1)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(2)" "org.apache.commons.compress.archivers.dump.TapeInputStream.isCompressed"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(2)" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(2)" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockBuffer"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(2)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(3)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(2)" "org.apache.commons.compress.archivers.dump.TapeInputStream.currBlkIdx"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(2)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(2)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.available(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.available(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.available(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.in"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.available(0)"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.read(0)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.read(3)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.read(3)" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.read(3)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.read(3)" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockBuffer"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.read(3)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.skip(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.skip(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.skip(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.skip(1)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.close(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.in"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.close(0)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.peek(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.peek(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.peek(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.peek(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockBuffer"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.peek(0)"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.read(3)"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord(0)" "org.apache.commons.compress.archivers.dump.ShortFileException.ShortFileException(0)"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord(0)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.in"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.isCompressed"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.currBlkIdx"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockBuffer"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(3)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.bytesRead"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(2)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find(1)"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ordinal(0)"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.ShortFileException.ShortFileException(0)"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(2)"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.UnsupportedCompressionAlgorithmException(1)"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.UnsupportedCompressionAlgorithmException(0)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)" "org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(3)" "org.apache.commons.compress.archivers.dump.TapeInputStream.in"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(3)" "org.apache.commons.compress.utils.IOUtils.readFully(4)"
call "org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(3)" "org.apache.commons.compress.archivers.dump.ShortFileException.ShortFileException(0)"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(3)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.getBytesRead(0)" "org.apache.commons.compress.archivers.dump.TapeInputStream.bytesRead"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.getBytesRead(0)"
reference "org.apache.commons.compress.archivers.dump.TapeInputStream.blockBuffer" "byte[]"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockBuffer"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.currBlkIdx"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.RECORD_SIZE"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.isCompressed"
contain "org.apache.commons.compress.archivers.dump.TapeInputStream" "org.apache.commons.compress.archivers.dump.TapeInputStream.bytesRead"
reference "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod[]"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.values(0)" "org.apache.commons.compress.archivers.zip.ZipMethod.$VALUES"
call "org.apache.commons.compress.archivers.zip.ZipMethod.values(0)" "org.apache.commons.compress.archivers.zip.ZipMethod[].clone(0)"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.values(0)"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.valueOf(1)"
call "org.apache.commons.compress.archivers.zip.ZipMethod.ZipMethod(2)" "org.apache.commons.compress.archivers.zip.ZipMethod.ZipMethod(3)"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.ZipMethod(2)"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.ZipMethod(3)" "org.apache.commons.compress.archivers.zip.ZipMethod.code"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.ZipMethod(3)"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.getCode(0)" "org.apache.commons.compress.archivers.zip.ZipMethod.code"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.getCode(0)"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(1)" "org.apache.commons.compress.archivers.zip.ZipMethod.codeToEnum"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(1)"
call "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.ZipMethod(3)"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.STORED"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_1"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_2"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_3"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_4"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.TOKENIZATION"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.DEFLATED"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.ENHANCED_DEFLATED"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.PKWARE_IMPLODING"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.BZIP2"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.LZMA"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.JPEG"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.WAVPACK"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.PPMD"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.AES_ENCRYPTED"
call "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.ZipMethod(2)"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.UNKNOWN"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.$VALUES"
call "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.values(0)"
call "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.getCode(0)"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}" "org.apache.commons.compress.archivers.zip.ZipMethod.codeToEnum"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.STORED" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.STORED"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_1" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_1"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_2" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_2"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_3" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_3"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_4" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_4"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.TOKENIZATION" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.TOKENIZATION"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.DEFLATED" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.DEFLATED"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.ENHANCED_DEFLATED" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.ENHANCED_DEFLATED"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.PKWARE_IMPLODING" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.PKWARE_IMPLODING"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.BZIP2" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.BZIP2"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.LZMA" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.LZMA"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.JPEG" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.JPEG"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.WAVPACK" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.WAVPACK"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.PPMD" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.PPMD"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.AES_ENCRYPTED" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.AES_ENCRYPTED"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.UNKNOWN" "org.apache.commons.compress.archivers.zip.ZipMethod"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.UNKNOWN"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.UNKNOWN_CODE"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.code"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.codeToEnum"
reference "org.apache.commons.compress.archivers.zip.ZipMethod.$VALUES" "org.apache.commons.compress.archivers.zip.ZipMethod[]"
contain "org.apache.commons.compress.archivers.zip.ZipMethod" "org.apache.commons.compress.archivers.zip.ZipMethod.$VALUES"
reference "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.changes.Change.Change(2)" "org.apache.commons.compress.changes.Change.targetFile"
reference "org.apache.commons.compress.changes.Change.Change(2)" "org.apache.commons.compress.changes.Change.type"
reference "org.apache.commons.compress.changes.Change.Change(2)" "org.apache.commons.compress.changes.Change.input"
reference "org.apache.commons.compress.changes.Change.Change(2)" "org.apache.commons.compress.changes.Change.entry"
reference "org.apache.commons.compress.changes.Change.Change(2)" "org.apache.commons.compress.changes.Change.replaceMode"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.Change(2)"
reference "org.apache.commons.compress.changes.Change.Change(3)" "org.apache.commons.compress.changes.Change.entry"
reference "org.apache.commons.compress.changes.Change.Change(3)" "org.apache.commons.compress.changes.Change.input"
reference "org.apache.commons.compress.changes.Change.Change(3)" "org.apache.commons.compress.changes.Change.type"
reference "org.apache.commons.compress.changes.Change.Change(3)" "org.apache.commons.compress.changes.Change.targetFile"
reference "org.apache.commons.compress.changes.Change.Change(3)" "org.apache.commons.compress.changes.Change.replaceMode"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.Change(3)"
reference "org.apache.commons.compress.changes.Change.getEntry(0)" "org.apache.commons.compress.changes.Change.entry"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.getEntry(0)"
reference "org.apache.commons.compress.changes.Change.getInput(0)" "org.apache.commons.compress.changes.Change.input"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.getInput(0)"
reference "org.apache.commons.compress.changes.Change.targetFile(0)" "org.apache.commons.compress.changes.Change.targetFile"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.targetFile(0)"
reference "org.apache.commons.compress.changes.Change.type(0)" "org.apache.commons.compress.changes.Change.type"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.type(0)"
reference "org.apache.commons.compress.changes.Change.isReplaceMode(0)" "org.apache.commons.compress.changes.Change.replaceMode"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.isReplaceMode(0)"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.targetFile"
reference "org.apache.commons.compress.changes.Change.entry" "org.apache.commons.compress.archivers.ArchiveEntry"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.entry"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.input"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.replaceMode"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.type"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.TYPE_DELETE"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.TYPE_ADD"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.TYPE_MOVE"
contain "org.apache.commons.compress.changes.Change" "org.apache.commons.compress.changes.Change.TYPE_DELETE_DIR"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Constants" "org.apache.commons.compress.compressors.bzip2.BZip2Constants.BASEBLOCKSIZE"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Constants" "org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_ALPHA_SIZE"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Constants" "org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_CODE_LEN"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Constants" "org.apache.commons.compress.compressors.bzip2.BZip2Constants.RUNA"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Constants" "org.apache.commons.compress.compressors.bzip2.BZip2Constants.RUNB"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Constants" "org.apache.commons.compress.compressors.bzip2.BZip2Constants.N_GROUPS"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Constants" "org.apache.commons.compress.compressors.bzip2.BZip2Constants.G_SIZE"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Constants" "org.apache.commons.compress.compressors.bzip2.BZip2Constants.N_ITERS"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Constants" "org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_SELECTORS"
contain "org.apache.commons.compress.compressors.bzip2.BZip2Constants" "org.apache.commons.compress.compressors.bzip2.BZip2Constants.NUM_OVERSHOOT_BYTES"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.TapeSegmentHeader(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.cdata"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.TapeSegmentHeader(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getType(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.type"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getType(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getVolume(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.volume"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getVolume(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getIno(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.ino"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getIno(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.setIno(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.ino"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.setIno(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCount(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.count"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCount(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getHoles(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.holes"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getHoles(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCdata(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.cdata"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCdata(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$002(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$102(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$202(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$302(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$402(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$300(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$408(1)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$500(1)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.type" "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.type"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.volume"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.ino"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.count"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.holes"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.cdata" "byte[]"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.cdata"
reference "org.apache.commons.compress.utils.Charsets" "org.apache.commons.compress.utils.CharsetNames"
contain "org.apache.commons.compress.utils.Charsets" "org.apache.commons.compress.utils.Charsets.Charsets(0)"
contain "org.apache.commons.compress.utils.Charsets" "org.apache.commons.compress.utils.Charsets.toCharset(1)"
contain "org.apache.commons.compress.utils.Charsets" "org.apache.commons.compress.utils.Charsets.toCharset(1)"
reference "org.apache.commons.compress.utils.Charsets.static {...}" "org.apache.commons.compress.utils.Charsets.ISO_8859_1"
reference "org.apache.commons.compress.utils.Charsets.static {...}" "org.apache.commons.compress.utils.Charsets.US_ASCII"
reference "org.apache.commons.compress.utils.Charsets.static {...}" "org.apache.commons.compress.utils.Charsets.UTF_16"
reference "org.apache.commons.compress.utils.Charsets.static {...}" "org.apache.commons.compress.utils.Charsets.UTF_16BE"
reference "org.apache.commons.compress.utils.Charsets.static {...}" "org.apache.commons.compress.utils.Charsets.UTF_16LE"
reference "org.apache.commons.compress.utils.Charsets.static {...}" "org.apache.commons.compress.utils.Charsets.UTF_8"
contain "org.apache.commons.compress.utils.Charsets" "org.apache.commons.compress.utils.Charsets.static {...}"
contain "org.apache.commons.compress.utils.Charsets" "org.apache.commons.compress.utils.Charsets.ISO_8859_1"
contain "org.apache.commons.compress.utils.Charsets" "org.apache.commons.compress.utils.Charsets.US_ASCII"
contain "org.apache.commons.compress.utils.Charsets" "org.apache.commons.compress.utils.Charsets.UTF_16"
contain "org.apache.commons.compress.utils.Charsets" "org.apache.commons.compress.utils.Charsets.UTF_16BE"
contain "org.apache.commons.compress.utils.Charsets" "org.apache.commons.compress.utils.Charsets.UTF_16LE"
contain "org.apache.commons.compress.utils.Charsets" "org.apache.commons.compress.utils.Charsets.UTF_8"
reference "org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(1)" "org.apache.commons.compress.archivers.sevenz.CoderBase.acceptableOptions"
contain "org.apache.commons.compress.archivers.sevenz.CoderBase" "org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(1)"
reference "org.apache.commons.compress.archivers.sevenz.CoderBase.canAcceptOptions(1)" "org.apache.commons.compress.archivers.sevenz.CoderBase.acceptableOptions"
contain "org.apache.commons.compress.archivers.sevenz.CoderBase" "org.apache.commons.compress.archivers.sevenz.CoderBase.canAcceptOptions(1)"
reference "org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(1)" "org.apache.commons.compress.archivers.sevenz.CoderBase.NONE"
contain "org.apache.commons.compress.archivers.sevenz.CoderBase" "org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(1)"
contain "org.apache.commons.compress.archivers.sevenz.CoderBase" "org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsFromCoder(2)"
contain "org.apache.commons.compress.archivers.sevenz.CoderBase" "org.apache.commons.compress.archivers.sevenz.CoderBase.decode(5)"
contain "org.apache.commons.compress.archivers.sevenz.CoderBase" "org.apache.commons.compress.archivers.sevenz.CoderBase.encode(2)"
contain "org.apache.commons.compress.archivers.sevenz.CoderBase" "org.apache.commons.compress.archivers.sevenz.CoderBase.numberOptionOrDefault(2)"
reference "org.apache.commons.compress.archivers.sevenz.CoderBase.static {...}" "org.apache.commons.compress.archivers.sevenz.CoderBase.NONE"
contain "org.apache.commons.compress.archivers.sevenz.CoderBase" "org.apache.commons.compress.archivers.sevenz.CoderBase.static {...}"
contain "org.apache.commons.compress.archivers.sevenz.CoderBase" "org.apache.commons.compress.archivers.sevenz.CoderBase.acceptableOptions"
reference "org.apache.commons.compress.archivers.sevenz.CoderBase.NONE" "byte[]"
contain "org.apache.commons.compress.archivers.sevenz.CoderBase" "org.apache.commons.compress.archivers.sevenz.CoderBase.NONE"
contain "org.apache.commons.compress.utils.Iterators" "org.apache.commons.compress.utils.Iterators.addAll(2)"
contain "org.apache.commons.compress.utils.Iterators" "org.apache.commons.compress.utils.Iterators.Iterators(0)"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.CircularBuffer"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.BitStream"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.BinaryTree"
call "org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(3)" "org.apache.commons.compress.archivers.zip.CircularBuffer.CircularBuffer(1)"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(3)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.buffer"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(3)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.dictionarySize"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(3)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.numberOfTrees"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(3)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.minimumMatchLength"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(3)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.in"
contain "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(3)"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.init(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.bits"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.init(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.numberOfTrees"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.init(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.in"
call "org.apache.commons.compress.archivers.zip.ExplodingInputStream.init(0)" "org.apache.commons.compress.archivers.zip.BinaryTree.decode(2)"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.init(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.literalTree"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.init(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.lengthTree"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.init(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.distanceTree"
call "org.apache.commons.compress.archivers.zip.ExplodingInputStream.init(0)" "org.apache.commons.compress.archivers.zip.BitStream.BitStream(1)"
contain "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.init(0)"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.buffer"
call "org.apache.commons.compress.archivers.zip.ExplodingInputStream.read(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.available(0)"
call "org.apache.commons.compress.archivers.zip.ExplodingInputStream.read(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)"
call "org.apache.commons.compress.archivers.zip.ExplodingInputStream.read(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.get(0)"
contain "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.read(0)"
call "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.init(0)"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.bits"
call "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.BitStream.nextBit(0)"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.literalTree"
call "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.BinaryTree.read(1)"
call "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.BitStream.nextByte(0)"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.buffer"
call "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.put(1)"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.dictionarySize"
call "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.BitStream.nextBits(1)"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.distanceTree"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.lengthTree"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.minimumMatchLength"
call "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.copy(2)"
contain "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)"
contain "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.in"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.bits" "org.apache.commons.compress.archivers.zip.BitStream"
contain "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.bits"
contain "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.dictionarySize"
contain "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.numberOfTrees"
contain "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.minimumMatchLength"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.literalTree" "org.apache.commons.compress.archivers.zip.BinaryTree"
contain "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.literalTree"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.lengthTree" "org.apache.commons.compress.archivers.zip.BinaryTree"
contain "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.lengthTree"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.distanceTree" "org.apache.commons.compress.archivers.zip.BinaryTree"
contain "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.distanceTree"
reference "org.apache.commons.compress.archivers.zip.ExplodingInputStream.buffer" "org.apache.commons.compress.archivers.zip.CircularBuffer"
contain "org.apache.commons.compress.archivers.zip.ExplodingInputStream" "org.apache.commons.compress.archivers.zip.ExplodingInputStream.buffer"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveEntry"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "byte[]"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.utils.ArchiveUtils"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.offset"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.currentEntry"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.namebuffer"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.entryOffset"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.nameBuf"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lastModifiedBuf"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.idBuf"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.fileModeBuf"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lengthBuf"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.input"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.closed"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.currentEntry"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.entryOffset"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.offset"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.utils.IOUtils.skip(2)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBytesRead(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.input"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.nameBuf"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lastModifiedBuf"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.idBuf"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(2)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.fileModeBuf"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lengthBuf"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNULongName(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(2)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(6)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.namebuffer"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(1)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(3)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(1)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(1)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(3)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(2)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(3)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(2)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(2)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(3)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(2)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(3)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(1)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(3)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.closed"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.input"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.currentEntry"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.currentEntry"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.entryOffset"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.offset"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.input"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(3)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.count(1)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(3)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(2)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(1)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PREFIX_LEN"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(1)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(1)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(1)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(1)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(1)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.namebuffer"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(1)" "org.apache.commons.compress.utils.IOUtils.readFully(4)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(1)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(1)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNULongName(1)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.static {...}" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PREFIX_LEN"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.static {...}"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.input"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.offset"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.closed"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.currentEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.currentEntry"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.namebuffer" "byte[]"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.namebuffer"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.entryOffset"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.nameBuf" "byte[]"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.nameBuf"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lastModifiedBuf" "byte[]"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lastModifiedBuf"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.idBuf" "byte[]"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.idBuf"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.fileModeBuf" "byte[]"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.fileModeBuf"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lengthBuf" "byte[]"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lengthBuf"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PREFIX"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PREFIX_LEN"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PATTERN"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.GNU_STRING_TABLE_NAME"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStream" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.GNU_LONGNAME_PATTERN"
contain "org.apache.commons.compress.archivers.ArchiveEntry" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.ArchiveEntry" "org.apache.commons.compress.archivers.ArchiveEntry.getSize(0)"
contain "org.apache.commons.compress.archivers.ArchiveEntry" "org.apache.commons.compress.archivers.ArchiveEntry.isDirectory(0)"
contain "org.apache.commons.compress.archivers.ArchiveEntry" "org.apache.commons.compress.archivers.ArchiveEntry.getLastModifiedDate(0)"
contain "org.apache.commons.compress.archivers.ArchiveEntry" "org.apache.commons.compress.archivers.ArchiveEntry.SIZE_UNKNOWN"
reference "org.apache.commons.compress.compressors.bzip2.CRC" "int[]"
call "org.apache.commons.compress.compressors.bzip2.CRC.CRC(0)" "org.apache.commons.compress.compressors.bzip2.CRC.initialiseCRC(0)"
contain "org.apache.commons.compress.compressors.bzip2.CRC" "org.apache.commons.compress.compressors.bzip2.CRC.CRC(0)"
reference "org.apache.commons.compress.compressors.bzip2.CRC.initialiseCRC(0)" "org.apache.commons.compress.compressors.bzip2.CRC.globalCrc"
contain "org.apache.commons.compress.compressors.bzip2.CRC" "org.apache.commons.compress.compressors.bzip2.CRC.initialiseCRC(0)"
reference "org.apache.commons.compress.compressors.bzip2.CRC.getFinalCRC(0)" "org.apache.commons.compress.compressors.bzip2.CRC.globalCrc"
contain "org.apache.commons.compress.compressors.bzip2.CRC" "org.apache.commons.compress.compressors.bzip2.CRC.getFinalCRC(0)"
reference "org.apache.commons.compress.compressors.bzip2.CRC.getGlobalCRC(0)" "org.apache.commons.compress.compressors.bzip2.CRC.globalCrc"
contain "org.apache.commons.compress.compressors.bzip2.CRC" "org.apache.commons.compress.compressors.bzip2.CRC.getGlobalCRC(0)"
reference "org.apache.commons.compress.compressors.bzip2.CRC.setGlobalCRC(1)" "org.apache.commons.compress.compressors.bzip2.CRC.globalCrc"
contain "org.apache.commons.compress.compressors.bzip2.CRC" "org.apache.commons.compress.compressors.bzip2.CRC.setGlobalCRC(1)"
reference "org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(1)" "org.apache.commons.compress.compressors.bzip2.CRC.globalCrc"
reference "org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(1)" "org.apache.commons.compress.compressors.bzip2.CRC.crc32Table"
contain "org.apache.commons.compress.compressors.bzip2.CRC" "org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(1)"
reference "org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(2)" "org.apache.commons.compress.compressors.bzip2.CRC.globalCrc"
reference "org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(2)" "org.apache.commons.compress.compressors.bzip2.CRC.crc32Table"
contain "org.apache.commons.compress.compressors.bzip2.CRC" "org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(2)"
reference "org.apache.commons.compress.compressors.bzip2.CRC.static {...}" "org.apache.commons.compress.compressors.bzip2.CRC.crc32Table"
contain "org.apache.commons.compress.compressors.bzip2.CRC" "org.apache.commons.compress.compressors.bzip2.CRC.static {...}"
reference "org.apache.commons.compress.compressors.bzip2.CRC.crc32Table" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.CRC" "org.apache.commons.compress.compressors.bzip2.CRC.crc32Table"
contain "org.apache.commons.compress.compressors.bzip2.CRC" "org.apache.commons.compress.compressors.bzip2.CRC.globalCrc"
reference "org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge(1)" "org.apache.commons.compress.compressors.pack200.StreamBridge.inputLock"
contain "org.apache.commons.compress.compressors.pack200.StreamBridge" "org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge(1)"
call "org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge(1)"
contain "org.apache.commons.compress.compressors.pack200.StreamBridge" "org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge(0)"
reference "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.inputLock"
reference "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.input"
call "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.getInputView(0)"
contain "org.apache.commons.compress.compressors.pack200.StreamBridge" "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)"
contain "org.apache.commons.compress.compressors.pack200.StreamBridge" "org.apache.commons.compress.compressors.pack200.StreamBridge.getInputView(0)"
call "org.apache.commons.compress.compressors.pack200.StreamBridge.stop(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.close(0)"
reference "org.apache.commons.compress.compressors.pack200.StreamBridge.stop(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.inputLock"
reference "org.apache.commons.compress.compressors.pack200.StreamBridge.stop(0)" "org.apache.commons.compress.compressors.pack200.StreamBridge.input"
contain "org.apache.commons.compress.compressors.pack200.StreamBridge" "org.apache.commons.compress.compressors.pack200.StreamBridge.stop(0)"
contain "org.apache.commons.compress.compressors.pack200.StreamBridge" "org.apache.commons.compress.compressors.pack200.StreamBridge.input"
contain "org.apache.commons.compress.compressors.pack200.StreamBridge" "org.apache.commons.compress.compressors.pack200.StreamBridge.inputLock"
reference "org.apache.commons.compress.archivers.zip.BitStream" "org.apache.commons.compress.utils.BitInputStream"
call "org.apache.commons.compress.archivers.zip.BitStream.BitStream(1)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
contain "org.apache.commons.compress.archivers.zip.BitStream" "org.apache.commons.compress.archivers.zip.BitStream.BitStream(1)"
call "org.apache.commons.compress.archivers.zip.BitStream.nextBit(0)" "org.apache.commons.compress.archivers.zip.BitStream.readBits(1)"
contain "org.apache.commons.compress.archivers.zip.BitStream" "org.apache.commons.compress.archivers.zip.BitStream.nextBit(0)"
call "org.apache.commons.compress.archivers.zip.BitStream.nextBits(1)" "org.apache.commons.compress.archivers.zip.BitStream.readBits(1)"
contain "org.apache.commons.compress.archivers.zip.BitStream" "org.apache.commons.compress.archivers.zip.BitStream.nextBits(1)"
call "org.apache.commons.compress.archivers.zip.BitStream.nextByte(0)" "org.apache.commons.compress.archivers.zip.BitStream.readBits(1)"
contain "org.apache.commons.compress.archivers.zip.BitStream" "org.apache.commons.compress.archivers.zip.BitStream.nextByte(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest" "org.apache.commons.compress.parallel.InputStreamSupplier"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.ZipArchiveEntryRequest(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.zipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.ZipArchiveEntryRequest(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.payloadSupplier"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.ZipArchiveEntryRequest(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.ZipArchiveEntryRequest(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.method"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.ZipArchiveEntryRequest(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.ZipArchiveEntryRequest(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getPayloadStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.payloadSupplier"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getPayloadStream(0)" "org.apache.commons.compress.parallel.InputStreamSupplier.get(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getPayloadStream(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.method"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getMethod(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getZipArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.zipArchiveEntry"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getZipArchiveEntry(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.zipArchiveEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.zipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.payloadSupplier" "org.apache.commons.compress.parallel.InputStreamSupplier"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.payloadSupplier"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.method"
reference "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.FileNameUtil"
reference "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability"
reference "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream"
contain "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.XZUtils(0)"
reference "org.apache.commons.compress.compressors.xz.XZUtils.matches(2)" "org.apache.commons.compress.compressors.xz.XZUtils.HEADER_MAGIC"
contain "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.matches(2)"
reference "org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable(0)" "org.apache.commons.compress.compressors.xz.XZUtils.cachedXZAvailability"
reference "org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable(0)" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.DONT_CACHE"
reference "org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable(0)" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_AVAILABLE"
call "org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable(0)" "org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable(0)"
contain "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable(0)"
call "org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable(0)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(2)"
contain "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable(0)"
reference "org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(1)" "org.apache.commons.compress.compressors.xz.XZUtils.fileNameUtil"
call "org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(1)"
reference "org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(1)" "org.apache.commons.compress.compressors.xz.XZUtils.fileNameUtil"
call "org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(1)"
contain "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(1)"
reference "org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(1)" "org.apache.commons.compress.compressors.xz.XZUtils.fileNameUtil"
call "org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(1)" "org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(1)"
reference "org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(1)" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.DONT_CACHE"
reference "org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(1)" "org.apache.commons.compress.compressors.xz.XZUtils.cachedXZAvailability"
call "org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(1)" "org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable(0)"
reference "org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(1)" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_AVAILABLE"
reference "org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(1)" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_UNAVAILABLE"
contain "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(1)"
reference "org.apache.commons.compress.compressors.xz.XZUtils.getCachedXZAvailability(0)" "org.apache.commons.compress.compressors.xz.XZUtils.cachedXZAvailability"
contain "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.getCachedXZAvailability(0)"
reference "org.apache.commons.compress.compressors.xz.XZUtils.static {...}" "org.apache.commons.compress.compressors.xz.XZUtils.HEADER_MAGIC"
call "org.apache.commons.compress.compressors.xz.XZUtils.static {...}" "org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(2)"
reference "org.apache.commons.compress.compressors.xz.XZUtils.static {...}" "org.apache.commons.compress.compressors.xz.XZUtils.fileNameUtil"
reference "org.apache.commons.compress.compressors.xz.XZUtils.static {...}" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.DONT_CACHE"
reference "org.apache.commons.compress.compressors.xz.XZUtils.static {...}" "org.apache.commons.compress.compressors.xz.XZUtils.cachedXZAvailability"
call "org.apache.commons.compress.compressors.xz.XZUtils.static {...}" "org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(1)"
contain "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.static {...}"
reference "org.apache.commons.compress.compressors.xz.XZUtils.fileNameUtil" "org.apache.commons.compress.compressors.FileNameUtil"
contain "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.fileNameUtil"
reference "org.apache.commons.compress.compressors.xz.XZUtils.HEADER_MAGIC" "byte[]"
contain "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.HEADER_MAGIC"
reference "org.apache.commons.compress.compressors.xz.XZUtils.cachedXZAvailability" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability"
contain "org.apache.commons.compress.compressors.xz.XZUtils" "org.apache.commons.compress.compressors.xz.XZUtils.cachedXZAvailability"
reference "org.apache.commons.compress.compressors.pack200.Pack200Strategy.2" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge"
reference "org.apache.commons.compress.compressors.pack200.Pack200Strategy.2" "org.apache.commons.compress.compressors.pack200.Pack200Strategy"
call "org.apache.commons.compress.compressors.pack200.Pack200Strategy.2.{...}" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.Pack200Strategy(3)"
contain "org.apache.commons.compress.compressors.pack200.Pack200Strategy.2" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.2.{...}"
call "org.apache.commons.compress.compressors.pack200.Pack200Strategy.2.newStreamBridge(0)" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.TempFileCachingStreamBridge(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200Strategy.2" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.2.newStreamBridge(0)"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator" "org.apache.commons.compress.changes.ChangeSetPerformer"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.ZipFileIterator(1)" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.in"
call "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.ZipFileIterator(1)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(0)"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.ZipFileIterator(1)" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.nestedEnum"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.ZipFileIterator(1)"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.hasNext(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.nestedEnum"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.hasNext(0)"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.nestedEnum"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.current"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next(0)"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.getInputStream(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.in"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.getInputStream(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.current"
call "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.getInputStream(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.getInputStream(0)"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.in" "org.apache.commons.compress.archivers.zip.ZipFile"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.in"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.nestedEnum"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.current" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.current"
reference "org.apache.commons.compress.compressors.pack200.Pack200Strategy.1" "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge"
reference "org.apache.commons.compress.compressors.pack200.Pack200Strategy.1" "org.apache.commons.compress.compressors.pack200.Pack200Strategy"
call "org.apache.commons.compress.compressors.pack200.Pack200Strategy.1.{...}" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.Pack200Strategy(3)"
contain "org.apache.commons.compress.compressors.pack200.Pack200Strategy.1" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.1.{...}"
call "org.apache.commons.compress.compressors.pack200.Pack200Strategy.1.newStreamBridge(0)" "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.InMemoryCachingStreamBridge(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200Strategy.1" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.1.newStreamBridge(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.CRC"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2Constants"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.CompressorInputStream"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "boolean[]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "byte[]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "char[][]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "char[]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "int[]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "int[][]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.Rand"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)" "org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)" "org.apache.commons.compress.compressors.bzip2.CRC.CRC(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.in"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.decompressConcatenated"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.in"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(3)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.in"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(3)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(3)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.count(1)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(3)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.makeMaps(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.makeMaps(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.inUse"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.makeMaps(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.seqToUnseq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.makeMaps(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.nInUse"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.makeMaps(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.in"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockSize100k"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsLive"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.computedCombinedCRC"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedBlockCRC"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockRandomised"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockSize100k"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)" "org.apache.commons.compress.compressors.bzip2.CRC.initialiseCRC(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.CRC.getFinalCRC(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.computedBlockCRC"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedBlockCRC"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedCombinedCRC"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.computedCombinedCRC"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedCombinedCRC"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.computedCombinedCRC"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.decompressConcatenated"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(1)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.close(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.in"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.close(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.close(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsLive"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsBuff"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.in"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(1)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(1)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(1)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(7)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.inUse"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.recvDecodingTables_pos"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selector"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selectorMtf"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.makeMaps(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.nInUse"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.temp_charArray2d"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(2)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.temp_charArray2d"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.minLens"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.limit"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.base"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.perm"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(2)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(7)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(2)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.origPtr"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.in"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.ll8"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.unzftab"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selector"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.seqToUnseq"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.getAndMoveToFrontDecode_yy"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.minLens"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.limit"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.base"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.perm"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockSize100k"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.nInUse"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsBuff"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsLive"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.last"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.in"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selector"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.limit"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.minLens"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsLive"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsBuff"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.perm"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.base"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.cftab"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.last"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.initTT(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.ll8"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.unzftab"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.origPtr"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_tPos"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_count"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_i2"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_ch2"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockRandomised"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rNToGo"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rTPos"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_i2"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.last"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_ch2"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_chPrev"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.ll8"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_tPos"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.tt"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rNToGo"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rTPos"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.Rand.rNums(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_i2"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.last"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_ch2"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_chPrev"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.ll8"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_tPos"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.tt"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_ch2"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_chPrev"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_count"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.ll8"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_tPos"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_z"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.tt"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rNToGo"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rTPos"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.Rand.rNums(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_j2"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_j2"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_z"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_ch2"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_i2"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_count"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_ch2"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_chPrev"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_count"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.ll8"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_tPos"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_z"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.tt"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_j2"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_j2"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_z"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_ch2"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(1)"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_i2"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_count"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(2)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.last"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.origPtr"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockSize100k"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockRandomised"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsBuff"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsLive"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc" "org.apache.commons.compress.compressors.bzip2.CRC"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.nInUse"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.in"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.decompressConcatenated"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedBlockCRC"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedCombinedCRC"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.computedBlockCRC"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.computedCombinedCRC"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_count"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_ch2"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_chPrev"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_i2"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_j2"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rNToGo"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rTPos"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_tPos"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_z"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
reference "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField"
call "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField(0)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(0)"
contain "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField" "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField(0)"
call "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField(4)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(4)"
contain "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField" "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField(4)"
call "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField(2)" "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(2)"
contain "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField" "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField(2)"
reference "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.getHeaderId(0)" "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UCOM_ID"
contain "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField" "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.static {...}" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
reference "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.static {...}" "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UCOM_ID"
contain "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField" "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.static {...}"
reference "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UCOM_ID" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField" "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UCOM_ID"
reference "org.apache.commons.compress.archivers.zip.X0014_X509Certificates" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.X0014_X509Certificates" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader"
call "org.apache.commons.compress.archivers.zip.X0014_X509Certificates.X0014_X509Certificates(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.X0014_X509Certificates.X0014_X509Certificates(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.PKWareExtraHeader(1)"
contain "org.apache.commons.compress.archivers.zip.X0014_X509Certificates" "org.apache.commons.compress.archivers.zip.X0014_X509Certificates.X0014_X509Certificates(0)"
reference "org.apache.commons.compress.archivers.sevenz.DeltaDecoder" "org.tukaani.xz.DeltaOptions"
reference "org.apache.commons.compress.archivers.sevenz.DeltaDecoder" "org.tukaani.xz.FinishableWrapperOutputStream"
reference "org.apache.commons.compress.archivers.sevenz.DeltaDecoder" "org.tukaani.xz.UnsupportedOptionsException"
reference "org.apache.commons.compress.archivers.sevenz.DeltaDecoder" "org.apache.commons.compress.archivers.sevenz.CoderBase"
reference "org.apache.commons.compress.archivers.sevenz.DeltaDecoder" "org.apache.commons.compress.archivers.sevenz.Coder"
call "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.DeltaDecoder(0)" "org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(1)"
contain "org.apache.commons.compress.archivers.sevenz.DeltaDecoder" "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.DeltaDecoder(0)"
call "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(5)" "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(1)"
call "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(5)" "org.tukaani.xz.DeltaOptions.DeltaOptions(1)"
call "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(5)" "org.tukaani.xz.DeltaOptions.getInputStream(1)"
contain "org.apache.commons.compress.archivers.sevenz.DeltaDecoder" "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(5)"
call "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(2)" "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.numberOptionOrDefault(2)"
call "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(2)" "org.tukaani.xz.DeltaOptions.DeltaOptions(1)"
call "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(2)" "org.tukaani.xz.FinishableWrapperOutputStream.FinishableWrapperOutputStream(1)"
call "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(2)" "org.tukaani.xz.DeltaOptions.getOutputStream(1)"
call "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(2)" "org.tukaani.xz.UnsupportedOptionsException.getMessage(0)"
contain "org.apache.commons.compress.archivers.sevenz.DeltaDecoder" "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(2)"
call "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsAsProperties(1)" "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.numberOptionOrDefault(2)"
contain "org.apache.commons.compress.archivers.sevenz.DeltaDecoder" "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsAsProperties(1)"
call "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(2)" "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(1)"
contain "org.apache.commons.compress.archivers.sevenz.DeltaDecoder" "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(2)"
reference "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(1)" "org.apache.commons.compress.archivers.sevenz.Coder.properties"
contain "org.apache.commons.compress.archivers.sevenz.DeltaDecoder" "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(1)"
reference "org.apache.commons.compress.utils.BoundedInputStream.BoundedInputStream(2)" "org.apache.commons.compress.utils.BoundedInputStream.in"
reference "org.apache.commons.compress.utils.BoundedInputStream.BoundedInputStream(2)" "org.apache.commons.compress.utils.BoundedInputStream.bytesRemaining"
contain "org.apache.commons.compress.utils.BoundedInputStream" "org.apache.commons.compress.utils.BoundedInputStream.BoundedInputStream(2)"
reference "org.apache.commons.compress.utils.BoundedInputStream.read(0)" "org.apache.commons.compress.utils.BoundedInputStream.bytesRemaining"
reference "org.apache.commons.compress.utils.BoundedInputStream.read(0)" "org.apache.commons.compress.utils.BoundedInputStream.in"
contain "org.apache.commons.compress.utils.BoundedInputStream" "org.apache.commons.compress.utils.BoundedInputStream.read(0)"
reference "org.apache.commons.compress.utils.BoundedInputStream.read(3)" "org.apache.commons.compress.utils.BoundedInputStream.bytesRemaining"
reference "org.apache.commons.compress.utils.BoundedInputStream.read(3)" "org.apache.commons.compress.utils.BoundedInputStream.in"
contain "org.apache.commons.compress.utils.BoundedInputStream" "org.apache.commons.compress.utils.BoundedInputStream.read(3)"
contain "org.apache.commons.compress.utils.BoundedInputStream" "org.apache.commons.compress.utils.BoundedInputStream.close(0)"
contain "org.apache.commons.compress.utils.BoundedInputStream" "org.apache.commons.compress.utils.BoundedInputStream.in"
contain "org.apache.commons.compress.utils.BoundedInputStream" "org.apache.commons.compress.utils.BoundedInputStream.bytesRemaining"
reference "org.apache.commons.compress.utils.CountingOutputStream.CountingOutputStream(1)" "org.apache.commons.compress.utils.CountingOutputStream.bytesWritten"
contain "org.apache.commons.compress.utils.CountingOutputStream" "org.apache.commons.compress.utils.CountingOutputStream.CountingOutputStream(1)"
reference "org.apache.commons.compress.utils.CountingOutputStream.write(1)" "org.apache.commons.compress.utils.CountingOutputStream.out"
call "org.apache.commons.compress.utils.CountingOutputStream.write(1)" "org.apache.commons.compress.utils.CountingOutputStream.count(1)"
contain "org.apache.commons.compress.utils.CountingOutputStream" "org.apache.commons.compress.utils.CountingOutputStream.write(1)"
call "org.apache.commons.compress.utils.CountingOutputStream.write(1)" "org.apache.commons.compress.utils.CountingOutputStream.write(3)"
contain "org.apache.commons.compress.utils.CountingOutputStream" "org.apache.commons.compress.utils.CountingOutputStream.write(1)"
reference "org.apache.commons.compress.utils.CountingOutputStream.write(3)" "org.apache.commons.compress.utils.CountingOutputStream.out"
call "org.apache.commons.compress.utils.CountingOutputStream.write(3)" "org.apache.commons.compress.utils.CountingOutputStream.count(1)"
contain "org.apache.commons.compress.utils.CountingOutputStream" "org.apache.commons.compress.utils.CountingOutputStream.write(3)"
reference "org.apache.commons.compress.utils.CountingOutputStream.count(1)" "org.apache.commons.compress.utils.CountingOutputStream.bytesWritten"
contain "org.apache.commons.compress.utils.CountingOutputStream" "org.apache.commons.compress.utils.CountingOutputStream.count(1)"
reference "org.apache.commons.compress.utils.CountingOutputStream.getBytesWritten(0)" "org.apache.commons.compress.utils.CountingOutputStream.bytesWritten"
contain "org.apache.commons.compress.utils.CountingOutputStream" "org.apache.commons.compress.utils.CountingOutputStream.getBytesWritten(0)"
contain "org.apache.commons.compress.utils.CountingOutputStream" "org.apache.commons.compress.utils.CountingOutputStream.bytesWritten"
reference "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader"
reference "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
call "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.X0015_CertificateIdForFile(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.X0015_CertificateIdForFile(0)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.PKWareExtraHeader(1)"
contain "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile" "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.X0015_CertificateIdForFile(0)"
reference "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.getRecordCount(0)" "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.rcount"
contain "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile" "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.getRecordCount(0)"
reference "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.getHashAlgorithm(0)" "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.hashAlg"
contain "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile" "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.getHashAlgorithm(0)"
call "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(3)"
call "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(2)"
reference "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.rcount"
call "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode(1)"
reference "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.hashAlg"
contain "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile" "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(3)"
contain "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile" "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.rcount"
reference "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.hashAlg" "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
contain "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile" "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.hashAlg"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.ZipExtraField"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.X000A_NTFS(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.X000A_NTFS(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.X000A_NTFS(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.X000A_NTFS(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.X000A_NTFS(0)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.getHeaderId(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.HEADER_ID"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataLength(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCentralDirectoryLength(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataLength(0)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_TAG"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_SIZE"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCentralDirectoryData(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(0)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCentralDirectoryData(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(2)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_TAG"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.ZipShort.equals(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(3)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(3)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.reset(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(3)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(3)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(3)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyTime(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyTime(0)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessTime(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessTime(0)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateTime(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateTime(0)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyJavaTime(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyJavaTime(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(1)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyJavaTime(0)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessJavaTime(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessJavaTime(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(1)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessJavaTime(0)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateJavaTime(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateJavaTime(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(1)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateJavaTime(0)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(1)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(1)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(1)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(1)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(1)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(1)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(1)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(1)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(1)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(1)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(1)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(1)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(1)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(1)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.toString(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyJavaTime(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.toString(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessJavaTime(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.toString(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateJavaTime(0)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.toString(0)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.equals(1)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.equals(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(1)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.equals(1)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.equals(1)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.equals(1)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.hashCode(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.hashCode(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.hashCode(0)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.hashCode(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.hashCode(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.hashCode(0)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.reset(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.reset(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.reset(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.reset(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.reset(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(3)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(2)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(3)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_SIZE"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(3)" "org.apache.commons.compress.archivers.zip.ZipShort.equals(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(3)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(2)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(3)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(3)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(3)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(3)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(1)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(0)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFS.static {...}" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.static {...}" "org.apache.commons.compress.archivers.zip.X000A_NTFS.HEADER_ID"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.static {...}" "org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_TAG"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.static {...}" "org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_SIZE"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.static {...}"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.HEADER_ID" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.HEADER_ID"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_TAG" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_TAG"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_SIZE" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_SIZE"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFS" "org.apache.commons.compress.archivers.zip.X000A_NTFS.EPOCH_OFFSET"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.archivers.zip.NioZipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.utils.Charsets"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.ZipEncodingHelper(0)"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBuffer(2)"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.appendSurrogate(2)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.HEX_DIGITS"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.appendSurrogate(2)"
call "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(1)"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING"
call "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding(0)"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.simpleEncodings"
call "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.getEncoding(0)"
call "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)" "org.apache.commons.compress.archivers.zip.NioZipEncoding.NioZipEncoding(1)"
call "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding(1)"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(1)" "org.apache.commons.compress.utils.Charsets.UTF_8"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(1)"
call "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.static {...}" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.SimpleEncodingHolder(1)"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.static {...}" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.simpleEncodings"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.static {...}" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.HEX_DIGITS"
call "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.static {...}" "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding(1)"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.static {...}" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.static {...}"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.simpleEncodings"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.HEX_DIGITS" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.HEX_DIGITS"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING" "org.apache.commons.compress.archivers.zip.ZipEncoding"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingHelper" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING"
reference "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge"
reference "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.{...}" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.this$0"
contain "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.{...}"
reference "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.close(0)" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.this$0"
call "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.close(0)" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.access$000(1)"
contain "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.close(0)"
reference "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.this$0" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge"
contain "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1" "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.this$0"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ArchiveEntry"
call "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(6)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(6)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.name"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(6)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.length"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(6)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.userId"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(6)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.groupId"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(6)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.mode"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(6)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.lastModified"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(6)"
call "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(6)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
call "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getSize(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength(0)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getSize(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.name"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getUserId(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.userId"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getUserId(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getGroupId(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.groupId"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getGroupId(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getMode(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.mode"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getMode(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModified(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.lastModified"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModified(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModifiedDate(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModified(0)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModifiedDate(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.length"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength(0)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.isDirectory(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.hashCode(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.name"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.hashCode(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveEntry.equals(1)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.name"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.equals(1)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.HEADER"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.TRAILER"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.name"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.userId"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.groupId"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.mode"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.DEFAULT_MODE"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.lastModified"
contain "org.apache.commons.compress.archivers.ar.ArArchiveEntry" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.length"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator" "org.apache.commons.compress.changes.ChangeSetPerformer"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.ArchiveInputStreamIterator(1)" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.in"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.ArchiveInputStreamIterator(1)"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.hasNext(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.in"
call "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.hasNext(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.hasNext(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.hasNext(0)"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next(0)"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.getInputStream(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.in"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.getInputStream(0)"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.in" "org.apache.commons.compress.archivers.ArchiveInputStream"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.in"
reference "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next" "org.apache.commons.compress.archivers.ArchiveEntry"
contain "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator" "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.CurrentEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.CurrentEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.entry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.CurrentEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.crc"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.CurrentEntry(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.CurrentEntry(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$100(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$202(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$200(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$302(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$402(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$300(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$500(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$600(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$700(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$702(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$602(2)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$400(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$708(1)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.entry" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.entry"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.hasDataDescriptor"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.usesZip64"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.bytesRead"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.bytesReadFromStream"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.crc"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.in"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData" "org.apache.commons.compress.compressors.DetectCompressorTestCase"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.TestData(4)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.fileName"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.TestData(4)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.entryNames"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.TestData(4)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.factory"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.TestData(4)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.concat"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.TestData(4)"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.fileName"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.entryNames" "char[]"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.entryNames"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.factory" "org.apache.commons.compress.compressors.CompressorStreamFactory"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.factory"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.concat"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase" "org.apache.commons.compress.compressors.CompressorInputStream"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase" "org.apache.commons.compress.AbstractTestCase.StreamWrapper"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.FramedSnappyTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase" "org.apache.commons.compress.compressors.FramedSnappyTestCase.FramedSnappyTestCase(0)"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.testDefaultExtraction(0)" "org.apache.commons.compress.compressors.FramedSnappyTestCase.1.{...}"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.testDefaultExtraction(0)" "org.apache.commons.compress.compressors.FramedSnappyTestCase.testUnarchive(1)"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase" "org.apache.commons.compress.compressors.FramedSnappyTestCase.testDefaultExtraction(0)"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.testDefaultExtractionViaFactory(0)" "org.apache.commons.compress.compressors.FramedSnappyTestCase.2.{...}"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.testDefaultExtractionViaFactory(0)" "org.apache.commons.compress.compressors.FramedSnappyTestCase.testUnarchive(1)"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase" "org.apache.commons.compress.compressors.FramedSnappyTestCase.testDefaultExtractionViaFactory(0)"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.testDefaultExtractionViaFactoryAutodetection(0)" "org.apache.commons.compress.compressors.FramedSnappyTestCase.3.{...}"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.testDefaultExtractionViaFactoryAutodetection(0)" "org.apache.commons.compress.compressors.FramedSnappyTestCase.testUnarchive(1)"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase" "org.apache.commons.compress.compressors.FramedSnappyTestCase.testDefaultExtractionViaFactoryAutodetection(0)"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.testUnarchive(1)" "org.apache.commons.compress.compressors.FramedSnappyTestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.testUnarchive(1)" "org.apache.commons.compress.compressors.FramedSnappyTestCase.dir"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.testUnarchive(1)" "org.apache.commons.compress.AbstractTestCase.StreamWrapper.wrap(1)"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.testUnarchive(1)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.testUnarchive(1)" "org.apache.commons.compress.compressors.CompressorInputStream.getBytesRead(0)"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.testUnarchive(1)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.testUnarchive(1)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase" "org.apache.commons.compress.compressors.FramedSnappyTestCase.testUnarchive(1)"
reference "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest" "org.apache.commons.compress.compressors.pack200.Pack200Utils"
reference "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.Pack200UtilsTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest" "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.Pack200UtilsTest(0)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(0)" "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.getFile(1)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(0)" "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.createTempDirAndFile(0)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(0)" "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(3)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(0)" "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.dir"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(0)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(0)" "org.apache.commons.compress.archivers.ArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest" "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(0)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(0)" "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.getFile(1)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(0)" "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.createTempDirAndFile(0)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(0)" "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(1)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(0)" "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.dir"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(0)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(0)" "org.apache.commons.compress.archivers.ArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest" "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(0)"
reference "org.apache.commons.compress.archivers.zip.BinaryTreeTest" "org.apache.commons.compress.archivers.zip.BitStream"
reference "org.apache.commons.compress.archivers.zip.BinaryTreeTest" "org.apache.commons.compress.archivers.zip.BinaryTree"
contain "org.apache.commons.compress.archivers.zip.BinaryTreeTest" "org.apache.commons.compress.archivers.zip.BinaryTreeTest.BinaryTreeTest(0)"
call "org.apache.commons.compress.archivers.zip.BinaryTreeTest.testDecode(0)" "org.apache.commons.compress.archivers.zip.BinaryTree.decode(2)"
call "org.apache.commons.compress.archivers.zip.BinaryTreeTest.testDecode(0)" "org.apache.commons.compress.archivers.zip.BitStream.BitStream(1)"
call "org.apache.commons.compress.archivers.zip.BinaryTreeTest.testDecode(0)" "org.apache.commons.compress.archivers.zip.BinaryTree.read(1)"
contain "org.apache.commons.compress.archivers.zip.BinaryTreeTest" "org.apache.commons.compress.archivers.zip.BinaryTreeTest.testDecode(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest" "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.DumpArchiveEntryTest(0)"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.publicNameAddsTrailingSlashForDirectories(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.DIRECTORY"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.publicNameAddsTrailingSlashForDirectories(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.publicNameAddsTrailingSlashForDirectories(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSimpleName(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.publicNameAddsTrailingSlashForDirectories(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOriginalName(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.publicNameAddsTrailingSlashForDirectories(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest" "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.publicNameAddsTrailingSlashForDirectories(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.publicNameRemovesLeadingDotSlash(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(2)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.publicNameRemovesLeadingDotSlash(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSimpleName(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.publicNameRemovesLeadingDotSlash(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOriginalName(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.publicNameRemovesLeadingDotSlash(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest" "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.publicNameRemovesLeadingDotSlash(0)"
reference "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream"
reference "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.archivers.DumpTestCase.DumpTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.DumpTestCase.DumpTestCase(0)"
call "org.apache.commons.compress.archivers.DumpTestCase.testDumpUnarchiveAll(0)" "org.apache.commons.compress.archivers.DumpTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.DumpTestCase.testDumpUnarchiveAll(0)" "org.apache.commons.compress.archivers.DumpTestCase.unarchiveAll(1)"
contain "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.DumpTestCase.testDumpUnarchiveAll(0)"
call "org.apache.commons.compress.archivers.DumpTestCase.testCompressedDumpUnarchiveAll(0)" "org.apache.commons.compress.archivers.DumpTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.DumpTestCase.testCompressedDumpUnarchiveAll(0)" "org.apache.commons.compress.archivers.DumpTestCase.unarchiveAll(1)"
contain "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.DumpTestCase.testCompressedDumpUnarchiveAll(0)"
call "org.apache.commons.compress.archivers.DumpTestCase.unarchiveAll(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.DumpTestCase.unarchiveAll(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.DumpTestCase.unarchiveAll(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.DumpTestCase.unarchiveAll(1)" "org.apache.commons.compress.archivers.DumpTestCase.dir"
call "org.apache.commons.compress.archivers.DumpTestCase.unarchiveAll(1)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.DumpTestCase.unarchiveAll(1)" "org.apache.commons.compress.archivers.ArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.DumpTestCase.unarchiveAll(1)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.DumpTestCase.unarchiveAll(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.DumpTestCase.unarchiveAll(1)"
call "org.apache.commons.compress.archivers.DumpTestCase.testArchiveDetection(0)" "org.apache.commons.compress.archivers.DumpTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.DumpTestCase.testArchiveDetection(0)" "org.apache.commons.compress.archivers.DumpTestCase.archiveDetection(1)"
contain "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.DumpTestCase.testArchiveDetection(0)"
call "org.apache.commons.compress.archivers.DumpTestCase.testCompressedArchiveDetection(0)" "org.apache.commons.compress.archivers.DumpTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.DumpTestCase.testCompressedArchiveDetection(0)" "org.apache.commons.compress.archivers.DumpTestCase.archiveDetection(1)"
contain "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.DumpTestCase.testCompressedArchiveDetection(0)"
call "org.apache.commons.compress.archivers.DumpTestCase.archiveDetection(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.DumpTestCase.archiveDetection(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
contain "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.DumpTestCase.archiveDetection(1)"
call "org.apache.commons.compress.archivers.DumpTestCase.testCheckArchive(0)" "org.apache.commons.compress.archivers.DumpTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.DumpTestCase.testCheckArchive(0)" "org.apache.commons.compress.archivers.DumpTestCase.checkDumpArchive(1)"
contain "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.DumpTestCase.testCheckArchive(0)"
call "org.apache.commons.compress.archivers.DumpTestCase.testCheckCompressedArchive(0)" "org.apache.commons.compress.archivers.DumpTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.DumpTestCase.testCheckCompressedArchive(0)" "org.apache.commons.compress.archivers.DumpTestCase.checkDumpArchive(1)"
contain "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.DumpTestCase.testCheckCompressedArchive(0)"
call "org.apache.commons.compress.archivers.DumpTestCase.checkDumpArchive(1)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.DumpTestCase.checkDumpArchive(1)" "org.apache.commons.compress.archivers.DumpTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.archivers.DumpTestCase" "org.apache.commons.compress.archivers.DumpTestCase.checkDumpArchive(1)"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingTest" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingTest" "byte[]"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingTest" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.zip.ZipEncodingTest" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingTest" "org.apache.commons.compress.archivers.zip.ZipEncodingTest.ZipEncodingTest(0)"
call "org.apache.commons.compress.archivers.zip.ZipEncodingTest.testSimpleCp437Encoding(0)" "org.apache.commons.compress.archivers.zip.ZipEncodingTest.doSimpleEncodingTest(2)"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingTest" "org.apache.commons.compress.archivers.zip.ZipEncodingTest.testSimpleCp437Encoding(0)"
call "org.apache.commons.compress.archivers.zip.ZipEncodingTest.testSimpleCp850Encoding(0)" "org.apache.commons.compress.archivers.zip.ZipEncodingTest.doSimpleEncodingTest(2)"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingTest" "org.apache.commons.compress.archivers.zip.ZipEncodingTest.testSimpleCp850Encoding(0)"
call "org.apache.commons.compress.archivers.zip.ZipEncodingTest.testNioCp1252Encoding(0)" "org.apache.commons.compress.archivers.zip.ZipEncodingTest.doSimpleEncodingTest(2)"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingTest" "org.apache.commons.compress.archivers.zip.ZipEncodingTest.testNioCp1252Encoding(0)"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingTest" "org.apache.commons.compress.archivers.zip.ZipEncodingTest.assertEquals(2)"
call "org.apache.commons.compress.archivers.zip.ZipEncodingTest.doSimpleEncodingTest(2)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
call "org.apache.commons.compress.archivers.zip.ZipEncodingTest.doSimpleEncodingTest(2)" "org.apache.commons.compress.archivers.zip.ZipEncoding.decode(1)"
call "org.apache.commons.compress.archivers.zip.ZipEncodingTest.doSimpleEncodingTest(2)" "org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(1)"
call "org.apache.commons.compress.archivers.zip.ZipEncodingTest.doSimpleEncodingTest(2)" "org.apache.commons.compress.archivers.zip.ZipEncoding.encode(1)"
call "org.apache.commons.compress.archivers.zip.ZipEncodingTest.doSimpleEncodingTest(2)" "org.apache.commons.compress.archivers.zip.ZipEncodingTest.assertEquals(2)"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingTest" "org.apache.commons.compress.archivers.zip.ZipEncodingTest.doSimpleEncodingTest(2)"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingTest" "org.apache.commons.compress.archivers.zip.ZipEncodingTest.UNENC_STRING"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingTest" "org.apache.commons.compress.archivers.zip.ZipEncodingTest.BAD_STRING"
contain "org.apache.commons.compress.archivers.zip.ZipEncodingTest" "org.apache.commons.compress.archivers.zip.ZipEncodingTest.BAD_STRING_ENC"
reference "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.archivers.ArchiveException"
reference "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
reference "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream"
reference "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream"
reference "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream"
reference "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
call "org.apache.commons.compress.DetectArchiverTestCase.DetectArchiverTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
reference "org.apache.commons.compress.DetectArchiverTestCase.DetectArchiverTestCase(0)" "org.apache.commons.compress.DetectArchiverTestCase.classLoader"
contain "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.DetectArchiverTestCase.DetectArchiverTestCase(0)"
call "org.apache.commons.compress.DetectArchiverTestCase.testDetectionNotArchive(0)" "org.apache.commons.compress.DetectArchiverTestCase.getStreamFor(1)"
contain "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.DetectArchiverTestCase.testDetectionNotArchive(0)"
call "org.apache.commons.compress.DetectArchiverTestCase.testCOMPRESS117(0)" "org.apache.commons.compress.DetectArchiverTestCase.getStreamFor(1)"
contain "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.DetectArchiverTestCase.testCOMPRESS117(0)"
call "org.apache.commons.compress.DetectArchiverTestCase.testCOMPRESS335(0)" "org.apache.commons.compress.DetectArchiverTestCase.getStreamFor(1)"
contain "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.DetectArchiverTestCase.testCOMPRESS335(0)"
call "org.apache.commons.compress.DetectArchiverTestCase.testDetection(0)" "org.apache.commons.compress.DetectArchiverTestCase.getStreamFor(1)"
contain "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.DetectArchiverTestCase.testDetection(0)"
reference "org.apache.commons.compress.DetectArchiverTestCase.getStreamFor(1)" "org.apache.commons.compress.DetectArchiverTestCase.factory"
call "org.apache.commons.compress.DetectArchiverTestCase.getStreamFor(1)" "org.apache.commons.compress.DetectArchiverTestCase.getFile(1)"
call "org.apache.commons.compress.DetectArchiverTestCase.getStreamFor(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
contain "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.DetectArchiverTestCase.getStreamFor(1)"
call "org.apache.commons.compress.DetectArchiverTestCase.testEmptyCpioArchive(0)" "org.apache.commons.compress.DetectArchiverTestCase.checkEmptyArchive(1)"
contain "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.DetectArchiverTestCase.testEmptyCpioArchive(0)"
call "org.apache.commons.compress.DetectArchiverTestCase.testEmptyJarArchive(0)" "org.apache.commons.compress.DetectArchiverTestCase.checkEmptyArchive(1)"
contain "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.DetectArchiverTestCase.testEmptyJarArchive(0)"
call "org.apache.commons.compress.DetectArchiverTestCase.testEmptyZipArchive(0)" "org.apache.commons.compress.DetectArchiverTestCase.checkEmptyArchive(1)"
contain "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.DetectArchiverTestCase.testEmptyZipArchive(0)"
call "org.apache.commons.compress.DetectArchiverTestCase.checkEmptyArchive(1)" "org.apache.commons.compress.DetectArchiverTestCase.createEmptyArchive(1)"
reference "org.apache.commons.compress.DetectArchiverTestCase.checkEmptyArchive(1)" "org.apache.commons.compress.DetectArchiverTestCase.factory"
call "org.apache.commons.compress.DetectArchiverTestCase.checkEmptyArchive(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
call "org.apache.commons.compress.DetectArchiverTestCase.checkEmptyArchive(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.DetectArchiverTestCase.checkEmptyArchive(1)"
contain "org.apache.commons.compress.DetectArchiverTestCase" "org.apache.commons.compress.DetectArchiverTestCase.classLoader"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest" "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest.DumpArchiveUtilTest(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest.convert64(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest" "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest.convert64(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest.convert32(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest" "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest.convert32(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest.convert16(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(2)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest" "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest.convert16(0)"
reference "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
reference "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream"
reference "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream"
reference "org.apache.commons.compress.archivers.LongPathTest" "junit.framework.AssertionFailedError"
reference "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
call "org.apache.commons.compress.archivers.LongPathTest.LongPathTest(1)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
reference "org.apache.commons.compress.archivers.LongPathTest.LongPathTest(1)" "org.apache.commons.compress.archivers.LongPathTest.ARCDIR"
reference "org.apache.commons.compress.archivers.LongPathTest.LongPathTest(1)" "org.apache.commons.compress.archivers.LongPathTest.file"
contain "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.LongPathTest.LongPathTest(1)"
reference "org.apache.commons.compress.archivers.LongPathTest.setUpFileList(0)" "org.apache.commons.compress.archivers.LongPathTest.ARCDIR"
reference "org.apache.commons.compress.archivers.LongPathTest.setUpFileList(0)" "org.apache.commons.compress.archivers.LongPathTest.FILELIST"
contain "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.LongPathTest.setUpFileList(0)"
reference "org.apache.commons.compress.archivers.LongPathTest.data(0)" "org.apache.commons.compress.archivers.LongPathTest.ARCDIR"
call "org.apache.commons.compress.archivers.LongPathTest.data(0)" "org.apache.commons.compress.archivers.LongPathTest.1.{...}"
contain "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.LongPathTest.data(0)"
call "org.apache.commons.compress.archivers.LongPathTest.getExpectedString(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink(0)"
call "org.apache.commons.compress.archivers.LongPathTest.getExpectedString(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.LongPathTest.getExpectedString(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName(0)"
call "org.apache.commons.compress.archivers.LongPathTest.getExpectedString(1)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.LongPathTest.getExpectedString(1)"
reference "org.apache.commons.compress.archivers.LongPathTest.testArchive(0)" "org.apache.commons.compress.archivers.LongPathTest.FILELIST"
reference "org.apache.commons.compress.archivers.LongPathTest.testArchive(0)" "org.apache.commons.compress.archivers.LongPathTest.file"
reference "org.apache.commons.compress.archivers.LongPathTest.testArchive(0)" "org.apache.commons.compress.archivers.LongPathTest.factory"
call "org.apache.commons.compress.archivers.LongPathTest.testArchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.LongPathTest.testArchive(0)" "org.apache.commons.compress.archivers.LongPathTest.checkArchiveContent(2)"
call "org.apache.commons.compress.archivers.LongPathTest.testArchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.LongPathTest.testArchive(0)"
reference "org.apache.commons.compress.archivers.LongPathTest.static {...}" "org.apache.commons.compress.archivers.LongPathTest.CLASSLOADER"
reference "org.apache.commons.compress.archivers.LongPathTest.static {...}" "org.apache.commons.compress.archivers.LongPathTest.ARCDIR"
reference "org.apache.commons.compress.archivers.LongPathTest.static {...}" "org.apache.commons.compress.archivers.LongPathTest.FILELIST"
contain "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.LongPathTest.static {...}"
contain "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.LongPathTest.CLASSLOADER"
contain "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.LongPathTest.ARCDIR"
contain "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.LongPathTest.FILELIST"
contain "org.apache.commons.compress.archivers.LongPathTest" "org.apache.commons.compress.archivers.LongPathTest.file"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSet"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.Change"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetPerformer"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.archivers.jar.JarArchiveEntry"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.archivers.ar.ArArchiveEntry"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetResults"
call "org.apache.commons.compress.changes.ChangeSetTestCase.ChangeSetTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.ChangeSetTestCase(0)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDeleteDir(1)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDeleteDir(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDelete(1)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDelete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwice(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwice(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwice(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwice(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwice(0)" "org.apache.commons.compress.changes.ChangeSet.getChanges(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwice(0)" "org.apache.commons.compress.changes.Change.getInput(0)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwice(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwiceWithoutReplace(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwiceWithoutReplace(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwiceWithoutReplace(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwiceWithoutReplace(0)" "org.apache.commons.compress.changes.ChangeSet.add(3)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwiceWithoutReplace(0)" "org.apache.commons.compress.changes.ChangeSet.getChanges(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwiceWithoutReplace(0)" "org.apache.commons.compress.changes.Change.getInput(0)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwiceWithoutReplace(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)" "org.apache.commons.compress.changes.ChangeSet.deleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDeleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)" "org.apache.commons.compress.changes.ChangeSet.deleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDeleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)" "org.apache.commons.compress.changes.ChangeSet.deleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDeleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDelete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDelete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(3)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.rmdir(1)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSet.deleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDeleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetResults.getAddedFromChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetResults.getDeleted(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetResults.getAddedFromStream(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.changes.ChangeSet.deleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDeleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDelete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDelete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.changes.ChangeSet.deleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDeleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.changes.ChangeSet.deleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDeleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.dir"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)" "org.apache.commons.compress.changes.ChangeSet.deleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.dir"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.dir"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.changes.ChangeSet.deleteDir(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.dir"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.dir"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.dir"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testRenameAndDelete(0)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testAddMoveDelete(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createEmptyArchive(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createSingleEntryArchive(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDelete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createSingleEntryArchive(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSet.add(2)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSet.delete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDelete(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.changes.ChangeSet.add(3)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.changes.ChangeSetResults.getAddedFromChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.changes.ChangeSet.add(3)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.changes.ChangeSetResults.getAddedFromStream(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.changes.ChangeSetResults.getAddedFromChangeSet(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.changes.ChangeSetResults.getDeleted(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
reference "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
call "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)" "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.changes.ChangeSetTestCase" "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)"
reference "org.apache.commons.compress.ChainingTestCase" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
reference "org.apache.commons.compress.ChainingTestCase" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream"
reference "org.apache.commons.compress.ChainingTestCase" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.ChainingTestCase" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"
reference "org.apache.commons.compress.ChainingTestCase" "org.apache.commons.compress.AbstractTestCase"
call "org.apache.commons.compress.ChainingTestCase.ChainingTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.ChainingTestCase" "org.apache.commons.compress.ChainingTestCase.ChainingTestCase(0)"
call "org.apache.commons.compress.ChainingTestCase.testTarGzip(0)" "org.apache.commons.compress.ChainingTestCase.getFile(1)"
call "org.apache.commons.compress.ChainingTestCase.testTarGzip(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(1)"
call "org.apache.commons.compress.ChainingTestCase.testTarGzip(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.ChainingTestCase.testTarGzip(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.ChainingTestCase.testTarGzip(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.ChainingTestCase.testTarGzip(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.ChainingTestCase" "org.apache.commons.compress.ChainingTestCase.testTarGzip(0)"
call "org.apache.commons.compress.ChainingTestCase.testTarBzip2(0)" "org.apache.commons.compress.ChainingTestCase.getFile(1)"
call "org.apache.commons.compress.ChainingTestCase.testTarBzip2(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(1)"
call "org.apache.commons.compress.ChainingTestCase.testTarBzip2(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.ChainingTestCase.testTarBzip2(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.ChainingTestCase.testTarBzip2(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.ChainingTestCase.testTarBzip2(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.ChainingTestCase" "org.apache.commons.compress.ChainingTestCase.testTarBzip2(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.SevenZArchiveEntryTest(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.shouldThrowIfNoLastModifiedDateIsSet(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.shouldThrowIfNoLastModifiedDateIsSet(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.shouldThrowIfNoLastModifiedDateIsSet(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.shouldThrowIfNoCreationDateIsSet(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.shouldThrowIfNoCreationDateIsSet(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.shouldThrowIfNoCreationDateIsSet(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.shouldThrowIfNoAccessDateIsSet(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.shouldThrowIfNoAccessDateIsSet(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.shouldThrowIfNoAccessDateIsSet(0)"
reference "org.apache.commons.compress.compressors.DeflateTestCase" "org.apache.commons.compress.compressors.CompressorStreamFactory"
reference "org.apache.commons.compress.compressors.DeflateTestCase" "org.apache.commons.compress.compressors.deflate.DeflateParameters"
reference "org.apache.commons.compress.compressors.DeflateTestCase" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream"
reference "org.apache.commons.compress.compressors.DeflateTestCase" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream"
reference "org.apache.commons.compress.compressors.DeflateTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.DeflateTestCase" "org.apache.commons.compress.compressors.CompressorOutputStream"
reference "org.apache.commons.compress.compressors.DeflateTestCase" "org.apache.commons.compress.compressors.CompressorInputStream"
reference "org.apache.commons.compress.compressors.DeflateTestCase" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.compressors.DeflateTestCase.DeflateTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.compressors.DeflateTestCase" "org.apache.commons.compress.compressors.DeflateTestCase.DeflateTestCase(0)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateCreation(0)" "org.apache.commons.compress.compressors.DeflateTestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateCreation(0)" "org.apache.commons.compress.compressors.DeflateTestCase.dir"
call "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateCreation(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateCreation(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateCreation(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateCreation(0)" "org.apache.commons.compress.compressors.CompressorOutputStream.close(0)"
contain "org.apache.commons.compress.compressors.DeflateTestCase" "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateCreation(0)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateCreation(0)" "org.apache.commons.compress.compressors.DeflateTestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateCreation(0)" "org.apache.commons.compress.compressors.DeflateTestCase.dir"
call "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateCreation(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters(0)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateCreation(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(1)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateCreation(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateCreation(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateCreation(0)" "org.apache.commons.compress.compressors.CompressorOutputStream.close(0)"
contain "org.apache.commons.compress.compressors.DeflateTestCase" "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateCreation(0)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateUnarchive(0)" "org.apache.commons.compress.compressors.DeflateTestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateUnarchive(0)" "org.apache.commons.compress.compressors.DeflateTestCase.dir"
call "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateUnarchive(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateUnarchive(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateUnarchive(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateUnarchive(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.DeflateTestCase" "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateUnarchive(0)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateUnarchive(0)" "org.apache.commons.compress.compressors.DeflateTestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateUnarchive(0)" "org.apache.commons.compress.compressors.DeflateTestCase.dir"
call "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateUnarchive(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters(0)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateUnarchive(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(1)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateUnarchive(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateUnarchive(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateUnarchive(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.DeflateTestCase" "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateUnarchive(0)"
reference "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream"
reference "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream"
reference "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.pack200.Pack200Strategy"
reference "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.compressors.Pack200TestCase" "byte[]"
reference "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.archivers.ArchiveOutputStream"
call "org.apache.commons.compress.compressors.Pack200TestCase.Pack200TestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.Pack200TestCase(0)"
reference "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(0)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY"
call "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(0)" "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(0)"
reference "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(0)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY"
call "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(0)" "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(0)"
reference "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(0)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE"
call "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(0)" "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(0)"
reference "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(0)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE"
call "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(0)" "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(0)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)" "org.apache.commons.compress.compressors.Pack200TestCase.getFile(1)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)" "org.apache.commons.compress.compressors.Pack200TestCase.dir"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)" "org.apache.commons.compress.archivers.ArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)"
reference "org.apache.commons.compress.compressors.Pack200TestCase.testJarArchiveCreationInMemory(0)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY"
call "org.apache.commons.compress.compressors.Pack200TestCase.testJarArchiveCreationInMemory(0)" "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.testJarArchiveCreationInMemory(0)"
reference "org.apache.commons.compress.compressors.Pack200TestCase.testJarArchiveCreationTempFile(0)" "org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE"
call "org.apache.commons.compress.compressors.Pack200TestCase.testJarArchiveCreationTempFile(0)" "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.testJarArchiveCreationTempFile(0)"
reference "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.compressors.Pack200TestCase.dir"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.compressors.Pack200TestCase.getFile(1)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(1)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.compressors.Pack200TestCase.checkArchiveContent(2)"
call "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)"
call "org.apache.commons.compress.compressors.Pack200TestCase.testGoodSignature(0)" "org.apache.commons.compress.compressors.Pack200TestCase.getFile(1)"
call "org.apache.commons.compress.compressors.Pack200TestCase.testGoodSignature(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(2)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.testGoodSignature(0)"
call "org.apache.commons.compress.compressors.Pack200TestCase.testBadSignature(0)" "org.apache.commons.compress.compressors.Pack200TestCase.getFile(1)"
call "org.apache.commons.compress.compressors.Pack200TestCase.testBadSignature(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(2)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.testBadSignature(0)"
call "org.apache.commons.compress.compressors.Pack200TestCase.testShortSignature(0)" "org.apache.commons.compress.compressors.Pack200TestCase.getFile(1)"
call "org.apache.commons.compress.compressors.Pack200TestCase.testShortSignature(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(2)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.testShortSignature(0)"
call "org.apache.commons.compress.compressors.Pack200TestCase.testInputStreamMethods(0)" "org.apache.commons.compress.compressors.Pack200TestCase.getFile(1)"
call "org.apache.commons.compress.compressors.Pack200TestCase.testInputStreamMethods(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.testInputStreamMethods(0)"
reference "org.apache.commons.compress.compressors.Pack200TestCase.testOutputStreamMethods(0)" "org.apache.commons.compress.compressors.Pack200TestCase.dir"
call "org.apache.commons.compress.compressors.Pack200TestCase.testOutputStreamMethods(0)" "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(2)"
contain "org.apache.commons.compress.compressors.Pack200TestCase" "org.apache.commons.compress.compressors.Pack200TestCase.testOutputStreamMethods(0)"
reference "org.apache.commons.compress.ArchiveReadTest" "org.apache.commons.compress.archivers.ArchiveException"
reference "org.apache.commons.compress.ArchiveReadTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.ArchiveReadTest" "org.apache.commons.compress.archivers.ArchiveEntry"
call "org.apache.commons.compress.ArchiveReadTest.ArchiveReadTest(1)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
reference "org.apache.commons.compress.ArchiveReadTest.ArchiveReadTest(1)" "org.apache.commons.compress.ArchiveReadTest.ARCDIR"
reference "org.apache.commons.compress.ArchiveReadTest.ArchiveReadTest(1)" "org.apache.commons.compress.ArchiveReadTest.file"
contain "org.apache.commons.compress.ArchiveReadTest" "org.apache.commons.compress.ArchiveReadTest.ArchiveReadTest(1)"
reference "org.apache.commons.compress.ArchiveReadTest.setUpFileList(0)" "org.apache.commons.compress.ArchiveReadTest.ARCDIR"
reference "org.apache.commons.compress.ArchiveReadTest.setUpFileList(0)" "org.apache.commons.compress.ArchiveReadTest.FILELIST"
contain "org.apache.commons.compress.ArchiveReadTest" "org.apache.commons.compress.ArchiveReadTest.setUpFileList(0)"
reference "org.apache.commons.compress.ArchiveReadTest.data(0)" "org.apache.commons.compress.ArchiveReadTest.ARCDIR"
call "org.apache.commons.compress.ArchiveReadTest.data(0)" "org.apache.commons.compress.ArchiveReadTest.1.{...}"
contain "org.apache.commons.compress.ArchiveReadTest" "org.apache.commons.compress.ArchiveReadTest.data(0)"
call "org.apache.commons.compress.ArchiveReadTest.getExpectedString(1)" "org.apache.commons.compress.archivers.ArchiveEntry.getSize(0)"
call "org.apache.commons.compress.ArchiveReadTest.getExpectedString(1)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
contain "org.apache.commons.compress.ArchiveReadTest" "org.apache.commons.compress.ArchiveReadTest.getExpectedString(1)"
reference "org.apache.commons.compress.ArchiveReadTest.testArchive(0)" "org.apache.commons.compress.ArchiveReadTest.FILELIST"
reference "org.apache.commons.compress.ArchiveReadTest.testArchive(0)" "org.apache.commons.compress.ArchiveReadTest.file"
call "org.apache.commons.compress.ArchiveReadTest.testArchive(0)" "org.apache.commons.compress.ArchiveReadTest.checkArchiveContent(2)"
contain "org.apache.commons.compress.ArchiveReadTest" "org.apache.commons.compress.ArchiveReadTest.testArchive(0)"
reference "org.apache.commons.compress.ArchiveReadTest.static {...}" "org.apache.commons.compress.ArchiveReadTest.CLASSLOADER"
reference "org.apache.commons.compress.ArchiveReadTest.static {...}" "org.apache.commons.compress.ArchiveReadTest.ARCDIR"
reference "org.apache.commons.compress.ArchiveReadTest.static {...}" "org.apache.commons.compress.ArchiveReadTest.FILELIST"
contain "org.apache.commons.compress.ArchiveReadTest" "org.apache.commons.compress.ArchiveReadTest.static {...}"
contain "org.apache.commons.compress.ArchiveReadTest" "org.apache.commons.compress.ArchiveReadTest.CLASSLOADER"
contain "org.apache.commons.compress.ArchiveReadTest" "org.apache.commons.compress.ArchiveReadTest.ARCDIR"
contain "org.apache.commons.compress.ArchiveReadTest" "org.apache.commons.compress.ArchiveReadTest.FILELIST"
contain "org.apache.commons.compress.ArchiveReadTest" "org.apache.commons.compress.ArchiveReadTest.file"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.AsiExtraField"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ZipExtraField"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.UnixStat"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ZipExtraField[]"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "byte[]"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.ExtraFieldUtilsTest(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.a"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(1)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(1)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.UnrecognizedExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.dummy"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.UNRECOGNIZED_HEADER"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(1)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(1)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(1)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.aLocal"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataData(0)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.data"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataLength(0)"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParse(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.data"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParse(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(1)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParse(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParse(0)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParse(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParse(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.aLocal"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParse(0)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithRead(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.data"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithRead(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithRead(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithRead(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithRead(0)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithRead(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithRead(0)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataData(0)"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithRead(0)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithSkip(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.data"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithSkip(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.SKIP"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithSkip(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithSkip(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithSkip(0)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithSkip(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithSkip(0)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMerge(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.a"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMerge(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.dummy"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMerge(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(1)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMerge(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.data"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMerge(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryData(0)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMerge(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.aLocal"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMerge(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMerge(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMerge(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(1)"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMerge(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMergeWithUnparseableData(0)" "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.UnparseableExtraFieldData(0)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMergeWithUnparseableData(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.UNRECOGNIZED_HEADER"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMergeWithUnparseableData(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMergeWithUnparseableData(0)" "org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(3)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMergeWithUnparseableData(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.a"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMergeWithUnparseableData(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(1)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMergeWithUnparseableData(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.data"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMergeWithUnparseableData(0)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryData(0)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMergeWithUnparseableData(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.aLocal"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMergeWithUnparseableData(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(1)"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMergeWithUnparseableData(0)"
call "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.static {...}" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.static {...}" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.UNRECOGNIZED_HEADER"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.static {...}"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.UNRECOGNIZED_HEADER" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.UNRECOGNIZED_HEADER"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.a" "org.apache.commons.compress.archivers.zip.AsiExtraField"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.a"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.dummy" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.dummy"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.data" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.data"
reference "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.aLocal" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.aLocal"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.3" "org.apache.commons.compress.compressors.CompressorStreamFactory"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.3" "org.apache.commons.compress.AbstractTestCase.StreamWrapper"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.3" "org.apache.commons.compress.compressors.FramedSnappyTestCase"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.3" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.3.{...}" "org.apache.commons.compress.compressors.FramedSnappyTestCase.3.this$0"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase.3" "org.apache.commons.compress.compressors.FramedSnappyTestCase.3.{...}"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.3.wrap(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.3.wrap(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase.3" "org.apache.commons.compress.compressors.FramedSnappyTestCase.3.wrap(1)"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.3.this$0" "org.apache.commons.compress.compressors.FramedSnappyTestCase"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase.3" "org.apache.commons.compress.compressors.FramedSnappyTestCase.3.this$0"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.2" "org.apache.commons.compress.compressors.CompressorStreamFactory"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.2" "org.apache.commons.compress.AbstractTestCase.StreamWrapper"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.2" "org.apache.commons.compress.compressors.FramedSnappyTestCase"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.2" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.2.{...}" "org.apache.commons.compress.compressors.FramedSnappyTestCase.2.this$0"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase.2" "org.apache.commons.compress.compressors.FramedSnappyTestCase.2.{...}"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.2.wrap(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.2.wrap(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase.2" "org.apache.commons.compress.compressors.FramedSnappyTestCase.2.wrap(1)"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.2.this$0" "org.apache.commons.compress.compressors.FramedSnappyTestCase"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase.2" "org.apache.commons.compress.compressors.FramedSnappyTestCase.2.this$0"
reference "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream"
reference "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.zip.JarMarker"
reference "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest" "org.apache.commons.compress.AbstractTestCase"
contain "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.JarArchiveOutputStreamTest(0)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(0)" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(0)" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(0)" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(0)" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.finish(0)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(0)" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(0)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(0)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
call "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(0)" "org.apache.commons.compress.AbstractTestCase.tryHardToDelete(1)"
contain "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(0)"
reference "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException"
reference "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit"
reference "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature"
contain "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest" "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.EncryptedArchiveTest(0)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaZipFile(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaZipFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaZipFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaZipFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaZipFile(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption(0)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaZipFile(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption(0)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaZipFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(1)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaZipFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
reference "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaZipFile(0)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.ENCRYPTION"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaZipFile(0)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getFeature(0)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaZipFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest" "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaZipFile(0)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption(0)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption(0)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(1)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)"
reference "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.ENCRYPTION"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)" "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getFeature(0)"
call "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest" "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFile"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.tukaani.xz.LZMA2Options"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.tukaani.xz.XZ"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "byte[]"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.SevenZOutputFileTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.SevenZOutputFileTest(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.tearDown(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.tearDown(0)" "org.apache.commons.compress.AbstractTestCase.tearDown(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.tearDown(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.$assertionsDisabled"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasAccessDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCreationDate(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getWindowsAttributes(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.$assertionsDisabled"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCantFinishTwice(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCantFinishTwice(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCantFinishTwice(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCantFinishTwice(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCantFinishTwice(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCantFinishTwice(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSixEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSixEmptyFiles(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSixFilesSomeNotEmpty(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSixFilesSomeNotEmpty(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSevenEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSevenEmptyFiles(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSevenFilesSomeNotEmpty(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSevenFilesSomeNotEmpty(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testEightEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testEightEmptyFiles(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testEightFilesSomeNotEmpty(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testEightFilesSomeNotEmpty(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testNineEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testNineEmptyFiles(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testNineFilesSomeNotEmpty(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testNineFilesSomeNotEmpty(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testTwentyNineEmptyFiles(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testTwentyNineEmptyFiles(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testTwentyNineFilesSomeNotEmpty(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testTwentyNineFilesSomeNotEmpty(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCopyRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCopyRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testRoundTrip(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCopyRoundtrip(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBzip2Roundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBzip2Roundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testRoundTrip(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBzip2Roundtrip(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2Roundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2Roundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testRoundTrip(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2Roundtrip(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeflateRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeflateRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testRoundTrip(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeflateRoundtrip(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJX86Roundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.XZ_BCJ_IS_BUGGY"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJX86Roundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_X86_FILTER"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJX86Roundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJX86Roundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJX86Roundtrip(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJARMRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.XZ_BCJ_IS_BUGGY"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJARMRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_FILTER"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJARMRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJARMRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJARMRoundtrip(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJARMThumbRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.XZ_BCJ_IS_BUGGY"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJARMThumbRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_THUMB_FILTER"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJARMThumbRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJARMThumbRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJARMThumbRoundtrip(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJIA64Roundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.XZ_BCJ_IS_BUGGY"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJIA64Roundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_IA64_FILTER"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJIA64Roundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJIA64Roundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJIA64Roundtrip(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJPPCRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.XZ_BCJ_IS_BUGGY"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJPPCRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_PPC_FILTER"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJPPCRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJPPCRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJPPCRoundtrip(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJSparcRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.XZ_BCJ_IS_BUGGY"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJSparcRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_SPARC_FILTER"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJSparcRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJSparcRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJSparcRoundtrip(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeltaRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DELTA_FILTER"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeltaRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeltaRoundtrip(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeltaRoundtrip(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressions(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressions(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressions(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressions(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressions(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressions(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressions(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressions(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressions(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressionsInMemory(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressionsInMemory(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressionsInMemory(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressionsInMemory(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressionsInMemory(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressionsInMemory(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressionsInMemory(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressionsInMemory(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeflateWithConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeflateWithConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeflateWithConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeflateWithConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeflateWithConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeflateWithConfiguration(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBzip2WithConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBzip2WithConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBzip2WithConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBzip2WithConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBzip2WithConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBzip2WithConfiguration(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithIntConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithIntConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithIntConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithIntConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithIntConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithIntConfiguration(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithOptionsConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithOptionsConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithOptionsConfiguration(0)" "org.tukaani.xz.LZMA2Options.LZMA2Options(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithOptionsConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithOptionsConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithOptionsConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithOptionsConfiguration(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithIntConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithIntConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithIntConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithIntConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithIntConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithIntConfiguration(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithOptionsConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithOptionsConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithOptionsConfiguration(0)" "org.tukaani.xz.LZMA2Options.LZMA2Options(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithOptionsConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithOptionsConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithOptionsConfiguration(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithOptionsConfiguration(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(3)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(4)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addDir(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(3)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyDir(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(3)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(3)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addDir(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addDir(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addDir(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addDir(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addDir(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyDir(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyDir(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyDir(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyDir(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(3)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(4)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(4)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(4)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(3)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(3)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(3)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(3)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(3)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.assertContentMethodsEquals(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(3)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testRoundTrip(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testRoundTrip(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testRoundTrip(1)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testRoundTrip(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testRoundTrip(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.assertContentMethodsEquals(2)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.assertContentMethodsEquals(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.$assertionsDisabled"
reference "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.XZ_BCJ_IS_BUGGY"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.static {...}"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.XZ_BCJ_IS_BUGGY"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
contain "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.$assertionsDisabled"
reference "org.apache.commons.compress.archivers.zip.X000A_NTFSTest" "org.apache.commons.compress.archivers.zip.X000A_NTFS"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFSTest" "org.apache.commons.compress.archivers.zip.X000A_NTFSTest.X000A_NTFSTest(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFSTest.simpleRountrip(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.X000A_NTFS(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFSTest.simpleRountrip(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFSTest.simpleRountrip(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFSTest.simpleRountrip(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFSTest.simpleRountrip(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFSTest.simpleRountrip(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFSTest.simpleRountrip(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyJavaTime(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFSTest.simpleRountrip(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessJavaTime(0)"
call "org.apache.commons.compress.archivers.zip.X000A_NTFSTest.simpleRountrip(0)" "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateJavaTime(0)"
contain "org.apache.commons.compress.archivers.zip.X000A_NTFSTest" "org.apache.commons.compress.archivers.zip.X000A_NTFSTest.simpleRountrip(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1" "org.apache.commons.compress.parallel.InputStreamSupplier"
reference "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1" "org.apache.commons.compress.archivers.zip.ScatterSampleTest"
reference "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1.{...}" "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1.this$0"
contain "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1" "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1.{...}"
contain "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1" "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1.get(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1.this$0" "org.apache.commons.compress.archivers.zip.ScatterSampleTest"
contain "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1" "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1.this$0"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1" "org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.this$0"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.{...}"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.get(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.this$0"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.get(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.access$002(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.get(0)" "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.FileBasedScatterGatherBackingStore(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.get(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.this$0" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.this$0"
reference "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.archivers.ar.ArArchiveEntry"
reference "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"
reference "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.archivers.jar.JarArchiveEntry"
reference "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.IOMethodsTest" "byte[]"
reference "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
call "org.apache.commons.compress.IOMethodsTest.IOMethodsTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.IOMethodsTest(0)"
call "org.apache.commons.compress.IOMethodsTest.testWriteAr(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
call "org.apache.commons.compress.IOMethodsTest.testWriteAr(0)" "org.apache.commons.compress.IOMethodsTest.compareWrites(2)"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.testWriteAr(0)"
call "org.apache.commons.compress.IOMethodsTest.testWriteCpio(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)"
call "org.apache.commons.compress.IOMethodsTest.testWriteCpio(0)" "org.apache.commons.compress.IOMethodsTest.compareWrites(2)"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.testWriteCpio(0)"
call "org.apache.commons.compress.IOMethodsTest.testWriteJar(0)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)"
call "org.apache.commons.compress.IOMethodsTest.testWriteJar(0)" "org.apache.commons.compress.IOMethodsTest.compareWrites(2)"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.testWriteJar(0)"
call "org.apache.commons.compress.IOMethodsTest.testWriteTar(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.IOMethodsTest.testWriteTar(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.IOMethodsTest.testWriteTar(0)" "org.apache.commons.compress.IOMethodsTest.compareWrites(2)"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.testWriteTar(0)"
call "org.apache.commons.compress.IOMethodsTest.testWriteZip(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.IOMethodsTest.testWriteZip(0)" "org.apache.commons.compress.IOMethodsTest.compareWrites(2)"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.testWriteZip(0)"
call "org.apache.commons.compress.IOMethodsTest.testReadAr(0)" "org.apache.commons.compress.IOMethodsTest.compareReads(1)"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.testReadAr(0)"
call "org.apache.commons.compress.IOMethodsTest.testReadCpio(0)" "org.apache.commons.compress.IOMethodsTest.compareReads(1)"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.testReadCpio(0)"
call "org.apache.commons.compress.IOMethodsTest.testReadJar(0)" "org.apache.commons.compress.IOMethodsTest.compareReads(1)"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.testReadJar(0)"
call "org.apache.commons.compress.IOMethodsTest.testReadTar(0)" "org.apache.commons.compress.IOMethodsTest.compareReads(1)"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.testReadTar(0)"
call "org.apache.commons.compress.IOMethodsTest.testReadZip(0)" "org.apache.commons.compress.IOMethodsTest.compareReads(1)"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.testReadZip(0)"
reference "org.apache.commons.compress.IOMethodsTest.compareWrites(2)" "org.apache.commons.compress.IOMethodsTest.factory"
call "org.apache.commons.compress.IOMethodsTest.compareWrites(2)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.IOMethodsTest.compareWrites(2)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
reference "org.apache.commons.compress.IOMethodsTest.compareWrites(2)" "org.apache.commons.compress.IOMethodsTest.byteTest"
call "org.apache.commons.compress.IOMethodsTest.compareWrites(2)" "org.apache.commons.compress.archivers.ArchiveOutputStream.write(1)"
call "org.apache.commons.compress.IOMethodsTest.compareWrites(2)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.IOMethodsTest.compareWrites(2)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.IOMethodsTest.compareWrites(2)" "org.apache.commons.compress.archivers.ArchiveOutputStream.write(1)"
call "org.apache.commons.compress.IOMethodsTest.compareWrites(2)" "org.apache.commons.compress.archivers.ArchiveOutputStream.write(3)"
call "org.apache.commons.compress.IOMethodsTest.compareWrites(2)" "org.apache.commons.compress.archivers.ArchiveOutputStream.getBytesWritten(0)"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.compareWrites(2)"
call "org.apache.commons.compress.IOMethodsTest.compareReads(1)" "org.apache.commons.compress.IOMethodsTest.createSingleEntryArchive(1)"
reference "org.apache.commons.compress.IOMethodsTest.compareReads(1)" "org.apache.commons.compress.IOMethodsTest.factory"
call "org.apache.commons.compress.IOMethodsTest.compareReads(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.IOMethodsTest.compareReads(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.IOMethodsTest.compareReads(1)" "org.apache.commons.compress.archivers.ArchiveEntry.getSize(0)"
call "org.apache.commons.compress.IOMethodsTest.compareReads(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.read(0)"
call "org.apache.commons.compress.IOMethodsTest.compareReads(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.IOMethodsTest.compareReads(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.read(1)"
call "org.apache.commons.compress.IOMethodsTest.compareReads(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.read(3)"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.compareReads(1)"
reference "org.apache.commons.compress.IOMethodsTest.static {...}" "org.apache.commons.compress.IOMethodsTest.byteTest"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.static {...}"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.bytesToTest"
reference "org.apache.commons.compress.IOMethodsTest.byteTest" "byte[]"
contain "org.apache.commons.compress.IOMethodsTest" "org.apache.commons.compress.IOMethodsTest.byteTest"
reference "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException" "org.apache.commons.compress.compressors.CompressorException"
reference "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException" "org.apache.commons.compress.compressors.TestCompressorStreamProvider"
call "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException.InvocationConfirmationException(1)" "org.apache.commons.compress.compressors.CompressorException.CompressorException(1)"
contain "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException" "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException.InvocationConfirmationException(1)"
contain "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException" "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException.serialVersionUID"
reference "org.apache.commons.compress.archivers.LongSymLinkTest.1" "org.apache.commons.compress.archivers.LongSymLinkTest"
contain "org.apache.commons.compress.archivers.LongSymLinkTest.1" "org.apache.commons.compress.archivers.LongSymLinkTest.1.{...}"
contain "org.apache.commons.compress.archivers.LongSymLinkTest.1" "org.apache.commons.compress.archivers.LongSymLinkTest.1.accept(2)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.utils.IOUtils"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.TarArchiveInputStreamTest(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readSimplePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readSimplePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readSimplePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readSimplePaxHeader(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.secondEntryWinsWhenPaxHeaderContainsDuplicateKey(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.secondEntryWinsWhenPaxHeaderContainsDuplicateKey(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.secondEntryWinsWhenPaxHeaderContainsDuplicateKey(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.secondEntryWinsWhenPaxHeaderContainsDuplicateKey(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.paxHeaderEntryWithEmptyValueRemovesKey(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.paxHeaderEntryWithEmptyValueRemovesKey(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.paxHeaderEntryWithEmptyValueRemovesKey(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.paxHeaderEntryWithEmptyValueRemovesKey(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readPaxHeaderWithEmbeddedNewline(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readPaxHeaderWithEmbeddedNewline(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readPaxHeaderWithEmbeddedNewline(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readPaxHeaderWithEmbeddedNewline(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readNonAsciiPaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readNonAsciiPaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readNonAsciiPaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readNonAsciiPaxHeader(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.workaroundForBrokenTimeHeader(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.workaroundForBrokenTimeHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.workaroundForBrokenTimeHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.workaroundForBrokenTimeHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.workaroundForBrokenTimeHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.workaroundForBrokenTimeHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.workaroundForBrokenTimeHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCheckSumOK(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.workaroundForBrokenTimeHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.workaroundForBrokenTimeHeader(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpochInGNUFormat(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpoch(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpochInGNUFormat(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpochInPAXFormat(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpoch(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpochInPAXFormat(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpoch(1)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpoch(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpoch(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpoch(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpoch(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpoch(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCheckSumOK(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpoch(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpoch(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.testCompress197(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.getTestStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.testCompress197(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.testCompress197(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.testCompress197(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldConsumeArchiveCompletely(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldConsumeArchiveCompletely(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldConsumeArchiveCompletely(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldConsumeArchiveCompletely(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readsArchiveCompletely_COMPRESS245(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readsArchiveCompletely_COMPRESS245(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readsArchiveCompletely_COMPRESS245(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readsArchiveCompletely_COMPRESS245(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldThrowAnExceptionOnTruncatedEntries(0)" "org.apache.commons.compress.AbstractTestCase.mkdir(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldThrowAnExceptionOnTruncatedEntries(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.getTestStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldThrowAnExceptionOnTruncatedEntries(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldThrowAnExceptionOnTruncatedEntries(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldThrowAnExceptionOnTruncatedEntries(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldThrowAnExceptionOnTruncatedEntries(0)" "org.apache.commons.compress.AbstractTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldThrowAnExceptionOnTruncatedEntries(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongGroupId(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadGNULongNameEntryWithWrongName(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.getTestStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadGNULongNameEntryWithWrongName(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadGNULongNameEntryWithWrongName(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadGNULongNameEntryWithWrongName(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadGNULongNameEntryWithWrongName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.survivesBlankLinesInPaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.getTestStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.survivesBlankLinesInPaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.survivesBlankLinesInPaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.survivesBlankLinesInPaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.survivesBlankLinesInPaxHeader(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.survivesPaxHeaderWithNameEndingInSlash(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.getTestStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.survivesPaxHeaderWithNameEndingInSlash(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.survivesPaxHeaderWithNameEndingInSlash(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.survivesPaxHeaderWithNameEndingInSlash(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.survivesPaxHeaderWithNameEndingInSlash(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.getTestStream(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.getTestStream(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest" "org.apache.commons.compress.AbstractTestCase"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.CpioArchiveInputStreamTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.CpioArchiveInputStreamTest(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.getFile(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchive(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchiveCreatedByRedlineRpm(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.getFile(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchiveCreatedByRedlineRpm(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchiveCreatedByRedlineRpm(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchiveCreatedByRedlineRpm(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchiveCreatedByRedlineRpm(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.this$0"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.val$za"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.val$iss"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.{...}"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.get(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.val$za"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.get(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.val$iss"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.get(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(2)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.get(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.val$za" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.val$za"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.val$iss" "org.apache.commons.compress.parallel.InputStreamSupplier"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.val$iss"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.this$0" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.this$0"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2" "org.apache.commons.compress.parallel.InputStreamSupplier"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.this$0"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.val$payloadBytes"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.{...}"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.get(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.val$payloadBytes"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.get(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.val$payloadBytes" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.val$payloadBytes"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.this$0" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.this$0"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.this$0"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.val$za"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.val$iss"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.{...}"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.get(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.val$za"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.get(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.val$iss"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.get(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(2)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.get(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.val$za" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.val$za"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.val$iss" "org.apache.commons.compress.parallel.InputStreamSupplier"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.val$iss"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.this$0" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.this$0"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4" "org.apache.commons.compress.parallel.InputStreamSupplier"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.this$0"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.{...}" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.val$payloadBytes"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.{...}"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.get(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.val$payloadBytes"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.get(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.val$payloadBytes" "byte[]"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.val$payloadBytes"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.this$0" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.this$0"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest" "byte[]"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.ZipFileTest(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.ZipFileTest(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.tearDown(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.tearDown(0)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.tearDown(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrder(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.readOrderTest(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrder(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrder(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrder(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.assertEntryName(3)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrder(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrderInMemory(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrderInMemory(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrderInMemory(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrderInMemory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(2)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrderInMemory(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrderInMemory(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrderInMemory(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.assertEntryName(3)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrderInMemory(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testPhysicalOrder(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.readOrderTest(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.testPhysicalOrder(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testPhysicalOrder(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testPhysicalOrder(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.assertEntryName(3)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.testPhysicalOrder(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testDoubleClose(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.readOrderTest(0)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.testDoubleClose(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testDoubleClose(0)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.testDoubleClose(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testWinzipBackSlashWorkaround(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testWinzipBackSlashWorkaround(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.testWinzipBackSlashWorkaround(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testWinzipBackSlashWorkaround(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.testWinzipBackSlashWorkaround(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testSkipsPK00Prefix(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testSkipsPK00Prefix(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.testSkipsPK00Prefix(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testSkipsPK00Prefix(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.testSkipsPK00Prefix(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isUnixSymlink(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testExcessDataInZip64ExtraField(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testExcessDataInZip64ExtraField(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.testExcessDataInZip64ExtraField(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testExcessDataInZip64ExtraField(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testExcessDataInZip64ExtraField(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.testExcessDataInZip64ExtraField(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnzipBZip2CompressedEntry(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnzipBZip2CompressedEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnzipBZip2CompressedEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnzipBZip2CompressedEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnzipBZip2CompressedEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnzipBZip2CompressedEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnzipBZip2CompressedEntry(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnzipBZip2CompressedEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.readOrderTest(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.readOrderTest(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.readOrderTest(0)" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.readOrderTest(0)"
call "org.apache.commons.compress.archivers.zip.ZipFileTest.assertEntryName(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.assertEntryName(3)"
reference "org.apache.commons.compress.archivers.zip.ZipFileTest.zf" "org.apache.commons.compress.archivers.zip.ZipFile"
contain "org.apache.commons.compress.archivers.zip.ZipFileTest" "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
reference "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.utils.BoundedInputStream"
reference "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.archivers.zip.ZipMethod"
reference "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.utils.IOUtils"
contain "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.ExplodeSupportTest(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(1)"
reference "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipMethod.getCode(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(0)" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)"
contain "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression8K3Trees(0)" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)"
contain "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression8K3Trees(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestArchive(0)" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)"
contain "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestArchive(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(1)"
reference "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipMethod.getCode(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)" "org.apache.commons.compress.utils.BoundedInputStream.BoundedInputStream(2)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc(0)"
contain "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(0)" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)"
contain "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(0)" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)"
contain "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(0)"
call "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(0)" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)"
contain "org.apache.commons.compress.archivers.zip.ExplodeSupportTest" "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(0)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS" "org.apache.commons.compress.compressors.bzip2.BlockSortTest"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.DS(2)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.data"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.DS(2)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.s"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.DS(2)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$000(1)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$100(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.data" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.data"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.s" "org.apache.commons.compress.compressors.bzip2.BlockSort"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.s"
reference "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest" "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.GeneralPurposeBitTest(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(0)"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest" "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testParseEdgeCases(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testParseEdgeCases(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testParseEdgeCases(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testParseEdgeCases(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testParseEdgeCases(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption(0)"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest" "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testParseEdgeCases(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(1)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDataDescriptor(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(0)"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest" "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDataDescriptor(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testLanguageEncodingFlag(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testLanguageEncodingFlag(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testLanguageEncodingFlag(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testLanguageEncodingFlag(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(1)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testLanguageEncodingFlag(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(0)"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest" "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testLanguageEncodingFlag(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(1)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(0)"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest" "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testEncryption(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testStrongEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testStrongEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testStrongEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testStrongEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(1)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testStrongEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testStrongEncryption(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(0)"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest" "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testStrongEncryption(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testClone(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testClone(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(1)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testClone(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(1)"
call "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testClone(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.clone(0)"
contain "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest" "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testClone(0)"
reference "org.apache.commons.compress.compressors.BZip2UtilsTestCase" "org.apache.commons.compress.compressors.bzip2.BZip2Utils"
contain "org.apache.commons.compress.compressors.BZip2UtilsTestCase" "org.apache.commons.compress.compressors.BZip2UtilsTestCase.BZip2UtilsTestCase(0)"
call "org.apache.commons.compress.compressors.BZip2UtilsTestCase.testIsCompressedFilename(0)" "org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.BZip2UtilsTestCase" "org.apache.commons.compress.compressors.BZip2UtilsTestCase.testIsCompressedFilename(0)"
call "org.apache.commons.compress.compressors.BZip2UtilsTestCase.testGetUncompressedFilename(0)" "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(1)"
contain "org.apache.commons.compress.compressors.BZip2UtilsTestCase" "org.apache.commons.compress.compressors.BZip2UtilsTestCase.testGetUncompressedFilename(0)"
call "org.apache.commons.compress.compressors.BZip2UtilsTestCase.testGetCompressedFilename(0)" "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.BZip2UtilsTestCase" "org.apache.commons.compress.compressors.BZip2UtilsTestCase.testGetCompressedFilename(0)"
reference "org.apache.commons.compress.archivers.zip.StreamCompressorTest" "org.apache.commons.compress.archivers.zip.StreamCompressor"
contain "org.apache.commons.compress.archivers.zip.StreamCompressorTest" "org.apache.commons.compress.archivers.zip.StreamCompressorTest.StreamCompressorTest(0)"
call "org.apache.commons.compress.archivers.zip.StreamCompressorTest.storedEntries(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(1)"
call "org.apache.commons.compress.archivers.zip.StreamCompressorTest.storedEntries(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(2)"
call "org.apache.commons.compress.archivers.zip.StreamCompressorTest.storedEntries(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesRead(0)"
call "org.apache.commons.compress.archivers.zip.StreamCompressorTest.storedEntries(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesWrittenForLastEntry(0)"
call "org.apache.commons.compress.archivers.zip.StreamCompressorTest.storedEntries(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getCrc32(0)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressorTest" "org.apache.commons.compress.archivers.zip.StreamCompressorTest.storedEntries(0)"
call "org.apache.commons.compress.archivers.zip.StreamCompressorTest.deflatedEntries(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.create(1)"
call "org.apache.commons.compress.archivers.zip.StreamCompressorTest.deflatedEntries(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(2)"
call "org.apache.commons.compress.archivers.zip.StreamCompressorTest.deflatedEntries(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesRead(0)"
call "org.apache.commons.compress.archivers.zip.StreamCompressorTest.deflatedEntries(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesWrittenForLastEntry(0)"
call "org.apache.commons.compress.archivers.zip.StreamCompressorTest.deflatedEntries(0)" "org.apache.commons.compress.archivers.zip.StreamCompressor.getCrc32(0)"
contain "org.apache.commons.compress.archivers.zip.StreamCompressorTest" "org.apache.commons.compress.archivers.zip.StreamCompressorTest.deflatedEntries(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest" "org.tukaani.xz.LZMA2Options"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.SevenZMethodConfigurationTest(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNullOptions(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNullOptions(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNullOptions(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNullOptions(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowLZMA2OptionsForLZMA(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowLZMA2OptionsForLZMA(0)" "org.tukaani.xz.LZMA2Options.LZMA2Options(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowLZMA2OptionsForLZMA(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowLZMA2OptionsForLZMA(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowLZMA2OptionsForLZMA(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForLZMA(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForLZMA(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForLZMA(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForLZMA(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowLZMA2OptionsForLZMA2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowLZMA2OptionsForLZMA2(0)" "org.tukaani.xz.LZMA2Options.LZMA2Options(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowLZMA2OptionsForLZMA2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowLZMA2OptionsForLZMA2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowLZMA2OptionsForLZMA2(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForLZMA2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForLZMA2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForLZMA2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForLZMA2(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForBzip2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForBzip2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForBzip2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForBzip2(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForDeflate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForDeflate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForDeflate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForDeflate(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldNotAllowStringOptionsForLZMA(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldNotAllowStringOptionsForLZMA(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldNotAllowStringOptionsForLZMA(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldNotAllowStringOptionsForLZMA2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldNotAllowStringOptionsForLZMA2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldNotAllowStringOptionsForLZMA2(0)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest.DeflateCompressorOutputStreamTest(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest.canReadASingleByteFlushAndFinish(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest.canReadASingleByteFlushAndFinish(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest.canReadASingleByteFlushAndFinish(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.flush(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest.canReadASingleByteFlushAndFinish(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.finish(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest.canReadASingleByteFlushAndFinish(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.close(0)"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest" "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest.canReadASingleByteFlushAndFinish(0)"
reference "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStream"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.BitInputStreamTest(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.shouldNotAllowReadingOfANegativeAmountOfBits(0)" "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.shouldNotAllowReadingOfANegativeAmountOfBits(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.shouldNotAllowReadingOfANegativeAmountOfBits(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.shouldNotAllowReadingOfANegativeAmountOfBits(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.shouldNotAllowReadingOfANegativeAmountOfBits(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.shouldNotAllowReadingOfMoreThan63BitsAtATime(0)" "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.shouldNotAllowReadingOfMoreThan63BitsAtATime(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.shouldNotAllowReadingOfMoreThan63BitsAtATime(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.shouldNotAllowReadingOfMoreThan63BitsAtATime(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.shouldNotAllowReadingOfMoreThan63BitsAtATime(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading24BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading24BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading24BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading24BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.testReading24BitsInLittleEndian(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading24BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading24BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading24BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading24BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.testReading24BitsInBigEndian(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading17BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading17BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading17BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading17BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.testReading17BitsInLittleEndian(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading17BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading17BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading17BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading17BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.testReading17BitsInBigEndian(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading30BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading30BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading30BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading30BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.testReading30BitsInLittleEndian(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading30BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading30BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading30BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading30BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.testReading30BitsInBigEndian(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading31BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading31BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading31BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading31BitsInLittleEndian(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.testReading31BitsInLittleEndian(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading31BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading31BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading31BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testReading31BitsInBigEndian(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.testReading31BitsInBigEndian(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testClearBitCache(0)" "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testClearBitCache(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testClearBitCache(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testClearBitCache(0)" "org.apache.commons.compress.utils.BitInputStream.clearBitCache(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testClearBitCache(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.testClearBitCache(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testEOF(0)" "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testEOF(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testEOF(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.testEOF(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.testEOF(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.littleEndianWithOverflow(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.littleEndianWithOverflow(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.littleEndianWithOverflow(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.littleEndianWithOverflow(0)"
call "org.apache.commons.compress.utils.BitInputStreamTest.bigEndianWithOverflow(0)" "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
call "org.apache.commons.compress.utils.BitInputStreamTest.bigEndianWithOverflow(0)" "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
call "org.apache.commons.compress.utils.BitInputStreamTest.bigEndianWithOverflow(0)" "org.apache.commons.compress.utils.BitInputStream.close(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.bigEndianWithOverflow(0)"
contain "org.apache.commons.compress.utils.BitInputStreamTest" "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
reference "org.apache.commons.compress.utils.IOUtilsTest.StreamWrapper" "org.apache.commons.compress.utils.IOUtilsTest"
contain "org.apache.commons.compress.utils.IOUtilsTest.StreamWrapper" "org.apache.commons.compress.utils.IOUtilsTest.StreamWrapper.wrap(1)"
reference "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipLong"
reference "org.apache.commons.compress.archivers.zip.ZipUtilTest" "byte[]"
reference "org.apache.commons.compress.archivers.zip.ZipUtilTest" "byte[][]"
reference "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtil"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.ZipUtilTest(0)"
reference "org.apache.commons.compress.archivers.zip.ZipUtilTest.setUp(0)" "org.apache.commons.compress.archivers.zip.ZipUtilTest.time"
call "org.apache.commons.compress.archivers.zip.ZipUtilTest.setUp(0)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
reference "org.apache.commons.compress.archivers.zip.ZipUtilTest.setUp(0)" "org.apache.commons.compress.archivers.zip.ZipUtilTest.zl"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.setUp(0)"
reference "org.apache.commons.compress.archivers.zip.ZipUtilTest.testZipLong(0)" "org.apache.commons.compress.archivers.zip.ZipUtilTest.time"
call "org.apache.commons.compress.archivers.zip.ZipUtilTest.testZipLong(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(1)"
call "org.apache.commons.compress.archivers.zip.ZipUtilTest.testZipLong(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
reference "org.apache.commons.compress.archivers.zip.ZipUtilTest.testZipLong(0)" "org.apache.commons.compress.archivers.zip.ZipUtilTest.zl"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.testZipLong(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtilTest.testAdjustToLong(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.testAdjustToLong(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtilTest.testMinTime(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.testMinTime(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtilTest.testOutsideCalendar(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.testOutsideCalendar(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtilTest.testInsideCalendar(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.testInsideCalendar(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtilTest.testReverse(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.reverse(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.testReverse(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtilTest.testBigToLong(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.bigToLong(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.testBigToLong(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtilTest.testLongToBig(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.testLongToBig(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtilTest.testSignedByteToUnsignedInt(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.testSignedByteToUnsignedInt(0)"
call "org.apache.commons.compress.archivers.zip.ZipUtilTest.testUnsignedIntToSignedByte(0)" "org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(1)"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.testUnsignedIntToSignedByte(0)"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.time"
reference "org.apache.commons.compress.archivers.zip.ZipUtilTest.zl" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.ZipUtilTest" "org.apache.commons.compress.archivers.zip.ZipUtilTest.zl"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.ZipEncoding"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "byte[]"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.UTF8ZipFilesTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.UTF8ZipFilesTest(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripExplicitUnicodeExtra(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFileRoundtrip(3)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripExplicitUnicodeExtra(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripNoEFSExplicitUnicodeExtra(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFileRoundtrip(3)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripNoEFSExplicitUnicodeExtra(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testCP437FileRoundtripExplicitUnicodeExtra(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFileRoundtrip(3)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testCP437FileRoundtripExplicitUnicodeExtra(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testASCIIFileRoundtripExplicitUnicodeExtra(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFileRoundtrip(3)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testASCIIFileRoundtripExplicitUnicodeExtra(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripImplicitUnicodeExtra(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFileRoundtrip(3)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripImplicitUnicodeExtra(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripNoEFSImplicitUnicodeExtra(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFileRoundtrip(3)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripNoEFSImplicitUnicodeExtra(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testCP437FileRoundtripImplicitUnicodeExtra(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFileRoundtrip(3)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testCP437FileRoundtripImplicitUnicodeExtra(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testASCIIFileRoundtripImplicitUnicodeExtra(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFileRoundtrip(3)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testASCIIFileRoundtripImplicitUnicodeExtra(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchive(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.getFile(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchive(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(3)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchive(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchive(0)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchive(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.getFile(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(3)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(0)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.getFile(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(3)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertCanRead(2)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(0)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertCanRead(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertCanRead(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertCanRead(2)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.getFile(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(3)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(0)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipFileReadsUnicodeFields(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipFileReadsUnicodeFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(3)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipFileReadsUnicodeFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipFileReadsUnicodeFields(0)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipFileReadsUnicodeFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipFileReadsUnicodeFields(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.tryHardToDelete(1)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipFileReadsUnicodeFields(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipArchiveInputStreamReadsUnicodeFields(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipArchiveInputStreamReadsUnicodeFields(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(3)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipArchiveInputStreamReadsUnicodeFields(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipArchiveInputStreamReadsUnicodeFields(0)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipArchiveInputStreamReadsUnicodeFields(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.tryHardToDelete(1)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipArchiveInputStreamReadsUnicodeFields(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromZipFile(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.getFile(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromZipFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(3)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromZipFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromZipFile(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertRawNameOfAcsiiTxt(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromZipFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromZipFile(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.getFile(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(3)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertRawNameOfAcsiiTxt(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFileRoundtrip(3)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFileRoundtrip(3)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFile(2)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFileRoundtrip(3)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.tryHardToDelete(1)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFileRoundtrip(3)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(1)"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipEncoding.encode(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(4)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFile(2)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(3)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFile(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFile(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFile(2)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertUnicodeName(3)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFile(2)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFile(2)"
reference "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.findUniCodePath(1)" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UPATH_ID"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.findUniCodePath(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.findUniCodePath(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertUnicodeName(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertUnicodeName(3)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.findUniCodePath(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertUnicodeName(3)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertUnicodeName(3)" "org.apache.commons.compress.archivers.zip.ZipEncoding.encode(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertUnicodeName(3)" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.getNameCRC32(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertUnicodeName(3)" "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.getUnicodeName(0)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertUnicodeName(3)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8Interoperability(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.getFile(1)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8Interoperability(0)" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFile(2)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8Interoperability(0)"
call "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertRawNameOfAcsiiTxt(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawName(0)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertRawNameOfAcsiiTxt(1)"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.CP437"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.ASCII_TXT"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.EURO_FOR_DOLLAR_TXT"
contain "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest" "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.OIL_BARREL_TXT"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase" "org.apache.commons.compress.compressors.lzma.LZMAUtils"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase" "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.LZMAUtilsTestCase(0)"
call "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testIsCompressedFilename(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase" "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testIsCompressedFilename(0)"
call "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testGetUncompressedFilename(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(1)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase" "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testGetUncompressedFilename(0)"
call "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testGetCompressedFilename(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase" "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testGetCompressedFilename(0)"
call "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testMatches(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(2)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase" "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testMatches(0)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testCachingIsEnabledByDefaultAndLZMAIsPresent(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_AVAILABLE"
call "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testCachingIsEnabledByDefaultAndLZMAIsPresent(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCachedLZMAAvailability(0)"
call "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testCachingIsEnabledByDefaultAndLZMAIsPresent(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable(0)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase" "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testCachingIsEnabledByDefaultAndLZMAIsPresent(0)"
call "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testCanTurnOffCaching(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(1)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testCanTurnOffCaching(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.DONT_CACHE"
call "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testCanTurnOffCaching(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCachedLZMAAvailability(0)"
call "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testCanTurnOffCaching(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable(0)"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase" "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testCanTurnOffCaching(0)"
call "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testTurningOnCachingReEvaluatesAvailability(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(1)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testTurningOnCachingReEvaluatesAvailability(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.DONT_CACHE"
call "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testTurningOnCachingReEvaluatesAvailability(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCachedLZMAAvailability(0)"
reference "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testTurningOnCachingReEvaluatesAvailability(0)" "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_AVAILABLE"
contain "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase" "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testTurningOnCachingReEvaluatesAvailability(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.ScatterZipOutputStreamTest(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.scatterFile"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.ScatterZipOutputStreamTest(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.target"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.ScatterZipOutputStreamTest(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.cleanup(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.scatterFile"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.cleanup(0)" "org.apache.commons.compress.AbstractTestCase.tryHardToDelete(1)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.cleanup(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.target"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.cleanup(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.scatterFile"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(1)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.createPayloadSupplier(1)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(2)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.target"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(1)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.createPayloadSupplier(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.{...}"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.createPayloadSupplier(1)"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.scatterFile"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.target"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.val$knownSize"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.val$knownSize"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$300(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.val$mode" "org.apache.commons.compress.archivers.zip.Zip64Mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.val$mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.val$knownSize"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.val$knownSize"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.val$knownSize"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$300(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.test(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.val$knownSize"
reference "org.apache.commons.compress.archivers.ExceptionMessageTest" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.archivers.ExceptionMessageTest" "org.apache.commons.compress.archivers.ArchiveException"
contain "org.apache.commons.compress.archivers.ExceptionMessageTest" "org.apache.commons.compress.archivers.ExceptionMessageTest.ExceptionMessageTest(0)"
call "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenArchiverNameIsNull_1(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenArchiverNameIsNull_1(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
contain "org.apache.commons.compress.archivers.ExceptionMessageTest" "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenArchiverNameIsNull_1(0)"
call "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenInputStreamIsNull(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenInputStreamIsNull(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
contain "org.apache.commons.compress.archivers.ExceptionMessageTest" "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenInputStreamIsNull(0)"
call "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenArchiverNameIsNull_2(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenArchiverNameIsNull_2(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
contain "org.apache.commons.compress.archivers.ExceptionMessageTest" "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenArchiverNameIsNull_2(0)"
call "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenOutputStreamIsNull(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenOutputStreamIsNull(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
contain "org.apache.commons.compress.archivers.ExceptionMessageTest" "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenOutputStreamIsNull(0)"
contain "org.apache.commons.compress.archivers.ExceptionMessageTest" "org.apache.commons.compress.archivers.ExceptionMessageTest.ARCHIVER_NULL_MESSAGE"
contain "org.apache.commons.compress.archivers.ExceptionMessageTest" "org.apache.commons.compress.archivers.ExceptionMessageTest.INPUTSTREAM_NULL_MESSAGE"
contain "org.apache.commons.compress.archivers.ExceptionMessageTest" "org.apache.commons.compress.archivers.ExceptionMessageTest.OUTPUTSTREAM_NULL_MESSAGE"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.val$knownSize"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.val$knownSize"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$300(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.val$mode" "org.apache.commons.compress.archivers.zip.Zip64Mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.val$mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.val$knownSize"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.val$knownSize"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.val$knownSize"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$300(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.test(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.val$knownSize"
reference "org.apache.commons.compress.utils.IOUtilsTest.2" "org.apache.commons.compress.utils.IOUtilsTest.StreamWrapper"
reference "org.apache.commons.compress.utils.IOUtilsTest.2" "org.apache.commons.compress.utils.IOUtilsTest"
reference "org.apache.commons.compress.utils.IOUtilsTest.2.{...}" "org.apache.commons.compress.utils.IOUtilsTest.2.this$0"
contain "org.apache.commons.compress.utils.IOUtilsTest.2" "org.apache.commons.compress.utils.IOUtilsTest.2.{...}"
call "org.apache.commons.compress.utils.IOUtilsTest.2.wrap(1)" "org.apache.commons.compress.utils.IOUtilsTest.2.1.{...}"
contain "org.apache.commons.compress.utils.IOUtilsTest.2" "org.apache.commons.compress.utils.IOUtilsTest.2.wrap(1)"
reference "org.apache.commons.compress.utils.IOUtilsTest.2.this$0" "org.apache.commons.compress.utils.IOUtilsTest"
contain "org.apache.commons.compress.utils.IOUtilsTest.2" "org.apache.commons.compress.utils.IOUtilsTest.2.this$0"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.val$knownSize"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.val$knownSize"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$300(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.val$mode" "org.apache.commons.compress.archivers.zip.Zip64Mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.val$mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.val$knownSize"
reference "org.apache.commons.compress.utils.IOUtilsTest.3" "org.apache.commons.compress.utils.IOUtilsTest.StreamWrapper"
reference "org.apache.commons.compress.utils.IOUtilsTest.3" "org.apache.commons.compress.utils.IOUtilsTest"
reference "org.apache.commons.compress.utils.IOUtilsTest.3.{...}" "org.apache.commons.compress.utils.IOUtilsTest.3.this$0"
contain "org.apache.commons.compress.utils.IOUtilsTest.3" "org.apache.commons.compress.utils.IOUtilsTest.3.{...}"
call "org.apache.commons.compress.utils.IOUtilsTest.3.wrap(1)" "org.apache.commons.compress.utils.IOUtilsTest.3.1.{...}"
contain "org.apache.commons.compress.utils.IOUtilsTest.3" "org.apache.commons.compress.utils.IOUtilsTest.3.wrap(1)"
reference "org.apache.commons.compress.utils.IOUtilsTest.3.this$0" "org.apache.commons.compress.utils.IOUtilsTest"
contain "org.apache.commons.compress.utils.IOUtilsTest.3" "org.apache.commons.compress.utils.IOUtilsTest.3.this$0"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.val$knownSize"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.val$knownSize"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$300(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.val$knownSize"
reference "org.apache.commons.compress.utils.IOUtilsTest.4" "org.apache.commons.compress.utils.IOUtilsTest"
reference "org.apache.commons.compress.utils.IOUtilsTest.4.{...}" "org.apache.commons.compress.utils.IOUtilsTest.4.val$source"
contain "org.apache.commons.compress.utils.IOUtilsTest.4" "org.apache.commons.compress.utils.IOUtilsTest.4.{...}"
reference "org.apache.commons.compress.utils.IOUtilsTest.4.read(1)" "org.apache.commons.compress.utils.IOUtilsTest.4.idx"
reference "org.apache.commons.compress.utils.IOUtilsTest.4.read(1)" "org.apache.commons.compress.utils.IOUtilsTest.4.val$source"
contain "org.apache.commons.compress.utils.IOUtilsTest.4" "org.apache.commons.compress.utils.IOUtilsTest.4.read(1)"
contain "org.apache.commons.compress.utils.IOUtilsTest.4" "org.apache.commons.compress.utils.IOUtilsTest.4.close(0)"
contain "org.apache.commons.compress.utils.IOUtilsTest.4" "org.apache.commons.compress.utils.IOUtilsTest.4.isOpen(0)"
contain "org.apache.commons.compress.utils.IOUtilsTest.4" "org.apache.commons.compress.utils.IOUtilsTest.4.idx"
reference "org.apache.commons.compress.utils.IOUtilsTest.4.val$source" "byte[]"
contain "org.apache.commons.compress.utils.IOUtilsTest.4" "org.apache.commons.compress.utils.IOUtilsTest.4.val$source"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12" "org.apache.commons.compress.archivers.zip.Zip64RequiredException"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.this$0"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.test(2)" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getMessage(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.test(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.this$0" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.this$0"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13" "org.apache.commons.compress.archivers.zip.Zip64RequiredException"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.val$knownSize"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.val$knownSize"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.test(2)" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getMessage(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.test(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.val$knownSize"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10" "org.apache.commons.compress.archivers.zip.Zip64RequiredException"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.val$mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.test(2)" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getMessage(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.test(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.val$mode" "org.apache.commons.compress.archivers.zip.Zip64Mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.val$mode"
reference "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest" "org.apache.commons.compress.AbstractTestCase"
contain "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest" "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.Maven221MultiVolumeTest(0)"
call "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(3)"
reference "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(0)" "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.ENTRIES"
call "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(0)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(1)"
call "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest" "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(0)"
call "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForFile(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
contain "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest" "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForFile(0)"
reference "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.static {...}" "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.ENTRIES"
contain "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest" "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.static {...}"
contain "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest" "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.ENTRIES"
contain "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest" "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.LAST_ENTRY_NAME"
reference "org.apache.commons.compress.compressors.BZip2TestCase" "org.apache.commons.compress.compressors.CompressorStreamFactory"
reference "org.apache.commons.compress.compressors.BZip2TestCase" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"
reference "org.apache.commons.compress.compressors.BZip2TestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.BZip2TestCase" "org.apache.commons.compress.compressors.CompressorInputStream"
reference "org.apache.commons.compress.compressors.BZip2TestCase" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.compressors.BZip2TestCase" "org.apache.commons.compress.compressors.CompressorOutputStream"
call "org.apache.commons.compress.compressors.BZip2TestCase.BZip2TestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.compressors.BZip2TestCase" "org.apache.commons.compress.compressors.BZip2TestCase.BZip2TestCase(0)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testBzipCreation(0)" "org.apache.commons.compress.compressors.BZip2TestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.BZip2TestCase.testBzipCreation(0)" "org.apache.commons.compress.compressors.BZip2TestCase.dir"
call "org.apache.commons.compress.compressors.BZip2TestCase.testBzipCreation(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testBzipCreation(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testBzipCreation(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testBzipCreation(0)" "org.apache.commons.compress.compressors.CompressorOutputStream.close(0)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testBzipCreation(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.BZip2TestCase" "org.apache.commons.compress.compressors.BZip2TestCase.testBzipCreation(0)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testBzip2Unarchive(0)" "org.apache.commons.compress.compressors.BZip2TestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.BZip2TestCase.testBzip2Unarchive(0)" "org.apache.commons.compress.compressors.BZip2TestCase.dir"
call "org.apache.commons.compress.compressors.BZip2TestCase.testBzip2Unarchive(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testBzip2Unarchive(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testBzip2Unarchive(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
contain "org.apache.commons.compress.compressors.BZip2TestCase" "org.apache.commons.compress.compressors.BZip2TestCase.testBzip2Unarchive(0)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.BZip2TestCase.getFile(1)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.CompressorInputStream.read(0)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.BZip2TestCase" "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFirstOnly(0)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.BZip2TestCase.getFile(1)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.CompressorInputStream.read(0)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.CompressorInputStream.available(0)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.BZip2TestCase" "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFully(0)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testCOMPRESS131(0)" "org.apache.commons.compress.compressors.BZip2TestCase.getFile(1)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testCOMPRESS131(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testCOMPRESS131(0)" "org.apache.commons.compress.compressors.CompressorInputStream.read(0)"
call "org.apache.commons.compress.compressors.BZip2TestCase.testCOMPRESS131(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.BZip2TestCase" "org.apache.commons.compress.compressors.BZip2TestCase.testCOMPRESS131(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.val$knownSize"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.val$knownSize"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$300(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.val$mode" "org.apache.commons.compress.archivers.zip.Zip64Mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.val$mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.val$knownSize"
reference "org.apache.commons.compress.utils.IOUtilsTest.1" "org.apache.commons.compress.utils.IOUtilsTest.StreamWrapper"
reference "org.apache.commons.compress.utils.IOUtilsTest.1" "org.apache.commons.compress.utils.IOUtilsTest"
reference "org.apache.commons.compress.utils.IOUtilsTest.1.{...}" "org.apache.commons.compress.utils.IOUtilsTest.1.this$0"
contain "org.apache.commons.compress.utils.IOUtilsTest.1" "org.apache.commons.compress.utils.IOUtilsTest.1.{...}"
contain "org.apache.commons.compress.utils.IOUtilsTest.1" "org.apache.commons.compress.utils.IOUtilsTest.1.wrap(1)"
reference "org.apache.commons.compress.utils.IOUtilsTest.1.this$0" "org.apache.commons.compress.utils.IOUtilsTest"
contain "org.apache.commons.compress.utils.IOUtilsTest.1" "org.apache.commons.compress.utils.IOUtilsTest.1.this$0"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "byte[]"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.FramedSnappyCompressorInputStreamTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.FramedSnappyCompressorInputStreamTest(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testMatches(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(2)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testMatches(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.getFile(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testMatches(0)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testMatches(0)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testLoremIpsum(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.dir"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testLoremIpsum(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.getFile(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testLoremIpsum(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testLoremIpsum(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testLoremIpsum(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testLoremIpsum(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testLoremIpsum(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testRemainingChunkTypes(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.getFile(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testRemainingChunkTypes(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testRemainingChunkTypes(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testRemainingChunkTypes(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testAvailable(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.getFile(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testAvailable(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testAvailable(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testAvailable(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testAvailable(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(3)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testAvailable(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testAvailable(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testUnskippableChunk(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testUnskippableChunk(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testUnskippableChunk(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testUnskippableChunk(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testChecksumUnmasking(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testChecksumUnmasking(1)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testChecksumUnmasking(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.readIWAFile(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.getFile(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.readIWAFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.readIWAFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.readIWAFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.readIWAFile(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.readIWAFile(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(2)"
reference "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.readIWAFile(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.dir"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.readIWAFile(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.readIWAFile(0)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.readIWAFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.readIWAFile(0)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testChecksumUnmasking(1)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.mask(1)"
call "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testChecksumUnmasking(1)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(1)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testChecksumUnmasking(1)"
contain "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.mask(1)"
reference "org.apache.commons.compress.archivers.zip.Lister.CommandLine" "org.apache.commons.compress.archivers.zip.Lister"
reference "org.apache.commons.compress.archivers.zip.Lister.CommandLine.CommandLine(0)" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.useStream"
reference "org.apache.commons.compress.archivers.zip.Lister.CommandLine.CommandLine(0)" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.allowStoredEntriesWithDataDescriptor"
contain "org.apache.commons.compress.archivers.zip.Lister.CommandLine" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.CommandLine(0)"
contain "org.apache.commons.compress.archivers.zip.Lister.CommandLine" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.CommandLine(1)"
contain "org.apache.commons.compress.archivers.zip.Lister.CommandLine" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.archive"
contain "org.apache.commons.compress.archivers.zip.Lister.CommandLine" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.useStream"
contain "org.apache.commons.compress.archivers.zip.Lister.CommandLine" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.encoding"
contain "org.apache.commons.compress.archivers.zip.Lister.CommandLine" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.allowStoredEntriesWithDataDescriptor"
contain "org.apache.commons.compress.archivers.zip.Lister.CommandLine" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.dir"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.SeekableInMemoryByteChannelTest(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.testData"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.SeekableInMemoryByteChannelTest(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadContentsProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.testData"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadContentsProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadContentsProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadContentsProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(0)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadContentsProperly(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadContentsWhenBiggerBufferSupplied(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.testData"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadContentsWhenBiggerBufferSupplied(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadContentsWhenBiggerBufferSupplied(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadContentsWhenBiggerBufferSupplied(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(0)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadContentsWhenBiggerBufferSupplied(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadDataFromSetPosition(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.testData"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadDataFromSetPosition(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadDataFromSetPosition(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadDataFromSetPosition(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadDataFromSetPosition(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(0)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadDataFromSetPosition(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSignalEOFWhenPositionAtTheEnd(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.testData"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSignalEOFWhenPositionAtTheEnd(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSignalEOFWhenPositionAtTheEnd(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSignalEOFWhenPositionAtTheEnd(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(1)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSignalEOFWhenPositionAtTheEnd(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionOnReadingClosedChannel(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionOnReadingClosedChannel(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionOnReadingClosedChannel(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(1)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionOnReadingClosedChannel(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.testData"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(0)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperly(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperlyAfterPositionSet(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.testData"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperlyAfterPositionSet(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperlyAfterPositionSet(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperlyAfterPositionSet(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperlyAfterPositionSet(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperlyAfterPositionSet(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperlyAfterPositionSet(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(0)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperlyAfterPositionSet(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionOnWritingToClosedChannel(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionOnWritingToClosedChannel(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionOnWritingToClosedChannel(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(1)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionOnWritingToClosedChannel(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldTruncateContentsProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.testData"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldTruncateContentsProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldTruncateContentsProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldTruncateContentsProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldTruncateContentsProperly(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size(0)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldTruncateContentsProperly(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPositionOnTruncate(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.testData"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPositionOnTruncate(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPositionOnTruncate(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPositionOnTruncate(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPositionOnTruncate(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPositionOnTruncate(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size(0)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPositionOnTruncate(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPosition(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.testData"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPosition(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPosition(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(1)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPosition(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size(0)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPosition(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionWhenSettingIncorrectPosition(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionWhenSettingIncorrectPosition(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(1)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionWhenSettingIncorrectPosition(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionWhenSettingPositionOnClosedChannel(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionWhenSettingPositionOnClosedChannel(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close(0)"
call "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionWhenSettingPositionOnClosedChannel(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(1)"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionWhenSettingPositionOnClosedChannel(0)"
reference "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.testData" "byte[]"
contain "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.testData"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.ArjArchiveInputStreamTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.ArjArchiveInputStreamTest(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testArjUnarchive(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.getFile(1)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testArjUnarchive(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testArjUnarchive(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testArjUnarchive(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testArjUnarchive(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testArjUnarchive(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testArjUnarchive(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testArjUnarchive(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesDosVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.getFile(1)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesDosVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesDosVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesDosVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesDosVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesDosVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getUnixMode(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesDosVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesDosVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesDosVersion(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesUnixVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.getFile(1)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesUnixVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesUnixVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesUnixVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesUnixVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesUnixVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getUnixMode(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesUnixVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesUnixVersion(0)" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesUnixVersion(0)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.TestData(6)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.testFile"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.TestData(6)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.expectedEncoding"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.TestData(6)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fac"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.TestData(6)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fieldName"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.TestData(6)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.type"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.TestData(6)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.hasOutputStream"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.TestData(6)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.toString(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.testFile"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.toString(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.expectedEncoding"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.toString(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fac"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.toString(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fieldName"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.toString(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.type"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.toString(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.hasOutputStream"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.toString(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.testFile"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.expectedEncoding"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fac" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fac"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fieldName"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.type"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.hasOutputStream"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFile"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "byte[]"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.PasswordRequiredException"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.SevenZFileTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.SevenZFileTest(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testRandomlySkippingEntries(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testRandomlySkippingEntries(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testRandomlySkippingEntries(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testRandomlySkippingEntries(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testRandomlySkippingEntries(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testRandomlySkippingEntries(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.readFully(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testRandomlySkippingEntries(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testRandomlySkippingEntries(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.readFully(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.readFully(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testAllEmptyFilesArchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testAllEmptyFilesArchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testAllEmptyFilesArchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testAllEmptyFilesArchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testAllEmptyFilesArchive(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testHelloWorldHeaderCompressionOffCopy(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.checkHelloWorld(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testHelloWorldHeaderCompressionOffCopy(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testHelloWorldHeaderCompressionOffLZMA2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.checkHelloWorld(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testHelloWorldHeaderCompressionOffLZMA2(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getFile(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zDeflateUnarchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getFile(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zDeflateUnarchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zDeflateUnarchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zDeflateUnarchive(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zDecryptUnarchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.isStrongCryptoAvailable(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zDecryptUnarchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getFile(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zDecryptUnarchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zDecryptUnarchive(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zDecryptUnarchive(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(2)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(3)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testEncryptedArchiveRequiresPassword(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testEncryptedArchiveRequiresPassword(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testEncryptedArchiveRequiresPassword(0)" "org.apache.commons.compress.PasswordRequiredException.getMessage(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testEncryptedArchiveRequiresPassword(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testCompressedHeaderWithNonDefaultDictionarySize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testCompressedHeaderWithNonDefaultDictionarySize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testCompressedHeaderWithNonDefaultDictionarySize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testCompressedHeaderWithNonDefaultDictionarySize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testCompressedHeaderWithNonDefaultDictionarySize(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testSignatureCheck(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.sevenZSignature"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testSignatureCheck(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(2)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testSignatureCheck(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.dir"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.dir"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DELTA_FILTER"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveTest(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveTest(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveTest(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getEntries(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveTest(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveTest(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveTest(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveInMemoryTest(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveInMemoryTest(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveInMemoryTest(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveInMemoryTest(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveInMemoryTest(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getEntries(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveInMemoryTest(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveInMemoryTest(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveInMemoryTest(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.readEntriesOfSize0(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.readEntriesOfSize0(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.readEntriesOfSize0(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.readEntriesOfSize0(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.readEntriesOfSize0(0)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.readEntriesOfSize0(0)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.readEntriesOfSize0(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(3)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(3)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(3)" "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(3)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(3)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.$assertionsDisabled"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(3)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(3)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.checkHelloWorld(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.checkHelloWorld(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.checkHelloWorld(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.checkHelloWorld(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.checkHelloWorld(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.checkHelloWorld(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(3)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.checkHelloWorld(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.$assertionsDisabled"
call "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.checkHelloWorld(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.checkHelloWorld(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.isStrongCryptoAvailable(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.static {...}" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.$assertionsDisabled"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.static {...}"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.TEST2_CONTENT"
contain "org.apache.commons.compress.archivers.sevenz.SevenZFileTest" "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.$assertionsDisabled"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest" "byte[]"
reference "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest" "org.apache.commons.compress.AbstractTestCase"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.BZip2CompressorInputStreamTest(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.shouldThrowAnIOExceptionWhenAppliedToAZipFile(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.shouldThrowAnIOExceptionWhenAppliedToAZipFile(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(1)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.shouldThrowAnIOExceptionWhenAppliedToAZipFile(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.readOfLength0ShouldReturn0(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.readOfLength0ShouldReturn0(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.readOfLength0ShouldReturn0(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.flush(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.readOfLength0ShouldReturn0(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.close(0)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.readOfLength0ShouldReturn0(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(1)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.readOfLength0ShouldReturn0(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(3)"
call "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.readOfLength0ShouldReturn0(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.readOfLength0ShouldReturn0(0)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ar.ArArchiveEntry"
reference "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest" "org.apache.commons.compress.AbstractTestCase"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.ArArchiveOutputStreamTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.ArArchiveOutputStreamTest(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesCauseExceptionByDefault(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesCauseExceptionByDefault(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesCauseExceptionByDefault(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesCauseExceptionByDefault(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesCauseExceptionByDefault(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesWorkUsingBSDDialect(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesWorkUsingBSDDialect(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesWorkUsingBSDDialect(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.setLongFileMode(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesWorkUsingBSDDialect(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesWorkUsingBSDDialect(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesWorkUsingBSDDialect(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesWorkUsingBSDDialect(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesWorkUsingBSDDialect(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.checkArchiveContent(2)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesWorkUsingBSDDialect(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesWorkUsingBSDDialect(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.rmdir(1)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesWorkUsingBSDDialect(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.Zip64ExtendedInformationExtraFieldTest(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDOnlySizes(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDOnlySizes(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDOnlySizes(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(2)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDOnlySizes(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDOnlySizes(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDOnlySizes(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDOnlySizes(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkSizes(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDOnlySizes(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.OFF"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(4)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndOffset(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkSizes(1)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkOffset(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndOffset(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.OFF"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.DISK"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(4)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkSizes(1)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkOffset(2)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkDisk(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeOffsetAndDisk(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.DISK"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(4)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndDisk(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkSizes(1)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkDisk(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndDisk(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOnly(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOnly(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOnly(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOnly(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOnly(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOnly(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOnly(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOnly(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOnly(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOnly(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.OFF"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndOffset(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.OFF"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.DISK"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndDisk(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.DISK"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndDisk(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndDisk(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.OFF"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.DISK"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.OFF"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesAndOffset(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesAndOffset(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSomethingAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSomethingAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSomethingAndDisk(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSomethingAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.DISK"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSomethingAndDisk(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSomethingAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSomethingAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSomethingAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSomethingAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSomethingAndDisk(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSomethingAndDisk(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReparseCDSingleEightByteData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReparseCDSingleEightByteData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReparseCDSingleEightByteData(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReparseCDSingleEightByteData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReparseCDSingleEightByteData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(4)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReparseCDSingleEightByteData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReparseCDSingleEightByteData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReparseCDSingleEightByteData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReparseCDSingleEightByteData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber(0)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReparseCDSingleEightByteData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReparseCDSingleEightByteData(0)" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReparseCDSingleEightByteData(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkSizes(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkOffset(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkDisk(2)"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.static {...}" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.static {...}" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.static {...}" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.static {...}" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.static {...}" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.OFF"
call "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.static {...}" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.DISK"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.static {...}"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.OFF" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.OFF"
reference "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.DISK" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest" "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.DISK"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1" "org.apache.commons.compress.parallel.InputStreamSupplier"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.{...}" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.this$0"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.{...}" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.val$payload"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.{...}"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.get(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.val$payload"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.get(0)"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.val$payload"
reference "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.this$0" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest"
contain "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.this$0"
reference "org.apache.commons.compress.AbstractTestCase.StreamWrapper" "org.apache.commons.compress.AbstractTestCase"
contain "org.apache.commons.compress.AbstractTestCase.StreamWrapper" "org.apache.commons.compress.AbstractTestCase.StreamWrapper.wrap(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarConstants"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.AbstractTestCase"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.TarArchiveEntryTest(0)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testFileSystemRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.ROOT"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testFileSystemRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testFileSystemRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testFileSystemRoot(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.ROOT"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCheckSumOK(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)" "org.apache.commons.compress.AbstractTestCase.tryHardToDelete(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testMaxFileSize(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testMaxFileSize(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testMaxFileSize(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructor(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructor(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.assertGnuMagic(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructor(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructor(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructorWithFileFlag(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructorWithFileFlag(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.assertPosixMagic(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructorWithFileFlag(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructorWithFileFlag(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructorWithPreserve(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructorWithPreserve(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.assertGnuMagic(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructorWithPreserve(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructorWithPreserve(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.assertGnuMagic(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.readMagic(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.assertGnuMagic(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.assertPosixMagic(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.readMagic(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.assertPosixMagic(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.readMagic(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.readMagic(1)"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.static {...}" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.OS"
reference "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.static {...}" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.ROOT"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.static {...}"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.OS"
contain "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.ROOT"
reference "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest" "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.ZipEightByteIntegerTest(0)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testLongToBytes(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testLongToBytes(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest" "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testLongToBytes(0)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testLongFromBytes(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testLongFromBytes(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(0)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest" "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testLongFromBytes(0)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testBIToBytes(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testBIToBytes(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest" "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testBIToBytes(0)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testBIFromBytes(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testBIFromBytes(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest" "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testBIFromBytes(0)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testEquals(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testEquals(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(1)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest" "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testEquals(0)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testSign(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
call "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testSign(0)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest" "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testSign(0)"
reference "org.apache.commons.compress.compressors.ZTestCase.2" "org.apache.commons.compress.compressors.CompressorStreamFactory"
reference "org.apache.commons.compress.compressors.ZTestCase.2" "org.apache.commons.compress.AbstractTestCase.StreamWrapper"
reference "org.apache.commons.compress.compressors.ZTestCase.2" "org.apache.commons.compress.compressors.ZTestCase"
reference "org.apache.commons.compress.compressors.ZTestCase.2" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.ZTestCase.2.{...}" "org.apache.commons.compress.compressors.ZTestCase.2.this$0"
contain "org.apache.commons.compress.compressors.ZTestCase.2" "org.apache.commons.compress.compressors.ZTestCase.2.{...}"
call "org.apache.commons.compress.compressors.ZTestCase.2.wrap(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.ZTestCase.2.wrap(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.ZTestCase.2" "org.apache.commons.compress.compressors.ZTestCase.2.wrap(1)"
reference "org.apache.commons.compress.compressors.ZTestCase.2.this$0" "org.apache.commons.compress.compressors.ZTestCase"
contain "org.apache.commons.compress.compressors.ZTestCase.2" "org.apache.commons.compress.compressors.ZTestCase.2.this$0"
reference "org.apache.commons.compress.compressors.ZTestCase.3" "org.apache.commons.compress.compressors.CompressorStreamFactory"
reference "org.apache.commons.compress.compressors.ZTestCase.3" "org.apache.commons.compress.AbstractTestCase.StreamWrapper"
reference "org.apache.commons.compress.compressors.ZTestCase.3" "org.apache.commons.compress.compressors.ZTestCase"
reference "org.apache.commons.compress.compressors.ZTestCase.3" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.ZTestCase.3.{...}" "org.apache.commons.compress.compressors.ZTestCase.3.this$0"
contain "org.apache.commons.compress.compressors.ZTestCase.3" "org.apache.commons.compress.compressors.ZTestCase.3.{...}"
call "org.apache.commons.compress.compressors.ZTestCase.3.wrap(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.ZTestCase.3.wrap(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)"
contain "org.apache.commons.compress.compressors.ZTestCase.3" "org.apache.commons.compress.compressors.ZTestCase.3.wrap(1)"
reference "org.apache.commons.compress.compressors.ZTestCase.3.this$0" "org.apache.commons.compress.compressors.ZTestCase"
contain "org.apache.commons.compress.compressors.ZTestCase.3" "org.apache.commons.compress.compressors.ZTestCase.3.this$0"
reference "org.apache.commons.compress.archivers.cpio.CpioUtilTest" "org.apache.commons.compress.archivers.cpio.CpioConstants"
reference "org.apache.commons.compress.archivers.cpio.CpioUtilTest" "org.apache.commons.compress.archivers.cpio.CpioUtil"
contain "org.apache.commons.compress.archivers.cpio.CpioUtilTest" "org.apache.commons.compress.archivers.cpio.CpioUtilTest.CpioUtilTest(0)"
call "org.apache.commons.compress.archivers.cpio.CpioUtilTest.oldBinMagic2ByteArrayNotSwapped(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(3)"
contain "org.apache.commons.compress.archivers.cpio.CpioUtilTest" "org.apache.commons.compress.archivers.cpio.CpioUtilTest.oldBinMagic2ByteArrayNotSwapped(0)"
call "org.apache.commons.compress.archivers.cpio.CpioUtilTest.oldBinMagic2ByteArraySwapped(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(3)"
contain "org.apache.commons.compress.archivers.cpio.CpioUtilTest" "org.apache.commons.compress.archivers.cpio.CpioUtilTest.oldBinMagic2ByteArraySwapped(0)"
call "org.apache.commons.compress.archivers.cpio.CpioUtilTest.oldBinMagicFromByteArrayNotSwapped(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(2)"
contain "org.apache.commons.compress.archivers.cpio.CpioUtilTest" "org.apache.commons.compress.archivers.cpio.CpioUtilTest.oldBinMagicFromByteArrayNotSwapped(0)"
call "org.apache.commons.compress.archivers.cpio.CpioUtilTest.oldBinMagicFromByteArraySwapped(0)" "org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(2)"
contain "org.apache.commons.compress.archivers.cpio.CpioUtilTest" "org.apache.commons.compress.archivers.cpio.CpioUtilTest.oldBinMagicFromByteArraySwapped(0)"
reference "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.jar.JarArchiveEntry"
reference "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ar.ArArchiveEntry"
reference "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"
reference "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.ArchiveOutputStreamTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.ArchiveOutputStreamTest(0)"
reference "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testFinish(0)" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.factory"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testFinish(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testFinish(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testFinish(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testFinish(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.finish(0)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testFinish(0)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testFinish(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testFinish(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testFinish(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testFinish(0)"
reference "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(0)" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.factory"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(0)" "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.finish(0)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(0)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceAr(0)" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceAr(0)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceCpio(0)" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceCpio(0)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(0)" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(0)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceTar(0)" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceTar(0)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(0)" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(0)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.getFile(1)"
reference "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.factory"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(2)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.finish(0)"
contain "org.apache.commons.compress.archivers.ArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)"
reference "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ar.ArArchiveEntry"
reference "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream"
reference "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.archivers.ArTestCase" "byte[]"
reference "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.archivers.ArTestCase.ArTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ArTestCase.ArTestCase(0)"
reference "org.apache.commons.compress.archivers.ArTestCase.testArArchiveCreation(0)" "org.apache.commons.compress.archivers.ArTestCase.dir"
call "org.apache.commons.compress.archivers.ArTestCase.testArArchiveCreation(0)" "org.apache.commons.compress.archivers.ArTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testArArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testArArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.ArTestCase.testArArchiveCreation(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
call "org.apache.commons.compress.archivers.ArTestCase.testArArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testArArchiveCreation(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.ArTestCase.testArArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testArArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ArTestCase.testArArchiveCreation(0)"
reference "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)" "org.apache.commons.compress.archivers.ArTestCase.dir"
call "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)" "org.apache.commons.compress.archivers.ArTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
call "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)"
reference "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.archivers.ArTestCase.dir"
call "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.archivers.ArTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
call "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength(0)"
contain "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ArTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ArTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ArTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ArTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(6)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ArTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ArTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ArTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ArTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ArTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ArTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(6)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ar.ArArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ArTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ArTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.ArTestCase" "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest" "org.apache.commons.compress.archivers.cpio.CpioConstants"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.CpioArchiveOutputStreamTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.CpioArchiveOutputStreamTest(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.getFile(1)"
reference "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.dir"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(3)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextEntry(0)"
contain "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)"
reference "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"
reference "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.cpio.CpioConstants"
reference "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream"
reference "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream"
reference "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.CpioTestCase" "byte[]"
reference "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.archivers.CpioTestCase.CpioTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.CpioTestCase.CpioTestCase(0)"
reference "org.apache.commons.compress.archivers.CpioTestCase.testCpioArchiveCreation(0)" "org.apache.commons.compress.archivers.CpioTestCase.dir"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioArchiveCreation(0)" "org.apache.commons.compress.archivers.CpioTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioArchiveCreation(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioArchiveCreation(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.CpioTestCase.testCpioArchiveCreation(0)"
reference "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.CpioTestCase.dir"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.CpioTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.finish(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.CpioTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.CpioTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.CpioTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.CpioTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.CpioTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.CpioTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.CpioTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.CpioTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.CpioTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.CpioTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.CpioTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.CpioTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.CpioTestCase" "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.X7875_NewUnix"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "byte[]"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.AbstractTestCase"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.X7875_NewUnixTest(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.before(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.X7875_NewUnix(0)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.before(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.xf"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.before(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testSampleFile(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.X7875"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getUID(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getGID(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testSampleFile(0)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testGetHeaderId(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.X7875"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testGetHeaderId(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.xf"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testGetHeaderId(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getHeaderId(0)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testGetHeaderId(0)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.xf"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(1)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.toString(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.clone(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.hashCode(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(1)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testMisc(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testTrimLeadingZeroesForceMinLength4(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.trimTest(1)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testTrimLeadingZeroesForceMinLength4(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.trimTest(1)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(1)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.trimTest(1)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testParseReparse(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testParseReparse(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.xf"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testParseReparse(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testParseReparse(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getUID(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testParseReparse(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getGID(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testParseReparse(0)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData(0)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testParseReparse(0)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.xf"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(1)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(1)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getUID(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getGID(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryData(0)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(3)"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)"
call "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.static {...}" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.static {...}" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.X7875"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.static {...}"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.X7875" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.X7875"
reference "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.xf" "org.apache.commons.compress.archivers.zip.X7875_NewUnix"
contain "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest" "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.xf"
reference "org.apache.commons.compress.archivers.zip.Lister" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.zip.Lister" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Lister" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.Lister" "org.apache.commons.compress.archivers.zip.Lister.CommandLine"
reference "org.apache.commons.compress.archivers.zip.Lister" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Lister" "org.apache.commons.compress.utils.IOUtils"
contain "org.apache.commons.compress.archivers.zip.Lister" "org.apache.commons.compress.archivers.zip.Lister.Lister(0)"
call "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.Lister.parse(1)"
reference "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.archive"
call "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.Lister.usage(0)"
reference "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.useStream"
reference "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.encoding"
reference "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.allowStoredEntriesWithDataDescriptor"
call "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)"
call "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.Lister.list(1)"
reference "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.dir"
call "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.Lister.extract(3)"
call "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(2)"
call "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)"
call "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
call "org.apache.commons.compress.archivers.zip.Lister.main(1)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.zip.Lister" "org.apache.commons.compress.archivers.zip.Lister.main(1)"
call "org.apache.commons.compress.archivers.zip.Lister.list(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.zip.Lister" "org.apache.commons.compress.archivers.zip.Lister.list(1)"
call "org.apache.commons.compress.archivers.zip.Lister.extract(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.Lister.extract(3)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
contain "org.apache.commons.compress.archivers.zip.Lister" "org.apache.commons.compress.archivers.zip.Lister.extract(3)"
call "org.apache.commons.compress.archivers.zip.Lister.parse(1)" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.CommandLine(1)"
reference "org.apache.commons.compress.archivers.zip.Lister.parse(1)" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.encoding"
reference "org.apache.commons.compress.archivers.zip.Lister.parse(1)" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.dir"
reference "org.apache.commons.compress.archivers.zip.Lister.parse(1)" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.useStream"
reference "org.apache.commons.compress.archivers.zip.Lister.parse(1)" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.allowStoredEntriesWithDataDescriptor"
reference "org.apache.commons.compress.archivers.zip.Lister.parse(1)" "org.apache.commons.compress.archivers.zip.Lister.CommandLine.archive"
call "org.apache.commons.compress.archivers.zip.Lister.parse(1)" "org.apache.commons.compress.archivers.zip.Lister.usage(0)"
contain "org.apache.commons.compress.archivers.zip.Lister" "org.apache.commons.compress.archivers.zip.Lister.parse(1)"
contain "org.apache.commons.compress.archivers.zip.Lister" "org.apache.commons.compress.archivers.zip.Lister.usage(0)"
reference "org.apache.commons.compress.compressors.CompressorServiceLoaderTest" "org.apache.commons.compress.compressors.CompressorStreamFactory"
reference "org.apache.commons.compress.compressors.CompressorServiceLoaderTest" "org.apache.commons.compress.compressors.CompressorException"
reference "org.apache.commons.compress.compressors.CompressorServiceLoaderTest" "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException"
reference "org.apache.commons.compress.compressors.CompressorServiceLoaderTest" "org.apache.commons.compress.compressors.TestCompressorStreamProvider"
contain "org.apache.commons.compress.compressors.CompressorServiceLoaderTest" "org.apache.commons.compress.compressors.CompressorServiceLoaderTest.CompressorServiceLoaderTest(0)"
call "org.apache.commons.compress.compressors.CompressorServiceLoaderTest.testInputStream(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.CompressorServiceLoaderTest.testInputStream(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.CompressorServiceLoaderTest" "org.apache.commons.compress.compressors.CompressorServiceLoaderTest.testInputStream(0)"
call "org.apache.commons.compress.compressors.CompressorServiceLoaderTest.testOutputStream(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.CompressorServiceLoaderTest.testOutputStream(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)"
contain "org.apache.commons.compress.compressors.CompressorServiceLoaderTest" "org.apache.commons.compress.compressors.CompressorServiceLoaderTest.testOutputStream(0)"
reference "org.apache.commons.compress.compressors.ZTestCase.1" "org.apache.commons.compress.compressors.z.ZCompressorInputStream"
reference "org.apache.commons.compress.compressors.ZTestCase.1" "org.apache.commons.compress.AbstractTestCase.StreamWrapper"
reference "org.apache.commons.compress.compressors.ZTestCase.1" "org.apache.commons.compress.compressors.ZTestCase"
reference "org.apache.commons.compress.compressors.ZTestCase.1" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.ZTestCase.1.{...}" "org.apache.commons.compress.compressors.ZTestCase.1.this$0"
contain "org.apache.commons.compress.compressors.ZTestCase.1" "org.apache.commons.compress.compressors.ZTestCase.1.{...}"
call "org.apache.commons.compress.compressors.ZTestCase.1.wrap(1)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)"
contain "org.apache.commons.compress.compressors.ZTestCase.1" "org.apache.commons.compress.compressors.ZTestCase.1.wrap(1)"
reference "org.apache.commons.compress.compressors.ZTestCase.1.this$0" "org.apache.commons.compress.compressors.ZTestCase"
contain "org.apache.commons.compress.compressors.ZTestCase.1" "org.apache.commons.compress.compressors.ZTestCase.1.this$0"
reference "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.utils.ArchiveUtils"
call "org.apache.commons.compress.ArchiveUtilsTest.ArchiveUtilsTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.ArchiveUtilsTest.ArchiveUtilsTest(0)"
call "org.apache.commons.compress.ArchiveUtilsTest.testCompareBA(0)" "org.apache.commons.compress.utils.ArchiveUtils.isEqual(3)"
call "org.apache.commons.compress.ArchiveUtilsTest.testCompareBA(0)" "org.apache.commons.compress.utils.ArchiveUtils.isEqual(2)"
contain "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.ArchiveUtilsTest.testCompareBA(0)"
call "org.apache.commons.compress.ArchiveUtilsTest.testCompareAscii(0)" "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(2)"
contain "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.ArchiveUtilsTest.testCompareAscii(0)"
call "org.apache.commons.compress.ArchiveUtilsTest.testAsciiConversions(0)" "org.apache.commons.compress.ArchiveUtilsTest.asciiToByteAndBackOK(1)"
call "org.apache.commons.compress.ArchiveUtilsTest.testAsciiConversions(0)" "org.apache.commons.compress.ArchiveUtilsTest.asciiToByteAndBackFail(1)"
contain "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.ArchiveUtilsTest.testAsciiConversions(0)"
call "org.apache.commons.compress.ArchiveUtilsTest.sanitizeShortensString(0)" "org.apache.commons.compress.utils.ArchiveUtils.sanitize(1)"
contain "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.ArchiveUtilsTest.sanitizeShortensString(0)"
call "org.apache.commons.compress.ArchiveUtilsTest.sanitizeLeavesShortStringsAlone(0)" "org.apache.commons.compress.utils.ArchiveUtils.sanitize(1)"
contain "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.ArchiveUtilsTest.sanitizeLeavesShortStringsAlone(0)"
call "org.apache.commons.compress.ArchiveUtilsTest.sanitizeRemovesUnprintableCharacters(0)" "org.apache.commons.compress.utils.ArchiveUtils.sanitize(1)"
contain "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.ArchiveUtilsTest.sanitizeRemovesUnprintableCharacters(0)"
call "org.apache.commons.compress.ArchiveUtilsTest.asciiToByteAndBackOK(1)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(1)"
call "org.apache.commons.compress.ArchiveUtilsTest.asciiToByteAndBackOK(1)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(1)"
contain "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.ArchiveUtilsTest.asciiToByteAndBackOK(1)"
call "org.apache.commons.compress.ArchiveUtilsTest.asciiToByteAndBackFail(1)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(1)"
call "org.apache.commons.compress.ArchiveUtilsTest.asciiToByteAndBackFail(1)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(1)"
contain "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.ArchiveUtilsTest.asciiToByteAndBackFail(1)"
reference "org.apache.commons.compress.ArchiveUtilsTest.static {...}" "org.apache.commons.compress.ArchiveUtilsTest.byteTest"
contain "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.ArchiveUtilsTest.static {...}"
contain "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.ArchiveUtilsTest.bytesToTest"
reference "org.apache.commons.compress.ArchiveUtilsTest.byteTest" "byte[]"
contain "org.apache.commons.compress.ArchiveUtilsTest" "org.apache.commons.compress.ArchiveUtilsTest.byteTest"
reference "org.apache.commons.compress.compressors.GzipUtilsTestCase" "org.apache.commons.compress.compressors.gzip.GzipUtils"
contain "org.apache.commons.compress.compressors.GzipUtilsTestCase" "org.apache.commons.compress.compressors.GzipUtilsTestCase.GzipUtilsTestCase(0)"
call "org.apache.commons.compress.compressors.GzipUtilsTestCase.testIsCompressedFilename(0)" "org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.GzipUtilsTestCase" "org.apache.commons.compress.compressors.GzipUtilsTestCase.testIsCompressedFilename(0)"
call "org.apache.commons.compress.compressors.GzipUtilsTestCase.testGetUncompressedFilename(0)" "org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(1)"
contain "org.apache.commons.compress.compressors.GzipUtilsTestCase" "org.apache.commons.compress.compressors.GzipUtilsTestCase.testGetUncompressedFilename(0)"
call "org.apache.commons.compress.compressors.GzipUtilsTestCase.testGetCompressedFilename(0)" "org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.GzipUtilsTestCase" "org.apache.commons.compress.compressors.GzipUtilsTestCase.testGetCompressedFilename(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "byte[]"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.UnixStat"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.parallel.InputStreamSupplier"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.ParallelScatterZipCreatorTest(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.NUMITEMS"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.ParallelScatterZipCreatorTest(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.cleanup(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.result"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.cleanup(0)" "org.apache.commons.compress.AbstractTestCase.tryHardToDelete(1)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.cleanup(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.tmp"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.cleanup(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.concurrent(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.result"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.concurrent(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.concurrent(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.concurrent(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(0)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.concurrent(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntries(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.concurrent(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.concurrent(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.concurrent(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.removeEntriesFoundInZipFile(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.concurrent(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage(0)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.concurrent(0)"
reference "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.callableApi(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.result"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.callableApi(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.callableApi(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.callableApi(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.{...}"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.callableApi(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.callableApi(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntriesAsCallable(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.callableApi(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.callableApi(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.callableApi(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.removeEntriesFoundInZipFile(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.callableApi(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage(0)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.callableApi(0)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.removeEntriesFoundInZipFile(2)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.removeEntriesFoundInZipFile(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(0)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.removeEntriesFoundInZipFile(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.removeEntriesFoundInZipFile(2)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.removeEntriesFoundInZipFile(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.removeEntriesFoundInZipFile(2)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.removeEntriesFoundInZipFile(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntries(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.createZipArchiveEntry(3)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntries(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.{...}"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntries(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntries(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.{...}"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntries(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntries(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntriesAsCallable(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.createZipArchiveEntry(3)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntriesAsCallable(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.{...}"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntriesAsCallable(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(2)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntriesAsCallable(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.{...}"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntriesAsCallable(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntriesAsCallable(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntriesAsCallable(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.createZipArchiveEntry(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.createZipArchiveEntry(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.createZipArchiveEntry(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.createZipArchiveEntry(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.createZipArchiveEntry(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(1)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.createZipArchiveEntry(3)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.access$002(2)"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.NUMITEMS"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.result"
contain "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.tmp"
reference "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest" "org.apache.commons.compress.archivers.ArchiveException"
reference "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest" "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException"
reference "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest" "org.apache.commons.compress.archivers.TestArchiveStreamProvider"
contain "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest" "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest.ArchiveServiceLoaderTest(0)"
call "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest.testInputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest.testInputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
contain "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest" "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest.testInputStream(0)"
call "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest.testOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest.testOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
contain "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest" "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest.testOutputStream(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.Zip64SupportIT(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingInputStream(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedBy7ZIPUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedBy7ZIP(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedBy7ZIPUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedBy7ZIPUsingInputStream(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByJava7JarUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByJava7Jar(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByJava7JarUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByJava7JarUsingInputStream(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByWinZIPUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByWinZIP(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByWinZIPUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByWinZIPUsingInputStream(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByPKZipUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByPKZip(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByPKZipUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByPKZipUsingInputStream(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesImpl(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingInputStream(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedBy7ZIPUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedBy7ZIP(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedBy7ZIPUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesImpl(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedBy7ZIPUsingInputStream(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinCFUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByWinCF(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinCFUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesImpl(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinCFUsingInputStream(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByJava7JarUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByJava7Jar(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByJava7JarUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesImpl(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByJava7JarUsingInputStream(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinZIPUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByWinZIP(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinZIPUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesImpl(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinZIPUsingInputStream(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByPKZipUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByPKZip(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByPKZipUsingInputStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesImpl(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByPKZipUsingInputStream(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedBy7ZIPUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedBy7ZIP(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedBy7ZIPUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedBy7ZIPUsingZipFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByJava7JarUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByJava7Jar(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByJava7JarUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByJava7JarUsingZipFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByWinZIPUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByWinZIP(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByWinZIPUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByWinZIPUsingZipFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByPKZipUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByPKZip(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByPKZipUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByPKZipUsingZipFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeAndRead5GBOfZerosUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeAndRead5GBOfZerosUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeAndRead5GBOfZerosUsingZipFile(0)" "org.apache.commons.compress.AbstractTestCase.tryHardToDelete(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeAndRead5GBOfZerosUsingZipFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.getTempFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFileImpl(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedBy7ZIPUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedBy7ZIP(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedBy7ZIPUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFileImpl(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedBy7ZIPUsingZipFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinCFUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByWinCF(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinCFUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFileImpl(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinCFUsingZipFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByJava7JarUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByJava7Jar(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByJava7JarUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFileImpl(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByJava7JarUsingZipFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinZIPUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByWinZIP(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinZIPUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFileImpl(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinZIPUsingZipFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByPKZipUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByPKZip(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByPKZipUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFileImpl(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByPKZipUsingZipFile(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFiles(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFiles(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFiles(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFiles(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFiles(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFiles(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFiles(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFiles(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesStream(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFiles(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesFileModeAlways(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFiles(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesStreamModeAlways(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesModeNever"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesFileModeNever(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesModeNever"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesStreamModeNever(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.readSelfGenerated100KFilesUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3.{...}"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.readSelfGenerated100KFilesUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.readSelfGenerated100KFilesUsingZipFile(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchive(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchive(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchive(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchive(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchive(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchive(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchive(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchive(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveStream(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchive(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveFileModeAlways(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchive(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveStreamModeAlways(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveModeNever"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveFileModeNever(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveModeNever"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveStreamModeNever(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read3EntriesCreatingBigArchiveFileUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.{...}"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read3EntriesCreatingBigArchiveFileUsingZipFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read3EntriesCreatingBigArchiveFileUsingZipFile(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryToStream(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryKnownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryKnownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryKnownSizeToFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryUnnownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryUnnownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryUnnownSizeToFile(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryToStreamModeAlways(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryKnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryKnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryKnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryKnownSizeToFileModeAlways(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryUnnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryUnnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryUnnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryUnnownSizeToFileModeAlways(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryModeNever(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryModeNever(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryModeNever(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryToStreamModeNever(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryKnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryModeNever(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryKnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryKnownSizeToFileModeNever(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryUnnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryModeNever(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryUnnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryUnnownSizeToFileModeNever(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToStream(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToStream(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToStream(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStream(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToStream(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStreamModeAlways(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToStream(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStreamModeAlways(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStream(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStream(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStream(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStream(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStream(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStreamModeNever(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFile(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFile(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFile(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFile(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFile(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToFile(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFile(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToFileModeAlways(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFile(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToFileModeAlways(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.{...}"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStreamModeNever(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFileModeNever(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFileModeNever(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFileModeNever(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToFileModeNever(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFileModeNever(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToFileModeNever(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryModeAlways(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryModeAlways(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryModeAlways(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryModeAlways(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryModeAlways(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToStream(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToStream(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToStream(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToStream(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToStream(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToStream(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToStreamModeAlways(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToStreamModeAlways(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToStreamModeAlways(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToStreamModeAlways(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFile(1)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFile(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFile(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFile(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFile(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFile(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFile(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFileModeAlways(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.{...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFileModeAlways(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFileModeAlways(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFileModeAlways(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(0)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.getTempFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest.test(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)" "org.apache.commons.compress.AbstractTestCase.tryHardToDelete(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFile(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedBy7ZIP(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedBy7ZIP(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByJava7Jar(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByJava7Jar(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByWinZIP(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByWinZIP(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByPKZip(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByPKZip(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFile(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFile(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedBy7ZIP(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedBy7ZIP(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByWinCF(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByWinCF(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByJava7Jar(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByJava7Jar(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByWinZIP(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByWinZIP(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByPKZip(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByPKZip(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.getTempFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesImpl(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesImpl(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesImpl(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesImpl(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesImpl(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesImpl(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFileImpl(1)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFileImpl(1)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFileImpl(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFileImpl(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFileImpl(1)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFileImpl(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.getLengthAndPositionAtCentralDirectory(1)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.getLengthAndPositionAtCentralDirectory32(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.getLengthAndPositionAtCentralDirectory(1)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.getLengthAndPositionAtCentralDirectory(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.getLengthAndPositionAtCentralDirectory32(2)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.getLengthAndPositionAtCentralDirectory32(2)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesToStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesToStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesToStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesToStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesToStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesToStream(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveToStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveToStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveToStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveToStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveToStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveToStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveToStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveToStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveToStream(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$000(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$100(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$200(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$300(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.static {...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.static {...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesModeNever"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.static {...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.static {...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveModeNever"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.static {...}"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.FIVE_BILLION"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ONE_MILLION"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ONE_HUNDRED_THOUSAND"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesModeNever" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesModeNever"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveModeNever" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveModeNever"
reference "org.apache.commons.compress.utils.CountingStreamTest" "org.apache.commons.compress.utils.CountingOutputStream"
reference "org.apache.commons.compress.utils.CountingStreamTest" "org.apache.commons.compress.utils.CountingInputStream"
contain "org.apache.commons.compress.utils.CountingStreamTest" "org.apache.commons.compress.utils.CountingStreamTest.CountingStreamTest(0)"
call "org.apache.commons.compress.utils.CountingStreamTest.output(0)" "org.apache.commons.compress.utils.CountingOutputStream.CountingOutputStream(1)"
call "org.apache.commons.compress.utils.CountingStreamTest.output(0)" "org.apache.commons.compress.utils.CountingOutputStream.write(1)"
call "org.apache.commons.compress.utils.CountingStreamTest.output(0)" "org.apache.commons.compress.utils.CountingOutputStream.getBytesWritten(0)"
call "org.apache.commons.compress.utils.CountingStreamTest.output(0)" "org.apache.commons.compress.utils.CountingOutputStream.write(1)"
call "org.apache.commons.compress.utils.CountingStreamTest.output(0)" "org.apache.commons.compress.utils.CountingOutputStream.write(3)"
call "org.apache.commons.compress.utils.CountingStreamTest.output(0)" "org.apache.commons.compress.utils.CountingOutputStream.count(1)"
call "org.apache.commons.compress.utils.CountingStreamTest.output(0)" "org.apache.commons.compress.utils.CountingOutputStream.close(0)"
contain "org.apache.commons.compress.utils.CountingStreamTest" "org.apache.commons.compress.utils.CountingStreamTest.output(0)"
call "org.apache.commons.compress.utils.CountingStreamTest.input(0)" "org.apache.commons.compress.utils.CountingInputStream.CountingInputStream(1)"
call "org.apache.commons.compress.utils.CountingStreamTest.input(0)" "org.apache.commons.compress.utils.CountingInputStream.read(0)"
call "org.apache.commons.compress.utils.CountingStreamTest.input(0)" "org.apache.commons.compress.utils.CountingInputStream.getBytesRead(0)"
call "org.apache.commons.compress.utils.CountingStreamTest.input(0)" "org.apache.commons.compress.utils.CountingInputStream.read(1)"
call "org.apache.commons.compress.utils.CountingStreamTest.input(0)" "org.apache.commons.compress.utils.CountingInputStream.read(3)"
call "org.apache.commons.compress.utils.CountingStreamTest.input(0)" "org.apache.commons.compress.utils.CountingInputStream.count(1)"
call "org.apache.commons.compress.utils.CountingStreamTest.input(0)" "org.apache.commons.compress.utils.CountingInputStream.close(0)"
contain "org.apache.commons.compress.utils.CountingStreamTest" "org.apache.commons.compress.utils.CountingStreamTest.input(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterSampleTest" "org.apache.commons.compress.archivers.zip.ScatterSample"
reference "org.apache.commons.compress.archivers.zip.ScatterSampleTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ScatterSampleTest" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.ScatterSampleTest" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.ScatterSampleTest" "org.apache.commons.compress.utils.IOUtils"
contain "org.apache.commons.compress.archivers.zip.ScatterSampleTest" "org.apache.commons.compress.archivers.zip.ScatterSampleTest.ScatterSampleTest(0)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.testSample(0)" "org.apache.commons.compress.archivers.zip.ScatterSampleTest.createFile(1)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.testSample(0)" "org.apache.commons.compress.archivers.zip.ScatterSampleTest.checkFile(1)"
contain "org.apache.commons.compress.archivers.zip.ScatterSampleTest" "org.apache.commons.compress.archivers.zip.ScatterSampleTest.testSample(0)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.createFile(1)" "org.apache.commons.compress.archivers.zip.ScatterSample.ScatterSample(0)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.createFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.createFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.createFile(1)" "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1.{...}"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.createFile(1)" "org.apache.commons.compress.archivers.zip.ScatterSample.addEntry(2)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.createFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.createFile(1)" "org.apache.commons.compress.archivers.zip.ScatterSample.writeTo(1)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.createFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.ScatterSampleTest" "org.apache.commons.compress.archivers.zip.ScatterSampleTest.createFile(1)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.checkFile(1)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.checkFile(1)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.checkFile(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.checkFile(1)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.checkFile(1)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
call "org.apache.commons.compress.archivers.zip.ScatterSampleTest.checkFile(1)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.zip.ScatterSampleTest" "org.apache.commons.compress.archivers.zip.ScatterSampleTest.checkFile(1)"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"
contain "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.PythonTruncatedBzip2Test(0)"
call "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeTestData(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(1)"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeTestData(0)" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.TEXT"
call "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeTestData(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(3)"
call "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeTestData(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.close(0)"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeTestData(0)" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.DATA"
call "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeTestData(0)" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.copyOfRange(3)"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeTestData(0)" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.TRUNCATED_DATA"
contain "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeTestData(0)"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeChannel(0)" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.TRUNCATED_DATA"
call "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeChannel(0)" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.makeBZ2C(1)"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeChannel(0)" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.bz2Channel"
contain "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeChannel(0)"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.closeChannel(0)" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.bz2Channel"
contain "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.closeChannel(0)"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.testTruncatedData(0)" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.bz2Channel"
contain "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.testTruncatedData(0)"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.testPartialReadTruncatedData(0)" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.TEXT"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.testPartialReadTruncatedData(0)" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.bz2Channel"
call "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.testPartialReadTruncatedData(0)" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.copyOfRange(3)"
contain "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.testPartialReadTruncatedData(0)"
call "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.makeBZ2C(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)"
contain "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.makeBZ2C(1)"
contain "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.copyOfRange(3)"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.static {...}" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.TEXT"
contain "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.static {...}"
contain "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.TEXT"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.DATA" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.DATA"
reference "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.TRUNCATED_DATA" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.TRUNCATED_DATA"
contain "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test" "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.bz2Channel"
reference "org.apache.commons.compress.archivers.tar.TarLister" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
reference "org.apache.commons.compress.archivers.tar.TarLister" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
contain "org.apache.commons.compress.archivers.tar.TarLister" "org.apache.commons.compress.archivers.tar.TarLister.TarLister(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.main(1)" "org.apache.commons.compress.archivers.tar.TarLister.usage(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.main(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarLister.main(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarLister.main(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.main(1)" "org.apache.commons.compress.archivers.tar.TarLister.log(1)"
call "org.apache.commons.compress.archivers.tar.TarLister.main(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarLister" "org.apache.commons.compress.archivers.tar.TarLister.main(1)"
contain "org.apache.commons.compress.archivers.tar.TarLister" "org.apache.commons.compress.archivers.tar.TarLister.usage(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getMode(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getUserName(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongUserId(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getGroupName(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongGroupId(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSparse(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getRealSize(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCharacterDevice(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isBlockDevice(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMajor(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMinor(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isLink(0)"
call "org.apache.commons.compress.archivers.tar.TarLister.log(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName(0)"
contain "org.apache.commons.compress.archivers.tar.TarLister" "org.apache.commons.compress.archivers.tar.TarLister.log(1)"
reference "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
reference "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"
reference "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.TarTestCase" "byte[]"
reference "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.archivers.TarTestCase.TarTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.TarTestCase.TarTestCase(0)"
reference "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.TarTestCase.dir"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.TarTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)"
reference "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.TarTestCase.dir"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.TarTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarUnarchive(0)" "org.apache.commons.compress.archivers.TarTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.TarTestCase.testTarUnarchive(0)" "org.apache.commons.compress.archivers.TarTestCase.dir"
call "org.apache.commons.compress.archivers.TarTestCase.testTarUnarchive(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarUnarchive(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.TarTestCase.testTarUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.TarTestCase.testTarUnarchive(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS114(0)" "org.apache.commons.compress.archivers.TarTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS114(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS114(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS114(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS114(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS114(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.TarTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.TarTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.TarTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.TarTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.TarTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.TarTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.TarTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.TarTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.TarTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.TarTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.TarTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.TarTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS178(0)" "org.apache.commons.compress.archivers.TarTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS178(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS178(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS178(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS178(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.TarTestCase" "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS178(0)"
reference "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
reference "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream"
reference "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream"
reference "org.apache.commons.compress.archivers.LongSymLinkTest" "junit.framework.AssertionFailedError"
reference "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
call "org.apache.commons.compress.archivers.LongSymLinkTest.LongSymLinkTest(1)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
reference "org.apache.commons.compress.archivers.LongSymLinkTest.LongSymLinkTest(1)" "org.apache.commons.compress.archivers.LongSymLinkTest.ARCDIR"
reference "org.apache.commons.compress.archivers.LongSymLinkTest.LongSymLinkTest(1)" "org.apache.commons.compress.archivers.LongSymLinkTest.file"
contain "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.LongSymLinkTest.LongSymLinkTest(1)"
reference "org.apache.commons.compress.archivers.LongSymLinkTest.setUpFileList(0)" "org.apache.commons.compress.archivers.LongSymLinkTest.ARCDIR"
reference "org.apache.commons.compress.archivers.LongSymLinkTest.setUpFileList(0)" "org.apache.commons.compress.archivers.LongSymLinkTest.FILELIST"
contain "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.LongSymLinkTest.setUpFileList(0)"
reference "org.apache.commons.compress.archivers.LongSymLinkTest.data(0)" "org.apache.commons.compress.archivers.LongSymLinkTest.ARCDIR"
call "org.apache.commons.compress.archivers.LongSymLinkTest.data(0)" "org.apache.commons.compress.archivers.LongSymLinkTest.1.{...}"
contain "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.LongSymLinkTest.data(0)"
call "org.apache.commons.compress.archivers.LongSymLinkTest.getExpectedString(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink(0)"
call "org.apache.commons.compress.archivers.LongSymLinkTest.getExpectedString(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.LongSymLinkTest.getExpectedString(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName(0)"
call "org.apache.commons.compress.archivers.LongSymLinkTest.getExpectedString(1)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.LongSymLinkTest.getExpectedString(1)"
reference "org.apache.commons.compress.archivers.LongSymLinkTest.testArchive(0)" "org.apache.commons.compress.archivers.LongSymLinkTest.FILELIST"
reference "org.apache.commons.compress.archivers.LongSymLinkTest.testArchive(0)" "org.apache.commons.compress.archivers.LongSymLinkTest.file"
reference "org.apache.commons.compress.archivers.LongSymLinkTest.testArchive(0)" "org.apache.commons.compress.archivers.LongSymLinkTest.factory"
call "org.apache.commons.compress.archivers.LongSymLinkTest.testArchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.LongSymLinkTest.testArchive(0)" "org.apache.commons.compress.archivers.LongSymLinkTest.checkArchiveContent(2)"
call "org.apache.commons.compress.archivers.LongSymLinkTest.testArchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.LongSymLinkTest.testArchive(0)"
reference "org.apache.commons.compress.archivers.LongSymLinkTest.static {...}" "org.apache.commons.compress.archivers.LongSymLinkTest.CLASSLOADER"
reference "org.apache.commons.compress.archivers.LongSymLinkTest.static {...}" "org.apache.commons.compress.archivers.LongSymLinkTest.ARCDIR"
reference "org.apache.commons.compress.archivers.LongSymLinkTest.static {...}" "org.apache.commons.compress.archivers.LongSymLinkTest.FILELIST"
contain "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.LongSymLinkTest.static {...}"
contain "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.LongSymLinkTest.CLASSLOADER"
contain "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.LongSymLinkTest.ARCDIR"
contain "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.LongSymLinkTest.FILELIST"
contain "org.apache.commons.compress.archivers.LongSymLinkTest" "org.apache.commons.compress.archivers.LongSymLinkTest.file"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest" "org.apache.commons.compress.archivers.ArchiveException"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest" "org.apache.commons.compress.archivers.dump.ShortFileException"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest" "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException"
reference "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest" "org.apache.commons.compress.AbstractTestCase"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.DumpArchiveInputStreamTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.DumpArchiveInputStreamTest(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testNotADumpArchive(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.getFile(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testNotADumpArchive(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testNotADumpArchive(0)" "org.apache.commons.compress.archivers.ArchiveException.getCause(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testNotADumpArchive(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testNotADumpArchiveButBigEnough(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.getFile(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testNotADumpArchiveButBigEnough(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testNotADumpArchiveButBigEnough(0)" "org.apache.commons.compress.archivers.ArchiveException.getCause(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testNotADumpArchiveButBigEnough(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testConsumesArchiveCompletely(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testConsumesArchiveCompletely(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextDumpEntry(0)"
call "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testConsumesArchiveCompletely(0)" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testConsumesArchiveCompletely(0)"
reference "org.apache.commons.compress.archivers.LongPathTest.1" "org.apache.commons.compress.archivers.LongPathTest"
contain "org.apache.commons.compress.archivers.LongPathTest.1" "org.apache.commons.compress.archivers.LongPathTest.1.{...}"
contain "org.apache.commons.compress.archivers.LongPathTest.1" "org.apache.commons.compress.archivers.LongPathTest.1.accept(2)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipMethod"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.utils.IOUtils"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.ZipArchiveInputStreamTest(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(0)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.extractZipInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.extractZipInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.extractZipInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.extractZipInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.extractZipInputStream(1)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.extractZipInputStream(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.extractZipInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(0)" "org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(0)" "org.apache.commons.compress.archivers.zip.ZipMethod.getCode(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnzipBZip2CompressedEntry(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnzipBZip2CompressedEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnzipBZip2CompressedEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnzipBZip2CompressedEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnzipBZip2CompressedEntry(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnzipBZip2CompressedEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnzipBZip2CompressedEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readEntry(2)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testThrowOnInvalidEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testThrowOnInvalidEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testThrowOnInvalidEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testThrowOnInvalidEntry(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readEntry(2)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest" "org.apache.commons.compress.compressors.CompressorStreamFactory"
reference "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest" "org.apache.commons.compress.compressors.CompressorStreamProvider"
reference "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest" "org.apache.commons.compress.compressors.CompressorOutputStream"
reference "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest" "org.apache.commons.compress.compressors.CompressorInputStream"
contain "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest" "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.data(0)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.CompressorStreamFactoryRoundtripTest(1)" "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.compressorName"
contain "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest" "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.CompressorStreamFactoryRoundtripTest(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.testCompressorStreamFactoryRoundtrip(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
reference "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.testCompressorStreamFactoryRoundtrip(0)" "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.compressorName"
call "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.testCompressorStreamFactoryRoundtrip(0)" "org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.testCompressorStreamFactoryRoundtrip(0)" "org.apache.commons.compress.compressors.CompressorOutputStream.write(1)"
call "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.testCompressorStreamFactoryRoundtrip(0)" "org.apache.commons.compress.compressors.CompressorOutputStream.flush(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.testCompressorStreamFactoryRoundtrip(0)" "org.apache.commons.compress.compressors.CompressorOutputStream.close(0)"
call "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.testCompressorStreamFactoryRoundtrip(0)" "org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(3)"
call "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.testCompressorStreamFactoryRoundtrip(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.testCompressorStreamFactoryRoundtrip(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest" "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.testCompressorStreamFactoryRoundtrip(0)"
contain "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest" "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.compressorName"
reference "org.apache.commons.compress.utils.IOUtilsTest.3.1.{...}" "org.apache.commons.compress.utils.IOUtilsTest.3.1.this$1"
reference "org.apache.commons.compress.utils.IOUtilsTest.3.1.{...}" "org.apache.commons.compress.utils.IOUtilsTest.3.1.val$toWrap"
contain "org.apache.commons.compress.utils.IOUtilsTest.3.1" "org.apache.commons.compress.utils.IOUtilsTest.3.1.{...}"
reference "org.apache.commons.compress.utils.IOUtilsTest.3.1.skip(1)" "org.apache.commons.compress.utils.IOUtilsTest.3.1.skipped"
reference "org.apache.commons.compress.utils.IOUtilsTest.3.1.skip(1)" "org.apache.commons.compress.utils.IOUtilsTest.3.1.val$toWrap"
contain "org.apache.commons.compress.utils.IOUtilsTest.3.1" "org.apache.commons.compress.utils.IOUtilsTest.3.1.skip(1)"
contain "org.apache.commons.compress.utils.IOUtilsTest.3.1" "org.apache.commons.compress.utils.IOUtilsTest.3.1.skipped"
contain "org.apache.commons.compress.utils.IOUtilsTest.3.1" "org.apache.commons.compress.utils.IOUtilsTest.3.1.val$toWrap"
reference "org.apache.commons.compress.utils.IOUtilsTest.3.1.this$1" "org.apache.commons.compress.utils.IOUtilsTest.3"
contain "org.apache.commons.compress.utils.IOUtilsTest.3.1" "org.apache.commons.compress.utils.IOUtilsTest.3.1.this$1"
reference "org.apache.commons.compress.archivers.zip.CircularBufferTest" "org.apache.commons.compress.archivers.zip.CircularBuffer"
contain "org.apache.commons.compress.archivers.zip.CircularBufferTest" "org.apache.commons.compress.archivers.zip.CircularBufferTest.CircularBufferTest(0)"
call "org.apache.commons.compress.archivers.zip.CircularBufferTest.testPutAndGet(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.CircularBuffer(1)"
call "org.apache.commons.compress.archivers.zip.CircularBufferTest.testPutAndGet(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.put(1)"
call "org.apache.commons.compress.archivers.zip.CircularBufferTest.testPutAndGet(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.available(0)"
call "org.apache.commons.compress.archivers.zip.CircularBufferTest.testPutAndGet(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.get(0)"
contain "org.apache.commons.compress.archivers.zip.CircularBufferTest" "org.apache.commons.compress.archivers.zip.CircularBufferTest.testPutAndGet(0)"
call "org.apache.commons.compress.archivers.zip.CircularBufferTest.testCopy(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.CircularBuffer(1)"
call "org.apache.commons.compress.archivers.zip.CircularBufferTest.testCopy(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.put(1)"
call "org.apache.commons.compress.archivers.zip.CircularBufferTest.testCopy(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.get(0)"
call "org.apache.commons.compress.archivers.zip.CircularBufferTest.testCopy(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.copy(2)"
call "org.apache.commons.compress.archivers.zip.CircularBufferTest.testCopy(0)" "org.apache.commons.compress.archivers.zip.CircularBuffer.available(0)"
contain "org.apache.commons.compress.archivers.zip.CircularBufferTest" "org.apache.commons.compress.archivers.zip.CircularBufferTest.testCopy(0)"
reference "org.apache.commons.compress.utils.IOUtilsTest" "org.apache.commons.compress.utils.IOUtilsTest.StreamWrapper"
reference "org.apache.commons.compress.utils.IOUtilsTest" "byte[]"
reference "org.apache.commons.compress.utils.IOUtilsTest" "org.apache.commons.compress.utils.IOUtils"
contain "org.apache.commons.compress.utils.IOUtilsTest" "org.apache.commons.compress.utils.IOUtilsTest.IOUtilsTest(0)"
call "org.apache.commons.compress.utils.IOUtilsTest.skipUsingSkip(0)" "org.apache.commons.compress.utils.IOUtilsTest.1.{...}"
call "org.apache.commons.compress.utils.IOUtilsTest.skipUsingSkip(0)" "org.apache.commons.compress.utils.IOUtilsTest.skip(1)"
contain "org.apache.commons.compress.utils.IOUtilsTest" "org.apache.commons.compress.utils.IOUtilsTest.skipUsingSkip(0)"
call "org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(0)" "org.apache.commons.compress.utils.IOUtilsTest.2.{...}"
call "org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(0)" "org.apache.commons.compress.utils.IOUtilsTest.skip(1)"
contain "org.apache.commons.compress.utils.IOUtilsTest" "org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(0)"
call "org.apache.commons.compress.utils.IOUtilsTest.skipUsingSkipAndRead(0)" "org.apache.commons.compress.utils.IOUtilsTest.3.{...}"
call "org.apache.commons.compress.utils.IOUtilsTest.skipUsingSkipAndRead(0)" "org.apache.commons.compress.utils.IOUtilsTest.skip(1)"
contain "org.apache.commons.compress.utils.IOUtilsTest" "org.apache.commons.compress.utils.IOUtilsTest.skipUsingSkipAndRead(0)"
call "org.apache.commons.compress.utils.IOUtilsTest.readFullyOnChannelReadsFully(0)" "org.apache.commons.compress.utils.IOUtilsTest.readFully(2)"
contain "org.apache.commons.compress.utils.IOUtilsTest" "org.apache.commons.compress.utils.IOUtilsTest.readFullyOnChannelReadsFully(0)"
call "org.apache.commons.compress.utils.IOUtilsTest.readFullyOnChannelThrowsEof(0)" "org.apache.commons.compress.utils.IOUtilsTest.readFully(2)"
contain "org.apache.commons.compress.utils.IOUtilsTest" "org.apache.commons.compress.utils.IOUtilsTest.readFullyOnChannelThrowsEof(0)"
call "org.apache.commons.compress.utils.IOUtilsTest.readFully(2)" "org.apache.commons.compress.utils.IOUtilsTest.4.{...}"
call "org.apache.commons.compress.utils.IOUtilsTest.readFully(2)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
contain "org.apache.commons.compress.utils.IOUtilsTest" "org.apache.commons.compress.utils.IOUtilsTest.readFully(2)"
call "org.apache.commons.compress.utils.IOUtilsTest.skip(1)" "org.apache.commons.compress.utils.IOUtilsTest.StreamWrapper.wrap(1)"
call "org.apache.commons.compress.utils.IOUtilsTest.skip(1)" "org.apache.commons.compress.utils.IOUtils.skip(2)"
contain "org.apache.commons.compress.utils.IOUtilsTest" "org.apache.commons.compress.utils.IOUtilsTest.skip(1)"
reference "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest" "org.apache.commons.compress.archivers.zip.AsiExtraField"
reference "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest" "org.apache.commons.compress.archivers.zip.UnixStat"
reference "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest" "byte[]"
reference "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest" "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.AsiExtraFieldTest(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testModes(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testModes(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(1)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testModes(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testModes(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(1)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testModes(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(1)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest" "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testModes(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testContent(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testContent(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(1)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testContent(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(1)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testContent(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(1)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testContent(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testContent(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(1)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest" "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testContent(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testReparse(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testReparse(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testReparse(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testReparse(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testReparse(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.isLink(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testReparse(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.isDirectory(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testReparse(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testReparse(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getUserId(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testReparse(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getGroupId(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testReparse(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile(0)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest" "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testReparse(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(1)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(1)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(1)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(1)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(1)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.clone(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getUserId(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getGroupId(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(0)"
call "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.isDirectory(0)"
contain "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest" "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest" "org.apache.commons.compress.utils.IOUtils"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.DeflateCompressorInputStreamTest(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.availableShouldReturnNonZero(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.availableShouldReturnNonZero(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.availableShouldReturnNonZero(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.available(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.availableShouldReturnNonZero(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.availableShouldReturnNonZero(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.shouldBeAbleToSkipAByte(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.shouldBeAbleToSkipAByte(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.shouldBeAbleToSkipAByte(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.skip(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.shouldBeAbleToSkipAByte(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.shouldBeAbleToSkipAByte(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.singleByteReadWorksAsExpected(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.singleByteReadWorksAsExpected(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.singleByteReadWorksAsExpected(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.singleByteReadWorksAsExpected(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.singleByteReadWorksAsExpected(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.singleByteReadReturnsMinusOneAtEof(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.singleByteReadReturnsMinusOneAtEof(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.singleByteReadReturnsMinusOneAtEof(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.singleByteReadReturnsMinusOneAtEof(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.singleByteReadReturnsMinusOneAtEof(0)" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.singleByteReadReturnsMinusOneAtEof(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterSample" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator"
reference "org.apache.commons.compress.archivers.zip.ScatterSample" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream"
reference "org.apache.commons.compress.archivers.zip.ScatterSample" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ScatterSample" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest"
call "org.apache.commons.compress.archivers.zip.ScatterSample.ScatterSample(0)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterSample.ScatterSample(0)" "org.apache.commons.compress.archivers.zip.ScatterSample.scatterZipCreator"
call "org.apache.commons.compress.archivers.zip.ScatterSample.ScatterSample(0)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(1)"
reference "org.apache.commons.compress.archivers.zip.ScatterSample.ScatterSample(0)" "org.apache.commons.compress.archivers.zip.ScatterSample.dirs"
contain "org.apache.commons.compress.archivers.zip.ScatterSample" "org.apache.commons.compress.archivers.zip.ScatterSample.ScatterSample(0)"
call "org.apache.commons.compress.archivers.zip.ScatterSample.addEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.zip.ScatterSample.addEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isUnixSymlink(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterSample.addEntry(2)" "org.apache.commons.compress.archivers.zip.ScatterSample.dirs"
call "org.apache.commons.compress.archivers.zip.ScatterSample.addEntry(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(2)"
call "org.apache.commons.compress.archivers.zip.ScatterSample.addEntry(2)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.ScatterSample.addEntry(2)" "org.apache.commons.compress.archivers.zip.ScatterSample.scatterZipCreator"
call "org.apache.commons.compress.archivers.zip.ScatterSample.addEntry(2)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(2)"
contain "org.apache.commons.compress.archivers.zip.ScatterSample" "org.apache.commons.compress.archivers.zip.ScatterSample.addEntry(2)"
reference "org.apache.commons.compress.archivers.zip.ScatterSample.writeTo(1)" "org.apache.commons.compress.archivers.zip.ScatterSample.dirs"
call "org.apache.commons.compress.archivers.zip.ScatterSample.writeTo(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)"
call "org.apache.commons.compress.archivers.zip.ScatterSample.writeTo(1)" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close(0)"
reference "org.apache.commons.compress.archivers.zip.ScatterSample.writeTo(1)" "org.apache.commons.compress.archivers.zip.ScatterSample.scatterZipCreator"
call "org.apache.commons.compress.archivers.zip.ScatterSample.writeTo(1)" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(1)"
contain "org.apache.commons.compress.archivers.zip.ScatterSample" "org.apache.commons.compress.archivers.zip.ScatterSample.writeTo(1)"
reference "org.apache.commons.compress.archivers.zip.ScatterSample.scatterZipCreator" "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator"
contain "org.apache.commons.compress.archivers.zip.ScatterSample" "org.apache.commons.compress.archivers.zip.ScatterSample.scatterZipCreator"
reference "org.apache.commons.compress.archivers.zip.ScatterSample.dirs" "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream"
contain "org.apache.commons.compress.archivers.zip.ScatterSample" "org.apache.commons.compress.archivers.zip.ScatterSample.dirs"
reference "org.apache.commons.compress.archivers.TestArchiveStreamProvider" "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException"
reference "org.apache.commons.compress.archivers.TestArchiveStreamProvider" "org.apache.commons.compress.archivers.ArchiveStreamProvider"
reference "org.apache.commons.compress.archivers.TestArchiveStreamProvider" "org.apache.commons.compress.archivers.ArchiveException"
contain "org.apache.commons.compress.archivers.TestArchiveStreamProvider" "org.apache.commons.compress.archivers.TestArchiveStreamProvider.TestArchiveStreamProvider(0)"
call "org.apache.commons.compress.archivers.TestArchiveStreamProvider.createArchiveInputStream(3)" "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException.ArchiveInvocationConfirmationException(1)"
contain "org.apache.commons.compress.archivers.TestArchiveStreamProvider" "org.apache.commons.compress.archivers.TestArchiveStreamProvider.createArchiveInputStream(3)"
call "org.apache.commons.compress.archivers.TestArchiveStreamProvider.createArchiveOutputStream(3)" "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException.ArchiveInvocationConfirmationException(1)"
contain "org.apache.commons.compress.archivers.TestArchiveStreamProvider" "org.apache.commons.compress.archivers.TestArchiveStreamProvider.createArchiveOutputStream(3)"
contain "org.apache.commons.compress.archivers.TestArchiveStreamProvider" "org.apache.commons.compress.archivers.TestArchiveStreamProvider.getInputStreamArchiveNames(0)"
contain "org.apache.commons.compress.archivers.TestArchiveStreamProvider" "org.apache.commons.compress.archivers.TestArchiveStreamProvider.getOutputStreamArchiveNames(0)"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream" "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream" "org.apache.commons.compress.archivers.ArchiveInputStream"
call "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.MemoryArchiveInputStream(1)" "org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream(0)"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.MemoryArchiveInputStream(1)" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.filenames"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.MemoryArchiveInputStream(1)" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.content"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.MemoryArchiveInputStream(1)" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.p"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.MemoryArchiveInputStream(1)"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.p"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.filenames"
call "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.getNextEntry(0)" "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.MemoryArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.readString(0)" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.content"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.readString(0)" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.p"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.readString(0)"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.read(0)"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.filenames"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.content"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.p"
reference "org.apache.commons.compress.compressors.xz.XZUtilsTestCase" "org.apache.commons.compress.compressors.xz.XZUtils"
reference "org.apache.commons.compress.compressors.xz.XZUtilsTestCase" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability"
contain "org.apache.commons.compress.compressors.xz.XZUtilsTestCase" "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.XZUtilsTestCase(0)"
call "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testIsCompressedFilename(0)" "org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.xz.XZUtilsTestCase" "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testIsCompressedFilename(0)"
call "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testGetUncompressedFilename(0)" "org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(1)"
contain "org.apache.commons.compress.compressors.xz.XZUtilsTestCase" "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testGetUncompressedFilename(0)"
call "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testGetCompressedFilename(0)" "org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(1)"
contain "org.apache.commons.compress.compressors.xz.XZUtilsTestCase" "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testGetCompressedFilename(0)"
call "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testMatches(0)" "org.apache.commons.compress.compressors.xz.XZUtils.matches(2)"
contain "org.apache.commons.compress.compressors.xz.XZUtilsTestCase" "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testMatches(0)"
reference "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testCachingIsEnabledByDefaultAndXZIsPresent(0)" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_AVAILABLE"
call "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testCachingIsEnabledByDefaultAndXZIsPresent(0)" "org.apache.commons.compress.compressors.xz.XZUtils.getCachedXZAvailability(0)"
call "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testCachingIsEnabledByDefaultAndXZIsPresent(0)" "org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable(0)"
contain "org.apache.commons.compress.compressors.xz.XZUtilsTestCase" "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testCachingIsEnabledByDefaultAndXZIsPresent(0)"
call "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testCanTurnOffCaching(0)" "org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(1)"
reference "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testCanTurnOffCaching(0)" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.DONT_CACHE"
call "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testCanTurnOffCaching(0)" "org.apache.commons.compress.compressors.xz.XZUtils.getCachedXZAvailability(0)"
call "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testCanTurnOffCaching(0)" "org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable(0)"
contain "org.apache.commons.compress.compressors.xz.XZUtilsTestCase" "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testCanTurnOffCaching(0)"
call "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testTurningOnCachingReEvaluatesAvailability(0)" "org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(1)"
reference "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testTurningOnCachingReEvaluatesAvailability(0)" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.DONT_CACHE"
call "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testTurningOnCachingReEvaluatesAvailability(0)" "org.apache.commons.compress.compressors.xz.XZUtils.getCachedXZAvailability(0)"
reference "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testTurningOnCachingReEvaluatesAvailability(0)" "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_AVAILABLE"
contain "org.apache.commons.compress.compressors.xz.XZUtilsTestCase" "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testTurningOnCachingReEvaluatesAvailability(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2" "org.apache.commons.compress.archivers.zip.Zip64RequiredException"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$000(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2.test(2)" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getMessage(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2.test(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.val$mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$000(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.test(2)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.test(2)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.test(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.val$mode" "org.apache.commons.compress.archivers.zip.Zip64Mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.val$mode"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase" "org.apache.commons.compress.archivers.ArchiveEntry"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase" "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase.MemoryArchiveTestCase(0)"
call "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase.testReading(0)" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.MemoryArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase.testReading(0)" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase.testReading(0)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase.testReading(0)" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.readString(0)"
call "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase.testReading(0)" "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase" "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase.testReading(0)"
reference "org.apache.commons.compress.archivers.zip.Lister.1" "org.apache.commons.compress.archivers.zip.Lister"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8" "org.apache.commons.compress.archivers.zip.Zip64RequiredException"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.val$knownSize"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.val$knownSize"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.test(2)" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getMessage(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.test(2)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.val$knownSize"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.val$knownSize"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.val$knownSize"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$300(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.val$mode" "org.apache.commons.compress.archivers.zip.Zip64Mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.val$mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.val$knownSize"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.AsiExtraField"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipExtraField"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "byte[]"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipExtraField[]"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.ZipArchiveEntryTest(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.UnrecognizedExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.UNRECOGNIZED_HEADER"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtra(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.UnrecognizedExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.UNRECOGNIZED_HEADER"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryLength(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)" "org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.UnrecognizedExtraField(0)"
reference "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)" "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.UNRECOGNIZED_HEADER"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)" "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtra(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testUnixMode(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testUnixMode(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testUnixMode(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testUnixMode(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testUnixMode(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testNotEquals(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testNotEquals(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testNotEquals(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testNullCommentEqualsEmptyComment(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testNullCommentEqualsEmptyComment(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setComment(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testNullCommentEqualsEmptyComment(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testNullCommentEqualsEmptyComment(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCopyConstructor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCopyConstructor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCopyConstructor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCopyConstructor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCopyConstructor(0)" "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(1)"
call "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCopyConstructor(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCopyConstructor(0)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9" "byte[]"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.val$knownSize"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.val$knownSize"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$300(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.val$mode" "org.apache.commons.compress.archivers.zip.Zip64Mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.val$mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.val$knownSize"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.val$mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$200(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$300(1)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.test(2)" "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.test(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.val$mode" "org.apache.commons.compress.archivers.zip.Zip64Mode"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.val$mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3.this$0"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3.{...}"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$000(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$100(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3.test(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3.this$0" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3.this$0"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.{...}" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.this$0"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.{...}"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$200(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.test(2)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.test(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.test(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.test(2)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.test(2)"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.this$0" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.this$0"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5" "org.apache.commons.compress.archivers.zip.Zip64RequiredException"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5" "org.apache.commons.compress.archivers.zip.Zip64Mode"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5.{...}"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5.test(2)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5.test(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5.test(2)" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$200(1)"
call "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5.test(2)" "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getMessage(0)"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5.test(2)"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.CompressorStreamFactory"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.CompressorException"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.CompressorInputStream"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase" "char[]"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.AbstractTestCase"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.DetectCompressorTestCase(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.DetectCompressorTestCase(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factory"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.DetectCompressorTestCase(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factoryTrue"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.DetectCompressorTestCase(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.TestData(4)"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.DetectCompressorTestCase(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factorySetTrue"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.DetectCompressorTestCase(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factoryFalse"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.DetectCompressorTestCase(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factorySetFalse"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.DetectCompressorTestCase(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.tests"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.DetectCompressorTestCase(0)"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.testDetection(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.getStreamFor(1)"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.testDetection(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factory"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.testDetection(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.testDetection(0)"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.testOverride(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.testOverride(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressConcatenated(0)"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.testOverride(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(1)"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.testOverride(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(1)"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.testOverride(0)"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.testMutiples(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.tests"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.testMutiples(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.factory"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.testMutiples(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.concat"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.testMutiples(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressConcatenated(0)"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.testMutiples(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.fileName"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.testMutiples(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.getStreamFor(2)"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.testMutiples(0)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.entryNames"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.testMutiples(0)" "org.apache.commons.compress.compressors.CompressorInputStream.read(0)"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.testMutiples(0)" "org.apache.commons.compress.compressors.CompressorInputStream.available(0)"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.testMutiples(0)"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.getStreamFor(1)" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factory"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.getStreamFor(1)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.getStreamFor(1)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.getStreamFor(1)"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.getStreamFor(2)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.getStreamFor(2)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.getStreamFor(2)"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.static {...}" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(1)"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.static {...}" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factoryTrue"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.static {...}" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factoryFalse"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.static {...}" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.static {...}" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factorySetTrue"
call "org.apache.commons.compress.compressors.DetectCompressorTestCase.static {...}" "org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(1)"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.static {...}" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factorySetFalse"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.static {...}"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.factory" "org.apache.commons.compress.compressors.CompressorStreamFactory"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factory"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.factoryTrue" "org.apache.commons.compress.compressors.CompressorStreamFactory"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factoryTrue"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.factoryFalse" "org.apache.commons.compress.compressors.CompressorStreamFactory"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factoryFalse"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.factorySetTrue" "org.apache.commons.compress.compressors.CompressorStreamFactory"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factorySetTrue"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.factorySetFalse" "org.apache.commons.compress.compressors.CompressorStreamFactory"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.factorySetFalse"
reference "org.apache.commons.compress.compressors.DetectCompressorTestCase.tests" "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData[]"
contain "org.apache.commons.compress.compressors.DetectCompressorTestCase" "org.apache.commons.compress.compressors.DetectCompressorTestCase.tests"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.ZipLong"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.ZipShort"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "byte[]"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.AbstractTestCase"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.X5455_ExtendedTimestampTest(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.before(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.X5455_ExtendedTimestamp(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.before(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.xf"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.before(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.removeTempFiles(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.tmpDir"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.removeTempFiles(0)" "org.apache.commons.compress.AbstractTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.removeTempFiles(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.X5455"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.adjustFromGMTToExpectedOffset(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessJavaTime(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.DATE_FORMAT"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.xf"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.clone(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testMisc(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(1)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testMisc(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.xf"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.MAX_TIME_SECONDS"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyTime(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessTime(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessJavaTime(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateTime(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateJavaTime(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getFlags(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit0_modifyTimePresent(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit1_accessTimePresent(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit2_createTimePresent(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryLength(0)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGetHeaderId(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.X5455"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGetHeaderId(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.xf"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGetHeaderId(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getHeaderId(0)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGetHeaderId(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testParseReparse(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(3)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testParseReparse(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.ZERO_TIME"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testParseReparse(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.MAX_TIME_SECONDS"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testParseReparse(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testParseReparse(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.AbstractTestCase.mkdir(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.tmpDir"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.xf"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.X5455"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit0_modifyTimePresent(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testBitsAreSetWithTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.xf"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testBitsAreSetWithTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testBitsAreSetWithTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit0_modifyTimePresent(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testBitsAreSetWithTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getFlags(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testBitsAreSetWithTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testBitsAreSetWithTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit1_accessTimePresent(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testBitsAreSetWithTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testBitsAreSetWithTime(0)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit2_createTimePresent(0)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testBitsAreSetWithTime(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(3)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(3)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.xf"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(3)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getFlags(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.isFlagSet(2)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit0_modifyTimePresent(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyTime(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit1_accessTimePresent(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessTime(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit2_createTimePresent(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateTime(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryData(0)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(3)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.isFlagSet(2)"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.adjustFromGMTToExpectedOffset(1)"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.static {...}" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.static {...}" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.X5455"
call "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.static {...}" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.static {...}" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.ZERO_TIME"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.static {...}" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.MAX_TIME_SECONDS"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.static {...}" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.DATE_FORMAT"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.static {...}"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.X5455" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.X5455"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.ZERO_TIME" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.ZERO_TIME"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.MAX_TIME_SECONDS" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.MAX_TIME_SECONDS"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.DATE_FORMAT"
reference "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.xf" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.xf"
contain "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest" "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.tmpDir"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSort"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.BlockSortTest(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$100(1)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$000(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture(0)" "org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(2)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.origPtr"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureMainSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureMainSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$100(1)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureMainSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$000(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureMainSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureMainSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureMainSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(1)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureMainSort(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureFallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureFallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$100(1)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureFallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$000(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureFallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureFallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(2)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureFallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(1)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureFallbackSort(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture2(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$100(1)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$000(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2(0)" "org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(2)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixture2Sorted(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.origPtr"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2MainSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture2(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2MainSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$100(1)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2MainSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$000(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2MainSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2MainSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2MainSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixture2Sorted(1)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2MainSort(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2FallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture2(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2FallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$100(1)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2FallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$000(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2FallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2FallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(2)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2FallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixture2Sorted(1)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2FallbackSort(0)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testFallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testFallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testFallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testFallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(3)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testFallbackSort(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE_SORTED"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testFallbackSort(0)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(1)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(0)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(1)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(1)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE_BWT"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(1)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(3)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture2(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture2(0)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(1)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture2(0)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixture2Sorted(1)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixture2Sorted(1)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2_BWT"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixture2Sorted(1)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(3)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixture2Sorted(1)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(1)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(1)" "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)"
call "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(1)" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.DS(2)"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(1)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(3)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(3)" "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.fmap"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(3)"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.static {...}" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.static {...}" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE_BWT"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.static {...}" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE_SORTED"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.static {...}" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.static {...}" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2_BWT"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.static {...}"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE_BWT" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE_BWT"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE_SORTED" "int[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE_SORTED"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2"
reference "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2_BWT" "byte[]"
contain "org.apache.commons.compress.compressors.bzip2.BlockSortTest" "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2_BWT"
reference "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest" "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
contain "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest" "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest.test(2)"
reference "org.apache.commons.compress.compressors.deflate.DeflateParametersTest" "org.apache.commons.compress.compressors.deflate.DeflateParameters"
contain "org.apache.commons.compress.compressors.deflate.DeflateParametersTest" "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.DeflateParametersTest(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.shouldBeAbleToSetCompressionLevel(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.shouldBeAbleToSetCompressionLevel(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(1)"
call "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.shouldBeAbleToSetCompressionLevel(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.getCompressionLevel(0)"
contain "org.apache.commons.compress.compressors.deflate.DeflateParametersTest" "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.shouldBeAbleToSetCompressionLevel(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.shouldNotBeAbleToSetCompressionLevelToANegativeValue(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.shouldNotBeAbleToSetCompressionLevelToANegativeValue(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(1)"
contain "org.apache.commons.compress.compressors.deflate.DeflateParametersTest" "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.shouldNotBeAbleToSetCompressionLevelToANegativeValue(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.shouldNotBeAbleToSetCompressionLevelToADoubleDigitValue(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters(0)"
call "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.shouldNotBeAbleToSetCompressionLevelToADoubleDigitValue(0)" "org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(1)"
contain "org.apache.commons.compress.compressors.deflate.DeflateParametersTest" "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.shouldNotBeAbleToSetCompressionLevelToADoubleDigitValue(0)"
reference "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile"
reference "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.sevenz.SevenZFile"
reference "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
reference "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry"
reference "org.apache.commons.compress.archivers.SevenZTestCase" "byte[]"
call "org.apache.commons.compress.archivers.SevenZTestCase.SevenZTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.SevenZTestCase.SevenZTestCase(0)"
reference "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingCopy(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingCopy(0)" "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)"
contain "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingCopy(0)"
reference "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingLZMA(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingLZMA(0)" "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)"
contain "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingLZMA(0)"
reference "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingLZMA2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingLZMA2(0)" "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)"
contain "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingLZMA2(0)"
reference "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingBZIP2(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingBZIP2(0)" "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)"
contain "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingBZIP2(0)"
reference "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingDeflate(0)" "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingDeflate(0)" "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)"
contain "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingDeflate(0)"
reference "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.SevenZTestCase.dir"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.SevenZTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(1)"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(2)"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.SevenZTestCase.copy(2)"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.SevenZTestCase.$assertionsDisabled"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)" "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
contain "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)"
call "org.apache.commons.compress.archivers.SevenZTestCase.copy(2)" "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(3)"
contain "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.SevenZTestCase.copy(2)"
reference "org.apache.commons.compress.archivers.SevenZTestCase.static {...}" "org.apache.commons.compress.archivers.SevenZTestCase.$assertionsDisabled"
contain "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.SevenZTestCase.static {...}"
contain "org.apache.commons.compress.archivers.SevenZTestCase" "org.apache.commons.compress.archivers.SevenZTestCase.$assertionsDisabled"
reference "org.apache.commons.compress.archivers.zip.BitStreamTest" "org.apache.commons.compress.archivers.zip.BitStream"
contain "org.apache.commons.compress.archivers.zip.BitStreamTest" "org.apache.commons.compress.archivers.zip.BitStreamTest.BitStreamTest(0)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testEmptyStream(0)" "org.apache.commons.compress.archivers.zip.BitStream.BitStream(1)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testEmptyStream(0)" "org.apache.commons.compress.archivers.zip.BitStream.nextBit(0)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testEmptyStream(0)" "org.apache.commons.compress.archivers.zip.BitStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.BitStreamTest" "org.apache.commons.compress.archivers.zip.BitStreamTest.testEmptyStream(0)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testStream(0)" "org.apache.commons.compress.archivers.zip.BitStream.BitStream(1)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testStream(0)" "org.apache.commons.compress.archivers.zip.BitStream.nextBit(0)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testStream(0)" "org.apache.commons.compress.archivers.zip.BitStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.BitStreamTest" "org.apache.commons.compress.archivers.zip.BitStreamTest.testStream(0)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testNextByteFromEmptyStream(0)" "org.apache.commons.compress.archivers.zip.BitStream.BitStream(1)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testNextByteFromEmptyStream(0)" "org.apache.commons.compress.archivers.zip.BitStream.nextByte(0)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testNextByteFromEmptyStream(0)" "org.apache.commons.compress.archivers.zip.BitStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.BitStreamTest" "org.apache.commons.compress.archivers.zip.BitStreamTest.testNextByteFromEmptyStream(0)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testReadAlignedBytes(0)" "org.apache.commons.compress.archivers.zip.BitStream.BitStream(1)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testReadAlignedBytes(0)" "org.apache.commons.compress.archivers.zip.BitStream.nextByte(0)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testReadAlignedBytes(0)" "org.apache.commons.compress.archivers.zip.BitStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.BitStreamTest" "org.apache.commons.compress.archivers.zip.BitStreamTest.testReadAlignedBytes(0)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testNextByte(0)" "org.apache.commons.compress.archivers.zip.BitStream.BitStream(1)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testNextByte(0)" "org.apache.commons.compress.archivers.zip.BitStream.nextBit(0)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testNextByte(0)" "org.apache.commons.compress.archivers.zip.BitStream.nextByte(0)"
call "org.apache.commons.compress.archivers.zip.BitStreamTest.testNextByte(0)" "org.apache.commons.compress.archivers.zip.BitStream.close(0)"
contain "org.apache.commons.compress.archivers.zip.BitStreamTest" "org.apache.commons.compress.archivers.zip.BitStreamTest.testNextByte(0)"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.MemoryArchiveEntry(1)" "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.name"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry" "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.MemoryArchiveEntry(1)"
reference "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.getName(0)" "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.name"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry" "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.getName(0)"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry" "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.getSize(0)"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry" "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.isDirectory(0)"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry" "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.getLastModifiedDate(0)"
contain "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry" "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.name"
reference "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarConstants"
reference "org.apache.commons.compress.archivers.tar.TarUtilsTest" "byte[]"
reference "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtils"
reference "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.TarUtilsTest(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testName(0)" "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(4)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testName(0)" "org.apache.commons.compress.archivers.tar.TarUtils.parseName(3)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testName(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testParseOctal(0)" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(3)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testParseOctal(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testParseOctalInvalid(0)" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(3)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testParseOctalInvalid(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctal(2)" "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(4)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctal(2)" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(3)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctal(2)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctal(1)" "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctal(2)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctal(1)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctal(0)" "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctal(1)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctal(0)" "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctal(2)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctal(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctalOrBinary(2)" "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(4)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctalOrBinary(2)" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(3)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctalOrBinary(2)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctalOrBinary8(0)" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctalOrBinary(1)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctalOrBinary8(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctalOrBinary12(0)" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctalOrBinary(1)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctalOrBinary12(0)" "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctalOrBinary(2)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctalOrBinary12(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctalOrBinary(1)" "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctalOrBinary(2)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctalOrBinary(1)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testTrailers(0)" "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(4)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testTrailers(0)" "org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(4)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testTrailers(0)" "org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(4)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testTrailers(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testNegative(0)" "org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(4)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testNegative(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testOverflow(0)" "org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(4)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testOverflow(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripNames(0)" "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkName(1)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripNames(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundEncoding(0)" "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundEncoding(0)" "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(5)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundEncoding(0)" "org.apache.commons.compress.archivers.tar.TarUtils.parseName(4)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundEncoding(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkName(1)" "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(4)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkName(1)" "org.apache.commons.compress.archivers.tar.TarUtils.parseName(3)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkName(1)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testReadNegativeBinary8Byte(0)" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(3)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testReadNegativeBinary8Byte(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testReadNegativeBinary12Byte(0)" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(3)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testReadNegativeBinary12Byte(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testWriteNegativeBinary8Byte(0)" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(3)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testWriteNegativeBinary8Byte(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testVerifyHeaderCheckSum(0)" "org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(1)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testVerifyHeaderCheckSum(0)"
call "org.apache.commons.compress.archivers.tar.TarUtilsTest.testParseOctalCompress330(0)" "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(3)"
contain "org.apache.commons.compress.archivers.tar.TarUtilsTest" "org.apache.commons.compress.archivers.tar.TarUtilsTest.testParseOctalCompress330(0)"
reference "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.StreamWrapper"
reference "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
reference "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)" "org.apache.commons.compress.AbstractTestCase.factory"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
call "org.apache.commons.compress.AbstractTestCase.setUp(0)" "org.apache.commons.compress.AbstractTestCase.mkdir(1)"
reference "org.apache.commons.compress.AbstractTestCase.setUp(0)" "org.apache.commons.compress.AbstractTestCase.dir"
reference "org.apache.commons.compress.AbstractTestCase.setUp(0)" "org.apache.commons.compress.AbstractTestCase.resultDir"
reference "org.apache.commons.compress.AbstractTestCase.setUp(0)" "org.apache.commons.compress.AbstractTestCase.archive"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.setUp(0)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.mkdir(1)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
reference "org.apache.commons.compress.AbstractTestCase.tearDown(0)" "org.apache.commons.compress.AbstractTestCase.dir"
call "org.apache.commons.compress.AbstractTestCase.tearDown(0)" "org.apache.commons.compress.AbstractTestCase.rmdir(1)"
reference "org.apache.commons.compress.AbstractTestCase.tearDown(0)" "org.apache.commons.compress.AbstractTestCase.resultDir"
reference "org.apache.commons.compress.AbstractTestCase.tearDown(0)" "org.apache.commons.compress.AbstractTestCase.archive"
call "org.apache.commons.compress.AbstractTestCase.tearDown(0)" "org.apache.commons.compress.AbstractTestCase.tryHardToDelete(1)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.tearDown(0)"
call "org.apache.commons.compress.AbstractTestCase.rmdir(1)" "org.apache.commons.compress.AbstractTestCase.rmdir(1)"
call "org.apache.commons.compress.AbstractTestCase.rmdir(1)" "org.apache.commons.compress.AbstractTestCase.tryHardToDelete(1)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.rmdir(1)"
reference "org.apache.commons.compress.AbstractTestCase.tryHardToDelete(1)" "org.apache.commons.compress.AbstractTestCase.ON_WINDOWS"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.tryHardToDelete(1)"
reference "org.apache.commons.compress.AbstractTestCase.createArchive(1)" "org.apache.commons.compress.AbstractTestCase.archive"
reference "org.apache.commons.compress.AbstractTestCase.createArchive(1)" "org.apache.commons.compress.AbstractTestCase.archiveList"
reference "org.apache.commons.compress.AbstractTestCase.createArchive(1)" "org.apache.commons.compress.AbstractTestCase.factory"
call "org.apache.commons.compress.AbstractTestCase.createArchive(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.AbstractTestCase.createArchive(1)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.AbstractTestCase.createArchive(1)" "org.apache.commons.compress.AbstractTestCase.addArchiveEntry(3)"
call "org.apache.commons.compress.AbstractTestCase.createArchive(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.finish(0)"
call "org.apache.commons.compress.AbstractTestCase.createArchive(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.createArchive(1)"
call "org.apache.commons.compress.AbstractTestCase.addArchiveEntry(3)" "org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(2)"
call "org.apache.commons.compress.AbstractTestCase.addArchiveEntry(3)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.AbstractTestCase.addArchiveEntry(3)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.AbstractTestCase.addArchiveEntry(3)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
reference "org.apache.commons.compress.AbstractTestCase.addArchiveEntry(3)" "org.apache.commons.compress.AbstractTestCase.archiveList"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.addArchiveEntry(3)"
reference "org.apache.commons.compress.AbstractTestCase.createEmptyArchive(1)" "org.apache.commons.compress.AbstractTestCase.archiveList"
reference "org.apache.commons.compress.AbstractTestCase.createEmptyArchive(1)" "org.apache.commons.compress.AbstractTestCase.archive"
reference "org.apache.commons.compress.AbstractTestCase.createEmptyArchive(1)" "org.apache.commons.compress.AbstractTestCase.factory"
call "org.apache.commons.compress.AbstractTestCase.createEmptyArchive(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.AbstractTestCase.createEmptyArchive(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.finish(0)"
call "org.apache.commons.compress.AbstractTestCase.createEmptyArchive(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.createEmptyArchive(1)"
reference "org.apache.commons.compress.AbstractTestCase.createSingleEntryArchive(1)" "org.apache.commons.compress.AbstractTestCase.archiveList"
reference "org.apache.commons.compress.AbstractTestCase.createSingleEntryArchive(1)" "org.apache.commons.compress.AbstractTestCase.archive"
reference "org.apache.commons.compress.AbstractTestCase.createSingleEntryArchive(1)" "org.apache.commons.compress.AbstractTestCase.factory"
call "org.apache.commons.compress.AbstractTestCase.createSingleEntryArchive(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.AbstractTestCase.createSingleEntryArchive(1)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.AbstractTestCase.createSingleEntryArchive(1)" "org.apache.commons.compress.AbstractTestCase.addArchiveEntry(3)"
call "org.apache.commons.compress.AbstractTestCase.createSingleEntryArchive(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.finish(0)"
call "org.apache.commons.compress.AbstractTestCase.createSingleEntryArchive(1)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.createSingleEntryArchive(1)"
reference "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(2)" "org.apache.commons.compress.AbstractTestCase.factory"
call "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(2)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
call "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(2)" "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(2)"
call "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(2)" "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(3)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(2)"
call "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(3)" "org.apache.commons.compress.AbstractTestCase.mkdir(1)"
call "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(3)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(3)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(3)" "org.apache.commons.compress.archivers.ArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(3)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(3)" "org.apache.commons.compress.archivers.ArchiveEntry.getSize(0)"
call "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(3)" "org.apache.commons.compress.AbstractTestCase.getExpectedString(1)"
call "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(3)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
call "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(3)" "org.apache.commons.compress.AbstractTestCase.rmdir(1)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(3)"
call "org.apache.commons.compress.AbstractTestCase.getExpectedString(1)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.getExpectedString(1)"
call "org.apache.commons.compress.AbstractTestCase.createTempDirAndFile(0)" "org.apache.commons.compress.AbstractTestCase.createTempDir(0)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.AbstractTestCase.createTempDir(0)" "org.apache.commons.compress.AbstractTestCase.mkdir(1)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.createTempDir(0)"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.closeQuietly(1)"
reference "org.apache.commons.compress.AbstractTestCase.static {...}" "org.apache.commons.compress.AbstractTestCase.ON_WINDOWS"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.static {...}"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.dir"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.resultDir"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.archive"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.archiveList"
reference "org.apache.commons.compress.AbstractTestCase.factory" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.factory"
contain "org.apache.commons.compress.AbstractTestCase" "org.apache.commons.compress.AbstractTestCase.ON_WINDOWS"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarConstants"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.utils.CharsetNames"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "byte[]"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.ArchiveEntry"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.TarArchiveOutputStreamTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.TarArchiveOutputStreamTest(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testCount(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testCount(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testCount(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.getFile(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testCount(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testCount(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testCount(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.write(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testCount(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testCount(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testCount(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.getBytesWritten(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testCount(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testMaxFileSizeError(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testMaxFileSizeError(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testMaxFileSizeError(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testMaxFileSizeError(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testMaxFileSizeError(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberStarMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberPosixMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteSimplePaxHeaders(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.writePaxHeader(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteSimplePaxHeaders(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPaxHeadersWithLength99(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.writePaxHeader(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPaxHeadersWithLength99(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPaxHeadersWithLength101(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.writePaxHeader(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPaxHeadersWithLength101(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.writePaxHeader(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.writePaxHeader(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.writePaxHeader(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(3)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.writePaxHeader(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.writePaxHeader(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.writePaxHeader(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.writePaxHeader(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.writePaxHeader(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.writePaxHeader(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.closeQuietly(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryError(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryError(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryError(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryError(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryError(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryError(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryError(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileNameGnu(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileNameGnu(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileNamePosix(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileNamePosix(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameErrorMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameErrorMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameErrorMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameErrorMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameErrorMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameErrorMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameErrorMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameTruncateMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameGnuMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameGnuMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNamePosixMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiDirectoryNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiDirectoryNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiDirectoryNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiDirectoryNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiDirectoryNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiDirectoryNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiDirectoryNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiDirectoryNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiDirectoryNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiDirectoryNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiDirectoryNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiDirectoryNamePosixMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiNameWithUnfortunateNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiNameWithUnfortunateNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiNameWithUnfortunateNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiNameWithUnfortunateNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiNameWithUnfortunateNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiNameWithUnfortunateNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiNameWithUnfortunateNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiNameWithUnfortunateNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiNameWithUnfortunateNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiNameWithUnfortunateNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiNameWithUnfortunateNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiNameWithUnfortunateNamePosixMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameErrorMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameErrorMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameErrorMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameErrorMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameErrorMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameErrorMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameErrorMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameErrorMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameTruncateMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameTruncateMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameGnuMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameGnuMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNamePosixMode(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNamePosixMode(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPadsOutputToFullBlockLength(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPadsOutputToFullBlockLength(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.getFile(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPadsOutputToFullBlockLength(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPadsOutputToFullBlockLength(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPadsOutputToFullBlockLength(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPadsOutputToFullBlockLength(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPadsOutputToFullBlockLength(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPadsOutputToFullBlockLength(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testLongNameMd5Hash(0)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.createTarArchiveContainingOneDirectory(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testLongNameMd5Hash(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testLongNameMd5Hash(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testLongNameMd5Hash(0)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testLongNameMd5Hash(0)" "org.apache.commons.compress.archivers.ArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testLongNameMd5Hash(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testLongNameMd5Hash(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.createTarArchiveContainingOneDirectory(2)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.createTarArchiveContainingOneDirectory(2)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.createTarArchiveContainingOneDirectory(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.createTarArchiveContainingOneDirectory(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.createTarArchiveContainingOneDirectory(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.createTarArchiveContainingOneDirectory(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.createTarArchiveContainingOneDirectory(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.createTarArchiveContainingOneDirectory(2)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.createTarArchiveContainingOneDirectory(2)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.createTarArchiveContainingOneDirectory(2)" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest" "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.createTarArchiveContainingOneDirectory(2)"
reference "org.apache.commons.compress.compressors.xz.XZCompressorInputStreamTest" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream"
contain "org.apache.commons.compress.compressors.xz.XZCompressorInputStreamTest" "org.apache.commons.compress.compressors.xz.XZCompressorInputStreamTest.XZCompressorInputStreamTest(0)"
call "org.apache.commons.compress.compressors.xz.XZCompressorInputStreamTest.redundantTestOfAlmostDeprecatedMatchesMethod(0)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(2)"
contain "org.apache.commons.compress.compressors.xz.XZCompressorInputStreamTest" "org.apache.commons.compress.compressors.xz.XZCompressorInputStreamTest.redundantTestOfAlmostDeprecatedMatchesMethod(0)"
reference "org.apache.commons.compress.archivers.ZipTestCase.1" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate"
reference "org.apache.commons.compress.archivers.ZipTestCase.1" "org.apache.commons.compress.archivers.ZipTestCase"
reference "org.apache.commons.compress.archivers.ZipTestCase.1.{...}" "org.apache.commons.compress.archivers.ZipTestCase.1.this$0"
contain "org.apache.commons.compress.archivers.ZipTestCase.1" "org.apache.commons.compress.archivers.ZipTestCase.1.{...}"
contain "org.apache.commons.compress.archivers.ZipTestCase.1" "org.apache.commons.compress.archivers.ZipTestCase.1.test(1)"
reference "org.apache.commons.compress.archivers.ZipTestCase.1.this$0" "org.apache.commons.compress.archivers.ZipTestCase"
contain "org.apache.commons.compress.archivers.ZipTestCase.1" "org.apache.commons.compress.archivers.ZipTestCase.1.this$0"
reference "org.apache.commons.compress.utils.IOUtilsTest.2.1.{...}" "org.apache.commons.compress.utils.IOUtilsTest.2.1.this$1"
contain "org.apache.commons.compress.utils.IOUtilsTest.2.1" "org.apache.commons.compress.utils.IOUtilsTest.2.1.{...}"
contain "org.apache.commons.compress.utils.IOUtilsTest.2.1" "org.apache.commons.compress.utils.IOUtilsTest.2.1.skip(1)"
reference "org.apache.commons.compress.utils.IOUtilsTest.2.1.this$1" "org.apache.commons.compress.utils.IOUtilsTest.2"
contain "org.apache.commons.compress.utils.IOUtilsTest.2.1" "org.apache.commons.compress.utils.IOUtilsTest.2.1.this$1"
reference "org.apache.commons.compress.ArchiveReadTest.1" "org.apache.commons.compress.ArchiveReadTest"
contain "org.apache.commons.compress.ArchiveReadTest.1" "org.apache.commons.compress.ArchiveReadTest.1.{...}"
contain "org.apache.commons.compress.ArchiveReadTest.1" "org.apache.commons.compress.ArchiveReadTest.1.accept(2)"
reference "org.apache.commons.compress.compressors.LZMATestCase" "org.apache.commons.compress.compressors.CompressorStreamFactory"
reference "org.apache.commons.compress.compressors.LZMATestCase" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream"
reference "org.apache.commons.compress.compressors.LZMATestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.LZMATestCase" "org.apache.commons.compress.compressors.CompressorOutputStream"
reference "org.apache.commons.compress.compressors.LZMATestCase" "byte[]"
reference "org.apache.commons.compress.compressors.LZMATestCase" "org.apache.commons.compress.compressors.CompressorInputStream"
reference "org.apache.commons.compress.compressors.LZMATestCase" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.compressors.LZMATestCase.LZMATestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.compressors.LZMATestCase" "org.apache.commons.compress.compressors.LZMATestCase.LZMATestCase(0)"
call "org.apache.commons.compress.compressors.LZMATestCase.lzmaRoundtrip(0)" "org.apache.commons.compress.compressors.LZMATestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.LZMATestCase.lzmaRoundtrip(0)" "org.apache.commons.compress.compressors.LZMATestCase.dir"
call "org.apache.commons.compress.compressors.LZMATestCase.lzmaRoundtrip(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.LZMATestCase.lzmaRoundtrip(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.LZMATestCase.lzmaRoundtrip(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.LZMATestCase.lzmaRoundtrip(0)" "org.apache.commons.compress.compressors.CompressorOutputStream.close(0)"
call "org.apache.commons.compress.compressors.LZMATestCase.lzmaRoundtrip(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
call "org.apache.commons.compress.compressors.LZMATestCase.lzmaRoundtrip(0)" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.LZMACompressorInputStream(1)"
call "org.apache.commons.compress.compressors.LZMATestCase.lzmaRoundtrip(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.LZMATestCase" "org.apache.commons.compress.compressors.LZMATestCase.lzmaRoundtrip(0)"
call "org.apache.commons.compress.compressors.LZMATestCase.testLZMAUnarchive(0)" "org.apache.commons.compress.compressors.LZMATestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.LZMATestCase.testLZMAUnarchive(0)" "org.apache.commons.compress.compressors.LZMATestCase.dir"
call "org.apache.commons.compress.compressors.LZMATestCase.testLZMAUnarchive(0)" "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.LZMACompressorInputStream(1)"
call "org.apache.commons.compress.compressors.LZMATestCase.testLZMAUnarchive(0)" "org.apache.commons.compress.compressors.LZMATestCase.copy(2)"
contain "org.apache.commons.compress.compressors.LZMATestCase" "org.apache.commons.compress.compressors.LZMATestCase.testLZMAUnarchive(0)"
call "org.apache.commons.compress.compressors.LZMATestCase.testLZMAUnarchiveWithAutodetection(0)" "org.apache.commons.compress.compressors.LZMATestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.LZMATestCase.testLZMAUnarchiveWithAutodetection(0)" "org.apache.commons.compress.compressors.LZMATestCase.dir"
call "org.apache.commons.compress.compressors.LZMATestCase.testLZMAUnarchiveWithAutodetection(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.LZMATestCase.testLZMAUnarchiveWithAutodetection(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.LZMATestCase.testLZMAUnarchiveWithAutodetection(0)" "org.apache.commons.compress.compressors.LZMATestCase.copy(2)"
contain "org.apache.commons.compress.compressors.LZMATestCase" "org.apache.commons.compress.compressors.LZMATestCase.testLZMAUnarchiveWithAutodetection(0)"
call "org.apache.commons.compress.compressors.LZMATestCase.copy(2)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
contain "org.apache.commons.compress.compressors.LZMATestCase" "org.apache.commons.compress.compressors.LZMATestCase.copy(2)"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.1" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.1" "org.apache.commons.compress.AbstractTestCase.StreamWrapper"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.1" "org.apache.commons.compress.compressors.FramedSnappyTestCase"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.1" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.1.{...}" "org.apache.commons.compress.compressors.FramedSnappyTestCase.1.this$0"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase.1" "org.apache.commons.compress.compressors.FramedSnappyTestCase.1.{...}"
call "org.apache.commons.compress.compressors.FramedSnappyTestCase.1.wrap(1)" "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(1)"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase.1" "org.apache.commons.compress.compressors.FramedSnappyTestCase.1.wrap(1)"
reference "org.apache.commons.compress.compressors.FramedSnappyTestCase.1.this$0" "org.apache.commons.compress.compressors.FramedSnappyTestCase"
contain "org.apache.commons.compress.compressors.FramedSnappyTestCase.1" "org.apache.commons.compress.compressors.FramedSnappyTestCase.1.this$0"
reference "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder"
reference "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest" "org.powermock.api.mockito.PowerMockito"
reference "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest" "org.powermock.api.mockito.expectation.ConstructorExpectationSetup"
reference "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest" "org.mockito.stubbing.OngoingStubbing"
reference "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest" "org.mockito.Mockito"
reference "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest" "org.apache.commons.compress.archivers.sevenz.Coders"
call "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.SevenZNativeHeapTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest" "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.SevenZNativeHeapTest(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndDeflaterOnCloseStream(0)" "org.powermock.api.mockito.PowerMockito.spy(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndDeflaterOnCloseStream(0)" "org.powermock.api.mockito.PowerMockito.whenNew(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndDeflaterOnCloseStream(0)" "org.powermock.api.mockito.expectation.ConstructorExpectationSetup.withAnyArguments(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndDeflaterOnCloseStream(0)" "org.mockito.stubbing.OngoingStubbing.thenReturn(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndDeflaterOnCloseStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.deflateDecoder"
call "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndDeflaterOnCloseStream(0)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.encode(2)"
call "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndDeflaterOnCloseStream(0)" "org.mockito.Mockito.verify(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest" "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndDeflaterOnCloseStream(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndInflaterOnCloseStream(0)" "org.powermock.api.mockito.PowerMockito.spy(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndInflaterOnCloseStream(0)" "org.powermock.api.mockito.PowerMockito.whenNew(1)"
call "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndInflaterOnCloseStream(0)" "org.powermock.api.mockito.expectation.ConstructorExpectationSetup.withAnyArguments(0)"
call "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndInflaterOnCloseStream(0)" "org.mockito.stubbing.OngoingStubbing.thenReturn(1)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndInflaterOnCloseStream(0)" "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.deflateDecoder"
call "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndInflaterOnCloseStream(0)" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.decode(5)"
call "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndInflaterOnCloseStream(0)" "org.mockito.Mockito.verify(1)"
contain "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest" "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndInflaterOnCloseStream(0)"
reference "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.deflateDecoder" "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder"
contain "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest" "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.deflateDecoder"
reference "org.apache.commons.compress.compressors.XZTestCase" "org.apache.commons.compress.compressors.CompressorStreamFactory"
reference "org.apache.commons.compress.compressors.XZTestCase" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream"
reference "org.apache.commons.compress.compressors.XZTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.XZTestCase" "org.apache.commons.compress.compressors.CompressorOutputStream"
reference "org.apache.commons.compress.compressors.XZTestCase" "org.apache.commons.compress.compressors.CompressorInputStream"
reference "org.apache.commons.compress.compressors.XZTestCase" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.compressors.XZTestCase.XZTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.compressors.XZTestCase" "org.apache.commons.compress.compressors.XZTestCase.XZTestCase(0)"
call "org.apache.commons.compress.compressors.XZTestCase.testXZCreation(0)" "org.apache.commons.compress.compressors.XZTestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.XZTestCase.testXZCreation(0)" "org.apache.commons.compress.compressors.XZTestCase.dir"
call "org.apache.commons.compress.compressors.XZTestCase.testXZCreation(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.XZTestCase.testXZCreation(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.XZTestCase.testXZCreation(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.XZTestCase.testXZCreation(0)" "org.apache.commons.compress.compressors.CompressorOutputStream.close(0)"
contain "org.apache.commons.compress.compressors.XZTestCase" "org.apache.commons.compress.compressors.XZTestCase.testXZCreation(0)"
call "org.apache.commons.compress.compressors.XZTestCase.testXZUnarchive(0)" "org.apache.commons.compress.compressors.XZTestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.XZTestCase.testXZUnarchive(0)" "org.apache.commons.compress.compressors.XZTestCase.dir"
call "org.apache.commons.compress.compressors.XZTestCase.testXZUnarchive(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.XZTestCase.testXZUnarchive(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.XZTestCase.testXZUnarchive(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.XZTestCase.testXZUnarchive(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.XZTestCase" "org.apache.commons.compress.compressors.XZTestCase.testXZUnarchive(0)"
call "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.XZTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.CompressorInputStream.read(0)"
call "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.XZTestCase" "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFirstOnly(0)"
call "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.XZTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.CompressorInputStream.read(0)"
call "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.CompressorInputStream.available(0)"
call "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.XZTestCase" "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFully(0)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveException"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.StreamingNotSupportedException"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.jar.JarArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.AbstractTestCase"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.ArchiveStreamFactoryTest(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.shortTextFilesAreNoTARs(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.shortTextFilesAreNoTARs(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.shortTextFilesAreNoTARs(0)" "org.apache.commons.compress.archivers.ArchiveException.getMessage(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.shortTextFilesAreNoTARs(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.aiffFilesAreNoTARs(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.aiffFilesAreNoTARs(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.aiffFilesAreNoTARs(0)" "org.apache.commons.compress.archivers.ArchiveException.getMessage(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.aiffFilesAreNoTARs(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testCOMPRESS209(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testCOMPRESS209(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testCOMPRESS209(0)" "org.apache.commons.compress.archivers.ArchiveException.getMessage(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testCOMPRESS209(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.cantRead7zFromStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.cantRead7zFromStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.cantRead7zFromStream(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.cantWrite7zToStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.cantWrite7zToStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.cantWrite7zToStream(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.detectsAndThrowsFor7z(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.detectsAndThrowsFor7z(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.detectsAndThrowsFor7z(0)" "org.apache.commons.compress.archivers.StreamingNotSupportedException.getFormat(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.detectsAndThrowsFor7z(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.skipsPK00Prefix(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.skipsPK00Prefix(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.skipsPK00Prefix(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.skipsPK00Prefix(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingCtor(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingCtor(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.getEntryEncoding(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingCtor(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(1)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingCtor(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingDeprecated(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingDeprecated(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.getEntryEncoding(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingDeprecated(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingDeprecated(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(1)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingDeprecated(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getFactory(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getFactory(1)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(1)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getFactory(1)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStreamAutodetect(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TESTS"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStreamAutodetect(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.testFile"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStreamAutodetect(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fac"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStreamAutodetect(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getInputStreamFor(2)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStreamAutodetect(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fieldName"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStreamAutodetect(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getField(2)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStreamAutodetect(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.expectedEncoding"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStreamAutodetect(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.eq(2)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStreamAutodetect(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.type"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStreamAutodetect(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStreamAutodetect(0)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TESTS"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.type"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.testFile"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fac"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getInputStreamFor(3)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fieldName"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getField(2)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.expectedEncoding"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.eq(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStream(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStream(0)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TESTS"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.hasOutputStream"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.type"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fac"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getOutputStreamFor(2)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fieldName"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getField(2)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.expectedEncoding"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.eq(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingOutputStream(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingOutputStream(0)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.eq(2)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getField(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getInputStreamFor(2)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getInputStreamFor(2)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getInputStreamFor(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getInputStreamFor(3)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getInputStreamFor(3)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getInputStreamFor(3)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getOutputStreamFor(2)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getOutputStreamFor(2)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(1)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_UTF8"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_ASCII"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getFactory(1)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_SET_UTF8"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_SET_ASCII"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getField(2)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.ZIP_DEFAULT"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(1)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.CPIO_DEFAULT"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TAR_DEFAULT"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(1)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.JAR_DEFAULT"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(1)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.ARJ_DEFAULT"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(1)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.DUMP_DEFAULT"
call "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.TestData(6)"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TESTS"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.UNKNOWN"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_UTF8" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_UTF8"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_ASCII" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_ASCII"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_SET_UTF8" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_SET_UTF8"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_SET_ASCII" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_SET_ASCII"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.ARJ_DEFAULT"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.DUMP_DEFAULT"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.ZIP_DEFAULT"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.CPIO_DEFAULT"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TAR_DEFAULT"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.JAR_DEFAULT"
reference "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TESTS" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData[]"
contain "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest" "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TESTS"
reference "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.CompressorStreamFactory"
reference "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream"
reference "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.gzip.GzipParameters"
reference "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream"
reference "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.CompressorOutputStream"
reference "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.CompressorInputStream"
reference "org.apache.commons.compress.compressors.GZipTestCase" "byte[]"
reference "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.compressors.GZipTestCase.GZipTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.GZipTestCase(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testGzipCreation(0)" "org.apache.commons.compress.compressors.GZipTestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.GZipTestCase.testGzipCreation(0)" "org.apache.commons.compress.compressors.GZipTestCase.dir"
call "org.apache.commons.compress.compressors.GZipTestCase.testGzipCreation(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testGzipCreation(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testGzipCreation(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testGzipCreation(0)" "org.apache.commons.compress.compressors.CompressorOutputStream.close(0)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testGzipCreation(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testGzipUnarchive(0)" "org.apache.commons.compress.compressors.GZipTestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.GZipTestCase.testGzipUnarchive(0)" "org.apache.commons.compress.compressors.GZipTestCase.dir"
call "org.apache.commons.compress.compressors.GZipTestCase.testGzipUnarchive(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testGzipUnarchive(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testGzipUnarchive(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testGzipUnarchive(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testGzipUnarchive(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.GZipTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.CompressorInputStream.read(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFirstOnly(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFirstOnly(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.GZipTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.CompressorInputStream.read(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.CompressorInputStream.available(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFully(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFully(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testCorruptedInput(0)" "org.apache.commons.compress.compressors.GZipTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testCorruptedInput(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testCorruptedInput(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testCorruptedInput(0)" "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testCorruptedInput(0)" "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testCorruptedInput(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)" "org.apache.commons.compress.compressors.GZipTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.flush(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(1)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)" "org.apache.commons.compress.compressors.GZipTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.flush(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close(0)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInvalidCompressionLevel(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testInvalidCompressionLevel(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(1)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testInvalidCompressionLevel(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlags(2)" "org.apache.commons.compress.compressors.GZipTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlags(2)" "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlags(2)" "org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlags(2)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlags(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlags(2)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlags(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.flush(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlags(2)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close(0)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlags(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlagsFastestCompression(0)" "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlags(2)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlagsFastestCompression(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlagsBestCompression(0)" "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlags(2)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlagsBestCompression(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlagsDefaultCompression(0)" "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlags(2)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlagsDefaultCompression(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testOverWrite(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testOverWrite(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testOverWrite(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(1)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testOverWrite(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.GZipTestCase.getFile(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(1)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.close(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.getMetaData(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.getCompressionLevel(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.getModificationTime(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.getOperatingSystem(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.getFilename(0)"
call "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)" "org.apache.commons.compress.compressors.gzip.GzipParameters.getComment(0)"
contain "org.apache.commons.compress.compressors.GZipTestCase" "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)"
reference "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException" "org.apache.commons.compress.archivers.ArchiveException"
reference "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException" "org.apache.commons.compress.archivers.TestArchiveStreamProvider"
call "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException.ArchiveInvocationConfirmationException(1)" "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(1)"
contain "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException" "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException.ArchiveInvocationConfirmationException(1)"
contain "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException" "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException.serialVersionUID"
reference "org.apache.commons.compress.archivers.zip.ZipLongTest" "org.apache.commons.compress.archivers.zip.ZipLong"
contain "org.apache.commons.compress.archivers.zip.ZipLongTest" "org.apache.commons.compress.archivers.zip.ZipLongTest.ZipLongTest(0)"
call "org.apache.commons.compress.archivers.zip.ZipLongTest.testToBytes(0)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
call "org.apache.commons.compress.archivers.zip.ZipLongTest.testToBytes(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)"
contain "org.apache.commons.compress.archivers.zip.ZipLongTest" "org.apache.commons.compress.archivers.zip.ZipLongTest.testToBytes(0)"
call "org.apache.commons.compress.archivers.zip.ZipLongTest.testPut(0)" "org.apache.commons.compress.archivers.zip.ZipLong.putLong(3)"
contain "org.apache.commons.compress.archivers.zip.ZipLongTest" "org.apache.commons.compress.archivers.zip.ZipLongTest.testPut(0)"
call "org.apache.commons.compress.archivers.zip.ZipLongTest.testFromBytes(0)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
call "org.apache.commons.compress.archivers.zip.ZipLongTest.testFromBytes(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.ZipLongTest" "org.apache.commons.compress.archivers.zip.ZipLongTest.testFromBytes(0)"
call "org.apache.commons.compress.archivers.zip.ZipLongTest.testEquals(0)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
call "org.apache.commons.compress.archivers.zip.ZipLongTest.testEquals(0)" "org.apache.commons.compress.archivers.zip.ZipLong.equals(1)"
contain "org.apache.commons.compress.archivers.zip.ZipLongTest" "org.apache.commons.compress.archivers.zip.ZipLongTest.testEquals(0)"
call "org.apache.commons.compress.archivers.zip.ZipLongTest.testSign(0)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
call "org.apache.commons.compress.archivers.zip.ZipLongTest.testSign(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.ZipLongTest" "org.apache.commons.compress.archivers.zip.ZipLongTest.testSign(0)"
call "org.apache.commons.compress.archivers.zip.ZipLongTest.testClone(0)" "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
call "org.apache.commons.compress.archivers.zip.ZipLongTest.testClone(0)" "org.apache.commons.compress.archivers.zip.ZipLong.clone(0)"
call "org.apache.commons.compress.archivers.zip.ZipLongTest.testClone(0)" "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.ZipLongTest" "org.apache.commons.compress.archivers.zip.ZipLongTest.testClone(0)"
reference "org.apache.commons.compress.archivers.zip.ZipShortTest" "org.apache.commons.compress.archivers.zip.ZipShort"
contain "org.apache.commons.compress.archivers.zip.ZipShortTest" "org.apache.commons.compress.archivers.zip.ZipShortTest.ZipShortTest(0)"
call "org.apache.commons.compress.archivers.zip.ZipShortTest.testToBytes(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.ZipShortTest.testToBytes(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(0)"
contain "org.apache.commons.compress.archivers.zip.ZipShortTest" "org.apache.commons.compress.archivers.zip.ZipShortTest.testToBytes(0)"
call "org.apache.commons.compress.archivers.zip.ZipShortTest.testPut(0)" "org.apache.commons.compress.archivers.zip.ZipShort.putShort(3)"
contain "org.apache.commons.compress.archivers.zip.ZipShortTest" "org.apache.commons.compress.archivers.zip.ZipShortTest.testPut(0)"
call "org.apache.commons.compress.archivers.zip.ZipShortTest.testFromBytes(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.ZipShortTest.testFromBytes(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.ZipShortTest" "org.apache.commons.compress.archivers.zip.ZipShortTest.testFromBytes(0)"
call "org.apache.commons.compress.archivers.zip.ZipShortTest.testEquals(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.ZipShortTest.testEquals(0)" "org.apache.commons.compress.archivers.zip.ZipShort.equals(1)"
contain "org.apache.commons.compress.archivers.zip.ZipShortTest" "org.apache.commons.compress.archivers.zip.ZipShortTest.testEquals(0)"
call "org.apache.commons.compress.archivers.zip.ZipShortTest.testSign(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.ZipShortTest.testSign(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.ZipShortTest" "org.apache.commons.compress.archivers.zip.ZipShortTest.testSign(0)"
call "org.apache.commons.compress.archivers.zip.ZipShortTest.testClone(0)" "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
call "org.apache.commons.compress.archivers.zip.ZipShortTest.testClone(0)" "org.apache.commons.compress.archivers.zip.ZipShort.clone(0)"
call "org.apache.commons.compress.archivers.zip.ZipShortTest.testClone(0)" "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
contain "org.apache.commons.compress.archivers.zip.ZipShortTest" "org.apache.commons.compress.archivers.zip.ZipShortTest.testClone(0)"
reference "org.apache.commons.compress.utils.CharsetsTest" "org.apache.commons.compress.utils.Charsets"
contain "org.apache.commons.compress.utils.CharsetsTest" "org.apache.commons.compress.utils.CharsetsTest.CharsetsTest(0)"
call "org.apache.commons.compress.utils.CharsetsTest.testToCharset(0)" "org.apache.commons.compress.utils.Charsets.toCharset(1)"
call "org.apache.commons.compress.utils.CharsetsTest.testToCharset(0)" "org.apache.commons.compress.utils.Charsets.toCharset(1)"
contain "org.apache.commons.compress.utils.CharsetsTest" "org.apache.commons.compress.utils.CharsetsTest.testToCharset(0)"
reference "org.apache.commons.compress.utils.CharsetsTest.testIso8859_1(0)" "org.apache.commons.compress.utils.Charsets.ISO_8859_1"
contain "org.apache.commons.compress.utils.CharsetsTest" "org.apache.commons.compress.utils.CharsetsTest.testIso8859_1(0)"
reference "org.apache.commons.compress.utils.CharsetsTest.testUsAscii(0)" "org.apache.commons.compress.utils.Charsets.US_ASCII"
contain "org.apache.commons.compress.utils.CharsetsTest" "org.apache.commons.compress.utils.CharsetsTest.testUsAscii(0)"
reference "org.apache.commons.compress.utils.CharsetsTest.testUtf16(0)" "org.apache.commons.compress.utils.Charsets.UTF_16"
contain "org.apache.commons.compress.utils.CharsetsTest" "org.apache.commons.compress.utils.CharsetsTest.testUtf16(0)"
reference "org.apache.commons.compress.utils.CharsetsTest.testUtf16Be(0)" "org.apache.commons.compress.utils.Charsets.UTF_16BE"
contain "org.apache.commons.compress.utils.CharsetsTest" "org.apache.commons.compress.utils.CharsetsTest.testUtf16Be(0)"
reference "org.apache.commons.compress.utils.CharsetsTest.testUtf16Le(0)" "org.apache.commons.compress.utils.Charsets.UTF_16LE"
contain "org.apache.commons.compress.utils.CharsetsTest" "org.apache.commons.compress.utils.CharsetsTest.testUtf16Le(0)"
reference "org.apache.commons.compress.utils.CharsetsTest.testUtf8(0)" "org.apache.commons.compress.utils.Charsets.UTF_8"
contain "org.apache.commons.compress.utils.CharsetsTest" "org.apache.commons.compress.utils.CharsetsTest.testUtf8(0)"
reference "org.apache.commons.compress.archivers.tar.BigFilesIT" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream"
reference "org.apache.commons.compress.archivers.tar.BigFilesIT" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
reference "org.apache.commons.compress.archivers.tar.BigFilesIT" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
reference "org.apache.commons.compress.archivers.tar.BigFilesIT" "byte[]"
contain "org.apache.commons.compress.archivers.tar.BigFilesIT" "org.apache.commons.compress.archivers.tar.BigFilesIT.BigFilesIT(0)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByteStar(0)" "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByte(1)"
contain "org.apache.commons.compress.archivers.tar.BigFilesIT" "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByteStar(0)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GBytePosix(0)" "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByte(1)"
contain "org.apache.commons.compress.archivers.tar.BigFilesIT" "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GBytePosix(0)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileHeadersOfArchiveBiggerThan8GByte(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(1)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileHeadersOfArchiveBiggerThan8GByte(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileHeadersOfArchiveBiggerThan8GByte(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileHeadersOfArchiveBiggerThan8GByte(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileHeadersOfArchiveBiggerThan8GByte(0)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.BigFilesIT" "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileHeadersOfArchiveBiggerThan8GByte(0)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByte(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(1)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByte(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByte(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByte(1)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByte(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(3)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByte(1)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
call "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByte(1)" "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.BigFilesIT" "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByte(1)"
reference "org.apache.commons.compress.compressors.TestCompressorStreamProvider" "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException"
reference "org.apache.commons.compress.compressors.TestCompressorStreamProvider" "org.apache.commons.compress.compressors.CompressorStreamProvider"
reference "org.apache.commons.compress.compressors.TestCompressorStreamProvider" "org.apache.commons.compress.compressors.CompressorException"
reference "org.apache.commons.compress.compressors.TestCompressorStreamProvider" "org.apache.commons.compress.utils.Sets"
contain "org.apache.commons.compress.compressors.TestCompressorStreamProvider" "org.apache.commons.compress.compressors.TestCompressorStreamProvider.TestCompressorStreamProvider(0)"
call "org.apache.commons.compress.compressors.TestCompressorStreamProvider.createCompressorInputStream(3)" "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException.InvocationConfirmationException(1)"
contain "org.apache.commons.compress.compressors.TestCompressorStreamProvider" "org.apache.commons.compress.compressors.TestCompressorStreamProvider.createCompressorInputStream(3)"
call "org.apache.commons.compress.compressors.TestCompressorStreamProvider.createCompressorOutputStream(2)" "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException.InvocationConfirmationException(1)"
contain "org.apache.commons.compress.compressors.TestCompressorStreamProvider" "org.apache.commons.compress.compressors.TestCompressorStreamProvider.createCompressorOutputStream(2)"
call "org.apache.commons.compress.compressors.TestCompressorStreamProvider.getInputStreamCompressorNames(0)" "org.apache.commons.compress.utils.Sets.newHashSet(1)"
contain "org.apache.commons.compress.compressors.TestCompressorStreamProvider" "org.apache.commons.compress.compressors.TestCompressorStreamProvider.getInputStreamCompressorNames(0)"
call "org.apache.commons.compress.compressors.TestCompressorStreamProvider.getOutputStreamCompressorNames(0)" "org.apache.commons.compress.utils.Sets.newHashSet(1)"
contain "org.apache.commons.compress.compressors.TestCompressorStreamProvider" "org.apache.commons.compress.compressors.TestCompressorStreamProvider.getOutputStreamCompressorNames(0)"
reference "org.apache.commons.compress.archivers.JarTestCase" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.archivers.JarTestCase" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.JarTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.JarTestCase" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.JarTestCase" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.JarTestCase" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.archivers.JarTestCase" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.archivers.JarTestCase.JarTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.JarTestCase" "org.apache.commons.compress.archivers.JarTestCase.JarTestCase(0)"
reference "org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(0)" "org.apache.commons.compress.archivers.JarTestCase.dir"
call "org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(0)" "org.apache.commons.compress.archivers.JarTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.JarTestCase" "org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(0)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(0)" "org.apache.commons.compress.archivers.JarTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(0)" "org.apache.commons.compress.archivers.JarTestCase.dir"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.JarTestCase" "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(0)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(0)" "org.apache.commons.compress.archivers.JarTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(0)" "org.apache.commons.compress.archivers.JarTestCase.dir"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(0)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(0)" "org.apache.commons.compress.archivers.ArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.JarTestCase" "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(0)"
reference "org.apache.commons.compress.archivers.tar.SparseFilesTest" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
reference "org.apache.commons.compress.archivers.tar.SparseFilesTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.tar.SparseFilesTest" "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
contain "org.apache.commons.compress.archivers.tar.SparseFilesTest" "org.apache.commons.compress.archivers.tar.SparseFilesTest.SparseFilesTest(0)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.testOldGNU(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.testOldGNU(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.testOldGNU(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.testOldGNU(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.testOldGNU(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isOldGNUSparse(0)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.testOldGNU(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNUSparse(0)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.testOldGNU(0)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNUSparse(0)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.testOldGNU(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(1)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.testOldGNU(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.SparseFilesTest" "org.apache.commons.compress.archivers.tar.SparseFilesTest.testOldGNU(0)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.testPaxGNU(0)" "org.apache.commons.compress.AbstractTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.testPaxGNU(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.testPaxGNU(0)" "org.apache.commons.compress.archivers.tar.SparseFilesTest.assertPaxGNUEntry(2)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.testPaxGNU(0)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.tar.SparseFilesTest" "org.apache.commons.compress.archivers.tar.SparseFilesTest.testPaxGNU(0)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.assertPaxGNUEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.assertPaxGNUEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.assertPaxGNUEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNUSparse(0)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.assertPaxGNUEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNUSparse(0)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.assertPaxGNUEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isOldGNUSparse(0)"
call "org.apache.commons.compress.archivers.tar.SparseFilesTest.assertPaxGNUEntry(2)" "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(1)"
contain "org.apache.commons.compress.archivers.tar.SparseFilesTest" "org.apache.commons.compress.archivers.tar.SparseFilesTest.assertPaxGNUEntry(2)"
reference "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ArchiveStreamFactory"
reference "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
reference "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel"
reference "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
reference "org.apache.commons.compress.archivers.ZipTestCase" "byte[]"
reference "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
reference "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.zip.ZipFile"
reference "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ArchiveOutputStream"
reference "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ArchiveInputStream"
reference "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.utils.IOUtils"
reference "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.zip.ZipMethod"
reference "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.zip.Zip64Mode"
call "org.apache.commons.compress.archivers.ZipTestCase.ZipTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
reference "org.apache.commons.compress.archivers.ZipTestCase.ZipTestCase(0)" "org.apache.commons.compress.archivers.ZipTestCase.first_payload"
reference "org.apache.commons.compress.archivers.ZipTestCase.ZipTestCase(0)" "org.apache.commons.compress.archivers.ZipTestCase.second_payload"
call "org.apache.commons.compress.archivers.ZipTestCase.ZipTestCase(0)" "org.apache.commons.compress.archivers.ZipTestCase.1.{...}"
reference "org.apache.commons.compress.archivers.ZipTestCase.ZipTestCase(0)" "org.apache.commons.compress.archivers.ZipTestCase.allFilesPredicate"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.ZipTestCase(0)"
reference "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.archivers.ZipTestCase.dir"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.archivers.ZipTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.archivers.ZipTestCase.resultDir"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.archivers.ZipTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(0)" "org.apache.commons.compress.archivers.ZipTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
reference "org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(0)" "org.apache.commons.compress.archivers.ZipTestCase.dir"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(0)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(0)" "org.apache.commons.compress.archivers.ZipTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(0)" "org.apache.commons.compress.archivers.ZipTestCase.checkArchiveContent(2)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.ZipTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
reference "org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipMethod.TOKENIZATION"
call "org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipMethod.getCode(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.ZipTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
reference "org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipMethod.TOKENIZATION"
call "org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipMethod.getCode(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(0)" "org.apache.commons.compress.archivers.ZipTestCase.getFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(0)" "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(0)" "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ZipTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ZipTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)" "org.apache.commons.compress.archivers.ZipTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.createTempDirAndFile(0)"
reference "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.createReferenceFile(3)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.createFirstEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.createSecondEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
reference "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.allFilesPredicate"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawZip64EntryFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawZip64EntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
reference "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawZip64EntryFromFile(0)" "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawZip64EntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawZip64EntryFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.createFirstEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawZip64EntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawZip64EntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
reference "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawZip64EntryFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.allFilesPredicate"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawZip64EntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawZip64EntryFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawZip64EntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawZip64EntryFromFile(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(0)" "org.apache.commons.compress.archivers.ZipTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnixMode(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(0)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.createReferenceFile(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.createReferenceFile(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.createReferenceFile(3)" "org.apache.commons.compress.archivers.ZipTestCase.createFirstEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.createReferenceFile(3)" "org.apache.commons.compress.archivers.ZipTestCase.createSecondEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.createReferenceFile(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.createReferenceFile(3)"
reference "org.apache.commons.compress.archivers.ZipTestCase.createFirstEntry(1)" "org.apache.commons.compress.archivers.ZipTestCase.first_payload"
call "org.apache.commons.compress.archivers.ZipTestCase.createFirstEntry(1)" "org.apache.commons.compress.archivers.ZipTestCase.createArchiveEntry(3)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.createFirstEntry(1)"
reference "org.apache.commons.compress.archivers.ZipTestCase.createSecondEntry(1)" "org.apache.commons.compress.archivers.ZipTestCase.second_payload"
call "org.apache.commons.compress.archivers.ZipTestCase.createSecondEntry(1)" "org.apache.commons.compress.archivers.ZipTestCase.createArchiveEntry(3)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.createSecondEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)" "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)" "org.apache.commons.compress.utils.IOUtils.readFully(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)" "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.createArchiveEntry(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.createArchiveEntry(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.createArchiveEntry(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.createArchiveEntry(3)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.createArchiveEntry(3)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(2)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)" "org.apache.commons.compress.archivers.ZipTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ZipTestCase.createTempDirAndFile(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ZipTestCase.tryHardToDelete(1)"
call "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)" "org.apache.commons.compress.archivers.ZipTestCase.rmdir(1)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.first_payload"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.second_payload"
reference "org.apache.commons.compress.archivers.ZipTestCase.allFilesPredicate" "org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate"
contain "org.apache.commons.compress.archivers.ZipTestCase" "org.apache.commons.compress.archivers.ZipTestCase.allFilesPredicate"
reference "org.apache.commons.compress.compressors.ZTestCase" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.compressors.ZTestCase" "org.apache.commons.compress.AbstractTestCase.StreamWrapper"
reference "org.apache.commons.compress.compressors.ZTestCase" "org.apache.commons.compress.compressors.z.ZCompressorInputStream"
reference "org.apache.commons.compress.compressors.ZTestCase" "org.apache.commons.compress.utils.IOUtils"
call "org.apache.commons.compress.compressors.ZTestCase.ZTestCase(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.compressors.ZTestCase" "org.apache.commons.compress.compressors.ZTestCase.ZTestCase(0)"
call "org.apache.commons.compress.compressors.ZTestCase.testZUnarchive(0)" "org.apache.commons.compress.compressors.ZTestCase.1.{...}"
call "org.apache.commons.compress.compressors.ZTestCase.testZUnarchive(0)" "org.apache.commons.compress.compressors.ZTestCase.testUnarchive(1)"
contain "org.apache.commons.compress.compressors.ZTestCase" "org.apache.commons.compress.compressors.ZTestCase.testZUnarchive(0)"
call "org.apache.commons.compress.compressors.ZTestCase.testZUnarchiveViaFactory(0)" "org.apache.commons.compress.compressors.ZTestCase.2.{...}"
call "org.apache.commons.compress.compressors.ZTestCase.testZUnarchiveViaFactory(0)" "org.apache.commons.compress.compressors.ZTestCase.testUnarchive(1)"
contain "org.apache.commons.compress.compressors.ZTestCase" "org.apache.commons.compress.compressors.ZTestCase.testZUnarchiveViaFactory(0)"
call "org.apache.commons.compress.compressors.ZTestCase.testZUnarchiveViaAutoDetection(0)" "org.apache.commons.compress.compressors.ZTestCase.3.{...}"
call "org.apache.commons.compress.compressors.ZTestCase.testZUnarchiveViaAutoDetection(0)" "org.apache.commons.compress.compressors.ZTestCase.testUnarchive(1)"
contain "org.apache.commons.compress.compressors.ZTestCase" "org.apache.commons.compress.compressors.ZTestCase.testZUnarchiveViaAutoDetection(0)"
call "org.apache.commons.compress.compressors.ZTestCase.testMatches(0)" "org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(2)"
contain "org.apache.commons.compress.compressors.ZTestCase" "org.apache.commons.compress.compressors.ZTestCase.testMatches(0)"
call "org.apache.commons.compress.compressors.ZTestCase.testUnarchive(1)" "org.apache.commons.compress.compressors.ZTestCase.getFile(1)"
reference "org.apache.commons.compress.compressors.ZTestCase.testUnarchive(1)" "org.apache.commons.compress.compressors.ZTestCase.dir"
call "org.apache.commons.compress.compressors.ZTestCase.testUnarchive(1)" "org.apache.commons.compress.AbstractTestCase.StreamWrapper.wrap(1)"
call "org.apache.commons.compress.compressors.ZTestCase.testUnarchive(1)" "org.apache.commons.compress.utils.IOUtils.copy(2)"
contain "org.apache.commons.compress.compressors.ZTestCase" "org.apache.commons.compress.compressors.ZTestCase.testUnarchive(1)"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest" "org.apache.commons.compress.AbstractTestCase"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest" "org.apache.commons.compress.archivers.ArchiveEntry"
reference "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest" "org.apache.commons.compress.utils.ArchiveUtils"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.ArArchiveInputStreamTest(0)" "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest" "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.ArArchiveInputStreamTest(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.testReadLongNamesGNU(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.checkLongNameEntry(1)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest" "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.testReadLongNamesGNU(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.testReadLongNamesBSD(0)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.checkLongNameEntry(1)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest" "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.testReadLongNamesBSD(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.checkLongNameEntry(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.getFile(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.checkLongNameEntry(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.checkLongNameEntry(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextEntry(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.checkLongNameEntry(1)" "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.checkLongNameEntry(1)" "org.apache.commons.compress.archivers.ArchiveEntry.getSize(0)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.checkLongNameEntry(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.checkLongNameEntry(1)" "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(1)"
call "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.checkLongNameEntry(1)" "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close(0)"
contain "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest" "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.checkLongNameEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.LongSymLinkTest.data(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.LZMA2Decoder(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.closeChannel(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDevice(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getSummary(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToFileModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.testTarUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.compressors.FramedSnappyTestCase.testDefaultExtractionViaFactoryAutodetection(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(0)"
CGNodeType Method "org.tukaani.xz.DeltaOptions.getOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveEntry.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(1)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.SparseFilesTest.assertPaxGNUEntry(2)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.3.{...}"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(0)"
CGNodeType Method "org.apache.commons.compress.ArchiveReadTest.checkArchiveContent(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingTest.testNioCp1252Encoding(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setVolume(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getNlink(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryUnnownSizeToFileModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testBIFromBytes(0)"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMode(0)"
CGNodeType Method "org.apache.commons.compress.compressors.BZip2TestCase.BZip2TestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctalOrBinary(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDeleted(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getClearCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(3)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.TapeInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJSparcRoundtrip(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveEntry.equals(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressionsInMemory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSimpleName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isHostOsUnix(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiPathNamePaxHeader(0)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(3)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testMatches(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessTime(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(3)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongGroupId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BinaryTreeTest.testDecode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$900(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShortTest.testClone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCreationDate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isOldGNUSparse(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.2.{...}"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.flush(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$402(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderHoles(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.equals(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.NID.NID(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.isStrongCryptoAvailable(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.pushedBackBytes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getPrefixesLength(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1.{...}"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.testReading17BitsInLittleEndian(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.compressors.ZTestCase.ZTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.SeekableByteChannelCompressor(2)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders(0)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStream.BitInputStream(2)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.checkArchiveContent(2)"
CGNodeType Method "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.getSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForBzip2(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.X0016_CertificateIdForCentralDirectory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.StreamingNotSupportedException.getFormat(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.equals(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndOffset(0)"
CGNodeType Method "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.FileBasedScatterGatherBackingStore(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenInputStreamIsNull(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(3)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.Zip64ExtendedInformationExtraFieldTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.clone(0)"
CGNodeType Method "org.apache.commons.compress.utils.CountingInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.1.{...}"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.mark(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.deflate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(1)"
CGNodeType Method "org.tukaani.xz.XZInputStream.XZInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByWinZIP(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarLister.TarLister(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.parseName(4)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.CurrentEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.get(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnzipBZip2CompressedEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testEncryption(0)"
CGNodeType Method "org.apache.commons.compress.utils.Lists.Lists(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveEntry.getLastModifiedDate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFile(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(4)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.setEncoding(1)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.testReadTar(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.CurrentEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testParseOctal(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.LongSymLinkTest.1.accept(2)"
CGNodeType Method "org.apache.commons.compress.utils.CountingInputStream.CountingInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.utils.FlushShieldFilterOutputStream.FlushShieldFilterOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipMethod.values(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSet.delete(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setLastModifiedDate(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testMisc(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.survivesPaxHeaderWithNameEndingInSlash(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isPipe(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Strategy.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.readSelfGenerated100KFilesUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesToStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveToStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.UnrecognizedExtraField(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(1)"
CGNodeType Method "org.apache.commons.compress.archivers.LongPathTest.checkArchiveContent(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameErrorMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.getHashAlgorithm(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.access$000(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.readIWAFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.skipsPK00Prefix(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Folder.Folder(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToFileModeAlways(0)"
CGNodeType Method "org.tukaani.xz.LZMAInputStream.LZMAInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(1)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.tryHardToDelete(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasLastModifiedDate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zDeflateUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryToStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getHostname(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertUnicodeName(3)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDirectory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipMethod.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.createEmptyArchive(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.parseName(3)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.workaroundForBrokenTimeHeader(0)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionOnReadingClosedChannel(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarLister.log(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$002(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMajor(1)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.testReading31BitsInBigEndian(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.testTruncatedData(0)"
CGNodeType Method "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFirstOnly(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.TapeInputStream.TapeInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.find(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandLiteral(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(1)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(1)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.GZipTestCase(0)"
CGNodeType Method "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateCreation(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorServiceLoaderTest.testOutputStream(0)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.compareWrites(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.tearDown(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(1)"
CGNodeType Method "org.tukaani.xz.LZMAInputStream.LZMAInputStream(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testClone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testParseReparse(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(4)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$100(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes.FileTypes(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.testEOF(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeEOFRecord(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(1)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongUserId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsFromCoder(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(3)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.1.run(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyDir(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtilTest.setUp(0)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.getExpectedString(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.setUp(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFieldsNoCopy(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(2)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable(0)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.3.1.{...}"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(1)"
CGNodeType Method "org.apache.commons.compress.archivers.TestArchiveStreamProvider.getInputStreamArchiveNames(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(0)"
CGNodeType Method "org.tukaani.xz.SingleXZInputStream.SingleXZInputStream(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.Rand.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.testReadLongNamesBSD(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testCP437FileRoundtripImplicitUnicodeExtra(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamProvider.getOutputStreamCompressorNames(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.getCachedXZAvailability(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLabel(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getPrefix(1)"
CGNodeType Method "org.apache.commons.compress.DetectArchiverTestCase.testCOMPRESS117(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(1)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(0)"
CGNodeType Method "org.apache.commons.compress.DetectArchiverTestCase.getStreamFor(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionRequired(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testCP437FileRoundtripExplicitUnicodeExtra(0)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.mkdir(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyJavaTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeAndRead5GBOfZerosUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.static {...}"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperlyAfterPositionSet(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByJava7Jar(0)"
CGNodeType Method "org.apache.commons.compress.compressors.ZTestCase.testZUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.1.{...}"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.IOMethodsTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipMethod[].clone(0)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.addArchiveEntry(3)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$500(1)"
CGNodeType Method "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.close(0)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest.DeflateCompressorOutputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(1)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.getFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFirstRecord(0)"
CGNodeType Method "org.apache.commons.compress.DetectArchiverTestCase.testEmptyZipArchive(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.PythonTruncatedBzip2Test(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.getHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(2)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.testInputStreamMethods(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.addRepeatOfPreviousCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntriesAsCallable(1)"
CGNodeType Method "org.apache.commons.compress.utils.BoundedInputStream.BoundedInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFile(0)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.testGoodSignature(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipParameters.getFilename(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor.writeOut(3)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveException.initCause(1)"
CGNodeType Method "org.apache.commons.compress.compressors.FramedSnappyTestCase.FramedSnappyTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.doCallSequence(1)"
CGNodeType Method "org.apache.commons.compress.archivers.DumpTestCase.testArchiveDetection(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnixMode(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.DS(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.partialClear(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation(0)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.testReadZip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeOffsetAndDisk(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterStatistics.ScatterStatistics(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(3)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getGroupId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setNameCRC32(1)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.2.run(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAddSame(0)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.readFullyOnChannelThrowsEof(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isExtendedAttributes(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.fill(3)"
CGNodeType Method "org.apache.commons.compress.archivers.JarTestCase.JarTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.getBlockSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.{...}"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.skip(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBytesRead(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.findCompressorStreamProviders(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.bigToLong(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.Dirent.getParentIno(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressConcatenated(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.LongSymLinkTest.getExpectedString(1)"
CGNodeType Method "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.Lister.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.write(4)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFilesystem(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.get(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.skip(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtilTest.testZipLong(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrc(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$100(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(2)"
CGNodeType Method "org.apache.commons.compress.archivers.CpioTestCase.testExplicitFileEntry(0)"
CGNodeType Method "org.apache.commons.compress.compressors.FramedSnappyTestCase.testUnarchive(1)"
CGNodeType Method "org.apache.commons.compress.utils.CharsetsTest.CharsetsTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.{...}"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.readOrderTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctalOrBinary12(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMethod(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BinaryTree.decode(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testReadNegativeBinary8Byte(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(4)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Archive.toString(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.initTT(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testLongToBytes(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorInputStreamTest.redundantTestOfAlmostDeprecatedMatchesMethod(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.Mode.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2Utils.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.getMetaData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.ArArchiveOutputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.getInputView(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setHostname(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessJavaTime(0)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.mask(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.cantWrite7zToStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldUseSpecifiedEncodingWhenReadingGNULongNames(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.publicNameAddsTrailingSlashForDirectories(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(1)"
CGNodeType Method "org.apache.commons.compress.ArchiveReadTest.data(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArTestCase.testArUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(5)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrc(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setExtra(1)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size(0)"
CGNodeType Method "org.apache.commons.compress.archivers.CpioTestCase.tryHardToDelete(1)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorException.CompressorException(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedBy7ZIP(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressorTest.storedEntries(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.{...}"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipUtils.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(4)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(6)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$300(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.toString(0)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.getCodeSize(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2FallbackSort(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByWinZIPUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testEightFilesSomeNotEmpty(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BitStreamTest.testNextByte(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testDirectoryEntryFromFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressorTest.StreamCompressorTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.BZip2UtilsTestCase.testGetUncompressedFilename(0)"
CGNodeType Method "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFirstOnly(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertRawNameOfAcsiiTxt(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testMisc(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongLinkEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(1)"
CGNodeType Method "org.apache.commons.compress.compressors.LZMATestCase.testLZMAUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesFileModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testCompressedHeaderWithNonDefaultDictionarySize(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.SevenZFileTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.ZTestCase.testMatches(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.MainHeader.MainHeader(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.StreamBridge.close(0)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.testWriteZip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.removeTempFiles(0)"
CGNodeType Method "org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecordSize(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSort(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.checkArchiveContent(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(0)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getUserId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.createTarArchiveContainingOneDirectory(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveFileModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(1)"
CGNodeType Method "org.apache.commons.compress.compressors.TestCompressorStreamProvider.createCompressorInputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeTestData(0)"
CGNodeType Method "org.tukaani.xz.LZMAOutputStream.LZMAOutputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.tryHardToDelete(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testFallbackSort(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenArchiverNameIsNull_2(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BitStream.nextBits(1)"
CGNodeType Method "org.apache.commons.compress.archivers.DumpTestCase.testDumpUnarchiveAll(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryKnownSizeToFileModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getNumberOfShannonFanoTrees(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.2.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.X0017_StrongEncryptionHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.before(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.reset(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.getUserId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrcValue(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveException.initCause(1)"
CGNodeType Method "org.apache.commons.compress.compressors.DeflateTestCase.testDeflateCreation(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.getEntries(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.CircularBuffer.put(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(1)"
CGNodeType Method "org.apache.commons.compress.archivers.SevenZTestCase.copy(2)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.1.wrap(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkSizes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setTableSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.Lister.createArchiveInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0014_X509Certificates.X0014_X509Certificates(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(0)"
CGNodeType Method "org.apache.commons.compress.ArchiveUtilsTest.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.DetectCompressorTestCase.getStreamFor(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripNames(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.toString(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getNumberOfLinks(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.aiffFilesAreNoTARs(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByWinCF(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testSignatureCheck(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.UnparseableExtraField(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.getLengthAndPositionAtCentralDirectory32(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByPKZip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.pushEncodedChar(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.1.put(2)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testMatches(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMADecoder.LZMADecoder(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetResults.getDeleted(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.getTotalBytesWritten(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$000(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.getValue(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.BoundedSeekableByteChannelInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStreamModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArTestCase.ArTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testTwentyNineFilesSomeNotEmpty(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtilTest.testUnsignedIntToSignedByte(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedBy7ZIP(0)"
CGNodeType Method "org.apache.commons.compress.archivers.TestArchiveStreamProvider.createArchiveOutputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFileImpl(2)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFSTest.X000A_NTFSTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedBy7ZIPUsingInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.equals(1)"
CGNodeType Method "org.apache.commons.compress.compressors.DetectCompressorTestCase.getStreamFor(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.InMemoryCachingStreamBridge(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getRecordCount(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.count(1)"
CGNodeType Method "org.mockito.Mockito.verify(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByJava7JarUsingInputStream(0)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.shouldNotAllowReadingOfMoreThan63BitsAtATime(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorOutputStream.flush(0)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.clearEntries(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.UnsupportedCompressionAlgorithmException(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasAccessDate(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.X5455_ExtendedTimestamp(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.numberOptionOrDefault(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileName(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddToOneFileArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkName(1)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.ArchiveUtils(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testBitsAreSetWithTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$202(2)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCachedLZMAAvailability(0)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.rmdir(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethod.getId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.StreamMap.toString(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testNullCommentEqualsEmptyComment(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByWinZIPUsingInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setName(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.BindPair.BindPair(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testRenameAndDelete(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataLength(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setLocalFileDataData(1)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtils.skip(2)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getFile(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.detectsAndThrowsFor7z(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isAtEOF(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile2(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testRandomlySkippingEntries(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncodeChar(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getArchiveComment(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(2)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSet.add(3)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getChksum(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.OutputStreamWrapper(1)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToAr(0)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.StreamWrapper.wrap(1)"
CGNodeType Method "org.apache.commons.compress.utils.CountingInputStream.getBytesRead(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getHoles(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(2)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveInputStream.canReadEntryData(1)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSet.add(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm[].clone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.OutputStreamWrapper(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testNineEmptyFiles(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.UnsupportedCompressionAlgorithmException(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Archive.Archive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(1)"
CGNodeType Method "org.apache.commons.compress.compressors.FramedSnappyTestCase.3.wrap(1)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.testWriteCpio(0)"
CGNodeType Method "org.apache.commons.compress.utils.ServiceLoaderIterator.next(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(1)"
CGNodeType Method "org.tukaani.xz.XZOutputStream.XZOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(2)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect[].clone(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.readNextCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getBzip2(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getZ(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedSize(0)"
CGNodeType Method "org.apache.commons.compress.compressors.FramedSnappyTestCase.testDefaultExtraction(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(2)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(3)"
CGNodeType Method "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(3)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(1)"
CGNodeType Method "org.apache.commons.compress.ArchiveReadTest.getExpectedString(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readCrc(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.available(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.BindPair.toString(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArTestCase.testArArchiveCreation(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarLister.main(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.Mode.takeAction(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrderInMemory(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.available(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.PureJavaCrc32C(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$100(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceAr(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.ZipArchiveInputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readNonAsciiPaxHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setRawFlag(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finalize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNamePosixMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndDeflaterOnCloseStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getModTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateJavaTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getEntriesOfUnarchiveInMemoryTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(1)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testTurningOnCachingReEvaluatesAvailability(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingTest.assertEquals(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDSizeAndDisk(0)"
CGNodeType Method "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException.ArchiveInvocationConfirmationException(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.get(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGeneration(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.access$100(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2.test(2)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testOverWrite(0)"
CGNodeType Method "org.tukaani.xz.LZMA2Options.getLc(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.CpioArchiveInputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFile(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.Lister.Lister(0)"
CGNodeType Method "org.apache.commons.compress.ChainingTestCase.testTarGzip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setNlink(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.read(1)"
CGNodeType Method "org.apache.commons.compress.compressors.XZTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.DetectCompressorTestCase.testDetection(0)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.Dirent.toString(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(1)"
CGNodeType Method "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getMode(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.testCDOrder(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldConsumeArchiveCompletely(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderSize(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.skipBlock(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getTableSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.testWriteOldBinary(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getPermissions(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getSlidingDictionarySize(0)"
CGNodeType Method "org.apache.commons.compress.DetectArchiverTestCase.testEmptyCpioArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByPKZipUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(4)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForDeflate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testTrimLeadingZeroesForceMinLength4(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(0)"
CGNodeType Method "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException.InvocationConfirmationException(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldNotAllowStringOptionsForLZMA2(0)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadContentsProperly(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesStreamModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.testPhysicalOrder(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethod.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.testReading31BitsInLittleEndian(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReparseCDSingleEightByteData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByteStar(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.TapeInputStream.available(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testFilterRoundTrip(1)"
CGNodeType Method "org.apache.commons.compress.ArchiveUtilsTest.testAsciiConversions(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(1)"
CGNodeType Method "org.apache.commons.compress.utils.Charsets.Charsets(0)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.testOutputStreamMethods(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedBy7ZIPUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByJava7JarUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.createFirstEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoder(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingCtor(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression(2)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testGetHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryToStreamModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJPPCRoundtrip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrcValue(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testConsumesArchiveCompletely(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit1_accessTimePresent(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArTestCase.testFileEntryFromFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.{...}"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.access$002(2)"
CGNodeType Method "org.tukaani.xz.LZMA2Options.getDictSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(1)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.readFullyOnChannelReadsFully(0)"
CGNodeType Method "org.apache.commons.compress.parallel.ScatterGatherBackingStore.closeForWriting(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOffsetAndDisk(0)"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.TarTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesDosVersion(0)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(0)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.resetPreviousCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioUtilTest.oldBinMagic2ByteArraySwapped(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testHelloWorldHeaderCompressionOffCopy(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.access$000(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.CRC.getFinalCRC(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtilTest.testReverse(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToFileModeNever(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.StartHeader.StartHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModifiedDate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.SubStreamsInfo(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.findUniCodePath(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.createPayloadSupplier(1)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.shouldBeAbleToSetCompressionLevel(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.isLink(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCentralDirectoryData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingTest.doSimpleEncodingTest(2)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModified(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(2)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.CpioArchiveOutputStreamTest(0)"
CGNodeType Method "org.tukaani.xz.LZMAOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.SevenZOutputFileTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.LZMATestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$300(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(1)"
CGNodeType Method "org.apache.commons.compress.parallel.ScatterGatherBackingStore.getInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(1)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.Coders(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(4)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveException.ArchiveException(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipParameters.getModificationTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpoch(1)"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.tryHardToDelete(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readFully(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.createArchiveEntry(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.getGroupId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.createSecondEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(1)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.testWriteTar(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testLanguageEncodingFlag(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionMadeBy(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.AsiExtraFieldTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.ScatterZipOutputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(1)"
CGNodeType Method "org.tukaani.xz.IA64Options.IA64Options(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getNameCRC32(0)"
CGNodeType Method "org.apache.commons.compress.ArchiveUtilsTest.ArchiveUtilsTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.1.run(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getVolume(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.getOffsetEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreationInMemory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.numberOptionOrDefault(2)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.readOfLength0ShouldReturn0(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.test(2)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctalOrBinary(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethod.values(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getRecordSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.testEndInflaterOnCloseStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.SparseFilesTest.testPaxGNU(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.withTemporaryArchive(3)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.close(0)"
CGNodeType Method "org.tukaani.xz.XZOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endCompression(0)"
CGNodeType Method "org.apache.commons.compress.archivers.DumpTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readsArchiveCompletely_COMPRESS245(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.DumpArchiveUtil(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$400(1)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.ArchiveInputStreamIterator(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.assertPosixMagic(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(3)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.access$000(1)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.ChangeSetTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.utils.CountingOutputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.StreamMap.StreamMap(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest.testInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.createTempDirAndFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipMethod.ordinal(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOneByte(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getBytesRead(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testEightEmptyFiles(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.rmdir(1)"
CGNodeType Method "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.ChecksumVerifyingInputStream(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(1)"
CGNodeType Method "org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$100(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.getHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression(2)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.singleByteReadReturnsMinusOneAtEof(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(1)"
CGNodeType Method "org.apache.commons.compress.compressors.DetectCompressorTestCase.DetectCompressorTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(4)"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.testExplicitDirectoryEntry(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(1)"
CGNodeType Method "org.apache.commons.compress.ChainingTestCase.testTarBzip2(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders(0)"
CGNodeType Method "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingBZIP2(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest.convert16(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.HashAlgorithm(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.reset(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.hasNext(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checksig(2)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.shouldNotBeAbleToSetCompressionLevelToADoubleDigitValue(0)"
CGNodeType Method "org.apache.commons.compress.DetectArchiverTestCase.testDetection(0)"
CGNodeType Method "org.apache.commons.compress.archivers.CpioTestCase.testCpioArchiveCreation(0)"
CGNodeType Method "org.apache.commons.compress.compressors.ZTestCase.testUnarchive(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(2)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.verifyLastChecksumAndReset(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended(0)"
CGNodeType Method "org.apache.commons.compress.ChainingTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.3.wrap(1)"
CGNodeType Method "org.tukaani.xz.X86Options.X86Options(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes(0)"
CGNodeType Method "org.apache.commons.compress.compressors.DetectCompressorTestCase.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setCentralDirectoryData(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Strategy.2.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesStreamModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameTruncateMode(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.resetPreviousCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(4)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.toString(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureFallbackSort(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingTest.testSimpleCp850Encoding(0)"
CGNodeType Method "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.getName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(2)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isBlockDevice(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadBigGid(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BinaryTree.BinaryTree(1)"
CGNodeType Method "org.apache.commons.compress.archivers.DumpTestCase.archiveDetection(1)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.littleEndianWithOverflow(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.X0019_EncryptionRecipientCertificateList(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(3)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.CRC.initialiseCRC(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getGID(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCharacterDevice(0)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.shouldBeReplaced(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.usesChecksumWithCompressedChunks(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctalOrBinary8(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.paxHeaderEntryWithEmptyValueRemovesKey(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.TarArchiveSparseEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testStackOfContentCompressions(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithSkip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.markSupported(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BitStream.BitStream(1)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getUserName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.getEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(5)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getGroupId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessJavaTime(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.available(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCompressedSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.access$400(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStream.getBytesWritten(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.clone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.UnparseableExtraFieldData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterSampleTest.testSample(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.getBytesRead(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(0)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest.testOutputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.HostOs(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(3)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesImpl(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.getContentMethods(1)"
CGNodeType Method "org.apache.commons.compress.archivers.DumpTestCase.checkDumpArchive(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getEntrySize(0)"
CGNodeType Method "org.apache.commons.compress.compressors.GzipUtilsTestCase.testGetUncompressedFilename(0)"
CGNodeType Method "org.apache.commons.compress.utils.Iterators.addAll(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(2)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.LocalFileHeader.LocalFileHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.tearDown(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(1)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.TarUtils(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.testWinzipBackSlashWorkaround(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDumpDate(1)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.flush(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.getEntries(0)"
CGNodeType Method "org.apache.commons.compress.archivers.SevenZTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.testReadAr(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberPosixMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawFlag(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.MemoryArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.read(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtilTest.testSignedByteToUnsignedInt(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getGeneration(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$302(2)"
CGNodeType Method "org.apache.commons.compress.archivers.LongSymLinkTest.testArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(1)"
CGNodeType Method "org.apache.commons.compress.archivers.LongPathTest.testArchive(0)"
CGNodeType Method "org.apache.commons.compress.utils.CountingStreamTest.CountingStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setPrefix(2)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackDeltaDistance(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.NameAndComment(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(4)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit2_createTimePresent(0)"
CGNodeType Method "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingLZMA2(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate(0)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.2.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShort.clone(0)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testGzipCreation(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.createZipArchiveEntry(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.read(3)"
CGNodeType Method "char[].clone(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getSingleton(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesAndEmptyFiles(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readOneByte(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorServiceLoaderTest.CompressorServiceLoaderTest(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetResults.addedFromStream(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BitStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.create(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.1.{...}"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.incrementCodeSize(0)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.testReading17BitsInBigEndian(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(2)"
CGNodeType Method "org.apache.commons.compress.archivers.CpioTestCase.createTempDirAndFile(0)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$1000(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShortTest.testFromBytes(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFileModeAlways(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryData(0)"
CGNodeType Method "org.apache.commons.compress.utils.CountingOutputStream.getBytesWritten(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isNewHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMaj(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressorTest.deflatedEntries(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(2)"
CGNodeType Method "org.apache.commons.compress.compressors.LZMATestCase.lzmaRoundtrip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.create(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2.takeAction(2)"
CGNodeType Method "org.apache.commons.compress.utils.CharsetsTest.testUtf16(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFiles(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.NioZipEncoding.decode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(3)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.flush(0)"
CGNodeType Method "org.apache.commons.compress.compressors.DetectCompressorTestCase.testMutiples(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowLZMA2OptionsForLZMA(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.removeEntriesFoundInZipFile(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchive(1)"
CGNodeType Method "org.tukaani.xz.LZMA2Options.LZMA2Options(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesWorkUsingBSDDialect(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtilTest.testOutsideCalendar(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.writeOut(3)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLevel(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.ParallelScatterZipCreatorTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterSampleTest.createFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$408(1)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testGetUncompressedFilename(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(1)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.readFully(1)"
CGNodeType Method "org.tukaani.xz.LZMA2Options.LZMA2Options(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setExternalAttributes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.cleanup(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParse(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.get(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.createArchive(1)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPosition(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setCentralDirectoryExtra(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.NameAndComment(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDataDescriptor(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryModeAlways(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.assertContentMethodsEquals(2)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEncoding(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJARMRoundtrip(0)"
CGNodeType Method "org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getVolume(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skipRemainderOfLastBlock(0)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testMetadataRoundTrip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.DetectArchiverTestCase.checkEmptyArchive(1)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlags(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ArTestCase.createTempDirAndFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isDirectory(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(1)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.closeQuietly(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isCharacterDevice(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCheckSumOK(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.testDoubleClose(0)"
CGNodeType Method "org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(2)"
CGNodeType Method "org.apache.commons.compress.parallel.InputStreamSupplier.get(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(2)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getAlignmentBoundary(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShortTest.ZipShortTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.assertSameFileContents(2)"
CGNodeType Method "org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setDeleted(1)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.mark(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFilesystem(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.ZipTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$200(1)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.Pack200TestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getRealSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testNotADumpArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(1)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.testCompressorStreamFactoryRoundtrip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryName(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMerge(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BitStreamTest.testEmptyStream(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.values(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.SparseFilesTest.testOldGNU(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinZIPUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaZipFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(1)"
CGNodeType Method "org.apache.commons.compress.archivers.LongPathTest.1.accept(2)"
CGNodeType Method "org.apache.commons.compress.utils.FlushShieldFilterOutputStream.flush(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.available(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(3)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.static {...}"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.4.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(1)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(1)"
CGNodeType Method "org.tukaani.xz.FilterOptions.getOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addRepeatOfPreviousCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioUtilTest.CpioUtilTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.GzipUtilsTestCase.GzipUtilsTestCase(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2Utils.BZip2Utils(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testParseOctalCompress330(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFiles(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGlobalPaxHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$102(2)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyCompress252(3)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSevenEmptyFiles(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write5GBZerosFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterSample.ScatterSample(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isBlockDevice(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ScatterZipOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.X7875_NewUnixTest(0)"
CGNodeType Method "org.apache.commons.compress.DetectArchiverTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.PasswordRequiredException.PasswordRequiredException(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryLength(0)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.reset(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesFileModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.CLI(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeflateWithConfiguration(0)"
CGNodeType Method "org.apache.commons.compress.compressors.TestCompressorStreamProvider.getOutputStreamCompressorNames(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtilTest.ZipUtilTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMajor(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.access$500(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setRawFlag(1)"
CGNodeType Method "org.tukaani.xz.DeltaOptions.getInputStream(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.compressors.FramedSnappyTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowLZMA2OptionsForLZMA2(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getDumpDate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntry(2)"
CGNodeType Method "org.apache.commons.compress.utils.CharsetsTest.testUtf16Be(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorException.CompressorException(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getVolume(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalFileDataExtra(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.closeQuietly(1)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.getStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(2)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.bigEndianWithOverflow(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.ZipArchiveEntryTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterSample.addEntry(2)"
CGNodeType Method "org.tukaani.xz.FinishableWrapperOutputStream.FinishableWrapperOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.DeltaDecoder(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.readEntriesOfSize0(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.{...}"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.OffsetEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSize(1)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks(0)"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS114(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSevenFilesSomeNotEmpty(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosImpl(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setVolume(1)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipUtils.GzipUtils(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMin(0)"
CGNodeType Method "org.apache.commons.compress.utils.BoundedInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyRaw(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testReadingOfAttributesUnixVersion(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.init(0)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateParameters.withZlibHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.CircularBuffer.available(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getInputStreamFor(3)"
CGNodeType Method "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingCopy(0)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtils.closeQuietly(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64Mode.values(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.Simple8BitChar(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.equals(1)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.3.1.skip(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.equals(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8Interoperability(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.OffsetEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getInputStreamFor(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(2)"
CGNodeType Method "org.apache.commons.compress.archivers.CpioTestCase.testFileEntryFromFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coder.Coder(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByPKZip(0)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPaxHeadersWithLength101(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testThrowOnInvalidEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJARMThumbRoundtrip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(4)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir3(0)"
CGNodeType Method "org.apache.commons.compress.utils.ServiceLoaderIterator.hasNext(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNUSparse(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(2)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.setTableSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setComment(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getComment(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyFramed(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.initializeTables(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.toString(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isUnixSymlink(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrcValue(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileHeadersOfArchiveBiggerThan8GByte(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest.convert32(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testReadingBackLZMA2DictSize(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.initializeChannel(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesRead(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCopyConstructor(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBuffer(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.testSampleFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMergeWithUnparseableData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encodeHighChar(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.decode(5)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testWriteNegativeBinary8Byte(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.EncryptionAlgorithm(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(2)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSet.addAddition(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.CompressedEntry(4)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.ZipArchiveEntryRequest(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.JarMarker.getInstance(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipMethod.getCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(4)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileNamePosix(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Lister.parse(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getCode(0)"
CGNodeType Method "org.apache.commons.compress.compressors.XZTestCase.testXZCreation(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zUnarchive(3)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testGetUncompressedFilename(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShortTest.testEquals(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSet.addDeletion(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(1)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.createSingleEntryArchive(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.TestData(6)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioUtilTest.oldBinMagicFromByteArraySwapped(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(1)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipFileReadsUnicodeFields(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSomethingAndDisk(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getXz(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testParseOctalInvalid(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(2)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(4)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testLongNameMd5Hash(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.LZMAUtilsTestCase(0)"
CGNodeType Method "org.apache.commons.compress.compressors.LZMATestCase.LZMATestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$002(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLongTest.testPut(0)"
CGNodeType Method "org.apache.commons.compress.archivers.LongSymLinkTest.checkArchiveContent(2)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.shouldNotAllowReadingOfANegativeAmountOfBits(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$000(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setComment(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingTest.ZipEncodingTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.access$000(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.BZip2CompressorInputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.main(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(4)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$002(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(0)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.compareReads(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongNameEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncoding.decode(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression8K3Trees(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testLongFromBytes(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getVersionMadeBy(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.getValue(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(3)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isRegularFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.appendSurrogate(2)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.BCJDecoder(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldNotAllowStringOptionsForLZMA(0)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.testReadCpio(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByPKZipUsingInputStream(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.setClearCode(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Strategy.Pack200Strategy(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.getValue(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(3)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getLastModifiedDate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.Mode[].clone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinZIPUsingInputStream(0)"
CGNodeType Method "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.TestData(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.getTestStream(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Strategy.Pack200Strategy(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.DefaultBackingStoreSupplier(0)"
CGNodeType Method "org.apache.commons.compress.utils.Iterators.Iterators(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(4)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testRemainingChunkTypes(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSet.ChangeSet(0)"
CGNodeType Method "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.getInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.closeArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(3)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.2.wrap(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.DefaultBackingStoreSupplier(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixtureSorted(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.getHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BitStream.nextByte(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShortTest.testToBytes(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.grabMode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.testExplicitFileEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getCount(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.get(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getCreationTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.createTempDirAndFile(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(0)"
CGNodeType Method "org.apache.commons.compress.compressors.BZip2TestCase.testConcatenatedStreamsReadFully(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.1.{...}"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.createTempDir(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.DumpTestCase.DumpTestCase(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.parseReparse(5)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.createTempDirAndFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextDumpEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryData(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GBytePosix(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType(0)"
CGNodeType Method "org.apache.commons.compress.compressors.ZTestCase.2.{...}"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.clone(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setInternalAttributes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.JarArchiveOutputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField(4)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getAccessTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveFileModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BitStream.readBits(1)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateParameters.getCompressionLevel(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrc(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$402(2)"
CGNodeType Method "org.powermock.api.mockito.PowerMockito.whenNew(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getCurrentOutputStream(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.compressors.BZip2UtilsTestCase.BZip2UtilsTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.shouldThrowIfNoCreationDateIsSet(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(0)"
CGNodeType Method "org.apache.commons.compress.changes.Change.type(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CachedAvailability(2)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.getSize(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Lister.extract(3)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameErrorMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isLink(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArTestCase.testArDelete(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedBy7ZIPUsingInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getLevel(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getBytesRead(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.values(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.1.canEncode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.TestArchiveStreamProvider.getOutputStreamArchiveNames(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(0)"
CGNodeType Method "org.apache.commons.compress.compressors.FramedSnappyTestCase.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.finalize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(1)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.checkArchiveContent(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Utils.Pack200Utils(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.StreamBridge.getInputView(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiDirectoryNamePosixMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testHelloWorldHeaderCompressionOffLZMA2(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceTrue(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.CircularBuffer.get(0)"
CGNodeType Method "org.apache.commons.compress.archivers.DumpTestCase.testCompressedArchiveDetection(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteSimplePaxHeaders(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesOffsetAndDisk(0)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.BitInputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.DumpArchiveConstants(0)"
CGNodeType Method "org.apache.commons.compress.DetectArchiverTestCase.createEmptyArchive(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setPreviousDumpDate(1)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtils.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNameGnuMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtra(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.TarArchiveOutputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.tryHardToDelete(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethod.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.deflateUntilInputIsNeeded(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(1)"
CGNodeType Method "org.apache.commons.compress.utils.CountingStreamTest.output(0)"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.testCOMPRESS178(0)"
CGNodeType Method "org.apache.commons.compress.compressors.FramedSnappyTestCase.3.{...}"
CGNodeType Method "org.apache.commons.compress.compressors.DetectCompressorTestCase.testOverride(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.getValue(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasAccessDate(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.LZMACompressorOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDevice(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setClearCode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testNotEquals(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$602(2)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.available(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsAsProperties(1)"
CGNodeType Method "org.apache.commons.compress.changes.Change.getEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getIno(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addDir(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryStarMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncoding.encode(1)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.singleByteReadWorksAsExpected(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryLength(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.2.run(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSocket(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Lister.CommandLine.CommandLine(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveEntry.getManifestAttributes(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setIds(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.setIno(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setCreationTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveEntry.getName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Lister.CommandLine.CommandLine(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.trimTest(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(1)"
CGNodeType Method "org.tukaani.xz.XZOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.compressors.BZip2TestCase.testBzip2Unarchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.compressors.XZTestCase.XZTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.testArjUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsAsProperties(1)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(1)"
CGNodeType Method "org.apache.commons.compress.changes.Change.Change(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.writeEntries(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.StreamBridge.stop(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetResults.getAddedFromStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMinor(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Strategy.newStreamBridge(0)"
CGNodeType Method "org.tukaani.xz.XZOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CoderBase.encode(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCantFinishTwice(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.slideBuffer(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testEquals(0)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlagsBestCompression(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.Feature(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Lister.usage(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest.DumpArchiveUtilTest(0)"
CGNodeType Method "org.apache.commons.compress.ArchiveUtilsTest.asciiToByteAndBackOK(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64RequiredException.Zip64RequiredException(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$100(1)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.canReadEntryData(1)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readLittleEndianInt(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinCFUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.changes.Change.Change(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryToStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataData(0)"
CGNodeType Method "org.tukaani.xz.LZMA2Options.getPb(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$402(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setDiskStartNumber(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.readNextCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripNoEFSImplicitUnicodeExtra(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Strategy[].clone(0)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.jarUnarchiveAll(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$300(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags.Flags(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrc(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testCorruptedInput(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCentralDirectoryExtra(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.getHashAlgorithm(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(3)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.BigFilesIT.BigFilesIT(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCompress252(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.CircularBuffer.CircularBuffer(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(2)"
CGNodeType Method "org.apache.commons.compress.archivers.CpioTestCase.testDirectoryEntryFromFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.NioZipEncoding.NioZipEncoding(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveInputStream.read(1)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeTrailer(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkDisk(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.access$400(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2Roundtrip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingDeprecated(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveInputStream.getCount(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(1)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase.testReading(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.copy(3)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(1)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtils.copy(3)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveEntry.isDirectory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testNegative(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.createTestFile(4)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableOnly(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStream.canWriteEntryData(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.Dirent.Dirent(4)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressUntilEOF(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(5)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(2)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.LongSymLinkTest.LongSymLinkTest(1)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtils.copy(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.toString(0)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStream.readBits(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$200(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldReadGNULongNameEntryWithWrongName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSubStreamsInfo(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getDevname(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testParseReparse(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$202(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDevname(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.adjustFromGMTToExpectedOffset(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFlags(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesGeneratedByWinCFUsingInputStream(0)"
CGNodeType Method "org.apache.commons.compress.utils.Sets.Sets(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.ZipUtil(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorInputStream.pushedBackBytes(1)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFileGeneratedByJava7Jar(0)"
CGNodeType Method "org.apache.commons.compress.archivers.SevenZTestCase.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(3)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiNameWithUnfortunateNamePosixMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.CircularBufferTest.testPutAndGet(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.ExtraFieldUtils(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.BlockSortTest(0)"
CGNodeType Method "org.apache.commons.compress.utils.ServiceLoaderIterator.getNextServiceLoader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.1.close(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipParameters.getOperatingSystem(0)"
CGNodeType Method "org.tukaani.xz.LZMA2Options.setLcLp(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier.get(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.JarMarker.JarMarker(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64Mode.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.skip(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameTruncateMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$402(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.X000A_NTFS(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.getLengthAndPositionAtCentralDirectory(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getGroupName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.ArchiveStreamFactoryTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readLiteralLength(1)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getArchiveName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.shouldThrowIfNoAccessDateIsSet(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArTestCase.tryHardToDelete(1)"
CGNodeType Method "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.getLastModifiedDate(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(1)"
CGNodeType Method "org.apache.commons.compress.archivers.CpioTestCase.testExplicitDirectoryEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.isDirectory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.clone(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.setCodeSize(1)"
CGNodeType Method "org.apache.commons.compress.ArchiveReadTest.1.accept(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.BoundedInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getField(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCdata(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.markSupported(0)"
CGNodeType Method "org.apache.commons.compress.changes.Change.isReplaceMode(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(2)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJX86Roundtrip(0)"
CGNodeType Method "org.apache.commons.compress.ArchiveUtilsTest.testCompareBA(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(3)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSignalEOFWhenPositionAtTheEnd(0)"
CGNodeType Method "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipMethod.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.SEGMENT_TYPE(3)"
CGNodeType Method "org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(3)"
CGNodeType Method "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingDeflate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.testLongFileNamesCauseExceptionByDefault(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(3)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getInode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(0)"
CGNodeType Method "org.apache.commons.compress.compressors.ZTestCase.3.wrap(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStreamModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.XZUtils(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.next(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.close(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture(0)"
CGNodeType Method "org.apache.commons.compress.compressors.LZMATestCase.testLZMAUnarchiveWithAutodetection(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteToOneFileArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getFeature(0)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextZipEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.checkLongNameEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.available(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.toString(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLongTest.testSign(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.PKWareExtraHeader(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.testNotADumpArchiveButBigEnough(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByJava7JarUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(4)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGroupId(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(6)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64Mode[].clone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(3)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate.test(1)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testGetCompressedFilename(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(0)"
CGNodeType Method "org.apache.commons.compress.compressors.GzipUtilsTestCase.testGetCompressedFilename(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(1)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.flush(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.compressors.XZTestCase.testXZUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.testWriteAr(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.getFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(5)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testTwentyNineEmptyFiles(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.toString(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.TapeInputStream.peek(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveInputStream.pushedBackBytes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.access$000(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.assertCanRead(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(3)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawName(0)"
CGNodeType Method "org.apache.commons.compress.compressors.XZTestCase.testConcatenatedStreamsReadFully(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.chooseBlockSize(1)"
CGNodeType Method "org.tukaani.xz.XZOutputStream.flush(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.access$100(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testBigNumberStarMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillStarSparseData(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testMaxFileSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.X0015_CertificateIdForFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.expandCodeToOutputStack(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.testCompress197(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSparse(0)"
CGNodeType Method "org.apache.commons.compress.utils.Charsets.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testCOMPRESS209(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.access$600(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.rmdir(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.publicNameRemovesLeadingDotSlash(0)"
CGNodeType Method "org.powermock.api.mockito.expectation.ConstructorExpectationSetup.withAnyArguments(0)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFully(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.Entry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.values(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(4)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.1.{...}"
CGNodeType Method "org.apache.commons.compress.ArchiveUtilsTest.testCompareAscii(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readGlobalPaxHeaders(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.SparseFilesTest.SparseFilesTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.DeflateCompressorInputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.readString(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$708(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShort.equals(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(4)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(1)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.skipUsingSkipAndRead(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$500(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getNTRec(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isSymbolicLink(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBzip2WithConfiguration(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testSign(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE[].clone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushedBackBytes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.getCodeSize(0)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getType(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(2)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.archivers.Lister.usage(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getMethod(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getUID(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.ZipEncodingHelper(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testSampleFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testCopyRoundtrip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getGID(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(1)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.PERMISSION(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDirectoriesOnly(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testName(0)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.CircularBufferTest.testCopy(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(5)"
CGNodeType Method "org.apache.commons.compress.compressors.DeflateTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.FramedSnappyCompressorInputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getUnixMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.GeneralPurposeBitTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShort.putShort(3)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.static {...}"
CGNodeType Method "org.apache.commons.compress.ArchiveUtilsTest.sanitizeLeavesShortStringsAlone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(1)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetResults.getAddedFromChangeSet(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenArchiverNameIsNull_1(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.{...}"
CGNodeType Method "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getBytesRead(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.createTempDirAndFile(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.pushedBackBytes(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefix(1)"
CGNodeType Method "org.tukaani.xz.FilterOptions.getInputStream(1)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.isEqual(7)"
CGNodeType Method "org.apache.commons.compress.changes.Change.getInput(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.BigFilesIT.readFileBiggerThan8GByte(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(5)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.2.compare(2)"
CGNodeType Method "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$400(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.equals(1)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterStatistics.getCompressionElapsed(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArTestCase.XtestDirectoryEntryFromFile(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.createSingleEntryArchive(1)"
CGNodeType Method "org.apache.commons.compress.compressors.TestCompressorStreamProvider.getInputStreamCompressorNames(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.expandCodeToOutputStack(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteNonAsciiLinkPathNamePaxHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.SimpleEncodingHolder(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(1)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLongTest.ZipLongTest(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwiceWithoutReplace(0)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$502(2)"
CGNodeType Method "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetResults.ChangeSetResults(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefixesLength(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.isEqual(6)"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.testDirectoryEntryFromFile(0)"
CGNodeType Method "org.tukaani.xz.LZMAOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.archivers.LongPathTest.LongPathTest(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.extractZipInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMergedFields(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readSize(0)"
CGNodeType Method "org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier.get(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.ZipEightByteIntegerTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByJava7JarUsingInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest.testBIToBytes(0)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.isEqual(3)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.MainHeader.Flags.Flags(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArTestCase.rmdir(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.X5455_ExtendedTimestampTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterStatistics.getMergingElapsed(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(2)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorInputStream.getCount(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getCurrentEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.InvalidFormatException.getOffset(0)"
CGNodeType Method "org.apache.commons.compress.archivers.LongPathTest.setUpFileList(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.StreamBridge.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToFile(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.usage(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(1)"
CGNodeType Method "org.apache.commons.compress.archivers.DumpTestCase.testCheckCompressedArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testReadNegativeBinary12Byte(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.{...}"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.testReading24BitsInLittleEndian(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.JarMarker.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.DumpArchiveInputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.StreamBridge.write(3)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.isEqual(2)"
CGNodeType Method "org.mockito.stubbing.OngoingStubbing.thenReturn(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(1)"
CGNodeType Method "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorServiceLoaderTest.testInputStream(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(0)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.createTempDirAndFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(1)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.skipUsingSkip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getFlags(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithOptionsConfiguration(0)"
CGNodeType Method "org.tukaani.xz.ARMThumbOptions.ARMThumbOptions(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate(0)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.shouldBeAbleToSkipAByte(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(7)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.before(0)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGzipCompressorInputStream(0)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.SeekableInMemoryByteChannelTest(0)"
CGNodeType Method "org.apache.commons.compress.utils.CountingOutputStream.CountingOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(3)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorOutputStream.CompressorOutputStream(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.getInputView(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar(0)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.getRecordCount(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(1)"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.rmdir(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.isDirectory(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testTurningOnCachingReEvaluatesAvailability(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.readMagic(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get5GBZerosFileGeneratedByWinZIP(0)"
CGNodeType Method "org.apache.commons.compress.archivers.LongSymLinkTest.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.UnrecognizedFormatException(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1.get(0)"
CGNodeType Method "org.tukaani.xz.LZMA2Options.setPb(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMinor(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithOptionsConfiguration(0)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.testReading30BitsInBigEndian(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest.test(2)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.toString(1)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability[].clone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(1)"
CGNodeType Method "org.tukaani.xz.LZMA2Options.getOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.ZipFileTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(1)"
CGNodeType Method "org.apache.commons.compress.utils.CountingOutputStream.flush(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAr(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShort.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.incrementCodeSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToStreamModeNever(0)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.tearDown(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.getBytesWritten(0)"
CGNodeType Method "org.apache.commons.compress.ArchiveUtilsTest.sanitizeRemovesUnprintableCharacters(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.reset(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.testUnzipBZip2CompressedEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.encode(2)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadDataFromSetPosition(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByPKZipUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.ScatterGatherBackingStoreCompressor(2)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioUtilTest.oldBinMagic2ByteArrayNotSwapped(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testRoundtripWith67CharFileNameGnu(0)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.4.read(1)"
CGNodeType Method "org.apache.commons.compress.archivers.CpioTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$702(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.clone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.assertEntryName(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.test(2)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.testReading24BitsInBigEndian(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.setTableSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.LongPathTest.data(0)"
CGNodeType Method "org.apache.commons.compress.ArchiveReadTest.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.numberOptionOrDefault(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getWindowsAttributes(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtils.IOUtils(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testOverflow(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testLoremIpsum(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGetHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreation(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit0_modifyTimePresent(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(1)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(1)"
CGNodeType Method "org.apache.commons.compress.utils.BoundedInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryModeNever(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$202(2)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorInputStream.getBytesRead(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.canEncode(1)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesOnly(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.decompressNextSymbol(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveStreamModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.TapeInputStream.getBytesRead(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readPaxHeaderWithEmbeddedNewline(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.write(3)"
CGNodeType Method "org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(3)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(3)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.jarArchiveCreation(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testContent(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPaxHeadersWithLength99(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.CRC.setGlobalCRC(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setGeneralPurposeBit(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testReparse(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.get(0)"
CGNodeType Method "org.tukaani.xz.PowerPCOptions.PowerPCOptions(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceTar(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Lister.main(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CoderBase.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.TestArchiveStreamProvider.createArchiveInputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.Mode.Mode(4)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.1.{...}"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.getInputStream(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testFileSystemRoot(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getUnicodeName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getGroupId(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixtureMainSort(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.utils.BoundedInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.sanitize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.Mode.Mode(3)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateJavaTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.getAlgorithmByCode(1)"
CGNodeType Method "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closeForWriting(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$600(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.copy(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.MainHeader.toString(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedBy7ZIPUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.getFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE[].clone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getPayloadStream(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLongTest.testClone(0)"
CGNodeType Method "org.apache.commons.compress.parallel.ScatterGatherBackingStore.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.DummyByteAddingInputStream(1)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.2.1.skip(1)"
CGNodeType Method "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setUnicodeName(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryUnnownSizeToFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest.ArjArchiveInputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.rmdir(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceCpio(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.reset(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.skip(1)"
CGNodeType Method "org.tukaani.xz.SPARCOptions.SPARCOptions(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(1)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testEncryptedArchiveRequiresPassword(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParseWithRead(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge(0)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.skip(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testStrongEncryption(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testCachingIsEnabledByDefaultAndLZMAIsPresent(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir2(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testAddMoveDelete(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setAccessTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtilTest.testMinTime(0)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setCurrentEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.CRC.getGlobalCRC(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testAvailable(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToFileModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getBytesWritten(0)"
CGNodeType Method "org.apache.commons.compress.archivers.SevenZTestCase.testSevenZArchiveCreationUsingLZMA(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromZipFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.CopyDecoder(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.data(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.getName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.SevenZTestCase.SevenZTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(2)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchiveCreatedByRedlineRpm(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryPosixMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.static {...}"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldTruncateContentsProperly(0)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.setClearCode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.ExplodeSupportTest(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.cantRead7zFromStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testWriteCDOnlySizes(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1.takeAction(2)"
CGNodeType Method "org.apache.commons.compress.ArchiveReadTest.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.DummyByteAddingInputStream(2)"
CGNodeType Method "org.apache.commons.compress.ArchiveReadTest.setUpFileList(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipMethod.name(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.eq(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getLastModifiedDate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closeEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setNTRec(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.getKey(0)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLongTest.testEquals(0)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.XZUtilsTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.1.test(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Strategy.valueOf(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.callableApi(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetResults.deleted(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.findArchiveStreamProviders(0)"
CGNodeType Method "org.apache.commons.compress.compressors.DeflateTestCase.testRawDeflateUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CoderBase.numberOptionOrDefault(2)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setCrc(1)"
CGNodeType Method "org.tukaani.xz.UnsupportedOptionsException.getMessage(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(1)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.assertGnuMagic(1)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(3)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.testPartialReadTruncatedData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.Lister.main(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testVerifyHeaderCheckSum(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testCachingIsEnabledByDefaultAndXZIsPresent(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.fmin(2)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(4)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getUserId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipConstants.ZipConstants(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$300(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLongTest.testToBytes(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCreationDate(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.BZIP2Decoder(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ExceptionMessageTest.testMessageWhenOutputStreamIsNull(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(1)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(0)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.testReading30BitsInLittleEndian(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.decode(5)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64Mode.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(1)"
CGNodeType Method "org.tukaani.xz.ARMOptions.ARMOptions(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testAddToEmptyArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.DumpTestCase.unarchiveAll(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSixFilesSomeNotEmpty(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.hasNext(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.survivesBlankLinesInPaxHeader(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.Rand.Rand(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.UTF8ZipFilesTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testIsCompressedFilename(0)"
CGNodeType Method "org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.close(0)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.AbstractTestCase(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.getTableSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.access$300(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosGeneratedByPKZipUsingInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Lister.list(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(4)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.pushedBackBytes(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability[].clone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isFifo(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.copyOfRange(3)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundEncoding(0)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtils.readFully(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.isFlagSet(2)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setPlatform(1)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getPack200(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.TempFileCachingStreamBridge(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBCJIA64Roundtrip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.UnicodeExtraFieldPolicy(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Strategy.2.newStreamBridge(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(2)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.getClearCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCount(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.incrementCodeSize(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipMethod.ZipMethod(3)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testInteroperabilityWithGZIPInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.getInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BitStream.nextBit(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(1)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CachedAvailability(2)"
CGNodeType Method "org.apache.commons.compress.compressors.LZMATestCase.copy(2)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtils.readFully(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.ArArchiveInputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.CpioTestCase.CpioTestCase(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.hasStreamIdentifier(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(4)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.setPrefix(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.getRecordCount(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getZipArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzmaWithIntConfiguration(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setVersionMadeBy(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setUserId(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMin(0)"
CGNodeType Method "org.apache.commons.compress.utils.Lists.newArrayList(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.testSkipsPK00Prefix(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getHostOs(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ordinal(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.testSortFixture2MainSort(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipMethod.ZipMethod(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.toString(0)"
CGNodeType Method "org.apache.commons.compress.utils.Lists.newArrayList(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$302(2)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(1)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testInvalidCompressionLevel(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDataPadCount(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.access$200(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpochInGNUFormat(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.clone(0)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.DumpTestCase.checkArchiveContent(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testMaxFileSizeError(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkOldFormat(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(0)"
CGNodeType Method "org.apache.commons.compress.compressors.ZTestCase.1.wrap(1)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BitStreamTest.BitStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testIsCompressedFilename(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(1)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getLzma(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.Dirent.getType(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNullOptions(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.SevenZMethodConfigurationTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.TestCompressorStreamProvider.createCompressorOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDescendent(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArTestCase.testExplicitFileEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$000(1)"
CGNodeType Method "org.apache.commons.compress.archivers.LongSymLinkTest.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.call(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongDirectoryNamePosixMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.test(2)"
CGNodeType Method "org.apache.commons.compress.compressors.FramedSnappyTestCase.2.wrap(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.EncryptedArchiveTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.Maven221MultiVolumeTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(3)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.getTableSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.Mode.getMessage(0)"
CGNodeType Method "org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(2)"
CGNodeType Method "org.apache.commons.compress.utils.CountingOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveException.getCause(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryUnnownSizeToFileModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(6)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarLister.usage(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$200(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(1)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.serviceLoaderIterator(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getEncryptionAlgorithm(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(3)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$400(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.getClearCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.compare(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.getCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testModes(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeUnparseableExtraFieldData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataData(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtilTest.testInsideCalendar(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BinaryTree.read(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawEntriesFromFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decode(1)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionWhenSettingPositionOnClosedChannel(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testCanTurnOffCaching(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongFileNamePosixMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CoderBase.decode(5)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(1)"
CGNodeType Method "org.apache.commons.compress.utils.CharsetsTest.testUtf8(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.tukaani.xz.LZMAOutputStream.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingOutputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.close(0)"
CGNodeType Method "org.apache.commons.compress.utils.CountingInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Strategy.1.newStreamBridge(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Strategy.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.BZip2TestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.makeBZ2C(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.testCopyRawZip64EntryFromFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.testReadLongNamesGNU(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.getCrc32(0)"
CGNodeType Method "org.tukaani.xz.LZMA2InputStream.LZMA2InputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getOutputStreamFor(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.shouldThrowIfNoLastModifiedDateIsSet(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.utils.CountingOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(5)"
CGNodeType Method "org.apache.commons.compress.archivers.ExceptionMessageTest.ExceptionMessageTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(1)"
CGNodeType Method "org.tukaani.xz.LZMAOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFSTest.simpleRountrip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.static {...}"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.setUp(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.checkOffset(2)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStreamTest.testClearBitCache(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.reverse(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.testExcessDataInZip64ExtraField(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testLzma2WithIntConfiguration(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeflateRoundtrip(0)"
CGNodeType Method "org.apache.commons.compress.utils.CharsetsTest.testToCharset(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFlags(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(2)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterSampleTest.checkFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.setUpFixture2(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingTest.testSimpleCp437Encoding(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryUnknownSizeToStreamModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setCompressedSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeArchiveHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isChrDev(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioUtil.CpioUtil(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.getEntryEncoding(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$200(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testASCIIFileRoundtripImplicitUnicodeExtra(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.createAndReadBack(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.getCentralDirectoryLength(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.utils.CountingInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.Dirent.getIno(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtils.matches(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.available(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$408(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testRoundTripOctal(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.datePriorToEpochInPAXFormat(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass(0)"
CGNodeType Method "org.tukaani.xz.XZOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.utils.CountingInputStream.read(1)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testCanTurnOffCaching(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShortTest.testSign(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getPreviousDumpDate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testRoundTrip(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.writePaxHeader(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy(0)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.initializeTables(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testChecksumUnmasking(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndOffset(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BitStreamTest.testReadAlignedBytes(0)"
CGNodeType Method "org.apache.commons.compress.utils.CharsetsTest.testUtf16Le(0)"
CGNodeType Method "org.apache.commons.compress.archivers.StreamingNotSupportedException.StreamingNotSupportedException(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.writeOut(3)"
CGNodeType Method "org.apache.commons.compress.utils.Charsets.toCharset(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testParseEdgeCases(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamProvider.getInputStreamCompressorNames(0)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(1)"
CGNodeType Method "org.apache.commons.compress.compressors.BZip2TestCase.testCOMPRESS131(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.CircularBuffer.copy(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testFileRoundtrip(3)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256Decoder(0)"
CGNodeType Method "org.apache.commons.compress.archivers.LongSymLinkTest.setUpFileList(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testChecksumUnmasking(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(3)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorInputStream.available(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.parseReparse(5)"
CGNodeType Method "org.powermock.api.mockito.PowerMockito.spy(1)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.find(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkNameGnuMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.NioZipEncoding.canEncode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForLZMA2(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setOffset(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.values(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructorWithPreserve(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.FramedSnappyDialect(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(1)"
CGNodeType Method "org.apache.commons.compress.archivers.JarTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest.SevenZArchiveEntryTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getDeflate(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorOutputStream(2)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStream.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase.testGetCompressedFilename(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(1)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testConcatenatedStreamsReadFirstOnly(0)"
CGNodeType Method "org.apache.commons.compress.compressors.BZip2UtilsTestCase.testIsCompressedFilename(0)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlagsDefaultCompression(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.OutputStreamCompressor(2)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders(0)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.4.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.CompressorStreamFactoryRoundtripTest(1)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.createSingleEntryArchive(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandCopy(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.COMPRESSION_TYPE(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest.testReadPasswordEncryptedEntryViaStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.Mode.values(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.TarUtilsTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.testJarArchiveCreationInMemory(0)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.readNextCode(0)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.testJarArchiveCreationTempFile(0)"
CGNodeType Method "org.apache.commons.compress.ArchiveUtilsTest.asciiToByteAndBackFail(1)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.resetCodeSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.createReferenceFile(3)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveInputStream.getBytesRead(0)"
CGNodeType Method "org.apache.commons.compress.ArchiveReadTest.ArchiveReadTest(1)"
CGNodeType Method "org.apache.commons.compress.archivers.DumpTestCase.testCheckArchive(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSortTest.assertFixture2Sorted(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.TYPE(3)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(1)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testAddAllreadyExistingWithReplaceFalse(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.makeMaps(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.readFully(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(2)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.testBadSignature(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.JarMarker.getHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.TarTestCase.testFileEntryFromFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testASCIIFileRoundtripExplicitUnicodeExtra(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveStreamModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isFIFO(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.available(0)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.4.isOpen(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.1.encode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchive(0)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.createArchive(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShort.getValue(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.Mode.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.checkHelloWorld(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.Dirent.getName(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.TarArchiveEntryTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDirectoryEntries(0)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(2)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeHeader(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.initialValue(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryKnownSizeToFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read3EntriesCreatingBigArchiveFileUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFields(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(1)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.static {...}"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldReadContentsWhenBiggerBufferSupplied(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShort.getValue(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.writeOut(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(4)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasLastModifiedDate(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.values(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.getEncoding(0)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShort.getValue(2)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.access$100(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.serviceLoaderIterator(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.values(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableExtraFieldData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(4)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(2)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.perform(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(1)"
CGNodeType Method "org.apache.commons.compress.archivers.CpioTestCase.rmdir(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(0)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.shouldNotBeAbleToSetCompressionLevelToANegativeValue(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream(0)"
CGNodeType Method "org.apache.commons.compress.utils.ServiceLoaderIterator.remove(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(1)"
CGNodeType Method "org.apache.commons.compress.changes.Change.targetFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.TestArchiveStreamProvider.TestArchiveStreamProvider(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getMessage(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.setLongFileMode(1)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldWriteDataProperly(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testFinish(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setAtEOF(1)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.flush(0)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtils.toByteArray(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.get100KFileFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.getNameCRC32(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.addFile(3)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveEntry.getSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(2)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.DetectArchiverTestCase.testDetectionNotArchive(0)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest.canReadASingleByteFlushAndFinish(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(1)"
CGNodeType Method "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.skip(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.Pack200UtilsTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigDeflatedEntryKnownSizeToFileModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.reset(0)"
CGNodeType Method "org.apache.commons.compress.compressors.DeflateTestCase.DeflateTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(5)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.TarArchiveInputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.decode(5)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioUtilTest.oldBinMagicFromByteArrayNotSwapped(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(2)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isSocket(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testArchiveWithMixedMethods(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(2)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.test7zDecryptUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(1)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(5)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testBzip2Roundtrip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(2)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.shouldThrowAnIOExceptionWhenAppliedToAZipFile(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(2)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.testAllEmptyFilesArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(3)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(1)"
CGNodeType Method "org.tukaani.xz.LZMAOutputStream.flush(0)"
CGNodeType Method "org.apache.commons.compress.utils.CharsetNames.CharsetNames(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(5)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.StreamBridge.getInput(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testDeltaRoundtrip(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.getGzip(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.Zip64SupportIT(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.CRC.static {...}"
CGNodeType Method "org.apache.commons.compress.ChainingTestCase.ChainingTestCase(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(1)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipParameters.getComment(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.getUnicodeName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryKnownSizeToFileModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtilTest.testBigToLong(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$700(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(3)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.X7875_NewUnix(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.access$100(0)"
CGNodeType Method "org.apache.commons.compress.compressors.ZTestCase.3.{...}"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(4)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDeleteDir(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtilTest.testAdjustToLong(0)"
CGNodeType Method "org.apache.commons.compress.compressors.Pack200TestCase.testShortSignature(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.padAsNeeded(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isNetwork(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.encode(2)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.toString(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZipUsingZipFilePerform(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCrc(0)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(3)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.2.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.secondEntryWinsWhenPaxHeaderContainsDuplicateKey(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExplodingInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(3)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorInputStreamTest.XZCompressorInputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.static {...}"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testChangeSetResults(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.getHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getType(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BitStreamTest.testStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.concurrent(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater(0)"
CGNodeType Method "org.apache.commons.compress.compressors.ZTestCase.testZUnarchiveViaFactory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.1.decode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFirstRecord(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(1)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.Methods(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readEntry(2)"
CGNodeType Method "org.apache.commons.compress.compressors.ZTestCase.2.wrap(1)"
CGNodeType Method "org.apache.commons.compress.compressors.BZip2UtilsTestCase.testGetCompressedFilename(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getCodeSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.TapeSegmentHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.getTempFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.getIno(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNUSparse(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterSampleTest.ScatterSampleTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isBlkDev(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testWriteLongLinkName(1)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.LZMACompressorInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Folder.toString(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testAddChangeTwice(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isMetaDataOnly(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.test(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(4)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(5)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripExplicitUnicodeExtra(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(1)"
CGNodeType Method "org.apache.commons.compress.compressors.GzipUtilsTestCase.testIsCompressedFilename(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.ExtraFieldUtilsTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest.availableShouldReturnNonZero(0)"
CGNodeType Method "org.apache.commons.compress.DetectArchiverTestCase.testEmptyJarArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFileImpl(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryToStreamModeAlways(1)"
CGNodeType Method "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.testUnskippableChunk(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.values(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextJarEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructorWithFileFlag(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(5)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor.DataOutputCompressor(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasWindowsAttributes(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMAUtils.LZMAUtils(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BitStreamTest.testNextByteFromEmptyStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(1)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.testReadJar(0)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLongTest.testFromBytes(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.encode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(5)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read8(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CLI.static {...}"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getUserId(0)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.StreamWrapper.wrap(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.SevenZNativeHeapTest(0)"
CGNodeType Method "org.apache.commons.compress.ArchiveReadTest.testArchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest.shouldAllowNumberForLZMA(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getLabel(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.getEncoding(0)"
CGNodeType Method "org.apache.commons.compress.utils.CountingStreamTest.input(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesWrittenForLastEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(3)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1.close(0)"
CGNodeType Method "org.tukaani.xz.LZMA2Options.setDictSize(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShortTest.testPut(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(1)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateParametersTest.DeflateParametersTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testPadsOutputToFullBlockLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.ensureOpen(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getHeaderId(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.shortTextFilesAreNoTARs(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ZipTestCase.checkArchiveContent(2)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.getFile(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest.convert64(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummy(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.equals(1)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testGzipUnarchive(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testOldEntryError(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethod[].clone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot(0)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.TapeInputStream.1.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipArchiveInputStreamReadsUnicodeFields(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.archiveListDelete(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.verifyFile(3)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testNineFilesSomeNotEmpty(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOffset(0)"
CGNodeType Method "org.apache.commons.compress.archivers.LongPathTest.getExpectedString(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.encode(2)"
CGNodeType Method "org.apache.commons.compress.AbstractTestCase.createEmptyArchive(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(3)"
CGNodeType Method "org.apache.commons.compress.PasswordRequiredException.getMessage(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadLFHSizesAndDisk(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getCount(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(1)"
CGNodeType Method "org.apache.commons.compress.compressors.FramedSnappyTestCase.testDefaultExtractionViaFactory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getHashAlgorithm(0)"
CGNodeType Method "org.apache.commons.compress.archivers.DumpTestCase.testCompressedDumpUnarchiveAll(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.testSixEmptyFiles(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(1)"
CGNodeType Method "org.apache.commons.compress.ArchiveUtilsTest.sanitizeShortensString(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setMethod(1)"
CGNodeType Method "org.apache.commons.compress.utils.CountingInputStream.count(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm[].clone(0)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldSetProperPositionOnTruncate(0)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.FramedSnappyTestCase.1.wrap(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.values(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar(0)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(5)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZMethod.SevenZMethod(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.call(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest.ArchiveServiceLoaderTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64Mode.Zip64Mode(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.shouldThrowAnExceptionOnTruncatedEntries(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.testReadCDSizesAndOffset(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOriginalName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.toString(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest.testCount(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripImplicitUnicodeExtra(0)"
CGNodeType Method "org.apache.commons.compress.utils.CharsetsTest.testIso8859_1(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BlockSort.med3(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.test(2)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(3)"
CGNodeType Method "org.apache.commons.compress.DetectArchiverTestCase.testCOMPRESS335(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decodeByte(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE[].clone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(5)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getVersionRequired(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.TapeInputStream.skip(1)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsFinishedWithStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finish(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.getFactory(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.BinaryTreeTest.BinaryTreeTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveEntry.getCertificates(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.testEncodingInputStreamAutodetect(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(1)"
CGNodeType Method "org.tukaani.xz.DeltaOptions.DeltaOptions(1)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionOnWritingToClosedChannel(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.3.static {...}"
CGNodeType Method "org.apache.commons.compress.compressors.BZip2TestCase.testBzipCreation(0)"
CGNodeType Method "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(1)"
CGNodeType Method "org.apache.commons.compress.IOMethodsTest.testWriteJar(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(1)"
CGNodeType Method "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipShort.toString(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(2)"
CGNodeType Method "org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getUID(0)"
CGNodeType Method "org.apache.commons.compress.archivers.LongPathTest.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream(0)"
CGNodeType Method "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.flush(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ExplodingInputStream.init(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.CRC.CRC(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(2)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(2)"
CGNodeType Method "org.apache.commons.compress.compressors.ZTestCase.1.{...}"
CGNodeType Method "org.apache.commons.compress.compressors.ZTestCase.getFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.ZTestCase.testZUnarchiveViaAutoDetection(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$302(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames(0)"
CGNodeType Method "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.MemoryArchiveInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.ShortFileException.ShortFileException(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$800(2)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.IOUtilsTest(0)"
CGNodeType Method "org.apache.commons.compress.compressors.bzip2.Rand.rNums(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(4)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.CircularBufferTest.CircularBufferTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveInputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.flush(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArTestCase.XtestExplicitDirectoryEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMaj(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Lister.Lister(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read100KFilesUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$500(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.hashCode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(1)"
CGNodeType Method "org.apache.commons.compress.utils.IOUtilsTest.2.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNULongName(1)"
CGNodeType Method "org.apache.commons.compress.compressors.FramedSnappyTestCase.2.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.Entry.setVersionRequired(1)"
CGNodeType Method "org.apache.commons.compress.DetectArchiverTestCase.DetectArchiverTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getIno(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isCompressed(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.CoderBase.canAcceptOptions(1)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.skip(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeBigStoredEntryToStreamModeAlways(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.putLong(3)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.values(0)"
CGNodeType Method "org.apache.commons.compress.compressors.GZipTestCase.testExtraFlagsFastestCompression(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.TapeInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isNewInode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.compareTo(1)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSet.getChanges(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(1)"
CGNodeType Method "org.apache.commons.compress.utils.CountingOutputStream.close(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(0)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION[].clone(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStream.getCount(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFields(0)"
CGNodeType Method "org.apache.commons.compress.compressors.lzw.LZWInputStream.resetCodeSize(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.putLong(2)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.testTrailers(0)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipParameters.getCompressionLevel(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(0)"
CGNodeType Method "org.apache.commons.compress.utils.CharsetsTest.testUsAscii(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.decode(5)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest.readSimplePaxHeader(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testUnixMode(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setNames(2)"
CGNodeType Method "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readToNull(1)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctal(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.ZipFileIterator(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.TapeInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveEntry.isDirectory(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterSample.writeTo(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.getFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.TestCompressorStreamProvider.TestCompressorStreamProvider(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(2)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamProvider.getOutputStreamArchiveNames(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(0)"
CGNodeType Method "org.apache.commons.compress.archivers.LongPathTest.1.{...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isStarSparse(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipLong.static {...}"
CGNodeType Method "org.apache.commons.compress.archivers.zip.Zip64SupportIT.read5GBOfZerosUsingZipFile(0)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarUtilsTest.checkRoundTripOctal(2)"
CGNodeType Method "org.tukaani.xz.LZMA2Options.getLp(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.ArchiveOutputStreamTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(1)"
CGNodeType Method "org.apache.commons.compress.compressors.z.ZCompressorInputStream.addRepeatOfPreviousCode(0)"
CGNodeType Method "org.apache.commons.compress.utils.Sets.newHashSet(1)"
CGNodeType Method "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.getNextEntry(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.hasNext(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipUtilTest.testLongToBig(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.cleanup(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(1)"
CGNodeType Method "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest.DumpArchiveEntryTest(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ScatterStatistics.toString(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(1)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest.getFile(1)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200Strategy.values(0)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$102(2)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.get(0)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSet.deleteDir(1)"
CGNodeType Method "org.apache.commons.compress.compressors.xz.XZUtilsTestCase.testMatches(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveException.getMessage(0)"
CGNodeType Method "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.shouldThrowExceptionWhenSettingIncorrectPosition(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(1)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(3)"
CGNodeType Method "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testLinkFlagConstructor(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZFile.read(3)"
CGNodeType Method "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.getInputStream(0)"
CGNodeType Method "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest.checkArchiveContent(2)"
CGNodeType Method "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(3)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripNoEFSExplicitUnicodeExtra(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataLength(0)"
CGNodeType Method "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase.MemoryArchiveTestCase(0)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.decode(1)"
CGNodeType Method "org.apache.commons.compress.archivers.zip.StreamCompressor.flushDeflater(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate(0)"
CGNodeType Method "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(3)"
CGNodeType Method "org.apache.commons.compress.archivers.ArchiveStreamProvider.getInputStreamArchiveNames(0)"
CGNodeType Method "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(1)"
CGNodeType Method "org.apache.commons.compress.utils.BitInputStream.clearBitCache(0)"
CGNodeType Method "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.close(0)"
CGNodeType Class "org.apache.commons.compress.archivers.DumpTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.zip.StreamCompressor"
CGNodeType Class "org.apache.commons.compress.archivers.LongPathTest"
CGNodeType Class "org.apache.commons.compress.utils.ServiceLoaderIterator"
CGNodeType Class "org.apache.commons.compress.utils.ArchiveUtils"
CGNodeType Class "org.apache.commons.compress.ChainingTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Folder[]"
CGNodeType Class "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm[]"
CGNodeType Class "org.apache.commons.compress.archivers.arj.ArjArchiveEntry"
CGNodeType Class "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Coder[]"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipFile"
CGNodeType Class "org.apache.commons.compress.IOMethodsTest"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Coders.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipExtraField"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64Mode"
CGNodeType Class "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability[]"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipFileTest"
CGNodeType Class "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException"
CGNodeType Class "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"
CGNodeType Class "org.apache.commons.compress.archivers.Lister"
CGNodeType Class "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS"
CGNodeType Class "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest"
CGNodeType Class "org.apache.commons.compress.compressors.BZip2UtilsTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.zip.StreamCompressorTest"
CGNodeType Class "org.apache.commons.compress.compressors.FileNameUtil"
CGNodeType Class "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException"
CGNodeType Class "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream"
CGNodeType Class "org.apache.commons.compress.compressors.lzma.LZMAUtils"
CGNodeType Class "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect"
CGNodeType Class "long[]"
CGNodeType Class "org.apache.commons.compress.utils.IOUtilsTest.StreamWrapper"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipUtilTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.UnicodePathExtraField"
CGNodeType Class "org.apache.commons.compress.archivers.zip.AsiExtraField"
CGNodeType Class "org.apache.commons.compress.archivers.tar.TarConstants"
CGNodeType Class "org.apache.commons.compress.archivers.dump.InvalidFormatException"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Lister.CommandLine"
CGNodeType Class "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.NioZipEncoding"
CGNodeType Class "org.powermock.api.mockito.PowerMockito"
CGNodeType Class "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest"
CGNodeType Class "org.apache.commons.compress.AbstractTestCase.StreamWrapper"
CGNodeType Class "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest"
CGNodeType Class "org.apache.commons.compress.archivers.dump.Dirent"
CGNodeType Class "org.apache.commons.compress.compressors.ZTestCase.2"
CGNodeType Class "org.apache.commons.compress.compressors.ZTestCase.3"
CGNodeType Class "org.apache.commons.compress.archivers.cpio.CpioUtilTest"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZMethod"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ScatterStatistics"
CGNodeType Class "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"
CGNodeType Class "org.apache.commons.compress.compressors.CompressorOutputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.1"
CGNodeType Class "org.apache.commons.compress.archivers.ArTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest"
CGNodeType Class "byte[]"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE[]"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar"
CGNodeType Class "org.apache.commons.compress.compressors.ZTestCase.1"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.CLI.1"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest"
CGNodeType Class "org.apache.commons.compress.compressors.bzip2.Rand"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT"
CGNodeType Class "org.apache.commons.compress.utils.FlushShieldFilterOutputStream"
CGNodeType Class "org.apache.commons.compress.archivers.TarTestCase"
CGNodeType Class "org.apache.commons.compress.utils.IOUtilsTest.3.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.CircularBufferTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipEightByteInteger"
CGNodeType Class "org.apache.commons.compress.compressors.gzip.GzipUtils"
CGNodeType Class "org.apache.commons.compress.utils.IOUtilsTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipConstants"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.CLI.Mode.1"
CGNodeType Class "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.CLI.Mode.2"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder"
CGNodeType Class "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipEncoding"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry[]"
CGNodeType Class "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry"
CGNodeType Class "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Lister.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64RequiredException"
CGNodeType Class "org.apache.commons.compress.compressors.DetectCompressorTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest"
CGNodeType Class "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data"
CGNodeType Class "org.apache.commons.compress.compressors.bzip2.BlockSortTest"
CGNodeType Class "org.apache.commons.compress.compressors.gzip.GzipParameters"
CGNodeType Class "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect[]"
CGNodeType Class "org.apache.commons.compress.compressors.deflate.DeflateParametersTest"
CGNodeType Class "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator"
CGNodeType Class "org.apache.commons.compress.archivers.tar.TarUtilsTest"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZFile"
CGNodeType Class "org.apache.commons.compress.compressors.xz.XZCompressorInputStreamTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.BinaryTree"
CGNodeType Class "org.apache.commons.compress.utils.IOUtilsTest.2.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"
CGNodeType Class "org.apache.commons.compress.archivers.ArchiveStreamFactory.2"
CGNodeType Class "org.apache.commons.compress.archivers.ArchiveStreamFactory.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE[]"
CGNodeType Class "org.apache.commons.compress.compressors.CompressorException"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipLongTest"
CGNodeType Class "org.tukaani.xz.X86Options"
CGNodeType Class "org.apache.commons.compress.utils.IOUtils"
CGNodeType Class "org.tukaani.xz.FinishableWrapperOutputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField"
CGNodeType Class "org.apache.commons.compress.archivers.tar.SparseFilesTest"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder"
CGNodeType Class "org.apache.commons.compress.archivers.ArchiveStreamProvider"
CGNodeType Class "org.apache.commons.compress.archivers.jar.JarArchiveEntry"
CGNodeType Class "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm"
CGNodeType Class "org.apache.commons.compress.archivers.zip.UnixStat"
CGNodeType Class "org.apache.commons.compress.compressors.ZTestCase"
CGNodeType Class "org.apache.commons.compress.compressors.FramedSnappyTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE[]"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest"
CGNodeType Class "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipEncodingTest"
CGNodeType Class "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes"
CGNodeType Class "org.apache.commons.compress.compressors.bzip2.BlockSort"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Archive"
CGNodeType Class "org.apache.commons.compress.compressors.DeflateTestCase"
CGNodeType Class "org.apache.commons.compress.compressors.pack200.Pack200Utils"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException"
CGNodeType Class "org.apache.commons.compress.archivers.zip.PKWareExtraHeader"
CGNodeType Class "org.apache.commons.compress.archivers.zip.FallbackZipEncoding"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.StreamMap"
CGNodeType Class "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipShort"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.CLI"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveConstants"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder"
CGNodeType Class "org.apache.commons.compress.utils.BitInputStreamTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry"
CGNodeType Class "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19"
CGNodeType Class "org.apache.commons.compress.archivers.ExceptionMessageTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13"
CGNodeType Class "org.apache.commons.compress.utils.CRC32VerifyingInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10"
CGNodeType Class "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore"
CGNodeType Class "org.apache.commons.compress.compressors.BZip2TestCase"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11"
CGNodeType Class "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.arj.LocalFileHeader"
CGNodeType Class "org.apache.commons.compress.archivers.dump.TapeInputStream.1"
CGNodeType Class "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest"
CGNodeType Class "org.apache.commons.compress.archivers.ArchiveStreamFactory"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZFileTest"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION"
CGNodeType Class "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest"
CGNodeType Class "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs"
CGNodeType Class "org.apache.commons.compress.utils.Lists"
CGNodeType Class "org.mockito.stubbing.OngoingStubbing"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveUtil"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Lister"
CGNodeType Class "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature"
CGNodeType Class "org.tukaani.xz.SPARCOptions"
CGNodeType Class "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE"
CGNodeType Class "org.apache.commons.compress.utils.Sets"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ScatterSampleTest"
CGNodeType Class "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField"
CGNodeType Class "org.apache.commons.compress.compressors.xz.XZCompressorInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipUtil"
CGNodeType Class "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream"
CGNodeType Class "org.apache.commons.compress.compressors.deflate.DeflateParameters"
CGNodeType Class "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C"
CGNodeType Class "org.apache.commons.compress.PasswordRequiredException"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.1"
CGNodeType Class "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability[]"
CGNodeType Class "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm[]"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.StartHeader"
CGNodeType Class "org.apache.commons.compress.compressors.z.ZCompressorInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm"
CGNodeType Class "org.apache.commons.compress.compressors.CompressorStreamFactory"
CGNodeType Class "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream"
CGNodeType Class "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.2"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveException"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.CoderBase"
CGNodeType Class "org.apache.commons.compress.utils.Charsets"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.BindPair[]"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.5"
CGNodeType Class "org.tukaani.xz.PowerPCOptions"
CGNodeType Class "org.apache.commons.compress.utils.Iterators"
CGNodeType Class "org.apache.commons.compress.compressors.bzip2.CRC"
CGNodeType Class "org.apache.commons.compress.compressors.pack200.StreamBridge"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ZipOutputTest"
CGNodeType Class "org.apache.commons.compress.archivers.SevenZTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry"
CGNodeType Class "org.apache.commons.compress.archivers.zip.BitStreamTest"
CGNodeType Class "org.apache.commons.compress.compressors.xz.XZUtils"
CGNodeType Class "org.apache.commons.compress.compressors.LZMATestCase"
CGNodeType Class "org.apache.commons.compress.compressors.pack200.Pack200Strategy.2"
CGNodeType Class "org.apache.commons.compress.compressors.pack200.Pack200Strategy.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField"
CGNodeType Class "org.apache.commons.compress.compressors.FramedSnappyTestCase.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.X0014_X509Certificates"
CGNodeType Class "org.apache.commons.compress.compressors.GZipTestCase"
CGNodeType Class "org.apache.commons.compress.utils.CharsetsTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile"
CGNodeType Class "org.apache.commons.compress.archivers.zip.X000A_NTFS"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipEncodingHelper"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64Mode[]"
CGNodeType Class "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData"
CGNodeType Class "int[][]"
CGNodeType Class "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.BinaryTreeTest"
CGNodeType Class "org.apache.commons.compress.archivers.jar.JarArchiveInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.CLI.Mode[]"
CGNodeType Class "org.tukaani.xz.DeltaOptions"
CGNodeType Class "org.apache.commons.compress.compressors.lzw.LZWInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy"
CGNodeType Class "org.apache.commons.compress.compressors.Pack200TestCase"
CGNodeType Class "org.apache.commons.compress.archivers.zip.JarMarker"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.LZMADecoder"
CGNodeType Class "org.apache.commons.compress.utils.BitInputStream"
CGNodeType Class "org.apache.commons.compress.utils.CountingOutputStream[]"
CGNodeType Class "org.apache.commons.compress.compressors.FramedSnappyTestCase.3"
CGNodeType Class "org.apache.commons.compress.compressors.FramedSnappyTestCase.2"
CGNodeType Class "org.apache.commons.compress.archivers.StreamingNotSupportedException"
CGNodeType Class "org.tukaani.xz.ARMOptions"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.NID"
CGNodeType Class "org.apache.commons.compress.archivers.zip.CircularBuffer"
CGNodeType Class "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException"
CGNodeType Class "org.apache.commons.compress.archivers.LongSymLinkTest.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.X7875_NewUnix"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveSummary"
CGNodeType Class "org.tukaani.xz.LZMAInputStream"
CGNodeType Class "org.apache.commons.compress.compressors.pack200.Pack200Strategy[]"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper"
CGNodeType Class "org.apache.commons.compress.archivers.zip.GeneralPurposeBit"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest"
CGNodeType Class "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE"
CGNodeType Class "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream"
CGNodeType Class "org.apache.commons.compress.archivers.tar.TarArchiveEntry"
CGNodeType Class "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData"
CGNodeType Class "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1"
CGNodeType Class "org.apache.commons.compress.parallel.InputStreamSupplier"
CGNodeType Class "int[]"
CGNodeType Class "org.tukaani.xz.LZMA2InputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ExtraFieldUtils"
CGNodeType Class "org.apache.commons.compress.compressors.GzipUtilsTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipMethod[]"
CGNodeType Class "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge"
CGNodeType Class "org.apache.commons.compress.compressors.CompressorInputStream"
CGNodeType Class "org.apache.commons.compress.changes.ChangeSet"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveEntry[]"
CGNodeType Class "org.apache.commons.compress.archivers.cpio.CpioUtil"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2"
CGNodeType Class "org.apache.commons.compress.archivers.tar.TarLister"
CGNodeType Class "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest"
CGNodeType Class "org.apache.commons.compress.archivers.LongPathTest.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest"
CGNodeType Class "org.tukaani.xz.FilterOptions"
CGNodeType Class "org.apache.commons.compress.archivers.dump.ShortFileException"
CGNodeType Class "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags"
CGNodeType Class "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator"
CGNodeType Class "org.apache.commons.compress.archivers.arj.MainHeader"
CGNodeType Class "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ScatterSample"
CGNodeType Class "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Coder"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder"
CGNodeType Class "org.apache.commons.compress.compressors.xz.XZUtilsTestCase"
CGNodeType Class "org.tukaani.xz.UnsupportedOptionsException"
CGNodeType Class "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream"
CGNodeType Class "org.tukaani.xz.LZMAOutputStream"
CGNodeType Class "org.apache.commons.compress.archivers.ArchiveOutputStream"
CGNodeType Class "org.tukaani.xz.XZ"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding"
CGNodeType Class "org.apache.commons.compress.parallel.ScatterGatherBackingStore"
CGNodeType Class "org.apache.commons.compress.compressors.pack200.Pack200Strategy"
CGNodeType Class "org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier"
CGNodeType Class "org.apache.commons.compress.AbstractTestCase"
CGNodeType Class "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest"
CGNodeType Class "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge"
CGNodeType Class "org.apache.commons.compress.ArchiveReadTest.1"
CGNodeType Class "org.apache.commons.compress.compressors.CompressorStreamProvider"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest"
CGNodeType Class "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest"
CGNodeType Class "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipShortTest"
CGNodeType Class "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.JarTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.BindPair"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest"
CGNodeType Class "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data"
CGNodeType Class "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream"
CGNodeType Class "char[][]"
CGNodeType Class "org.apache.commons.compress.DetectArchiverTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Folder"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"
CGNodeType Class "org.tukaani.xz.LZMA2Options"
CGNodeType Class "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"
CGNodeType Class "org.apache.commons.compress.changes.ChangeSetTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.ArchiveInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION[]"
CGNodeType Class "org.tukaani.xz.SingleXZInputStream"
CGNodeType Class "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData[]"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZMethod[]"
CGNodeType Class "org.apache.commons.compress.ArchiveReadTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest"
CGNodeType Class "org.tukaani.xz.XZInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.cpio.CpioConstants"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.X000A_NTFSTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipLong"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1"
CGNodeType Class "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor"
CGNodeType Class "org.apache.commons.compress.archivers.tar.TarUtils.1"
CGNodeType Class "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder"
CGNodeType Class "org.apache.commons.compress.utils.CountingInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2"
CGNodeType Class "org.apache.commons.compress.archivers.tar.TarUtils"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ExplodeSupportTest"
CGNodeType Class "boolean[]"
CGNodeType Class "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp"
CGNodeType Class "org.apache.commons.compress.compressors.CompressorStreamFactory.1"
CGNodeType Class "org.apache.commons.compress.compressors.CompressorStreamFactory.2"
CGNodeType Class "org.tukaani.xz.ARMThumbOptions"
CGNodeType Class "org.apache.commons.compress.archivers.tar.TarArchiveInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier"
CGNodeType Class "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder"
CGNodeType Class "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability"
CGNodeType Class "org.apache.commons.compress.utils.IOUtilsTest.2"
CGNodeType Class "org.apache.commons.compress.utils.IOUtilsTest.3"
CGNodeType Class "org.apache.commons.compress.utils.IOUtilsTest.4"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest"
CGNodeType Class "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream"
CGNodeType Class "org.apache.commons.compress.utils.IOUtilsTest.1"
CGNodeType Class "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest"
CGNodeType Class "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData"
CGNodeType Class "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE"
CGNodeType Class "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest"
CGNodeType Class "org.apache.commons.compress.utils.CharsetNames"
CGNodeType Class "org.apache.commons.compress.archivers.ArchiveOutputStreamTest"
CGNodeType Class "junit.framework.AssertionFailedError"
CGNodeType Class "org.apache.commons.compress.compressors.bzip2.BZip2Utils"
CGNodeType Class "org.apache.commons.compress.utils.SeekableInMemoryByteChannel"
CGNodeType Class "org.apache.commons.compress.archivers.CpioTestCase"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipExtraField[]"
CGNodeType Class "org.apache.commons.compress.compressors.CompressorServiceLoaderTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry"
CGNodeType Class "org.apache.commons.compress.ArchiveUtilsTest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
CGNodeType Class "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipFile.1"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipFile.2"
CGNodeType Class "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipFile.3"
CGNodeType Class "org.apache.commons.compress.utils.CountingStreamTest"
CGNodeType Class "org.apache.commons.compress.archivers.LongSymLinkTest"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile"
CGNodeType Class "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest"
CGNodeType Class "org.apache.commons.compress.archivers.arj.MainHeader.Flags"
CGNodeType Class "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData[]"
CGNodeType Class "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest"
CGNodeType Class "org.apache.commons.compress.changes.ChangeSetResults"
CGNodeType Class "org.apache.commons.compress.archivers.ArchiveException"
CGNodeType Class "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.CLI.Mode"
CGNodeType Class "org.apache.commons.compress.utils.ChecksumVerifyingInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.Coders"
CGNodeType Class "org.apache.commons.compress.archivers.TestArchiveStreamProvider"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveEntry"
CGNodeType Class "org.apache.commons.compress.changes.ChangeSetPerformer"
CGNodeType Class "org.apache.commons.compress.archivers.tar.TarArchiveEntry[]"
CGNodeType Class "org.apache.commons.compress.archivers.dump.TapeInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipMethod"
CGNodeType Class "org.apache.commons.compress.changes.Change"
CGNodeType Class "org.apache.commons.compress.compressors.bzip2.BZip2Constants"
CGNodeType Class "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ExplodingInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.ar.ArArchiveInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.ArchiveEntry"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest"
CGNodeType Class "org.apache.commons.compress.archivers.zip.BitStream"
CGNodeType Class "org.apache.commons.compress.archivers.ZipTestCase.1"
CGNodeType Class "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator"
CGNodeType Class "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream"
CGNodeType Class "org.apache.commons.compress.archivers.sevenz.DeltaDecoder"
CGNodeType Class "org.apache.commons.compress.compressors.XZTestCase"
CGNodeType Class "org.apache.commons.compress.utils.BoundedInputStream"
CGNodeType Class "short[]"
CGNodeType Class "org.apache.commons.compress.utils.CountingOutputStream"
CGNodeType Class "org.apache.commons.compress.archivers.tar.BigFilesIT"
CGNodeType Class "org.apache.commons.compress.compressors.TestCompressorStreamProvider"
CGNodeType Class "char[]"
CGNodeType Class "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1"
CGNodeType Class "org.mockito.Mockito"
CGNodeType Class "org.tukaani.xz.IA64Options"
CGNodeType Class "org.apache.commons.compress.archivers.ZipTestCase"
CGNodeType Class "org.powermock.api.mockito.expectation.ConstructorExpectationSetup"
CGNodeType Class "org.apache.commons.compress.archivers.ar.ArArchiveEntry"
CGNodeType Class "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator"
CGNodeType Class "org.tukaani.xz.XZOutputStream"
CGNodeType Class "byte[][]"
CGNodeType Class "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry"
CGNodeType Field "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.out"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.SKIP_KEY"
CGNodeType Field "org.apache.commons.compress.compressors.deflate.DeflateParameters.zlibHeader"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.$VALUES"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.UNAMELEN"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.checkSumOK"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.fileSpecPosition"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipConstants.INITIAL_VERSION"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZFile.password"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.POS_1"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest.dir"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kAdditionalStreamsInfo"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.POS_0"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.POS_3"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZFile.fileName"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.POS_2"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.3.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.headerSize"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.APPLE_GS"
CGNodeType Field "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.bytesRemaining"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.EURO_FOR_DOLLAR_TXT"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderOffset"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TESTS"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEncodingTest.BAD_STRING_ENC"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.decompressConcatenated"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExplodingInputStream.bits"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.BUFFER_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.AsiExtraField.uid"
CGNodeType Field "org.apache.commons.compress.archivers.LongPathTest.file"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_FILENAME_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X7875_NewUnix.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.UNKNOWN_CODE"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.PRIMOS"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.CTIMELEN_XSTAR"
CGNodeType Field "org.apache.commons.compress.archivers.dump.InvalidFormatException.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_7"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.ATIMELEN_XSTAR"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_5"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Folder.packedStreams"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.DOS"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_6"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.PLATFORM_UNIX"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_3"
CGNodeType Field "org.apache.commons.compress.compressors.FileNameUtil.shortestCompressedSuffix"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_4"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_1"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_2"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes.SEVEN_BIT_TEXT"
CGNodeType Field "org.apache.commons.compress.archivers.zip.AsiExtraField.WORD"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterStatistics.mergingElapsed"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userName"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_1_SHIFT"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalCountingStreams"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsBuff"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_ch2"
CGNodeType Field "org.apache.commons.compress.ArchiveUtilsTest.byteTest"
CGNodeType Field "org.apache.commons.compress.changes.Change.TYPE_DELETE_DIR"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finished"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_TRUNCATE"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currName"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.streamBridge"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.unicode"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.crc"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.firstrec"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.wordBuf"
CGNodeType Field "org.apache.commons.compress.utils.IOUtilsTest.4.idx"
CGNodeType Field "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.data"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.CRC32"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.SIGNATURE_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.ZIP64_EOCDL_LENGTH"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_6_SHIFT"
CGNodeType Field "org.apache.commons.compress.compressors.FileNameUtil.compressSuffix"
CGNodeType Field "org.apache.commons.compress.compressors.FileNameUtil.uncompressSuffix"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64RequiredException.TOO_MANY_ENTRIES_MESSAGE"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.DUMP_DEFAULT"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.min"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags.BACKUP"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finished"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.def"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.expectedChecksum"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.CoderBase.NONE"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.bytesRemaining"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.JAR_DEFAULT"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.SPARSELEN_GNU_SPARSE"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.MILLIS_PER_SECOND"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryEOF"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorInputStream.bytesRead"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Archive.packCrcsDefined"
CGNodeType Field "org.apache.commons.compress.utils.BitInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_FILENAME_LENGTH_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closed"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.nlink"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.$assertionsDisabled"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.CPIO_DEFAULT"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf"
CGNodeType Field "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.concat"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.dialect"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_ORIGINAL_SIZE_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA1"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.VERSION_POSIX"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.CREATE_TIME_BIT"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_PAX_EXTENDED_HEADER_LC"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveInputStream.BYTE_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.LINK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_1_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor.raf"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mode"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.algId"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.out"
CGNodeType Field "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.channel"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entryFormat"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit2_createTimePresent"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.DEFAULT_BLKSIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.useUTF8Flag"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended"
CGNodeType Field "org.apache.commons.compress.utils.Charsets.UTF_16"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_GPB_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.rcount"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_ASCII"
CGNodeType Field "org.apache.commons.compress.archivers.zip.BinaryTree.tree"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.recipientKeyHash"
CGNodeType Field "org.apache.commons.compress.utils.CharsetNames.ISO_8859_1"
CGNodeType Field "org.apache.commons.compress.compressors.FramedSnappyTestCase.3.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.Flags.ARJPROT"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.tt"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.charsetName"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA384"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.LZO"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE_SORTED"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit1_accessTimePresent"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kEnd"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipParameters.filename"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveEntry.userId"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.val$iss"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarUtils.DEFAULT_ENCODING"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_COMMENT_LENGTH_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.SMALL_BUFFER_SIZE"
CGNodeType Field "org.apache.commons.compress.compressors.DetectCompressorTestCase.tests"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.in"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.seqToUnseq"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.RIPEND160"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.1.val$inflater"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFileTest.zf"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.MAX_UNSKIPPABLE_TYPE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ino"
CGNodeType Field "org.apache.commons.compress.archivers.dump.Dirent.ino"
CGNodeType Field "org.apache.commons.compress.utils.CharsetNames.UTF_8"
CGNodeType Field "org.apache.commons.compress.compressors.z.ZCompressorInputStream.blockMode"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selector"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE_BWT"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.LBLSIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EMPTY"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.compressedCrc32"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR"
CGNodeType Field "org.apache.commons.compress.compressors.ZTestCase.3.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.input"
CGNodeType Field "org.apache.commons.compress.compressors.deflate.DeflateParameters.compressionLevel"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.CAFE_DOOD"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_UTF8"
CGNodeType Field "org.apache.commons.compress.archivers.ZipTestCase.dir"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.ROOT"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsLive"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.$VALUES"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MAGIC_SHORT"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.ino"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.minLens"
CGNodeType Field "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.out"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUTF8"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.MODIFY_TIME_BIT"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2Constants.BASEBLOCKSIZE"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeModified"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveOutputStream.oneByte"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.aLocal"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.format"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSize"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.MODTIMELEN"
CGNodeType Field "org.apache.commons.compress.archivers.dump.TapeInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.filesize"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasAccessDate"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.localData"
CGNodeType Field "org.apache.commons.compress.utils.CharsetNames.UTF_16BE"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.properties"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveEntry.mode"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.tmp"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_PAX_EXTENDED_HEADER_UC"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.compressedSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.es"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Archive.folders"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readIdx"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarUtils.BYTE_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.dump.Dirent.name"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.SIG_LENGTH"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA"
CGNodeType Field "org.apache.commons.compress.compressors.GZipTestCase.dir"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_2_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.MAX_BUF_LEN"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entrySize"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.endReached"
CGNodeType Field "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2c"
CGNodeType Field "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2d"
CGNodeType Field "org.apache.commons.compress.PasswordRequiredException.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.blockSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.comment"
CGNodeType Field "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2a"
CGNodeType Field "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2b"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRIES"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.uncompressedBytesRemaining"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.minVersionToExtract"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.$VALUES"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.dummy"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryBytesRead"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kATime"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExplodingInputStream.lengthTree"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderIndex"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.simpleName"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$archiveName"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.17.val$knownSize"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.Flags.BACKUP"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_LFH_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Lister.CommandLine.useStream"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_1"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_2"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_3"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_4"
CGNodeType Field "org.apache.commons.compress.archivers.ZipTestCase.first_payload"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.ftab"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entry"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coder.numInStreams"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_FIFO"
CGNodeType Field "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.checksum"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.DATA"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.encoding"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.OS"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_6_MASK"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.ll8"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.namebuffer"
CGNodeType Field "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.NAIVE_RESIZE_LIMIT"
CGNodeType Field "org.apache.commons.compress.utils.Charsets.US_ASCII"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileType"
CGNodeType Field "org.apache.commons.compress.archivers.zip.BinaryTree.UNDEFINED"
CGNodeType Field "org.apache.commons.compress.archivers.zip.JarMarker.NULL"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_NEW"
CGNodeType Field "org.apache.commons.compress.archivers.zip.JarMarker.NO_BYTES"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IRUSR"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write100KFilesModeNever"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.limit"
CGNodeType Field "org.apache.commons.compress.utils.CountingOutputStream.out"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveException.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.xf"
CGNodeType Field "org.apache.commons.compress.utils.ServiceLoaderIterator.serviceLoaderIterator"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.NEXT"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.ATARI_ST"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZFile.channel"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.method"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.zipEncoding"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X000A_NTFS.EPOCH_OFFSET"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.writeIndex"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.reason"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnixStat.DEFAULT_LINK_PERM"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_INTERNAL_ATTRIBUTES_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.zipArchiveEntry"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DELTA_FILTER"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.crc"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.permissions"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ONE_MILLION"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.uid"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.id"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.creationDate"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest.compressorName"
CGNodeType Field "org.apache.commons.compress.archivers.zip.AsiExtraField.crc"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.target"
CGNodeType Field "org.apache.commons.compress.archivers.ExceptionMessageTest.ARCHIVER_NULL_MESSAGE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rTPos"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstPackStreamIndex"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fac"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.SHORT_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_GNUTYPE_SPARSE"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderCrc"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.nextArtificalDeviceAndInode"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.name"
CGNodeType Field "org.apache.commons.compress.AbstractTestCase.archive"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.arjFlags2"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.MAX_TIME_SECONDS"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_4_SHIFT"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.longFileMode"
CGNodeType Field "org.apache.commons.compress.compressors.lzw.LZWInputStream.clearCode"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ONE"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETUID"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kSubStreamsInfo"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.SOCKET"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.generateMTFValues_yy"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.DISK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.CircularBuffer.size"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISCHR"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.WHITEOUT"
CGNodeType Field "org.apache.commons.compress.archivers.ExceptionMessageTest.INPUTSTREAM_NULL_MESSAGE"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.UNIX"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IWOTH"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.inUse"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.compressorOutputStreamProviders"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$in"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.StreamMap.fileFolderIndex"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.val$mode"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$coder"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.val$za"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.TripleDES168"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExplodingInputStream.minimumMatchLength"
CGNodeType Field "org.apache.commons.compress.utils.CharsetNames.US_ASCII"
CGNodeType Field "org.apache.commons.compress.archivers.dump.InvalidFormatException.offset"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kEncodedHeader"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.BLOCK_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZERO"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.code"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.name"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeAccessed"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.val$payloadBytes"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_GNU"
CGNodeType Field "org.apache.commons.compress.DetectArchiverTestCase.factory"
CGNodeType Field "org.apache.commons.compress.AbstractTestCase.dir"
CGNodeType Field "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.in"
CGNodeType Field "org.apache.commons.compress.ArchiveReadTest.file"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.INCS"
CGNodeType Field "org.apache.commons.compress.archivers.zip.AsiExtraField.link"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.volume"
CGNodeType Field "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.jarMarkerAdded"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem"
CGNodeType Field "org.apache.commons.compress.compressors.TestCompressorStreamProvider.InvocationConfirmationException.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.utils.IOUtilsTest.3.1.val$toWrap"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.comment"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_DISK_NUMBER_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.HEADER_ID"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.originalInput"
CGNodeType Field "org.apache.commons.compress.archivers.ZipTestCase.second_payload"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.prevEntry"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.mtfFreq"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipUtilTest.time"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.encoding"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.19.val$knownSize"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentInputStream"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Lister.CommandLine.archive"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.ASCII_TXT"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_READ"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.DIRECTORY"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Folder.numUnpackSubStreams"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.rawCentralDirectoryData"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveOutputStreamProviders"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_GNUTYPE_LONGNAME"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.longFileMode"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.firstAttempt"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.startedAt"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.AMIGA"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.origPtr"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Lister.CommandLine.encoding"
CGNodeType Field "org.apache.commons.compress.archivers.zip.FallbackZipEncoding.charsetName"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.UNRECOGNIZED_HEADER"
CGNodeType Field "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.out"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coders.CODER_MAP"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_VERSION_NEEDED_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.BinaryTree.NODE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.AsiExtraField.dirFlag"
CGNodeType Field "org.apache.commons.compress.compressors.lzw.LZWInputStream.prefixes"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.size"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.RC4"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.keyBlob"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_GNU"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sfmap"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.RC2"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCrc"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.maj"
CGNodeType Field "org.apache.commons.compress.archivers.zip.CircularBuffer.readIndex"
CGNodeType Field "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.in"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.13.val$knownSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.DD_SIG"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.2.this$0"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selectorMtf"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.quadrant"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.ZIP"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.minVersionToExtract"
CGNodeType Field "org.apache.commons.compress.compressors.lzw.LZWInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.NO_DATA_NO_CRC"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_2"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_3"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_1"
CGNodeType Field "org.apache.commons.compress.archivers.zip.StreamCompressor.DEFLATER_BLOCK_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.ZIP_DEFAULT"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.remaining"
CGNodeType Field "org.apache.commons.compress.archivers.StreamingNotSupportedException.format"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.hashAlg"
CGNodeType Field "org.apache.commons.compress.utils.IOUtilsTest.2.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.shortBuf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.streams"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Archive.packCrcs"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.15.val$knownSize"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coders.1.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.mainHeader"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISGID"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.3.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.STORED"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemBuf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.entry"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.crc"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.unpackSizes"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.zipEncoding"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockCRC"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kNumUnpackStream"
CGNodeType Field "org.apache.commons.compress.changes.Change.type"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.VERSIONLEN"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Lister.CommandLine.dir"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.MODELEN"
CGNodeType Field "org.apache.commons.compress.changes.ChangeSetPerformer.changes"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSize100k"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.zipEncoding"
CGNodeType Field "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.filenames"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.unseqToSeq"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.backingStore"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.CTIMELEN_GNU"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO"
CGNodeType Field "org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded"
CGNodeType Field "org.apache.commons.compress.archivers.LongSymLinkTest.factory"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.archiveSize"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_7_START"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_ALPHA_SIZE"
CGNodeType Field "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.$VALUES"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.name"
CGNodeType Field "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.os"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.twoBytesBuf"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflateBuffer"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.arjFlags"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressConcatenated"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_OLD_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.content"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummyByte"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.LZMA"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.haveUnclosedEntry"
CGNodeType Field "org.apache.commons.compress.archivers.LongPathTest.ARCDIR"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.archiverVersionNumber"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedBlockCRC"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.TAG_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.codeToEnum"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.reserved"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.vData"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2Constants.N_GROUPS"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.8.val$knownSize"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.MAGIC_OLD_BINARY"
CGNodeType Field "org.apache.commons.compress.changes.ChangeSet.changes"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.zipArchiveEntryRequest"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.is"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_chPrev"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISLNK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Folder.hasCrc"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_2_START"
CGNodeType Field "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.val$mode"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.ARJ"
CGNodeType Field "org.apache.commons.compress.archivers.zip.StreamCompressor.sourcePayloadLength"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.decompressConcatenated"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveEntry.groupId"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_EXEC"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.DEPTH_THRESH"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.dateTimeCreated"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.CPIO_TRAILER"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.FORMAT_POSIX"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.recvDecodingTables_pos"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.filepos"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UCOM_ID"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.ENCRYPTION"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.STANDARD"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.bitlen"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.$VALUES"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.nameBuf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterStatistics.compressionElapsed"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.summary"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnixStat.DEFAULT_FILE_PERM"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.decompressUntilEOF"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.JAR"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_VERSION_NEEDED_OFFSET"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.bz2Channel"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.SPLITTING"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.archiverVersionNumber"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.loc"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.entries"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.LONGFILE_BSD"
CGNodeType Field "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasCompressionLevelChanged"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.TripleDES192"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.lastModifiedDate"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.val$payloadBytes"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.bytesReadFromStream"
CGNodeType Field "org.apache.commons.compress.utils.BitInputStream.bitsCached"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.alignmentBoundary"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.PADDING_CHUNK_TYPE"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.OS_2"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.CPIO"
CGNodeType Field "org.apache.commons.compress.archivers.SevenZTestCase.$assertionsDisabled"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_SYMLINK"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.name"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.localDataStart"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.crc"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.MAGIC_NEW"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X7875_NewUnix.HEADER_ID"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.backingStoreSupplier"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.VERSION_GNU_ZERO"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kCTime"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues2_pos"
CGNodeType Field "org.apache.commons.compress.archivers.LongSymLinkTest.FILELIST"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_FILENAME_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_z"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedCrc"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lastStoredEntry"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kEmptyStream"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.method"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.VERSION_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel"
CGNodeType Field "org.apache.commons.compress.compressors.xz.XZUtils.fileNameUtil"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.val$mode"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.NIBLET_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.BindPair.inIndex"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.rcount"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.9.val$knownSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.checksumWithCompressedChunks"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IWGRP"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMinor"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.implementations"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalCrc32"
CGNodeType Field "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.DONT_CACHE"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.originalOutput"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEncodingTest.BAD_STRING"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEncodingTest.UNENC_STRING"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_EXTRA_LENGTH_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.mode"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.erdData"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.NUMITEMS"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.StreamBridge.input"
CGNodeType Field "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_SET_ASCII"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_SIG"
CGNodeType Field "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.fileName"
CGNodeType Field "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.CSIZE"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes.BINARY"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.isUsed"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.hasHitEOF"
CGNodeType Field "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.target"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.Pack200Strategy.$VALUES"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.ENHANCED_DEFLATED"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.compressorInputStreamProviders"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.hostOS"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.cdata"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.BZLIB"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finished"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.hasCrc"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.val$zipArchiveEntryRequest"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.hitCentralDirectory"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.queue"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkName"
CGNodeType Field "org.apache.commons.compress.utils.BoundedInputStream.bytesRemaining"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.MAGIC_NEW_CRC"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.useUnicodeExtraFields"
CGNodeType Field "org.apache.commons.compress.archivers.zip.AsiExtraField.mode"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.name"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.uid"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.AES256SHA256"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.encoding"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.DEVLEN"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipParameters.modificationTime"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.ivData"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.streamCompressor"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EFS_FLAG"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kCodersUnpackSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LZERO"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.BIGNUMBER_STAR"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current"
CGNodeType Field "org.apache.commons.compress.utils.IOUtilsTest.4.val$source"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflater"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.VERSION_ANT"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.TWO_EXP_32"
CGNodeType Field "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.nestedEnum"
CGNodeType Field "org.apache.commons.compress.utils.BitInputStream.MASKS"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.data"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.allowableBlockSize"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coder.numOutStreams"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.dir"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.OFS_MAGIC"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.codeToEnum"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.PAD2LEN_GNU"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.OIL_BARREL_TXT"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.code"
CGNodeType Field "org.apache.commons.compress.compressors.z.ZCompressorInputStream.maxCodeSize"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.Flags.SECURED"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.last"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedCombinedCRC"
CGNodeType Field "org.apache.commons.compress.archivers.TarTestCase.dir"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.$assertionsDisabled"
CGNodeType Field "org.apache.commons.compress.compressors.z.ZCompressorInputStream.totalCodesRead"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.previousDumpDate"
CGNodeType Field "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.entryNames"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.PLATFORM_FAT"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_6_START"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.heap"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.hostOS"
CGNodeType Field "org.apache.commons.compress.utils.Charsets.UTF_8"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kFolder"
CGNodeType Field "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.slidingDictionarySize"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.oneByte"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.centralData"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MAGIC"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currSize"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.runLength"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.archive"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.18.val$knownSize"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.magic"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ARJ_MAGIC_1"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ARJ_MAGIC_2"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.val$zipArchiveEntryRequestSupplier"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.NAMELEN"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH_LEN"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_1_START"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedSize"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.atime"
CGNodeType Field "org.apache.commons.compress.compressors.DetectCompressorTestCase.factorySetFalse"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DD_SIG"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.centralData"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.currentChar"
CGNodeType Field "org.apache.commons.compress.compressors.lzw.LZWInputStream.UNUSED_PREFIX"
CGNodeType Field "org.apache.commons.compress.ArchiveUtilsTest.bytesToTest"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.WIN32"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.encoding"
CGNodeType Field "org.apache.commons.compress.compressors.ZTestCase.1.this$0"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.eclass"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.value"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.currentCompressedChunk"
CGNodeType Field "org.apache.commons.compress.compressors.lzma.LZMAUtils.fileNameUtil"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_BLK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawFlag"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_READ"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId"
CGNodeType Field "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sentMTFValues4_inUse16"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.ENTRIES"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.BindPair.outIndex"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasWindowsAttributes"
CGNodeType Field "org.apache.commons.compress.compressors.FileNameUtil.shortestUncompressedSuffix"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IXOTH"
CGNodeType Field "org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStack"
CGNodeType Field "org.apache.commons.compress.compressors.lzma.LZMAUtils.cachedLZMAAvailability"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_cost"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.headerId"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.closed"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.entriesRead"
CGNodeType Field "org.apache.commons.compress.archivers.LongPathTest.CLASSLOADER"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_TIME_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.SHORT_SHIFT"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.DUMP_SIGNATURE_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.LFH_OFFSET_FOR_FILENAME_LENGTH"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_NEW_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.INODE"
CGNodeType Field "org.apache.commons.compress.archivers.Lister.factory"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.FORMAT_OLDGNU"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Folder.totalInputStreams"
CGNodeType Field "org.apache.commons.compress.utils.Charsets.UTF_16LE"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.NO_DATA"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_3_START"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.Entry.offsetEntry"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DEFAULT_COMPRESSION"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveOutputStream.bytesWritten"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveEntry.name"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LONGNAMESLEN_GNU"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.rcount"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY_SET_UTF8"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.hasHitEOF"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCreationDate"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.DD"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags.VOLUME"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.hashAlg"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_CONTIG"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISSOCK"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_4_START"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_WRITE"
CGNodeType Field "org.apache.commons.compress.compressors.lzw.LZWInputStream.oneByte"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_COMPRESSED_SIZE_OFFSET"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_bigDone"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coder.properties"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipShort.BYTE_1_MASK"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.TRUNCATED_DATA"
CGNodeType Field "org.apache.commons.compress.compressors.FileNameUtil.longestCompressedSuffix"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_METHOD_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_EXTRA_LENGTH_OFFSET"
CGNodeType Field "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.in"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.MAX_SKIPPABLE_TYPE"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeLength"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveOutputStreamTest.factory"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.payloadSupplier"
CGNodeType Field "org.apache.commons.compress.utils.Charsets.UTF_16BE"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.realSize"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISDIR"
CGNodeType Field "org.apache.commons.compress.utils.CharsetNames.UTF_16LE"
CGNodeType Field "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.inflater"
CGNodeType Field "org.apache.commons.compress.compressors.FramedSnappyTestCase.1.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderInputStream"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_LINK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnixStat.DEFAULT_DIR_PERM"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveException.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.CRC.globalCrc"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.comment"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.PPMD"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.LFH_MUST_HAVE_BOTH_SIZES_MSG"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.SINGLE_SEGMENT_SPLIT_MARKER"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ctime"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.volume"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size"
CGNodeType Field "org.apache.commons.compress.archivers.dump.TapeInputStream.bytesRead"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.UNKNOWN"
CGNodeType Field "org.apache.commons.compress.archivers.dump.Dirent.parentIno"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.encryptionVersion"
CGNodeType Field "org.apache.commons.compress.changes.Change.input"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISUID"
CGNodeType Field "org.apache.commons.compress.utils.CountingInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.DATA_DESCRIPTOR_FLAG"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.level"
CGNodeType Field "org.apache.commons.compress.archivers.dump.TapeInputStream.currBlkIdx"
CGNodeType Field "org.apache.commons.compress.archivers.dump.ShortFileException.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MIN_VERSION"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.AED_SIG"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.out"
CGNodeType Field "org.apache.commons.compress.compressors.FramedSnappyTestCase.dir"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.computedBlockCRC"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.isClosed"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_POSIX"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.name"
CGNodeType Field "org.apache.commons.compress.compressors.z.ZCompressorInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Archive.files"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.ZIP64_EOCDL_LOCATOR_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.type"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_tPos"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CFH_LEN"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.blockSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA512"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordBuf"
CGNodeType Field "org.apache.commons.compress.utils.IOUtils.COPY_BUF_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Folder.bindPairs"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.DEFLATED"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.FORMAT_XSTAR"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DEFLATED"
CGNodeType Field "org.apache.commons.compress.changes.Change.entry"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.archiveName"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.CHRDEV"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.name"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.FIVE_BILLION"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.hashSize"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.devname"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnixStat.DIR_FLAG"
CGNodeType Field "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.bs"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipUtilTest.zl"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.val$knownSize"
CGNodeType Field "org.apache.commons.compress.utils.ServiceLoaderIterator.nextServiceLoader"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.NAMELEN"
CGNodeType Field "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_UNAVAILABLE"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentLocalFileHeader"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.ADDR"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.CHECKSUM"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.causedUseOfZip64"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.buf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.key"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kAnti"
CGNodeType Field "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.parameters"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_4_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.PREFIXLEN"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.CFH_LEN"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.BIGNUMBER_ERROR"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.HIGH_DENSITY_NTREC"
CGNodeType Field "org.apache.commons.compress.archivers.zip.CircularBuffer.buffer"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.out"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISFIFO"
CGNodeType Field "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.numberOfShannonFanoTrees"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.generation"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CRC_UNKNOWN"
CGNodeType Field "org.apache.commons.compress.ArchiveReadTest.CLASSLOADER"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.closed"
CGNodeType Field "org.apache.commons.compress.utils.IOUtilsTest.2.1.this$1"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.GIDLEN"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.MD5"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.max"
CGNodeType Field "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.S_IFMT"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit0_modifyTimePresent"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.OFF"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.MIN_UNSKIPPABLE_TYPE"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.base"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_ANT"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.flags"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.ISEXTENDEDLEN_GNU_SPARSE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipConstants.DWORD"
CGNodeType Field "org.apache.commons.compress.utils.BitInputStream.bitsCachedSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.WORD"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nMTF"
CGNodeType Field "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.nameCRC32"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstFileIndex"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kMainStreamsInfo"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_OLD_ASCII"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_0_START"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.currentOutputStream"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ZLIB"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closed"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.encoding"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.3.this$0"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.FALLBACK_QSORT_SMALL_THRESH"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_CRC_OFFSET"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.weight"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.OFFSETLEN_GNU"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mtime"
CGNodeType Field "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.UFT8_NAMES_FLAG"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.offset"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.SINGLETON"
CGNodeType Field "org.apache.commons.compress.archivers.zip.StreamCompressor.writtenToOutputStreamForLastEntry"
CGNodeType Field "org.apache.commons.compress.AbstractTestCase.factory"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileAccessMode"
CGNodeType Field "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.ENCRYPTION_FLAG"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_code"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.code"
CGNodeType Field "org.apache.commons.compress.archivers.zip.StreamCompressor.def"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.comment"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_5_START"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest.X7875"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kPackInfo"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsWritten"
CGNodeType Field "org.tukaani.xz.XZ.HEADER_MAGIC"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.MAGICLEN"
CGNodeType Field "org.apache.commons.compress.utils.IOUtilsTest.1.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.buffer"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.reserved"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemLen"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_runningOrder"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.SETMASK"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.AR"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.tmpDir"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.RC2pre52"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IWUSR"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.StreamBridge.inputLock"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.6.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExplodingInputStream.buffer"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.bytesRead"
CGNodeType Field "org.apache.commons.compress.compressors.lzw.LZWInputStream.tableSize"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.out"
CGNodeType Field "org.apache.commons.compress.archivers.jar.JarArchiveEntry.manifestAttributes"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.dwordBbuf"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closed"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_7_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.ATIMELEN_GNU"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_XSTAR"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsBuff"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.DATE_FORMAT"
CGNodeType Field "org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCodeFirstChar"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DEFAULT_ENCODING"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.holes"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipConstants.WORD"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnixStat.PERM_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedFilePosition"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.Flags.GARBLED"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.HEX_DIGITS"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.BZIP2"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES128"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterSample.dirs"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IXGRP"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.4.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.gid"
CGNodeType Field "org.apache.commons.compress.archivers.SevenZTestCase.dir"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.accessDate"
CGNodeType Field "org.apache.commons.compress.archivers.memory.MemoryArchiveEntry.name"
CGNodeType Field "org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCode"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.COMPRESSED_MOST"
CGNodeType Field "org.apache.commons.compress.utils.IOUtils.SKIP_BUF_SIZE"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipParameters.compressionLevel"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.size"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyBuffer"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.MAX_BLOCKSIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_5_SHIFT"
CGNodeType Field "org.apache.commons.compress.compressors.lzw.LZWInputStream.codeSize"
CGNodeType Field "org.apache.commons.compress.archivers.jar.JarArchiveEntry.certificates"
CGNodeType Field "org.apache.commons.compress.compressors.DetectCompressorTestCase.factoryTrue"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.val$za"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.UIDLEN"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.idBuf"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.file"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Archive.subStreamsInfo"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.gid"
CGNodeType Field "org.apache.commons.compress.IOMethodsTest.byteTest"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_CHR"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.dumpDate"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.value"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.WIN95"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X7875_NewUnix.version"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsLive"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.FNAME"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.dir"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Archive.packPos"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.zipEncoding"
CGNodeType Field "org.apache.commons.compress.changes.Change.TYPE_MOVE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coder.decompressionMethodId"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExplodingInputStream.literalTree"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_GNUTYPE_LONGLINK"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.fmap"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.END"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.Flags.PATHSYM"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.name"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.ZIP64_MAGIC"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.crc"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.SKIP"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Folder.coders"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.temp_charArray2d"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_THUMB_FILTER"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_EXEC"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.arjFlags"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.BUF_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kMTime"
CGNodeType Field "org.apache.commons.compress.compressors.FileNameUtil.defaultExtension"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.GNU_LONGLINK"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.contentMethods"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarUtils.FALLBACK_ENCODING"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.headerOffset"
CGNodeType Field "org.apache.commons.compress.compressors.z.ZCompressorInputStream.MAGIC_2"
CGNodeType Field "org.apache.commons.compress.compressors.z.ZCompressorInputStream.MAGIC_1"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PATTERN"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.Rand.RNUMS"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_CODE_LEN"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.ZERO_TIME"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.streamIdentifier"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.crc"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBuf"
CGNodeType Field "org.apache.commons.compress.changes.Change.TYPE_DELETE"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.options"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.unzftab"
CGNodeType Field "org.apache.commons.compress.archivers.DumpTestCase.dir"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.highChars"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.ARJ_DEFAULT"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readIndex"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.$VALUES"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.out"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.calendarInstance"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.ntrec"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64Mode.Never"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.entryOffset"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveEntry.TRAILER"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.BYTE_SHIFT"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.$assertionsDisabled"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.code"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.closed"
CGNodeType Field "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lastModifiedBuf"
CGNodeType Field "org.apache.commons.compress.archivers.ZipTestCase.1.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.zip.JarMarker.DEFAULT"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.bufUsed"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.reverseMapping"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.BLKDEV"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.closed"
CGNodeType Field "org.apache.commons.compress.compressors.z.ZCompressorInputStream.MAX_CODE_SIZE_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.1.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSizeEvenForVolumes"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_2_SHIFT"
CGNodeType Field "org.apache.commons.compress.IOMethodsTest.bytesToTest"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSortTest.DS.s"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.CP437"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.zipEncoding"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.MIN_BLOCKSIZE"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.GNAMELEN"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExplodingInputStream.distanceTree"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISVTX"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_ERROR"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.UNCOMPRESSED_CHUNK_TYPE"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Archive.packSizes"
CGNodeType Field "org.apache.commons.compress.archivers.zip.StreamCompressor.crc"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_copy"
CGNodeType Field "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.DONT_CACHE"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.TAR"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.XZ"
CGNodeType Field "org.apache.commons.compress.AbstractTestCase.archiveList"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.CFH_SIG"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.scatterDoneAt"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.volume"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_7_SHIFT"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_VERSION_MADE_BY_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_2_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.hasDataDescriptor"
CGNodeType Field "org.apache.commons.compress.compressors.lzw.LZWInputStream.characters"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Folder.crc"
CGNodeType Field "org.apache.commons.compress.changes.ChangeSetTestCase.archiveList"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZFile.SIGNATURE_HEADER_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.usesZip64"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.filesys"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FILE"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.crc"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.XSTAR_MAGIC_OFFSET"
CGNodeType Field "org.apache.commons.compress.compressors.FramedSnappyTestCase.2.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.zipEncoding"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.parent"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.inode"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.MAC_OS"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSorter"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_PAX_GLOBAL_EXTENDED_HEADER"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest.deflateDecoder"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.MAXID"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.MAX_BUF_LEN"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.val$inflaterInputStream"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.flags"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.crc32"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupName"
CGNodeType Field "org.apache.commons.compress.archivers.LongSymLinkTest.file"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.UNKNOWN"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.ONE_HUNDRED_THOUSAND"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.ASCII"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kFilesInfo"
CGNodeType Field "org.apache.commons.compress.archivers.ExceptionMessageTest.OUTPUTSTREAM_NULL_MESSAGE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_COMPRESSED_SIZE_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.CLI.Mode.EXTRACT"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdLength"
CGNodeType Field "org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.QSORT_STACK_SIZE"
CGNodeType Field "org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStackLocation"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipUtils.fileNameUtil"
CGNodeType Field "org.apache.commons.compress.archivers.LongSymLinkTest.ARCDIR"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.offset"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fileBytesWritten"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Folder.unpackSizes"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.GZIP"
CGNodeType Field "org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet"
CGNodeType Field "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_AVAILABLE"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.MAGIC_OLD_ASCII"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.decompressBuf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING"
CGNodeType Field "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closed"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_EXTERNAL_ATTRIBUTES_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.code"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsPerBlock"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.SPARSELEN_GNU"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZFileTest.TEST2_CONTENT"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.STORED"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2Constants.G_SIZE"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.SNAPPY_FRAMED"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForNonAsciiNames"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeFilePosition"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID"
CGNodeType Field "org.apache.commons.compress.archivers.ZipTestCase.allFilesPredicate"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.14.val$mode"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.NONE"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.WORK_FACTOR"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.STICKY"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.crc"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.size"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.dateTimeModified"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.version"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hostname"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.FRESERVED"
CGNodeType Field "org.apache.commons.compress.archivers.zip.JarMarker.ID"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.count"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveEntry.lastModified"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_METHOD_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdOffset"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.$VALUES"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeCreated"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.tlScatterStreams"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.firstChapter"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PREFIX_LEN"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw"
CGNodeType Field "org.apache.commons.compress.compressors.ZTestCase.dir"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.this$0"
CGNodeType Field "org.apache.commons.compress.utils.CountingOutputStream.bytesWritten"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveEntry.HEADER"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISREG"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.write3EntriesCreatingBigArchiveModeNever"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.inUncompressedChunk"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_SELECTORS"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lengthBuf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING"
CGNodeType Field "org.apache.commons.compress.compressors.DeflateTestCase.dir"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_GPB_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_FILENAME_LENGTH_OFFSET"
CGNodeType Field "org.apache.commons.compress.compressors.BZip2TestCase.dir"
CGNodeType Field "org.apache.commons.compress.utils.IOUtilsTest.3.1.skipped"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.X5455"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.LZMA"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.val$deflaterOutputStream"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMajor"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags.GARBLED"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64RequiredException.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.method"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entryOffset"
CGNodeType Field "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.summary"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.11.val$knownSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.NioZipEncoding.charset"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_rfreq"
CGNodeType Field "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.current"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2Constants.RUNA"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2Constants.RUNB"
CGNodeType Field "org.apache.commons.compress.utils.CharsetNames.UTF_16"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipConstants.DATA_DESCRIPTOR_MIN_VERSION"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.a"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.MIN_EOCD_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.DEFAULT_FILE_MODE"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.FALLBACK_QSORT_STACK_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.AES_ENCRYPTED"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_1_MASK"
CGNodeType Field "org.apache.commons.compress.changes.ChangeSetTestCase.dir"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDeleted"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.LEFTMOST_BIT_SHIFT"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.CLI.Mode.$VALUES"
CGNodeType Field "org.apache.commons.compress.changes.ChangeSetResults.addedFromStream"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.$VALUES"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.JPEG"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.XZ_BCJ_IS_BUGGY"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_FILTER"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.in"
CGNodeType Field "org.apache.commons.compress.changes.Change.targetFile"
CGNodeType Field "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.deflater"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.val$iss"
CGNodeType Field "org.apache.commons.compress.AbstractTestCase.ON_WINDOWS"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.label"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES192"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.val$passwordBytes"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CFH"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.dataOffset"
CGNodeType Field "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.in"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags.PATHSYM"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.$VALUES"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_i2"
CGNodeType Field "org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream.p"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.localData"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveOutputStream.BYTE_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mtime"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.highChars"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.XSTAR_MAGIC_LEN"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.getAndMoveToFrontDecode_yy"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.encoding"
CGNodeType Field "org.apache.commons.compress.ArchiveReadTest.ARCDIR"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.isInitialized"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.fileSpecPosition"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.12.this$0"
CGNodeType Field "org.apache.commons.compress.changes.ChangeSetResults.deleted"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSortTest.FIXTURE2_BWT"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.EMPTY"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_j2"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.xf"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finished"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nInUse"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.combinedCRC"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Folder.totalOutputStreams"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.endReached"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.encoding"
CGNodeType Field "org.apache.commons.compress.compressors.lzw.LZWInputStream.DEFAULT_CODE_SIZE"
CGNodeType Field "org.apache.commons.compress.utils.Charsets.ISO_8859_1"
CGNodeType Field "org.apache.commons.compress.compressors.z.ZCompressorInputStream.BLOCK_MODE_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PREFIX"
CGNodeType Field "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.$VALUES"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.StreamMap.packStreamOffsets"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.recordSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.centralDirectoryData"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.CFD_LOCATOR_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.UNKNOWN"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ_KEY"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.arjProtectionFactor"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.Flags.OLD_SECURED_NEW_ANSI_PAGE"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IXUSR"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.zipEncoding"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kCRC"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.MAX_TABLE_SIZE"
CGNodeType Field "org.apache.commons.compress.compressors.DetectCompressorTestCase.TestData.factory"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.extendedHeaderBytes"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.DEFAULT_RCDSIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.level"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest.output"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.val$knownSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.AsiExtraField.HEADER_ID"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.FS_UFS2_MAGIC"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X7875_NewUnix.ZERO"
CGNodeType Field "org.apache.commons.compress.compressors.Pack200TestCase.dir"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_dd"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.FHCRC"
CGNodeType Field "org.apache.commons.compress.utils.ServiceLoaderIterator.service"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.workDone"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockSize100k"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finished"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_WRITE"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.MASK_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.Flags.VOLUME"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_count"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.paxGNUSparse"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest.SIZE"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipParameters.operatingSystem"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionRequired"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES256"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entryOffset"
CGNodeType Field "org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.hashAlg"
CGNodeType Field "org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.cftab"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.addDummyByte"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.nameMap"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.starSparse"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_NEW_CRC"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.preserveLeadingSlashes"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.tmpbuf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.AsiExtraField.gid"
CGNodeType Field "org.apache.commons.compress.AbstractTestCase.resultDir"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.encoding"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64Mode.Always"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TAR_DEFAULT"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockRandomised"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf"
CGNodeType Field "org.apache.commons.compress.archivers.CpioTestCase.dir"
CGNodeType Field "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest.testData"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.nlink"
CGNodeType Field "org.apache.commons.compress.archivers.zip.StreamCompressor.totalWrittenToOutputStream"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_3_SHIFT"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.last"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X000A_NTFS.HEADER_ID"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.GNU_LONGNAME_PATTERN"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64Mode.$VALUES"
CGNodeType Field "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.VAX_VMS"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.cfhBbuf"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.active"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.channel"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test.TEXT"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64RequiredException.ARCHIVE_TOO_BIG_MESSAGE"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.perm"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.haveUnclosedEntry"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.MAX_NAMELEN"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2Constants.N_ITERS"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.fileModeBuf"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.FEXTRA"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.LEFTMOST_BIT"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.out"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.GNU_STRING_TABLE_NAME"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_hh"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.PKWARE_IMPLODING"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExplodingInputStream.dictionarySize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.noExtraFields"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.uncompressedBytesRemaining"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IROTH"
CGNodeType Field "org.apache.commons.compress.changes.Change.replaceMode"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipUtil.DOS_TIME_MIN"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.simpleEncodings"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.LESSER_ICOST"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipParameters.comment"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.$VALUES"
CGNodeType Field "org.apache.commons.compress.compressors.DetectCompressorTestCase.factory"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.HASH_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.CircularBuffer.writeIndex"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.windowsAttributes"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Archive.streamMap"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.entryOffset"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG_OFFSET"
CGNodeType Field "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_AVAILABLE"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.DUMP"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_X86_FILTER"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_3_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnixStat.LINK_FLAG"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.storeNum"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.localFileData"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf"
CGNodeType Field "org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.originalName"
CGNodeType Field "org.apache.commons.compress.DetectArchiverTestCase.classLoader"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entry"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTE_5_MASK"
CGNodeType Field "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_1"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rNToGo"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.NFS_MAGIC"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.sixBytesBuf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Lister.CommandLine.allowStoredEntriesWithDataDescriptor"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.headerId"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_fave"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.size"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kComment"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA256"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.channel"
CGNodeType Field "org.apache.commons.compress.utils.IOUtils.SKIP_BUF"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.origPtr"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest.dir"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZFile.sevenZSignature"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.DEFAULT_DIR_MODE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.hasWritten"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.useUnicodeExtraFields"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2Utils.fileNameUtil"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.out"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.in"
CGNodeType Field "org.apache.commons.compress.utils.IOUtilsTest.3.1.this$1"
CGNodeType Field "org.apache.commons.compress.compressors.ZTestCase.2.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.ArchiveReadTest.FILELIST"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.REALSIZELEN_GNU"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.COMPRESSED_CHUNK_TYPE"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.bigNumberMode"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.this$0"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.workLimit"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.compressionDoneAt"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_OLDNORM"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.VERSION_GNU_SPACE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X7875_NewUnix.ONE_THOUSAND"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.SIZELEN"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.ISEXTENDEDLEN_GNU"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.opts"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.val$inflater"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.buffer"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.cipherInputStream"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName"
CGNodeType Field "org.apache.commons.compress.compressors.LZMATestCase.dir"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.EMPTY"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipShort.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.1.val$payload"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_EXEC"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FIFO"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes.CHAPTER_LABEL"
CGNodeType Field "org.apache.commons.compress.compressors.xz.XZUtils.cachedXZAvailability"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.result"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.expectedEncoding"
CGNodeType Field "org.apache.commons.compress.archivers.ZipTestCase.resultDir"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.1.val$mode"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.contentMethods"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kDummy"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.STACK_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.4.val$mode"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.testFile"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.nInUse"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.blockBuffer"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETGUI"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_DIR"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.lastChapter"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.recordOffset"
CGNodeType Field "org.apache.commons.compress.changes.Change.TYPE_ADD"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.crcs"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.code"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.SZ_SIGNATURE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.flags"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_IA64_FILTER"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.oneByte"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE"
CGNodeType Field "org.apache.commons.compress.archivers.JarTestCase.dir"
CGNodeType Field "org.apache.commons.compress.utils.BoundedInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.dump.TapeInputStream.blockBuffer"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.compressedSize"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.method"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.GREATER_ICOST"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveEntry.SIZE_UNKNOWN"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.5.this$0"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.SMALL_THRESH"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_POSIX"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.NTREC"
CGNodeType Field "org.apache.commons.compress.compressors.FileNameUtil.longestUncompressedSuffix"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.10.val$mode"
CGNodeType Field "org.apache.commons.compress.compressors.XZTestCase.dir"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_SPARC_FILTER"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.buffer"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.CLRI"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes.DIRECTORY"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.inf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionMadeBy"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.FCOMMENT"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.entry"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveInputStream.single"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_TIME_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.TestArchiveStreamProvider.ArchiveInvocationConfirmationException.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipConstants.BYTE_MASK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.dataStart"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.7.val$mode"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipShort.value"
CGNodeType Field "org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmaj"
CGNodeType Field "org.apache.commons.compress.IOMethodsTest.factory"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.FNAME"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.BZIP2"
CGNodeType Field "org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW_KEY"
CGNodeType Field "org.apache.commons.compress.archivers.ArTestCase.dir"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.codeToEnum"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISBLK"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.LAST_ENTRY_NAME"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.CRC.crc32Table"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveEntry.DEFAULT_MODE"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_OLD_BINARY"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZFile.archive"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.encoding"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.fieldName"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.code"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZFile.currentEntryIndex"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.encoding"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selector"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.name"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.TOKENIZATION"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.fileType"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorException.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.currentEntry"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.numNonEmptyStreams"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currBytes"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entrySize"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.BIGNUMBER_POSIX"
CGNodeType Field "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.archivers.dump.TapeInputStream.isCompressed"
CGNodeType Field "org.apache.commons.compress.utils.IOUtilsTest.3.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.crc"
CGNodeType Field "org.apache.commons.compress.archivers.dump.Dirent.type"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_TAG"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.fileFormat"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_ORIGINAL_SIZE_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipShort.BYTE_1_SHIFT"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kEmptyFile"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipMethod.WAVPACK"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.computedCombinedCRC"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.scatterFile"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.code"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_READ"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.CHKSUM_OFFSET"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.FCOMMENT"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.LF_NORMAL"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.PREFIXLEN_XSTAR"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.Flags.ALTNAME"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.TAPE"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.BITS"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.STREAM_IDENTIFIER_TYPE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.vCRC32"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kStartPos"
CGNodeType Field "org.apache.commons.compress.archivers.dump.TapeInputStream.RECORD_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kName"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.chksum"
CGNodeType Field "org.apache.commons.compress.archivers.LongSymLinkTest.CLASSLOADER"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished"
CGNodeType Field "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.STRONG_ENCRYPTION_FLAG"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_CRC_OFFSET"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UPATH_ID"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.COMPRESSED_FASTEST"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.written"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveEntry.length"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.oneByte"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.checksum"
CGNodeType Field "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.LONGFILE_ERROR"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kUnpackInfo"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.blockSize"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExplodingInputStream.in"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.pos"
CGNodeType Field "org.apache.commons.compress.archivers.dump.TapeInputStream.1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.bytesRead"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest.2.this$0"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterSampleTest.1.this$0"
CGNodeType Field "org.apache.commons.compress.compressors.xz.XZUtils.HEADER_MAGIC"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.Z"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.ZIP64_EOCD_CFD_LOCATOR_OFFSET"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding"
CGNodeType Field "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.ACCESS_TIME_BIT"
CGNodeType Field "org.apache.commons.compress.archivers.LongPathTest.FILELIST"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.inUse"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_3_SHIFT"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.CLI.Mode.message"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.dir"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.val$mode"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveEntry.modTime"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_IRGRP"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_PPC_FILTER"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.SEVEN_Z"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ScatterSample.scatterZipCreator"
CGNodeType Field "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.os"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.TAR_HEADER_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry"
CGNodeType Field "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.NUMBER_OF_SHANNON_FANO_TREES_FLAG"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes.VOLUME_LABEL"
CGNodeType Field "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.SLIDING_DICTIONARY_SIZE_FLAG"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_WRITE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.MAX_EOCD_SIZE"
CGNodeType Field "org.apache.commons.compress.compressors.DetectCompressorTestCase.factoryFalse"
CGNodeType Field "org.apache.commons.compress.archivers.StreamingNotSupportedException.serialVersionUID"
CGNodeType Field "org.apache.commons.compress.compressors.lzma.LZMAUtils.HEADER_MAGIC"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.FACTORY"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kHeader"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmin"
CGNodeType Field "org.apache.commons.compress.compressors.DetectCompressorTestCase.factorySetTrue"
CGNodeType Field "org.apache.commons.compress.archivers.LongPathTest.factory"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.CLI.Mode.LIST"
CGNodeType Field "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.endReached"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS"
CGNodeType Field "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.CLI.BUF"
CGNodeType Field "org.apache.commons.compress.archivers.zip.StreamCompressor.BUFFER_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.MAXSIZE"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.stack_ll"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipFile.1.this$0"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.DEFLATE"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kWinAttributes"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2Constants.NUM_OVERSHOOT_BYTES"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.MAX_CODE_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.zip.UnixStat.FILE_FLAG"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_1_SHIFT"
CGNodeType Field "org.apache.commons.compress.changes.ChangeSetTestCase.factory"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.TP_SIZE"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.securityVersion"
CGNodeType Field "org.apache.commons.compress.archivers.zip.Zip64SupportIT.16.val$knownSize"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.blockSize"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.hasOutputStream"
CGNodeType Field "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.size"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.CoderBase.acceptableOptions"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_3_MASK"
CGNodeType Field "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.f"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags.EXTFILE"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.PACK200"
CGNodeType Field "org.apache.commons.compress.utils.ChecksumVerifyingInputStream.expectedChecksum"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BlockSort.CLEARMASK"
CGNodeType Field "org.apache.commons.compress.archivers.tar.TarConstants.CHKSUMLEN"
CGNodeType Field "org.apache.commons.compress.archivers.arj.MainHeader.lastChapter"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.val$deflater"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderSize"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasLastModifiedDate"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipLong.BYTE_2_SHIFT"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipConstants.SHORT"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.STORED"
CGNodeType Field "org.apache.commons.compress.archivers.sevenz.NID.kArchiveProperties"
CGNodeType Field "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.type"
CGNodeType Field "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.DES"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.in"
CGNodeType Field "org.apache.commons.compress.utils.CountingInputStream.bytesRead"
CGNodeType Field "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selectorMtf"
CGNodeType Field "org.apache.commons.compress.compressors.CompressorStreamFactory.SNAPPY_RAW"
CGNodeType Field "org.apache.commons.compress.utils.BitInputStream.byteOrder"
CGNodeType Field "org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveInputStreamProviders"
CGNodeType Field "org.apache.commons.compress.archivers.zip.ExplodingInputStream.numberOfTrees"
CGNodeType Field "org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedHeaders"
CGNodeType Field "org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISNWK"
