<org.apache.commons.csv.CSVPrinter: java.lang.CharSequence trim(java.lang.CharSequence)>	<org.apache.commons.csv.CSVPrinter: java.lang.CharSequence trim(java.lang.CharSequence)>
<org.apache.commons.csv.CSVFormat: java.lang.Character getQuoteCharacter()>	<org.apache.commons.csv.CSVFormat: java.lang.Character getQuoteCharacter()>
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>	<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>
<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>	<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withSkipHeaderRecord()>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withSkipHeaderRecord()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withFirstRecordAsHeader()>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withFirstRecordAsHeader()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withEscape(char)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withEscape(char)>
<org.apache.commons.csv.CSVParser: void close()>	<org.apache.commons.csv.CSVParser: void close()>
<java.util.List: void clear()>	<java.util.List: void clear()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withHeader(java.lang.String[])>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withHeader(java.lang.String[])>
Default	Default
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withQuote(java.lang.Character)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withQuote(java.lang.Character)>
<java.sql.ResultSet: java.lang.Object getObject(int)>	<java.sql.ResultSet: java.lang.Object getObject(int)>
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>	<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.Map$Entry: java.lang.Object getKey()>	<java.util.Map$Entry: java.lang.Object getKey()>
<java.util.List: java.util.Iterator iterator()>	<java.util.List: java.util.Iterator iterator()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withIgnoreSurroundingSpaces(boolean)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withIgnoreSurroundingSpaces(boolean)>
<java.net.URL: java.io.InputStream openStream()>	<java.net.URL: java.io.InputStream openStream()>
<org.apache.commons.csv.CSVPrinter: void printRecords(java.sql.ResultSet)>	<org.apache.commons.csv.CSVPrinter: void printRecords(java.sql.ResultSet)>
<java.util.Arrays: java.util.List asList(java.lang.Object[])>	<java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>	<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>
<java.sql.ResultSetMetaData: int getColumnCount()>	<java.sql.ResultSetMetaData: int getColumnCount()>
INVALID	INVALID
<java.lang.Character: boolean isWhitespace(char)>	<java.lang.Character: boolean isWhitespace(char)>
<org.apache.commons.csv.CSVParser: java.util.List getRecords()>	<org.apache.commons.csv.CSVParser: java.util.List getRecords()>
The quoteChar cannot be a line break	The quoteChar cannot be a line break
<<\\" SurroundingSpaces:ignored\\">>	<<\\" SurroundingSpaces:ignored\\">>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>	<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>
<org.apache.commons.csv.Lexer: int readEscape()>	<org.apache.commons.csv.Lexer: int readEscape()>
<java.lang.Enum: java.lang.String toString()>	<java.lang.Enum: java.lang.String toString()>
<java.io.StringWriter: void <init>()>	<java.io.StringWriter: void <init>()>
out	out
<org.apache.commons.csv.CSVFormat$Predefined: void <clinit>()>	<org.apache.commons.csv.CSVFormat$Predefined: void <clinit>()>
\\"\\"	\\"\\"
<org.apache.commons.csv.CSVPrinter: void <init>(java.lang.Appendable,org.apache.commons.csv.CSVFormat)>	<org.apache.commons.csv.CSVPrinter: void <init>(java.lang.Appendable,org.apache.commons.csv.CSVFormat)>
<org.apache.commons.csv.CSVFormat: int hashCode()>	<org.apache.commons.csv.CSVFormat: int hashCode()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withIgnoreHeaderCase(boolean)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withIgnoreHeaderCase(boolean)>
<org.apache.commons.csv.CSVPrinter: void printAndQuote(java.lang.Object,java.lang.CharSequence,int,int)>	<org.apache.commons.csv.CSVPrinter: void printAndQuote(java.lang.Object,java.lang.CharSequence,int,int)>
/home/wuxh/Projects/diff-point-to-analysis/.test/commons-csv/.dpad/tse-10vers/bytecode/7310e5c61e7550835eb37ef89e8423cbcde0a2b1.jar	/home/wuxh/Projects/diff-point-to-analysis/.test/commons-csv/.dpad/tse-10vers/bytecode/7310e5c61e7550835eb37ef89e8423cbcde0a2b1.jar
<org.apache.commons.csv.Lexer: boolean isEscape(int)>	<org.apache.commons.csv.Lexer: boolean isEscape(int)>
<java.util.Map: int size()>	<java.util.Map: int size()>
<java.lang.Character: char charValue()>	<java.lang.Character: char charValue()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withNullString(java.lang.String)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withNullString(java.lang.String)>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>	<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.commons.csv.CSVFormat: void <init>(char,java.lang.Character,org.apache.commons.csv.QuoteMode,java.lang.Character,java.lang.Character,boolean,boolean,java.lang.String,java.lang.String,java.lang.Object[],java.lang.String[],boolean,boolean,boolean,boolean,boolean)>	<org.apache.commons.csv.CSVFormat: void <init>(char,java.lang.Character,org.apache.commons.csv.QuoteMode,java.lang.Character,java.lang.Character,boolean,boolean,java.lang.String,java.lang.String,java.lang.Object[],java.lang.String[],boolean,boolean,boolean,boolean,boolean)>
MINIMAL	MINIMAL
<org.apache.commons.csv.CSVParser$1: void remove()>	<org.apache.commons.csv.CSVParser$1: void remove()>
<java.io.BufferedReader: void mark(int)>	<java.io.BufferedReader: void mark(int)>
<java.lang.Integer: int intValue()>	<java.lang.Integer: int intValue()>
<java.lang.Character: boolean equals(java.lang.Object)>	<java.lang.Character: boolean equals(java.lang.Object)>
<org.apache.commons.csv.CSVFormat: char getDelimiter()>	<org.apache.commons.csv.CSVFormat: char getDelimiter()>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>	<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>
TOKEN	TOKEN
<org.apache.commons.csv.CSVFormat: boolean getAllowMissingColumnNames()>	<org.apache.commons.csv.CSVFormat: boolean getAllowMissingColumnNames()>
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>	<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>
<org.apache.commons.csv.Lexer: long getCharacterPosition()>	<org.apache.commons.csv.Lexer: long getCharacterPosition()>
CSVParser has been closed	CSVParser has been closed
<java.util.NoSuchElementException: void <init>(java.lang.String)>	<java.util.NoSuchElementException: void <init>(java.lang.String)>
<org.apache.commons.csv.CSVFormat: boolean getTrim()>	<org.apache.commons.csv.CSVFormat: boolean getTrim()>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>	<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>
<java.util.Map$Entry: java.lang.Object getValue()>	<java.util.Map$Entry: java.lang.Object getValue()>
<org.apache.commons.csv.CSVRecord: java.util.Iterator iterator()>	<org.apache.commons.csv.CSVRecord: java.util.Iterator iterator()>
<java.util.HashMap: void <init>(int)>	<java.util.HashMap: void <init>(int)>
<org.apache.commons.csv.QuoteMode: void <clinit>()>	<org.apache.commons.csv.QuoteMode: void <clinit>()>
<java.lang.String: boolean isEmpty()>	<java.lang.String: boolean isEmpty()>
<org.apache.commons.csv.CSVParser: java.util.Map initializeHeader()>	<org.apache.commons.csv.CSVParser: java.util.Map initializeHeader()>
<java.lang.Appendable: java.lang.Appendable append(char)>	<java.lang.Appendable: java.lang.Appendable append(char)>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>	<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>
\\"\u2029\\"	\\"\u2029\\"
<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>	<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
<org.apache.commons.csv.CSVPrinter: void println()>	<org.apache.commons.csv.CSVPrinter: void println()>
<org.apache.commons.csv.Lexer: boolean isWhitespace(int)>	<org.apache.commons.csv.Lexer: boolean isWhitespace(int)>
<org.apache.commons.csv.QuoteMode: void <init>(java.lang.String,int)>	<org.apache.commons.csv.QuoteMode: void <init>(java.lang.String,int)>
<java.lang.Integer: java.lang.Integer valueOf(int)>	<java.lang.Integer: java.lang.Integer valueOf(int)>
<org.apache.commons.csv.CSVFormat: java.lang.String getRecordSeparator()>	<org.apache.commons.csv.CSVFormat: java.lang.String getRecordSeparator()>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>	<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>
<java.util.List: int size()>	<java.util.List: int size()>
url	url
<java.lang.String: boolean equals(java.lang.Object)>	<java.lang.String: boolean equals(java.lang.Object)>
<org.apache.commons.csv.CSVParser: long getRecordNumber()>	<org.apache.commons.csv.CSVParser: long getRecordNumber()>
<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>	<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>
<org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode valueOf(java.lang.String)>	<org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode valueOf(java.lang.String)>
<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>	<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>
<java.lang.Character: int hashCode()>	<java.lang.Character: int hashCode()>
<java.lang.StringBuilder: java.lang.StringBuilder append(char)>	<java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.apache.commons.csv.CSVPrinter: void close()>	<org.apache.commons.csv.CSVPrinter: void close()>
<org.apache.commons.csv.CSVFormat: java.lang.Character getEscapeCharacter()>	<org.apache.commons.csv.CSVFormat: java.lang.Character getEscapeCharacter()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withTrailingDelimiter()>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withTrailingDelimiter()>
<java.io.BufferedReader: void reset()>	<java.io.BufferedReader: void reset()>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVParser parse(java.net.URL,java.nio.charset.Charset,org.apache.commons.csv.CSVFormat)>	<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVParser parse(java.net.URL,java.nio.charset.Charset,org.apache.commons.csv.CSVFormat)>
<java.lang.StringBuilder: void <init>()>	<java.lang.StringBuilder: void <init>()>
\\"\u2028\\"	\\"\u2028\\"
<java.io.Flushable: void flush()>	<java.io.Flushable: void flush()>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()>	<org.apache.commons.csv.CSVFormat: java.lang.String toString()>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVParser parse(java.lang.String,org.apache.commons.csv.CSVFormat)>	<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVParser parse(java.lang.String,org.apache.commons.csv.CSVFormat)>
<org.apache.commons.csv.CSVFormat$Predefined: void <init>(java.lang.String,int,org.apache.commons.csv.CSVFormat)>	<org.apache.commons.csv.CSVFormat$Predefined: void <init>(java.lang.String,int,org.apache.commons.csv.CSVFormat)>
<org.apache.commons.csv.CSVRecord: int size()>	<org.apache.commons.csv.CSVRecord: int size()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<org.apache.commons.csv.CSVPrinter: void printAndEscape(java.lang.CharSequence,int,int)>	<org.apache.commons.csv.CSVPrinter: void printAndEscape(java.lang.CharSequence,int,int)>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>	<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>
<org.apache.commons.csv.CSVRecord: java.util.Map toMap()>	<org.apache.commons.csv.CSVRecord: java.util.Map toMap()>
<org.apache.commons.csv.CSVPrinter: void print(java.lang.Object)>	<org.apache.commons.csv.CSVPrinter: void print(java.lang.Object)>
NON_NUMERIC	NON_NUMERIC
\\"\r\n\\"	\\"\r\n\\"
<org.apache.commons.csv.Assertions: void notNull(java.lang.Object,java.lang.String)>	<org.apache.commons.csv.Assertions: void notNull(java.lang.Object,java.lang.String)>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>	<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>
<org.apache.commons.csv.CSVFormat: java.lang.String format(java.lang.Object[])>	<org.apache.commons.csv.CSVFormat: java.lang.String format(java.lang.Object[])>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withCommentMarker(java.lang.Character)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withCommentMarker(java.lang.Character)>
<java.util.List: boolean add(java.lang.Object)>	<java.util.List: boolean add(java.lang.Object)>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVParser parse(java.io.File,java.nio.charset.Charset,org.apache.commons.csv.CSVFormat)>	<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVParser parse(java.io.File,java.nio.charset.Charset,org.apache.commons.csv.CSVFormat)>
<org.apache.commons.csv.CSVRecord: long getRecordNumber()>	<org.apache.commons.csv.CSVRecord: long getRecordNumber()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withTrim(boolean)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withTrim(boolean)>
groupId	groupId
1.3.1-SNAPSHOT	1.3.1-SNAPSHOT
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.commons.csv.Token$Type: void <clinit>()>	<org.apache.commons.csv.Token$Type: void <clinit>()>
<org.apache.commons.csv.CSVRecord: java.lang.String getComment()>	<org.apache.commons.csv.CSVRecord: java.lang.String getComment()>
<org.apache.commons.csv.CSVParser: java.util.Iterator iterator()>	<org.apache.commons.csv.CSVParser: java.util.Iterator iterator()>
<org.apache.commons.csv.Token: void <init>()>	<org.apache.commons.csv.Token: void <init>()>
<java.lang.Object: void <init>()>	<java.lang.Object: void <init>()>
<java.lang.StringBuilder: void <init>(int)>	<java.lang.StringBuilder: void <init>(int)>
<java.lang.Enum: int hashCode()>	<java.lang.Enum: int hashCode()>
<java.lang.Enum: int ordinal()>	<java.lang.Enum: int ordinal()>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>	<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>
<java.io.StringWriter: java.lang.String toString()>	<java.io.StringWriter: java.lang.String toString()>
<<\\" IgnoreHeaderCase:ignored\\">>	<<\\" IgnoreHeaderCase:ignored\\">>
<java.util.Map: java.util.Set entrySet()>	<java.util.Map: java.util.Set entrySet()>
<java.util.LinkedHashMap: void <init>(java.util.Map)>	<java.util.LinkedHashMap: void <init>(java.util.Map)>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withAllowMissingColumnNames()>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withAllowMissingColumnNames()>
MySQL	MySQL
<java.util.ArrayList: void <init>()>	<java.util.ArrayList: void <init>()>
org.apache.commons	org.apache.commons
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>	<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>
<org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode[] values()>	<org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode[] values()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>	<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
<org.apache.commons.csv.CSVParser$2: void <clinit>()>	<org.apache.commons.csv.CSVParser$2: void <clinit>()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVParser parse(java.io.Reader)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVParser parse(java.io.Reader)>
<java.lang.StringBuilder: char charAt(int)>	<java.lang.StringBuilder: char charAt(int)>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()>	<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()>
InformixUnloadCsv	InformixUnloadCsv
file	file
No quotes mode set but no escape character is set	No quotes mode set but no escape character is set
No header mapping was specified, the record values can\'t be accessed by name	No header mapping was specified, the record values can\'t be accessed by name
\\N	\\N
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withHeader(java.sql.ResultSetMetaData)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withHeader(java.sql.ResultSetMetaData)>
<org.apache.commons.csv.CSVParser$1: void <init>(org.apache.commons.csv.CSVParser)>	<org.apache.commons.csv.CSVParser$1: void <init>(org.apache.commons.csv.CSVParser)>
<java.io.BufferedReader: int read()>	<java.io.BufferedReader: int read()>
<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()>	<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()>
<org.apache.commons.csv.CSVFormat$Predefined: org.apache.commons.csv.CSVFormat$Predefined[] values()>	<org.apache.commons.csv.CSVFormat$Predefined: org.apache.commons.csv.CSVFormat$Predefined[] values()>
<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()>	<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>	<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>
Excel	Excel
<org.apache.commons.csv.CSVParser: void <init>(java.io.Reader,org.apache.commons.csv.CSVFormat,long,long)>	<org.apache.commons.csv.CSVParser: void <init>(java.io.Reader,org.apache.commons.csv.CSVFormat,long,long)>
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>	<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>
<org.apache.commons.csv.CSVRecord: boolean isConsistent()>	<org.apache.commons.csv.CSVRecord: boolean isConsistent()>
EOF	EOF
<org.apache.commons.csv.CSVRecord: java.lang.String[] values()>	<org.apache.commons.csv.CSVRecord: java.lang.String[] values()>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)>	<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withIgnoreSurroundingSpaces()>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withIgnoreSurroundingSpaces()>
<org.apache.commons.csv.CSVFormat: boolean getSkipHeaderRecord()>	<org.apache.commons.csv.CSVFormat: boolean getSkipHeaderRecord()>
<java.lang.StringBuilder: int length()>	<java.lang.StringBuilder: int length()>
<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>	<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.commons.csv.CSVRecord: java.lang.String get(java.lang.Enum)>	<org.apache.commons.csv.CSVRecord: java.lang.String get(java.lang.Enum)>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withRecordSeparator(java.lang.String)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withRecordSeparator(java.lang.String)>
<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence,int,int)>	<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence,int,int)>
The comment start marker character cannot be a line break	The comment start marker character cannot be a line break
<java.util.Map: java.lang.Object get(java.lang.Object)>	<java.util.Map: java.lang.Object get(java.lang.Object)>
<org.apache.commons.csv.CSVFormat: java.lang.String[] toStringArray(java.lang.Object[])>	<org.apache.commons.csv.CSVFormat: java.lang.String[] toStringArray(java.lang.Object[])>
<java.util.LinkedHashMap: void <init>()>	<java.util.LinkedHashMap: void <init>()>
<java.util.Iterator: boolean hasNext()>	<java.util.Iterator: boolean hasNext()>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>	<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>
<org.apache.commons.csv.CSVRecord: java.util.Map putIn(java.util.Map)>	<org.apache.commons.csv.CSVRecord: java.util.Map putIn(java.util.Map)>
<org.apache.commons.csv.Constants: void <clinit>()>	<org.apache.commons.csv.Constants: void <clinit>()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat newFormat(char)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat newFormat(char)>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>	<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.commons.csv.CSVPrinter: void printRecords(java.lang.Object[])>	<org.apache.commons.csv.CSVPrinter: void printRecords(java.lang.Object[])>
<org.apache.commons.csv.CSVFormat: boolean isLineBreak(java.lang.Character)>	<org.apache.commons.csv.CSVFormat: boolean isLineBreak(java.lang.Character)>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>	<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.lang.CharSequence: int length()>	<java.lang.CharSequence: int length()>
<java.lang.Enum: void <init>(java.lang.String,int)>	<java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.Iterator: java.lang.Object next()>	<java.util.Iterator: java.lang.Object next()>
<org.apache.commons.csv.CSVRecord: void <clinit>()>	<org.apache.commons.csv.CSVRecord: void <clinit>()>
<org.apache.commons.csv.CSVRecord: java.lang.String get(int)>	<org.apache.commons.csv.CSVRecord: java.lang.String get(int)>
<java.lang.StringBuilder: java.lang.String toString()>	<java.lang.StringBuilder: java.lang.String toString()>
<java.lang.String: char charAt(int)>	<java.lang.String: char charAt(int)>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withEscape(java.lang.Character)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withEscape(java.lang.Character)>
<java.io.FileInputStream: void <init>(java.io.File)>	<java.io.FileInputStream: void <init>(java.io.File)>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withIgnoreEmptyLines()>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withIgnoreEmptyLines()>
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>	<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>
<java.util.Set: java.util.Iterator iterator()>	<java.util.Set: java.util.Iterator iterator()>
<java.lang.CharSequence: char charAt(int)>	<java.lang.CharSequence: char charAt(int)>
<java.lang.String: java.lang.String trim()>	<java.lang.String: java.lang.String trim()>
<java.io.IOException: void <init>(java.lang.String)>	<java.io.IOException: void <init>(java.lang.String)>
<org.apache.commons.csv.CSVPrinter: void printRecord(java.lang.Iterable)>	<org.apache.commons.csv.CSVPrinter: void printRecord(java.lang.Iterable)>
The delimiter cannot be a line break	The delimiter cannot be a line break
No more CSV records available	No more CSV records available
<org.apache.commons.csv.CSVRecord: void <init>(java.lang.String[],java.util.Map,java.lang.String,long,long)>	<org.apache.commons.csv.CSVRecord: void <init>(java.lang.String[],java.util.Map,java.lang.String,long,long)>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withSkipHeaderRecord(boolean)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withSkipHeaderRecord(boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>	<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withIgnoreEmptyLines(boolean)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withIgnoreEmptyLines(boolean)>
<org.apache.commons.csv.Token: void reset()>	<org.apache.commons.csv.Token: void reset()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat valueOf(java.lang.String)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat valueOf(java.lang.String)>
<org.apache.commons.csv.CSVRecord: boolean isMapped(java.lang.String)>	<org.apache.commons.csv.CSVRecord: boolean isMapped(java.lang.String)>
<java.sql.ResultSet: boolean next()>	<java.sql.ResultSet: boolean next()>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>	<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>	<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>	<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>
The escape character cannot be a line break	The escape character cannot be a line break
<org.apache.commons.csv.Lexer: void <init>(org.apache.commons.csv.CSVFormat,org.apache.commons.csv.ExtendedBufferedReader)>	<org.apache.commons.csv.Lexer: void <init>(org.apache.commons.csv.CSVFormat,org.apache.commons.csv.ExtendedBufferedReader)>
version	version
<org.apache.commons.csv.CSVPrinter: void printComment(java.lang.String)>	<org.apache.commons.csv.CSVPrinter: void printComment(java.lang.String)>
<java.lang.StringBuilder: void setLength(int)>	<java.lang.StringBuilder: void setLength(int)>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>	<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>
<java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)>	<java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)>
\r\n	\r\n
<org.apache.commons.csv.CSVParser: void <init>(java.io.Reader,org.apache.commons.csv.CSVFormat)>	<org.apache.commons.csv.CSVParser: void <init>(java.io.Reader,org.apache.commons.csv.CSVFormat)>
<org.apache.commons.csv.Constants: void <init>()>	<org.apache.commons.csv.Constants: void <init>()>
<org.apache.commons.csv.CSVParser: java.util.Map getHeaderMap()>	<org.apache.commons.csv.CSVParser: java.util.Map getHeaderMap()>
<org.apache.commons.csv.CSVParser$1: org.apache.commons.csv.CSVRecord getNextRecord()>	<org.apache.commons.csv.CSVParser$1: org.apache.commons.csv.CSVRecord getNextRecord()>
<org.apache.commons.csv.CSVRecord: boolean hasComment()>	<org.apache.commons.csv.CSVRecord: boolean hasComment()>
<java.lang.Enum: java.lang.String name()>	<java.lang.Enum: java.lang.String name()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withHeader(java.sql.ResultSet)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withHeader(java.sql.ResultSet)>
<java.io.BufferedReader: void close()>	<java.io.BufferedReader: void close()>
<java.lang.UnsupportedOperationException: void <init>()>	<java.lang.UnsupportedOperationException: void <init>()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withQuoteMode(org.apache.commons.csv.QuoteMode)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withQuoteMode(org.apache.commons.csv.QuoteMode)>
<org.apache.commons.csv.CSVFormat: java.lang.String[] getHeader()>	<org.apache.commons.csv.CSVFormat: java.lang.String[] getHeader()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withRecordSeparator(char)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withRecordSeparator(char)>
<java.lang.Iterable: java.util.Iterator iterator()>	<java.lang.Iterable: java.util.Iterator iterator()>
<org.apache.commons.csv.Lexer: void close()>	<org.apache.commons.csv.Lexer: void close()>
commons-csv	commons-csv
<org.apache.commons.csv.CSVRecord: java.lang.String toString()>	<org.apache.commons.csv.CSVRecord: java.lang.String toString()>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()>	<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()>
TDF	TDF
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withDelimiter(char)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withDelimiter(char)>
<java.lang.String: int length()>	<java.lang.String: int length()>
<java.util.Map: boolean containsKey(java.lang.Object)>	<java.util.Map: boolean containsKey(java.lang.Object)>
<org.apache.commons.csv.CSVFormat: java.lang.String[] getHeaderComments()>	<org.apache.commons.csv.CSVFormat: java.lang.String[] getHeaderComments()>
<java.util.Map: java.util.Set keySet()>	<java.util.Map: java.util.Set keySet()>
<java.lang.Object: java.lang.Class getClass()>	<java.lang.Object: java.lang.Class getClass()>
<org.apache.commons.csv.CSVRecord: java.lang.String get(java.lang.String)>	<org.apache.commons.csv.CSVRecord: java.lang.String get(java.lang.String)>
NONE	NONE
<<\\"\\">>	<<\\"\\">>
string	string
\\"\u0085\\"	\\"\u0085\\"
RFC4180	RFC4180
<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>	<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>
<java.io.BufferedReader: void <init>(java.io.Reader)>	<java.io.BufferedReader: void <init>(java.io.Reader)>
<org.apache.commons.csv.CSVPrinter$1: void <clinit>()>	<org.apache.commons.csv.CSVPrinter$1: void <clinit>()>
<org.apache.commons.csv.CSVRecord: boolean isSet(java.lang.String)>	<org.apache.commons.csv.CSVRecord: boolean isSet(java.lang.String)>
<java.lang.String: int hashCode()>	<java.lang.String: int hashCode()>
<java.lang.IllegalStateException: void <init>(java.lang.String)>	<java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.commons.csv.ExtendedBufferedReader: void <init>(java.io.Reader)>	<org.apache.commons.csv.ExtendedBufferedReader: void <init>(java.io.Reader)>
<org.apache.commons.csv.CSVFormat: java.lang.Character getCommentMarker()>	<org.apache.commons.csv.CSVFormat: java.lang.Character getCommentMarker()>
<org.apache.commons.csv.Token$Type: void <init>(java.lang.String,int)>	<org.apache.commons.csv.Token$Type: void <init>(java.lang.String,int)>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withAllowMissingColumnNames(boolean)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withAllowMissingColumnNames(boolean)>
<org.apache.commons.csv.CSVFormat: void <clinit>()>	<org.apache.commons.csv.CSVFormat: void <clinit>()>
<org.apache.commons.csv.CSVPrinter: java.lang.Appendable getOut()>	<org.apache.commons.csv.CSVPrinter: java.lang.Appendable getOut()>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>	<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>
<org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type[] values()>	<org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type[] values()>
<java.util.HashSet: void <init>()>	<java.util.HashSet: void <init>()>
<java.io.BufferedReader: java.lang.String readLine()>	<java.io.BufferedReader: java.lang.String readLine()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withIgnoreHeaderCase()>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withIgnoreHeaderCase()>
<java.io.BufferedReader: int read(char[],int,int)>	<java.io.BufferedReader: int read(char[],int,int)>
<org.apache.commons.csv.CSVPrinter: void printRecord(java.lang.Object[])>	<org.apache.commons.csv.CSVPrinter: void printRecord(java.lang.Object[])>
<org.apache.commons.csv.CSVFormat$Predefined: org.apache.commons.csv.CSVFormat$Predefined valueOf(java.lang.String)>	<org.apache.commons.csv.CSVFormat$Predefined: org.apache.commons.csv.CSVFormat$Predefined valueOf(java.lang.String)>
<org.apache.commons.csv.CSVParser$1: boolean hasNext()>	<org.apache.commons.csv.CSVParser$1: boolean hasNext()>
<java.util.Arrays: java.lang.String toString(java.lang.Object[])>	<java.util.Arrays: java.lang.String toString(java.lang.Object[])>
<org.apache.commons.csv.CSVFormat$Predefined: org.apache.commons.csv.CSVFormat getFormat()>	<org.apache.commons.csv.CSVFormat$Predefined: org.apache.commons.csv.CSVFormat getFormat()>
<org.apache.commons.csv.CSVFormat: boolean isLineBreak(char)>	<org.apache.commons.csv.CSVFormat: boolean isLineBreak(char)>
<org.apache.commons.csv.CSVRecord: long getCharacterPosition()>	<org.apache.commons.csv.CSVRecord: long getCharacterPosition()>
<org.apache.commons.csv.ExtendedBufferedReader: int read()>	<org.apache.commons.csv.ExtendedBufferedReader: int read()>
<java.io.Closeable: void close()>	<java.io.Closeable: void close()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withHeaderComments(java.lang.Object[])>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withHeaderComments(java.lang.Object[])>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVPrinter print(java.lang.Appendable)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVPrinter print(java.lang.Appendable)>
<org.apache.commons.csv.CSVFormat: void validate()>	<org.apache.commons.csv.CSVFormat: void validate()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withQuote(char)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withQuote(char)>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withTrailingDelimiter(boolean)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withTrailingDelimiter(boolean)>
<org.apache.commons.csv.CSVPrinter: void printRecords(java.lang.Iterable)>	<org.apache.commons.csv.CSVPrinter: void printRecords(java.lang.Iterable)>
<org.apache.commons.csv.CSVPrinter: void flush()>	<org.apache.commons.csv.CSVPrinter: void flush()>
<java.lang.Object: java.lang.Object clone()>	<java.lang.Object: java.lang.Object clone()>
<org.apache.commons.csv.CSVRecord: java.util.List toList()>	<org.apache.commons.csv.CSVRecord: java.util.List toList()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withCommentMarker(char)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withCommentMarker(char)>
EOF whilst processing escape sequence	EOF whilst processing escape sequence
<org.apache.commons.csv.Assertions: void <init>()>	<org.apache.commons.csv.Assertions: void <init>()>
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>	<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>
<org.apache.commons.csv.ExtendedBufferedReader: void close()>	<org.apache.commons.csv.ExtendedBufferedReader: void close()>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>	<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>
<java.lang.RuntimeException: void <init>(java.lang.Throwable)>	<java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withHeader(java.lang.Class)>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withHeader(java.lang.Class)>
<java.lang.Object: java.lang.String toString()>	<java.lang.Object: java.lang.String toString()>
ALL	ALL
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>	<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>
EORECORD	EORECORD
<org.apache.commons.csv.Token: java.lang.String toString()>	<org.apache.commons.csv.Token: java.lang.String toString()>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withTrim()>	<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withTrim()>
charset	charset
artifactId	artifactId
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>	<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>
<org.apache.commons.csv.CSVParser$1: org.apache.commons.csv.CSVRecord next()>	<org.apache.commons.csv.CSVParser$1: org.apache.commons.csv.CSVRecord next()>
<java.util.List: boolean isEmpty()>	<java.util.List: boolean isEmpty()>
<org.apache.commons.csv.Lexer: char mapNullToDisabled(java.lang.Character)>	<org.apache.commons.csv.Lexer: char mapNullToDisabled(java.lang.Character)>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>	<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>
<org.apache.commons.csv.CSVParser: boolean isClosed()>	<org.apache.commons.csv.CSVParser: boolean isClosed()>
<java.lang.String: java.lang.String valueOf(char)>	<java.lang.String: java.lang.String valueOf(char)>
<org.apache.commons.csv.CSVPrinter: void print(java.lang.Object,java.lang.CharSequence,int,int)>	<org.apache.commons.csv.CSVPrinter: void print(java.lang.Object,java.lang.CharSequence,int,int)>
format	format
<<\\" EmptyLines:ignored\\">>	<<\\" EmptyLines:ignored\\">>
<java.lang.Class: java.lang.Object[] getEnumConstants()>	<java.lang.Class: java.lang.Object[] getEnumConstants()>
<java.util.TreeMap: void <init>(java.util.Comparator)>	<java.util.TreeMap: void <init>(java.util.Comparator)>
<java.util.Arrays: int hashCode(java.lang.Object[])>	<java.util.Arrays: int hashCode(java.lang.Object[])>
<org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type valueOf(java.lang.String)>	<org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type valueOf(java.lang.String)>
<java.lang.Character: java.lang.Character valueOf(char)>	<java.lang.Character: java.lang.Character valueOf(char)>
<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>	<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>
reader	reader
<java.util.Set: boolean add(java.lang.Object)>	<java.util.Set: boolean add(java.lang.Object)>
<org.apache.commons.csv.CSVParser$1: java.lang.Object next()>	<org.apache.commons.csv.CSVParser$1: java.lang.Object next()>
InformixUnload	InformixUnload
<java.io.StringReader: void <init>(java.lang.String)>	<java.io.StringReader: void <init>(java.lang.String)>
<org.apache.commons.csv.Lexer: boolean isClosed()>	<org.apache.commons.csv.Lexer: boolean isClosed()>
COMMENT	COMMENT
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>	<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>
