<java.io.BufferedReader: void reset()>
<java.lang.UnsupportedOperationException: void <init>()>
<java.io.FileInputStream: void <init>(java.io.File)>
<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>
<java.lang.Integer: int intValue()>
<java.lang.String: char charAt(int)>
<java.lang.Object: java.lang.Object clone()>
<java.lang.Integer: java.lang.Integer valueOf(int)>
<java.util.List: void clear()>
<java.util.Set: java.util.Iterator iterator()>
<java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Map: int size()>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.io.BufferedReader: java.lang.String readLine()>
<java.lang.String: java.lang.String trim()>
<java.lang.Iterable: java.util.Iterator iterator()>
<java.lang.String: int hashCode()>
<java.util.HashSet: void <init>()>
<java.io.StringWriter: void <init>()>
<java.lang.Enum: int hashCode()>
<java.lang.String: java.lang.String valueOf(char)>
<java.lang.String: int length()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
<java.io.Flushable: void flush()>
<java.util.LinkedHashMap: void <init>(java.util.Map)>
<java.util.LinkedHashMap: void <init>()>
<java.util.List: int size()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Set: boolean add(java.lang.Object)>
<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>
<java.sql.ResultSet: java.lang.Object getObject(int)>
<java.lang.Character: char charValue()>
<java.lang.StringBuilder: int length()>
<java.util.Map: java.util.Set entrySet()>
<java.util.Map: boolean containsKey(java.lang.Object)>
<java.util.List: boolean add(java.lang.Object)>
<java.lang.Character: java.lang.Character valueOf(char)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>
<java.util.TreeMap: void <init>(java.util.Comparator)>
<java.lang.Enum: int ordinal()>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.io.BufferedReader: void close()>
<java.lang.Enum: java.lang.String name()>
<java.lang.StringBuilder: java.lang.String toString()>
<java.lang.Enum: java.lang.String toString()>
<java.io.BufferedReader: int read()>
<java.util.List: java.util.Iterator iterator()>
<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Iterator: boolean hasNext()>
<java.lang.Character: int hashCode()>
<java.io.StringReader: void <init>(java.lang.String)>
<java.util.Iterator: java.lang.Object next()>
<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence,int,int)>
<java.io.Closeable: void close()>
<java.lang.StringBuilder: void <init>()>
<java.lang.Character: boolean equals(java.lang.Object)>
<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>
<java.lang.Class: java.lang.Object[] getEnumConstants()>
<java.net.URL: java.io.InputStream openStream()>
<java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.lang.Object: java.lang.String toString()>
<java.util.HashMap: void <init>(int)>
<java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)>
<java.util.NoSuchElementException: void <init>(java.lang.String)>
<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
<java.util.Map$Entry: java.lang.Object getValue()>
<java.io.IOException: void <init>(java.lang.String)>
<java.util.Map: java.lang.Object get(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.util.Arrays: java.lang.String toString(java.lang.Object[])>
<java.lang.StringBuilder: char charAt(int)>
<java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.ArrayList: void <init>()>
<java.util.Map$Entry: java.lang.Object getKey()>
<java.lang.Object: java.lang.Class getClass()>
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.lang.CharSequence: int length()>
<java.util.Arrays: int hashCode(java.lang.Object[])>
<java.lang.Appendable: java.lang.Appendable append(char)>
<java.lang.Enum: void <init>(java.lang.String,int)>
<java.io.StringWriter: java.lang.String toString()>
<java.lang.String: boolean isEmpty()>
<java.util.List: boolean isEmpty()>
<java.util.Map: java.util.Set keySet()>
<java.io.BufferedReader: void mark(int)>
<java.sql.ResultSet: boolean next()>
<java.lang.StringBuilder: void <init>(int)>
<java.lang.Object: void <init>()>
<java.lang.Character: boolean isWhitespace(char)>
<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>
<java.lang.CharSequence: char charAt(int)>
<java.sql.ResultSetMetaData: int getColumnCount()>
<java.lang.StringBuilder: void setLength(int)>
<java.lang.String: boolean equals(java.lang.Object)>
<java.io.BufferedReader: int read(char[],int,int)>
<java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>
