FACT TUPLE :
reference "org.apache.commons.math.stat.Frequency.1" "org.apache.commons.math.stat.Frequency"
reference "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.Complex"
call "org.apache.commons.math.complex.ComplexFormat.ComplexFormat()" "org.apache.commons.math.complex.ComplexFormat.getDefaultNumberFormat()"
call "org.apache.commons.math.complex.ComplexFormat.ComplexFormat()" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String,NumberFormat)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat()"
call "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(NumberFormat)" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String,NumberFormat)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(NumberFormat)"
call "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(NumberFormat,NumberFormat)" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String,NumberFormat,NumberFormat)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(NumberFormat,NumberFormat)"
call "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String)" "org.apache.commons.math.complex.ComplexFormat.getDefaultNumberFormat()"
call "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String)" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String,NumberFormat)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String)"
call "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String,NumberFormat)" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String,NumberFormat,NumberFormat)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String,NumberFormat)"
call "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String,NumberFormat,NumberFormat)" "org.apache.commons.math.complex.ComplexFormat.setImaginaryCharacter(String)"
call "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String,NumberFormat,NumberFormat)" "org.apache.commons.math.complex.ComplexFormat.setImaginaryFormat(NumberFormat)"
call "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String,NumberFormat,NumberFormat)" "org.apache.commons.math.complex.ComplexFormat.setRealFormat(NumberFormat)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(String,NumberFormat,NumberFormat)"
call "org.apache.commons.math.complex.ComplexFormat.formatComplex(Complex)" "org.apache.commons.math.complex.ComplexFormat.getInstance()"
call "org.apache.commons.math.complex.ComplexFormat.formatComplex(Complex)" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.formatComplex(Complex)"
call "org.apache.commons.math.complex.ComplexFormat.format(Complex,StringBuffer,FieldPosition)" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.complex.ComplexFormat.format(Complex,StringBuffer,FieldPosition)" "org.apache.commons.math.complex.ComplexFormat.getRealFormat()"
call "org.apache.commons.math.complex.ComplexFormat.format(Complex,StringBuffer,FieldPosition)" "org.apache.commons.math.complex.ComplexFormat.formatDouble(double,NumberFormat,StringBuffer,FieldPosition)"
call "org.apache.commons.math.complex.ComplexFormat.format(Complex,StringBuffer,FieldPosition)" "org.apache.commons.math.complex.Complex.getImaginary()"
call "org.apache.commons.math.complex.ComplexFormat.format(Complex,StringBuffer,FieldPosition)" "org.apache.commons.math.complex.ComplexFormat.getImaginaryFormat()"
call "org.apache.commons.math.complex.ComplexFormat.format(Complex,StringBuffer,FieldPosition)" "org.apache.commons.math.complex.ComplexFormat.getImaginaryCharacter()"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.format(Complex,StringBuffer,FieldPosition)"
call "org.apache.commons.math.complex.ComplexFormat.format(Object,StringBuffer,FieldPosition)" "org.apache.commons.math.complex.ComplexFormat.format(Complex,StringBuffer,FieldPosition)"
call "org.apache.commons.math.complex.ComplexFormat.format(Object,StringBuffer,FieldPosition)" "org.apache.commons.math.complex.Complex.Complex(double,double)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.format(Object,StringBuffer,FieldPosition)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.formatDouble(double,NumberFormat,StringBuffer,FieldPosition)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.getAvailableLocales()"
call "org.apache.commons.math.complex.ComplexFormat.getDefaultNumberFormat()" "org.apache.commons.math.complex.ComplexFormat.getDefaultNumberFormat(Locale)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.getDefaultNumberFormat()"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.getDefaultNumberFormat(Locale)"
reference "org.apache.commons.math.complex.ComplexFormat.getImaginaryCharacter()" "org.apache.commons.math.complex.ComplexFormat.imaginaryCharacter : String"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.getImaginaryCharacter()"
reference "org.apache.commons.math.complex.ComplexFormat.getImaginaryFormat()" "org.apache.commons.math.complex.ComplexFormat.imaginaryFormat : NumberFormat"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.getImaginaryFormat()"
call "org.apache.commons.math.complex.ComplexFormat.getInstance()" "org.apache.commons.math.complex.ComplexFormat.getInstance(Locale)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.getInstance()"
call "org.apache.commons.math.complex.ComplexFormat.getInstance(Locale)" "org.apache.commons.math.complex.ComplexFormat.getDefaultNumberFormat(Locale)"
call "org.apache.commons.math.complex.ComplexFormat.getInstance(Locale)" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(NumberFormat)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.getInstance(Locale)"
reference "org.apache.commons.math.complex.ComplexFormat.getRealFormat()" "org.apache.commons.math.complex.ComplexFormat.realFormat : NumberFormat"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.getRealFormat()"
call "org.apache.commons.math.complex.ComplexFormat.parse(String)" "org.apache.commons.math.complex.ComplexFormat.parse(String,ParsePosition)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.parse(String)"
call "org.apache.commons.math.complex.ComplexFormat.parse(String,ParsePosition)" "org.apache.commons.math.complex.ComplexFormat.parseAndIgnoreWhitespace(String,ParsePosition)"
call "org.apache.commons.math.complex.ComplexFormat.parse(String,ParsePosition)" "org.apache.commons.math.complex.ComplexFormat.getRealFormat()"
call "org.apache.commons.math.complex.ComplexFormat.parse(String,ParsePosition)" "org.apache.commons.math.complex.ComplexFormat.parseNumber(String,NumberFormat,ParsePosition)"
call "org.apache.commons.math.complex.ComplexFormat.parse(String,ParsePosition)" "org.apache.commons.math.complex.ComplexFormat.parseNextCharacter(String,ParsePosition)"
call "org.apache.commons.math.complex.ComplexFormat.parse(String,ParsePosition)" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexFormat.parse(String,ParsePosition)" "org.apache.commons.math.complex.ComplexFormat.getImaginaryCharacter()"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.parse(String,ParsePosition)"
call "org.apache.commons.math.complex.ComplexFormat.parseAndIgnoreWhitespace(String,ParsePosition)" "org.apache.commons.math.complex.ComplexFormat.parseNextCharacter(String,ParsePosition)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.parseAndIgnoreWhitespace(String,ParsePosition)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.parseNextCharacter(String,ParsePosition)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.parseNumber(String,double,ParsePosition)"
call "org.apache.commons.math.complex.ComplexFormat.parseNumber(String,NumberFormat,ParsePosition)" "org.apache.commons.math.complex.ComplexFormat.parseNumber(String,double,ParsePosition)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.parseNumber(String,NumberFormat,ParsePosition)"
call "org.apache.commons.math.complex.ComplexFormat.parseObject(String,ParsePosition)" "org.apache.commons.math.complex.ComplexFormat.parse(String,ParsePosition)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.parseObject(String,ParsePosition)"
reference "org.apache.commons.math.complex.ComplexFormat.setImaginaryCharacter(String)" "org.apache.commons.math.complex.ComplexFormat.imaginaryCharacter : String"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.setImaginaryCharacter(String)"
reference "org.apache.commons.math.complex.ComplexFormat.setImaginaryFormat(NumberFormat)" "org.apache.commons.math.complex.ComplexFormat.imaginaryFormat : NumberFormat"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.setImaginaryFormat(NumberFormat)"
reference "org.apache.commons.math.complex.ComplexFormat.setRealFormat(NumberFormat)" "org.apache.commons.math.complex.ComplexFormat.realFormat : NumberFormat"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.setRealFormat(NumberFormat)"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.serialVersionUID : long"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.DEFAULT_IMAGINARY_CHARACTER : String"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.imaginaryCharacter : String"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.imaginaryFormat : NumberFormat"
contain "org.apache.commons.math.complex.ComplexFormat" "org.apache.commons.math.complex.ComplexFormat.realFormat : NumberFormat"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.StreamDataAdapter(BufferedReader)" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.DataAdapter(EmpiricalDistributionImpl.1)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.StreamDataAdapter(BufferedReader)" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.this$0 : EmpiricalDistributionImpl"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.StreamDataAdapter(BufferedReader)" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.inputStream : BufferedReader"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.StreamDataAdapter(BufferedReader)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.computeBinStats(double,double)" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.inputStream : BufferedReader"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.computeBinStats(double,double)" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.this$0 : EmpiricalDistributionImpl"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.computeBinStats(double,double)" "org.apache.commons.math.random.EmpiricalDistributionImpl.access$200(EmpiricalDistributionImpl)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.computeBinStats(double,double)" "org.apache.commons.math.random.EmpiricalDistributionImpl.access$100(EmpiricalDistributionImpl,double,double,double)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.computeBinStats(double,double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.computeBinStats(double,double)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.computeStats()" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.this$0 : EmpiricalDistributionImpl"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.computeStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.computeStats()" "org.apache.commons.math.random.EmpiricalDistributionImpl.access$302(EmpiricalDistributionImpl,SummaryStatistics)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.computeStats()" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.inputStream : BufferedReader"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.computeStats()" "org.apache.commons.math.random.EmpiricalDistributionImpl.access$300(EmpiricalDistributionImpl)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.computeStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.computeStats()"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.inputStream : BufferedReader"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.this$0 : EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.this$0 : EmpiricalDistributionImpl"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchState"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler.SwitchingFunctionsHandler()" "org.apache.commons.math.ode.SwitchingFunctionsHandler.functions : ArrayList"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler.SwitchingFunctionsHandler()" "org.apache.commons.math.ode.SwitchingFunctionsHandler.first : SwitchState"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler.SwitchingFunctionsHandler()" "org.apache.commons.math.ode.SwitchingFunctionsHandler.initialized : boolean"
contain "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchingFunctionsHandler.SwitchingFunctionsHandler()"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler.add(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchingFunctionsHandler.functions : ArrayList"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.add(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)"
contain "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchingFunctionsHandler.add(SwitchingFunction,double,double,int)"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler.isEmpty()" "org.apache.commons.math.ode.SwitchingFunctionsHandler.functions : ArrayList"
contain "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchingFunctionsHandler.isEmpty()"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchingFunctionsHandler.first : SwitchState"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchingFunctionsHandler.functions : ArrayList"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchingFunctionsHandler.initialized : boolean"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.reinitializeBegin(double,double[])"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.StepInterpolator.isForward()"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.getEventTime()"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.IntegratorException.IntegratorException(Throwable)"
contain "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler.getEventTime()" "org.apache.commons.math.ode.SwitchingFunctionsHandler.first : SwitchState"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.getEventTime()" "org.apache.commons.math.ode.SwitchState.getEventTime()"
contain "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchingFunctionsHandler.getEventTime()"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler.stepAccepted(double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.functions : ArrayList"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.stepAccepted(double,double[])" "org.apache.commons.math.ode.SwitchState.stepAccepted(double,double[])"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.stepAccepted(double,double[])" "org.apache.commons.math.ode.IntegratorException.IntegratorException(Throwable)"
contain "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchingFunctionsHandler.stepAccepted(double,double[])"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler.stop()" "org.apache.commons.math.ode.SwitchingFunctionsHandler.functions : ArrayList"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.stop()" "org.apache.commons.math.ode.SwitchState.stop()"
contain "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchingFunctionsHandler.stop()"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler.reset(double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.functions : ArrayList"
call "org.apache.commons.math.ode.SwitchingFunctionsHandler.reset(double,double[])" "org.apache.commons.math.ode.SwitchState.reset(double,double[])"
contain "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchingFunctionsHandler.reset(double,double[])"
contain "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchingFunctionsHandler.functions : ArrayList"
reference "org.apache.commons.math.ode.SwitchingFunctionsHandler.first : SwitchState" "org.apache.commons.math.ode.SwitchState"
contain "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchingFunctionsHandler.first : SwitchState"
contain "org.apache.commons.math.ode.SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchingFunctionsHandler.initialized : boolean"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.DataAdapter()" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.this$0 : EmpiricalDistributionImpl"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.DataAdapter()"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.computeBinStats(double,double)"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.computeStats()"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.DataAdapter(EmpiricalDistributionImpl.1)" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.DataAdapter()"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.DataAdapter(EmpiricalDistributionImpl.1)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.this$0 : EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.this$0 : EmpiricalDistributionImpl"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMoment" "org.apache.commons.math.stat.descriptive.moment.SecondMoment"
call "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.ThirdMoment()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment()"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.ThirdMoment()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.m3 : double"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.ThirdMoment()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.nDevSq : double"
contain "org.apache.commons.math.stat.descriptive.moment.ThirdMoment" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.ThirdMoment()"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.n : long"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.m1 : double"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.m2 : double"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.m3 : double"
call "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.increment(double)"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.nDev : double"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.nDevSq : double"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.dev : double"
contain "org.apache.commons.math.stat.descriptive.moment.ThirdMoment" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.increment(double)"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.getResult()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.m3 : double"
contain "org.apache.commons.math.stat.descriptive.moment.ThirdMoment" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.clear()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.clear()"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.clear()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.m3 : double"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.clear()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.nDevSq : double"
contain "org.apache.commons.math.stat.descriptive.moment.ThirdMoment" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.clear()"
contain "org.apache.commons.math.stat.descriptive.moment.ThirdMoment" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.moment.ThirdMoment" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.m3 : double"
contain "org.apache.commons.math.stat.descriptive.moment.ThirdMoment" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.nDevSq : double"
reference "org.apache.commons.math.MathException.translate(String,Locale)" "org.apache.commons.math.MathException.cachedResources : ResourceBundle"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.translate(String,Locale)"
call "org.apache.commons.math.MathException.buildMessage(String,Object[],Locale)" "org.apache.commons.math.MathException.translate(String,Locale)"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.buildMessage(String,Object[],Locale)"
reference "org.apache.commons.math.MathException.MathException()" "org.apache.commons.math.MathException.pattern : String"
reference "org.apache.commons.math.MathException.MathException()" "org.apache.commons.math.MathException.arguments : Object[]"
reference "org.apache.commons.math.MathException.MathException()" "org.apache.commons.math.MathException.rootCause : Throwable"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.MathException()"
reference "org.apache.commons.math.MathException.MathException(String)" "org.apache.commons.math.MathException.pattern : String"
reference "org.apache.commons.math.MathException.MathException(String)" "org.apache.commons.math.MathException.arguments : Object[]"
reference "org.apache.commons.math.MathException.MathException(String)" "org.apache.commons.math.MathException.rootCause : Throwable"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.MathException(String)"
call "org.apache.commons.math.MathException.MathException(String,Object[])" "org.apache.commons.math.MathException.buildMessage(String,Object[],Locale)"
reference "org.apache.commons.math.MathException.MathException(String,Object[])" "org.apache.commons.math.MathException.pattern : String"
reference "org.apache.commons.math.MathException.MathException(String,Object[])" "org.apache.commons.math.MathException.arguments : Object[]"
reference "org.apache.commons.math.MathException.MathException(String,Object[])" "org.apache.commons.math.MathException.rootCause : Throwable"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.MathException(String,Object[])"
call "org.apache.commons.math.MathException.MathException(Throwable)" "org.apache.commons.math.MathException.getMessage()"
reference "org.apache.commons.math.MathException.MathException(Throwable)" "org.apache.commons.math.MathException.pattern : String"
reference "org.apache.commons.math.MathException.MathException(Throwable)" "org.apache.commons.math.MathException.arguments : Object[]"
reference "org.apache.commons.math.MathException.MathException(Throwable)" "org.apache.commons.math.MathException.rootCause : Throwable"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.MathException(Throwable)"
reference "org.apache.commons.math.MathException.MathException(String,Throwable)" "org.apache.commons.math.MathException.pattern : String"
reference "org.apache.commons.math.MathException.MathException(String,Throwable)" "org.apache.commons.math.MathException.arguments : Object[]"
reference "org.apache.commons.math.MathException.MathException(String,Throwable)" "org.apache.commons.math.MathException.rootCause : Throwable"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.MathException(String,Throwable)"
call "org.apache.commons.math.MathException.MathException(String,Object[],Throwable)" "org.apache.commons.math.MathException.buildMessage(String,Object[],Locale)"
reference "org.apache.commons.math.MathException.MathException(String,Object[],Throwable)" "org.apache.commons.math.MathException.pattern : String"
reference "org.apache.commons.math.MathException.MathException(String,Object[],Throwable)" "org.apache.commons.math.MathException.arguments : Object[]"
reference "org.apache.commons.math.MathException.MathException(String,Object[],Throwable)" "org.apache.commons.math.MathException.rootCause : Throwable"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.MathException(String,Object[],Throwable)"
reference "org.apache.commons.math.MathException.getPattern()" "org.apache.commons.math.MathException.pattern : String"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.getPattern()"
reference "org.apache.commons.math.MathException.getArguments()" "org.apache.commons.math.MathException.arguments : Object[]"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.getArguments()"
reference "org.apache.commons.math.MathException.getMessage(Locale)" "org.apache.commons.math.MathException.pattern : String"
reference "org.apache.commons.math.MathException.getMessage(Locale)" "org.apache.commons.math.MathException.arguments : Object[]"
call "org.apache.commons.math.MathException.getMessage(Locale)" "org.apache.commons.math.MathException.buildMessage(String,Object[],Locale)"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.getMessage(Locale)"
reference "org.apache.commons.math.MathException.getCause()" "org.apache.commons.math.MathException.rootCause : Throwable"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.getCause()"
call "org.apache.commons.math.MathException.printStackTrace()" "org.apache.commons.math.MathException.printStackTrace(PrintStream)"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.printStackTrace()"
call "org.apache.commons.math.MathException.printStackTrace(PrintStream)" "org.apache.commons.math.MathException.printStackTrace(PrintWriter)"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.printStackTrace(PrintStream)"
reference "org.apache.commons.math.MathException.printStackTrace(PrintWriter)" "org.apache.commons.math.MathException.rootCause : Throwable"
reference "org.apache.commons.math.MathException.printStackTrace(PrintWriter)" "org.apache.commons.math.MathException.JDK_SUPPORTS_NESTED : boolean"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.printStackTrace(PrintWriter)"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.class$(String)"
reference "org.apache.commons.math.MathException.static {...}" "org.apache.commons.math.MathException.class$java$lang$Throwable : Class"
call "org.apache.commons.math.MathException.static {...}" "org.apache.commons.math.MathException.class$(String)"
reference "org.apache.commons.math.MathException.static {...}" "org.apache.commons.math.MathException.JDK_SUPPORTS_NESTED : boolean"
reference "org.apache.commons.math.MathException.static {...}" "org.apache.commons.math.MathException.cachedResources : ResourceBundle"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.static {...}"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.serialVersionUID : long"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.JDK_SUPPORTS_NESTED : boolean"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.cachedResources : ResourceBundle"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.pattern : String"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.arguments : Object[]"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.rootCause : Throwable"
contain "org.apache.commons.math.MathException" "org.apache.commons.math.MathException.class$java$lang$Throwable : Class"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMean" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMean" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMean.GeometricMean()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMean.GeometricMean()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.SumOfLogs()"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMean.GeometricMean()" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.sumOfLogs : SumOfLogs"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMean" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.GeometricMean()"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMean.increment(double)" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.sumOfLogs : SumOfLogs"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMean.increment(double)" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.increment(double)"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMean" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.increment(double)"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMean.getResult()" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.sumOfLogs : SumOfLogs"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMean.getResult()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.getN()"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMean.getResult()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.getResult()"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMean" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.getResult()"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMean.clear()" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.sumOfLogs : SumOfLogs"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMean.clear()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.clear()"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMean" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.clear()"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMean.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.sumOfLogs : SumOfLogs"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMean.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMean" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.evaluate(double[],int,int)"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMean.getN()" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.sumOfLogs : SumOfLogs"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMean.getN()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.getN()"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMean" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.getN()"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMean" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMean.sumOfLogs : SumOfLogs" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMean" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.sumOfLogs : SumOfLogs"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.discovery.tools.DiscoverClass"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.moment.SecondMoment"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.summary.Sum"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.rank.Min"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.rank.Max"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.moment.GeometricMean"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.moment.Mean"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.moment.Variance"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.StatisticalSummary"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.util.MathUtils"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance(Class)"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()" "org.apache.commons.discovery.tools.DiscoverClass.DiscoverClass()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.class$org$apache$commons$math$stat$descriptive$SummaryStatistics : Class"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.class$(String)"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()" "org.apache.commons.discovery.tools.DiscoverClass.newInstance(Class,String)"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl.SummaryStatisticsImpl()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.n : long"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.secondMoment : SecondMoment"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.summary.Sum.Sum()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sum : Sum"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.SumOfSquares()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumsq : SumOfSquares"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.rank.Min.Min()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.min : Min"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.rank.Max.Max()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.max : Max"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.SumOfLogs()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumLog : SumOfLogs"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.GeometricMean()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.geoMean : GeometricMean"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.mean : Mean"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.variance : Variance"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumsqImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.minImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.maxImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumLogImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.geoMeanImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.meanImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.varianceImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSummary()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSummary()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSummary()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getN()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSummary()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMax()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSummary()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMin()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSummary()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSum()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSummary()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.StatisticalSummaryValues(double,double,long,double,double,double)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSummary()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumImpl : StorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.increment(double)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumsqImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.minImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.maxImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumLogImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.geoMean : GeometricMean"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.increment(double)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.secondMoment : SecondMoment"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.increment(double)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.meanImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.varianceImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.n : long"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getN()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.n : long"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getN()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSum()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumImpl : StorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSum()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.getResult()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSum()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumsq()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumsqImpl : StorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumsq()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.getResult()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumsq()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.mean : Mean"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.meanImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.secondMoment : SecondMoment"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean(FirstMoment)"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()" "org.apache.commons.math.stat.descriptive.moment.Mean.getResult()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.getResult()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getN()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.varianceImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.variance : Variance"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.secondMoment : SecondMoment"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(SecondMoment)"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()" "org.apache.commons.math.stat.descriptive.moment.Variance.getResult()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.getResult()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMax()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.maxImpl : StorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMax()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.getResult()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMax()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMin()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.minImpl : StorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMin()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.getResult()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMin()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getGeometricMean()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.geoMeanImpl : StorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.getGeometricMean()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.getResult()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getGeometricMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.toString()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getN()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.toString()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMin()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.toString()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMax()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.toString()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.toString()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getGeometricMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.toString()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.toString()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumsq()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.toString()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.toString()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.n : long"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.minImpl : StorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.clear()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.maxImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumLogImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumsqImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.geoMeanImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.secondMoment : SecondMoment"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.clear()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.meanImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.mean : Mean"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.varianceImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.variance : Variance"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.equals(Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getGeometricMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.equals(Object)" "org.apache.commons.math.util.MathUtils.equals(double,double)"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.equals(Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMax()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.equals(Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.equals(Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMin()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.equals(Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getN()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.equals(Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSum()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.equals(Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumsq()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.equals(Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.equals(Object)"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.hashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getGeometricMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.hashCode()" "org.apache.commons.math.util.MathUtils.hash(double)"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.hashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMax()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.hashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.hashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMin()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.hashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getN()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.hashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSum()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.hashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumsq()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.hashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.hashCode()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumImpl()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumImpl()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.setSumImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.checkEmpty()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.setSumImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.setSumImpl(StorelessUnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumsqImpl()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumsqImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumsqImpl()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.setSumsqImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.checkEmpty()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.setSumsqImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumsqImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.setSumsqImpl(StorelessUnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMinImpl()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.minImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMinImpl()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.setMinImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.checkEmpty()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.setMinImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.minImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.setMinImpl(StorelessUnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMaxImpl()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.maxImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMaxImpl()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.setMaxImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.checkEmpty()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.setMaxImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.maxImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.setMaxImpl(StorelessUnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumLogImpl()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumLogImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumLogImpl()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.setSumLogImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.checkEmpty()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.setSumLogImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumLogImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.setSumLogImpl(StorelessUnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getGeoMeanImpl()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.geoMeanImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getGeoMeanImpl()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.setGeoMeanImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.checkEmpty()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.setGeoMeanImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.geoMeanImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.setGeoMeanImpl(StorelessUnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMeanImpl()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.meanImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMeanImpl()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.setMeanImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.checkEmpty()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.setMeanImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.meanImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.setMeanImpl(StorelessUnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVarianceImpl()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.varianceImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVarianceImpl()"
call "org.apache.commons.math.stat.descriptive.SummaryStatistics.setVarianceImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.checkEmpty()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.setVarianceImpl(StorelessUnivariateStatistic)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.varianceImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.setVarianceImpl(StorelessUnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.checkEmpty()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.n : long"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.checkEmpty()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.class$(String)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.n : long"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.secondMoment : SecondMoment" "org.apache.commons.math.stat.descriptive.moment.SecondMoment"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.secondMoment : SecondMoment"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.sum : Sum" "org.apache.commons.math.stat.descriptive.summary.Sum"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sum : Sum"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumsq : SumOfSquares" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumsq : SumOfSquares"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.min : Min" "org.apache.commons.math.stat.descriptive.rank.Min"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.min : Min"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.max : Max" "org.apache.commons.math.stat.descriptive.rank.Max"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.max : Max"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumLog : SumOfLogs" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumLog : SumOfLogs"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.geoMean : GeometricMean" "org.apache.commons.math.stat.descriptive.moment.GeometricMean"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.geoMean : GeometricMean"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.mean : Mean" "org.apache.commons.math.stat.descriptive.moment.Mean"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.mean : Mean"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.variance : Variance" "org.apache.commons.math.stat.descriptive.moment.Variance"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.variance : Variance"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumImpl : StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumsqImpl : StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumsqImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.minImpl : StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.minImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.maxImpl : StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.maxImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumLogImpl : StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumLogImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.geoMeanImpl : StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.geoMeanImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.meanImpl : StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.meanImpl : StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatistics.varianceImpl : StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.varianceImpl : StorelessUnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics.class$org$apache$commons$math$stat$descriptive$SummaryStatistics : Class"
reference "org.apache.commons.math.distribution.WeibullDistribution" "org.apache.commons.math.distribution.ContinuousDistribution"
contain "org.apache.commons.math.distribution.WeibullDistribution" "org.apache.commons.math.distribution.WeibullDistribution.getShape()"
contain "org.apache.commons.math.distribution.WeibullDistribution" "org.apache.commons.math.distribution.WeibullDistribution.getScale()"
contain "org.apache.commons.math.distribution.WeibullDistribution" "org.apache.commons.math.distribution.WeibullDistribution.setShape(double)"
contain "org.apache.commons.math.distribution.WeibullDistribution" "org.apache.commons.math.distribution.WeibullDistribution.setScale(double)"
reference "org.apache.commons.math.ode.GillStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator"
reference "org.apache.commons.math.ode.GillStepInterpolator" "org.apache.commons.math.ode.DerivativeException"
call "org.apache.commons.math.ode.GillStepInterpolator.GillStepInterpolator()" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator()"
contain "org.apache.commons.math.ode.GillStepInterpolator" "org.apache.commons.math.ode.GillStepInterpolator.GillStepInterpolator()"
call "org.apache.commons.math.ode.GillStepInterpolator.GillStepInterpolator(GillStepInterpolator)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
contain "org.apache.commons.math.ode.GillStepInterpolator" "org.apache.commons.math.ode.GillStepInterpolator.GillStepInterpolator(GillStepInterpolator)"
call "org.apache.commons.math.ode.GillStepInterpolator.doCopy()" "org.apache.commons.math.ode.GillStepInterpolator.GillStepInterpolator(GillStepInterpolator)"
contain "org.apache.commons.math.ode.GillStepInterpolator" "org.apache.commons.math.ode.GillStepInterpolator.doCopy()"
reference "org.apache.commons.math.ode.GillStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.GillStepInterpolator.tMq : double"
reference "org.apache.commons.math.ode.GillStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.GillStepInterpolator.tPq : double"
reference "org.apache.commons.math.ode.GillStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.GillStepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.GillStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.GillStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.GillStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.GillStepInterpolator.yDotK : double[][]"
contain "org.apache.commons.math.ode.GillStepInterpolator" "org.apache.commons.math.ode.GillStepInterpolator.computeInterpolatedState(double,double)"
reference "org.apache.commons.math.ode.GillStepInterpolator.static {...}" "org.apache.commons.math.ode.GillStepInterpolator.tMq : double"
reference "org.apache.commons.math.ode.GillStepInterpolator.static {...}" "org.apache.commons.math.ode.GillStepInterpolator.tPq : double"
contain "org.apache.commons.math.ode.GillStepInterpolator" "org.apache.commons.math.ode.GillStepInterpolator.static {...}"
contain "org.apache.commons.math.ode.GillStepInterpolator" "org.apache.commons.math.ode.GillStepInterpolator.tMq : double"
contain "org.apache.commons.math.ode.GillStepInterpolator" "org.apache.commons.math.ode.GillStepInterpolator.tPq : double"
contain "org.apache.commons.math.ode.GillStepInterpolator" "org.apache.commons.math.ode.GillStepInterpolator.serialVersionUID : long"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.MathUtils()"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.addAndCheck(int,int)"
call "org.apache.commons.math.util.MathUtils.addAndCheck(long,long)" "org.apache.commons.math.util.MathUtils.addAndCheck(long,long,String)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.addAndCheck(long,long)"
call "org.apache.commons.math.util.MathUtils.addAndCheck(long,long,String)" "org.apache.commons.math.util.MathUtils.addAndCheck(long,long,String)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.addAndCheck(long,long,String)"
call "org.apache.commons.math.util.MathUtils.binomialCoefficient(int,int)" "org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(int,int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.binomialCoefficient(int,int)"
call "org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(int,int)" "org.apache.commons.math.util.MathUtils.binomialCoefficientLog(int,int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(int,int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.binomialCoefficientLog(int,int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.cosh(double)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.equals(double,double)"
call "org.apache.commons.math.util.MathUtils.factorial(int)" "org.apache.commons.math.util.MathUtils.factorialDouble(int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.factorial(int)"
call "org.apache.commons.math.util.MathUtils.factorialDouble(int)" "org.apache.commons.math.util.MathUtils.factorialLog(int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.factorialDouble(int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.factorialLog(int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.gcd(int,int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.hash(double)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.indicator(byte)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.indicator(double)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.indicator(float)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.indicator(int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.indicator(long)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.indicator(short)"
call "org.apache.commons.math.util.MathUtils.lcm(int,int)" "org.apache.commons.math.util.MathUtils.gcd(int,int)"
call "org.apache.commons.math.util.MathUtils.lcm(int,int)" "org.apache.commons.math.util.MathUtils.mulAndCheck(int,int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.lcm(int,int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.log(double,double)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.mulAndCheck(int,int)"
call "org.apache.commons.math.util.MathUtils.mulAndCheck(long,long)" "org.apache.commons.math.util.MathUtils.mulAndCheck(long,long)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.mulAndCheck(long,long)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.nextAfter(double,double)"
call "org.apache.commons.math.util.MathUtils.round(double,int)" "org.apache.commons.math.util.MathUtils.round(double,int,int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.round(double,int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.round(double,int,int)"
call "org.apache.commons.math.util.MathUtils.round(float,int)" "org.apache.commons.math.util.MathUtils.round(float,int,int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.round(float,int)"
call "org.apache.commons.math.util.MathUtils.round(float,int,int)" "org.apache.commons.math.util.MathUtils.indicator(float)"
call "org.apache.commons.math.util.MathUtils.round(float,int,int)" "org.apache.commons.math.util.MathUtils.roundUnscaled(double,double,int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.round(float,int,int)"
call "org.apache.commons.math.util.MathUtils.roundUnscaled(double,double,int)" "org.apache.commons.math.util.MathUtils.nextAfter(double,double)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.roundUnscaled(double,double,int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.sign(byte)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.sign(double)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.sign(float)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.sign(int)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.sign(long)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.sign(short)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.sinh(double)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.subAndCheck(int,int)"
call "org.apache.commons.math.util.MathUtils.subAndCheck(long,long)" "org.apache.commons.math.util.MathUtils.addAndCheck(long,long,String)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.subAndCheck(long,long)"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.NB : byte"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.NS : short"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.PB : byte"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.PS : short"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.ZB : byte"
contain "org.apache.commons.math.util.MathUtils" "org.apache.commons.math.util.MathUtils.ZS : short"
reference "org.apache.commons.math.fraction.ProperFractionFormat" "org.apache.commons.math.fraction.Fraction"
reference "org.apache.commons.math.fraction.ProperFractionFormat" "org.apache.commons.math.fraction.FractionFormat"
reference "org.apache.commons.math.fraction.ProperFractionFormat" "org.apache.commons.math.util.MathUtils"
call "org.apache.commons.math.fraction.ProperFractionFormat.ProperFractionFormat()" "org.apache.commons.math.fraction.ProperFractionFormat.getDefaultNumberFormat()"
call "org.apache.commons.math.fraction.ProperFractionFormat.ProperFractionFormat()" "org.apache.commons.math.fraction.ProperFractionFormat.ProperFractionFormat(NumberFormat)"
contain "org.apache.commons.math.fraction.ProperFractionFormat" "org.apache.commons.math.fraction.ProperFractionFormat.ProperFractionFormat()"
call "org.apache.commons.math.fraction.ProperFractionFormat.ProperFractionFormat(NumberFormat)" "org.apache.commons.math.fraction.ProperFractionFormat.ProperFractionFormat(NumberFormat,NumberFormat,NumberFormat)"
contain "org.apache.commons.math.fraction.ProperFractionFormat" "org.apache.commons.math.fraction.ProperFractionFormat.ProperFractionFormat(NumberFormat)"
call "org.apache.commons.math.fraction.ProperFractionFormat.ProperFractionFormat(NumberFormat,NumberFormat,NumberFormat)" "org.apache.commons.math.fraction.FractionFormat.FractionFormat(NumberFormat,NumberFormat)"
call "org.apache.commons.math.fraction.ProperFractionFormat.ProperFractionFormat(NumberFormat,NumberFormat,NumberFormat)" "org.apache.commons.math.fraction.ProperFractionFormat.setWholeFormat(NumberFormat)"
contain "org.apache.commons.math.fraction.ProperFractionFormat" "org.apache.commons.math.fraction.ProperFractionFormat.ProperFractionFormat(NumberFormat,NumberFormat,NumberFormat)"
call "org.apache.commons.math.fraction.ProperFractionFormat.format(Fraction,StringBuffer,FieldPosition)" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.ProperFractionFormat.format(Fraction,StringBuffer,FieldPosition)" "org.apache.commons.math.fraction.Fraction.getDenominator()"
call "org.apache.commons.math.fraction.ProperFractionFormat.format(Fraction,StringBuffer,FieldPosition)" "org.apache.commons.math.fraction.ProperFractionFormat.getWholeFormat()"
call "org.apache.commons.math.fraction.ProperFractionFormat.format(Fraction,StringBuffer,FieldPosition)" "org.apache.commons.math.fraction.ProperFractionFormat.getNumeratorFormat()"
call "org.apache.commons.math.fraction.ProperFractionFormat.format(Fraction,StringBuffer,FieldPosition)" "org.apache.commons.math.fraction.ProperFractionFormat.getDenominatorFormat()"
contain "org.apache.commons.math.fraction.ProperFractionFormat" "org.apache.commons.math.fraction.ProperFractionFormat.format(Fraction,StringBuffer,FieldPosition)"
reference "org.apache.commons.math.fraction.ProperFractionFormat.getWholeFormat()" "org.apache.commons.math.fraction.ProperFractionFormat.wholeFormat : NumberFormat"
contain "org.apache.commons.math.fraction.ProperFractionFormat" "org.apache.commons.math.fraction.ProperFractionFormat.getWholeFormat()"
call "org.apache.commons.math.fraction.ProperFractionFormat.parse(String,ParsePosition)" "org.apache.commons.math.fraction.FractionFormat.parse(String,ParsePosition)"
call "org.apache.commons.math.fraction.ProperFractionFormat.parse(String,ParsePosition)" "org.apache.commons.math.fraction.ProperFractionFormat.parseAndIgnoreWhitespace(String,ParsePosition)"
call "org.apache.commons.math.fraction.ProperFractionFormat.parse(String,ParsePosition)" "org.apache.commons.math.fraction.ProperFractionFormat.getWholeFormat()"
call "org.apache.commons.math.fraction.ProperFractionFormat.parse(String,ParsePosition)" "org.apache.commons.math.fraction.ProperFractionFormat.getNumeratorFormat()"
call "org.apache.commons.math.fraction.ProperFractionFormat.parse(String,ParsePosition)" "org.apache.commons.math.fraction.ProperFractionFormat.parseNextCharacter(String,ParsePosition)"
call "org.apache.commons.math.fraction.ProperFractionFormat.parse(String,ParsePosition)" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.ProperFractionFormat.parse(String,ParsePosition)" "org.apache.commons.math.fraction.ProperFractionFormat.getDenominatorFormat()"
call "org.apache.commons.math.fraction.ProperFractionFormat.parse(String,ParsePosition)" "org.apache.commons.math.util.MathUtils.sign(int)"
contain "org.apache.commons.math.fraction.ProperFractionFormat" "org.apache.commons.math.fraction.ProperFractionFormat.parse(String,ParsePosition)"
reference "org.apache.commons.math.fraction.ProperFractionFormat.setWholeFormat(NumberFormat)" "org.apache.commons.math.fraction.ProperFractionFormat.wholeFormat : NumberFormat"
contain "org.apache.commons.math.fraction.ProperFractionFormat" "org.apache.commons.math.fraction.ProperFractionFormat.setWholeFormat(NumberFormat)"
contain "org.apache.commons.math.fraction.ProperFractionFormat" "org.apache.commons.math.fraction.ProperFractionFormat.serialVersionUID : long"
contain "org.apache.commons.math.fraction.ProperFractionFormat" "org.apache.commons.math.fraction.ProperFractionFormat.wholeFormat : NumberFormat"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.random.JDKRandomGenerator"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.random.UniformRandomGenerator"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.stat.descriptive.moment.VectorialMean"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.DimensionMismatchException"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.PointCostPair"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.PointCostPair[]"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.CostException"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.random.NotPositiveDefiniteMatrixException"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.random.RandomGenerator"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.linear.RealMatrix"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.random.RandomVectorGenerator"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.ConvergenceChecker"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.CostFunction"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.DirectSearchOptimizer()"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[],double[])" "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(double[],double[])"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[],double[])" "org.apache.commons.math.optimization.DirectSearchOptimizer.setSingleStart()"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[],double[])" "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[],double[])"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[],double[],int,long)" "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(double[],double[])"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[],double[],int,long)" "org.apache.commons.math.random.JDKRandomGenerator.JDKRandomGenerator()"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[],double[],int,long)" "org.apache.commons.math.random.RandomGenerator.setSeed(long)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[],double[],int,long)" "org.apache.commons.math.random.UniformRandomGenerator.UniformRandomGenerator(RandomGenerator)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[],double[],int,long)" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.UncorrelatedRandomVectorGenerator(double[],double[],NormalizedRandomGenerator)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[],double[],int,long)" "org.apache.commons.math.optimization.DirectSearchOptimizer.setMultiStart(int,RandomVectorGenerator)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[],double[],int,long)" "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[],double[],int,long)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][])" "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(double[][])"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][])" "org.apache.commons.math.optimization.DirectSearchOptimizer.setSingleStart()"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][])" "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][])"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(double[][])"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.VectorialMean(int)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.VectorialCovariance(int)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.increment(double[])"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.increment(double[])"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.getResult()"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getResult()"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.random.JDKRandomGenerator.JDKRandomGenerator()"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.random.RandomGenerator.setSeed(long)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.linear.RealMatrix.getNorm()"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.random.UniformRandomGenerator.UniformRandomGenerator(RandomGenerator)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(double[],RealMatrix,double,NormalizedRandomGenerator)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.optimization.DirectSearchOptimizer.setMultiStart(int,RandomVectorGenerator)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)" "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,RandomVectorGenerator)" "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(RandomVectorGenerator)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,RandomVectorGenerator)" "org.apache.commons.math.optimization.DirectSearchOptimizer.setSingleStart()"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,RandomVectorGenerator)" "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,RandomVectorGenerator)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,RandomVectorGenerator,int)" "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(RandomVectorGenerator)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,RandomVectorGenerator,int)" "org.apache.commons.math.optimization.DirectSearchOptimizer.setMultiStart(int,RandomVectorGenerator)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,RandomVectorGenerator,int)" "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker,RandomVectorGenerator,int)"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(double[],double[])" "org.apache.commons.math.optimization.DirectSearchOptimizer.simplex : PointCostPair[]"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(double[],double[])" "org.apache.commons.math.optimization.PointCostPair.PointCostPair(double[],double)"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(double[],double[])"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(double[][])" "org.apache.commons.math.optimization.DirectSearchOptimizer.simplex : PointCostPair[]"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(double[][])" "org.apache.commons.math.optimization.PointCostPair.PointCostPair(double[],double)"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(double[][])"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(RandomVectorGenerator)" "org.apache.commons.math.random.RandomVectorGenerator.nextVector()"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(RandomVectorGenerator)" "org.apache.commons.math.optimization.DirectSearchOptimizer.simplex : PointCostPair[]"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(RandomVectorGenerator)" "org.apache.commons.math.optimization.PointCostPair.PointCostPair(double[],double)"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(RandomVectorGenerator)"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.setSingleStart()" "org.apache.commons.math.optimization.DirectSearchOptimizer.starts : int"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.setSingleStart()" "org.apache.commons.math.optimization.DirectSearchOptimizer.generator : RandomVectorGenerator"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.setSingleStart()" "org.apache.commons.math.optimization.DirectSearchOptimizer.minima : PointCostPair[]"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.setSingleStart()"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.setMultiStart(int,RandomVectorGenerator)" "org.apache.commons.math.optimization.DirectSearchOptimizer.starts : int"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.setMultiStart(int,RandomVectorGenerator)" "org.apache.commons.math.optimization.DirectSearchOptimizer.generator : RandomVectorGenerator"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.setMultiStart(int,RandomVectorGenerator)" "org.apache.commons.math.optimization.DirectSearchOptimizer.minima : PointCostPair[]"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.setMultiStart(int,RandomVectorGenerator)"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.getMinima()" "org.apache.commons.math.optimization.DirectSearchOptimizer.minima : PointCostPair[]"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.getMinima()"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)" "org.apache.commons.math.optimization.DirectSearchOptimizer.f : CostFunction"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)" "org.apache.commons.math.optimization.DirectSearchOptimizer.starts : int"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)" "org.apache.commons.math.optimization.DirectSearchOptimizer.minima : PointCostPair[]"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)" "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluations : int"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)" "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluateSimplex()"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)" "org.apache.commons.math.optimization.DirectSearchOptimizer.simplex : PointCostPair[]"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)" "org.apache.commons.math.optimization.ConvergenceChecker.converged(PointCostPair[])"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)" "org.apache.commons.math.optimization.DirectSearchOptimizer.iterateSimplex()"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)" "org.apache.commons.math.optimization.DirectSearchOptimizer.generator : RandomVectorGenerator"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)" "org.apache.commons.math.optimization.DirectSearchOptimizer.buildSimplex(RandomVectorGenerator)"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)" "org.apache.commons.math.optimization.DirectSearchOptimizer.pointCostPairComparator : Comparator"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)" "org.apache.commons.math.ConvergenceException.ConvergenceException(String,Object[])"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.minimizes(CostFunction,int,ConvergenceChecker)"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.iterateSimplex()"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluateCost(double[])" "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluations : int"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluateCost(double[])" "org.apache.commons.math.optimization.DirectSearchOptimizer.f : CostFunction"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluateCost(double[])" "org.apache.commons.math.optimization.CostFunction.cost(double[])"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluateCost(double[])"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluateSimplex()" "org.apache.commons.math.optimization.DirectSearchOptimizer.simplex : PointCostPair[]"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluateSimplex()" "org.apache.commons.math.optimization.PointCostPair.cost : double"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluateSimplex()" "org.apache.commons.math.optimization.PointCostPair.point : double[]"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluateSimplex()" "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluateCost(double[])"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluateSimplex()" "org.apache.commons.math.optimization.PointCostPair.PointCostPair(double[],double)"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluateSimplex()" "org.apache.commons.math.optimization.DirectSearchOptimizer.pointCostPairComparator : Comparator"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluateSimplex()"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.replaceWorstPoint(PointCostPair)" "org.apache.commons.math.optimization.DirectSearchOptimizer.simplex : PointCostPair[]"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.replaceWorstPoint(PointCostPair)" "org.apache.commons.math.optimization.PointCostPair.cost : double"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.replaceWorstPoint(PointCostPair)"
call "org.apache.commons.math.optimization.DirectSearchOptimizer.static {...}" "org.apache.commons.math.optimization.DirectSearchOptimizer.1.{...}"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.static {...}" "org.apache.commons.math.optimization.DirectSearchOptimizer.pointCostPairComparator : Comparator"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.static {...}"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.pointCostPairComparator : Comparator"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.simplex : PointCostPair[]" "org.apache.commons.math.optimization.PointCostPair[]"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.simplex : PointCostPair[]"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.f : CostFunction" "org.apache.commons.math.optimization.CostFunction"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.f : CostFunction"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.evaluations : int"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.starts : int"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.generator : RandomVectorGenerator" "org.apache.commons.math.random.RandomVectorGenerator"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.generator : RandomVectorGenerator"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.minima : PointCostPair[]" "org.apache.commons.math.optimization.PointCostPair[]"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer" "org.apache.commons.math.optimization.DirectSearchOptimizer.minima : PointCostPair[]"
reference "org.apache.commons.math.linear.QRDecompositionImpl" "org.apache.commons.math.linear.RealMatrixImpl"
reference "org.apache.commons.math.linear.QRDecompositionImpl" "org.apache.commons.math.linear.QRDecomposition"
reference "org.apache.commons.math.linear.QRDecompositionImpl" "org.apache.commons.math.linear.RealMatrix"
call "org.apache.commons.math.linear.QRDecompositionImpl.QRDecompositionImpl(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
reference "org.apache.commons.math.linear.QRDecompositionImpl.QRDecompositionImpl(RealMatrix)" "org.apache.commons.math.linear.QRDecompositionImpl.m : int"
call "org.apache.commons.math.linear.QRDecompositionImpl.QRDecompositionImpl(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getColumnDimension()"
reference "org.apache.commons.math.linear.QRDecompositionImpl.QRDecompositionImpl(RealMatrix)" "org.apache.commons.math.linear.QRDecompositionImpl.n : int"
call "org.apache.commons.math.linear.QRDecompositionImpl.QRDecompositionImpl(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getData()"
reference "org.apache.commons.math.linear.QRDecompositionImpl.QRDecompositionImpl(RealMatrix)" "org.apache.commons.math.linear.QRDecompositionImpl.qr : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImpl.QRDecompositionImpl(RealMatrix)" "org.apache.commons.math.linear.QRDecompositionImpl.rDiag : double[]"
contain "org.apache.commons.math.linear.QRDecompositionImpl" "org.apache.commons.math.linear.QRDecompositionImpl.QRDecompositionImpl(RealMatrix)"
reference "org.apache.commons.math.linear.QRDecompositionImpl.getR()" "org.apache.commons.math.linear.QRDecompositionImpl.m : int"
reference "org.apache.commons.math.linear.QRDecompositionImpl.getR()" "org.apache.commons.math.linear.QRDecompositionImpl.n : int"
call "org.apache.commons.math.linear.QRDecompositionImpl.getR()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)"
call "org.apache.commons.math.linear.QRDecompositionImpl.getR()" "org.apache.commons.math.linear.RealMatrixImpl.getDataRef()"
reference "org.apache.commons.math.linear.QRDecompositionImpl.getR()" "org.apache.commons.math.linear.QRDecompositionImpl.rDiag : double[]"
reference "org.apache.commons.math.linear.QRDecompositionImpl.getR()" "org.apache.commons.math.linear.QRDecompositionImpl.qr : double[][]"
contain "org.apache.commons.math.linear.QRDecompositionImpl" "org.apache.commons.math.linear.QRDecompositionImpl.getR()"
reference "org.apache.commons.math.linear.QRDecompositionImpl.getQ()" "org.apache.commons.math.linear.QRDecompositionImpl.m : int"
call "org.apache.commons.math.linear.QRDecompositionImpl.getQ()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)"
call "org.apache.commons.math.linear.QRDecompositionImpl.getQ()" "org.apache.commons.math.linear.RealMatrixImpl.getDataRef()"
reference "org.apache.commons.math.linear.QRDecompositionImpl.getQ()" "org.apache.commons.math.linear.QRDecompositionImpl.n : int"
reference "org.apache.commons.math.linear.QRDecompositionImpl.getQ()" "org.apache.commons.math.linear.QRDecompositionImpl.qr : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImpl.getQ()" "org.apache.commons.math.linear.QRDecompositionImpl.rDiag : double[]"
contain "org.apache.commons.math.linear.QRDecompositionImpl" "org.apache.commons.math.linear.QRDecompositionImpl.getQ()"
reference "org.apache.commons.math.linear.QRDecompositionImpl.qr : double[][]" "double[][]"
contain "org.apache.commons.math.linear.QRDecompositionImpl" "org.apache.commons.math.linear.QRDecompositionImpl.qr : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImpl.rDiag : double[]" "double[]"
contain "org.apache.commons.math.linear.QRDecompositionImpl" "org.apache.commons.math.linear.QRDecompositionImpl.rDiag : double[]"
contain "org.apache.commons.math.linear.QRDecompositionImpl" "org.apache.commons.math.linear.QRDecompositionImpl.m : int"
contain "org.apache.commons.math.linear.QRDecompositionImpl" "org.apache.commons.math.linear.QRDecompositionImpl.n : int"
reference "org.apache.commons.math.analysis.UnivariateRealFunction" "org.apache.commons.math.FunctionEvaluationException"
contain "org.apache.commons.math.analysis.UnivariateRealFunction" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
contain "org.apache.commons.math.estimation.EstimationProblem" "org.apache.commons.math.estimation.EstimationProblem.getMeasurements()"
contain "org.apache.commons.math.estimation.EstimationProblem" "org.apache.commons.math.estimation.EstimationProblem.getUnboundParameters()"
contain "org.apache.commons.math.estimation.EstimationProblem" "org.apache.commons.math.estimation.EstimationProblem.getAllParameters()"
reference "org.apache.commons.math.stat.descriptive.summary.Product" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.summary.Product.Product()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.summary.Product.Product()" "org.apache.commons.math.stat.descriptive.summary.Product.n : long"
reference "org.apache.commons.math.stat.descriptive.summary.Product.Product()" "org.apache.commons.math.stat.descriptive.summary.Product.value : double"
contain "org.apache.commons.math.stat.descriptive.summary.Product" "org.apache.commons.math.stat.descriptive.summary.Product.Product()"
reference "org.apache.commons.math.stat.descriptive.summary.Product.increment(double)" "org.apache.commons.math.stat.descriptive.summary.Product.n : long"
reference "org.apache.commons.math.stat.descriptive.summary.Product.increment(double)" "org.apache.commons.math.stat.descriptive.summary.Product.value : double"
contain "org.apache.commons.math.stat.descriptive.summary.Product" "org.apache.commons.math.stat.descriptive.summary.Product.increment(double)"
reference "org.apache.commons.math.stat.descriptive.summary.Product.getResult()" "org.apache.commons.math.stat.descriptive.summary.Product.value : double"
contain "org.apache.commons.math.stat.descriptive.summary.Product" "org.apache.commons.math.stat.descriptive.summary.Product.getResult()"
reference "org.apache.commons.math.stat.descriptive.summary.Product.getN()" "org.apache.commons.math.stat.descriptive.summary.Product.n : long"
contain "org.apache.commons.math.stat.descriptive.summary.Product" "org.apache.commons.math.stat.descriptive.summary.Product.getN()"
reference "org.apache.commons.math.stat.descriptive.summary.Product.clear()" "org.apache.commons.math.stat.descriptive.summary.Product.value : double"
reference "org.apache.commons.math.stat.descriptive.summary.Product.clear()" "org.apache.commons.math.stat.descriptive.summary.Product.n : long"
contain "org.apache.commons.math.stat.descriptive.summary.Product" "org.apache.commons.math.stat.descriptive.summary.Product.clear()"
call "org.apache.commons.math.stat.descriptive.summary.Product.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.summary.Product.test(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.summary.Product" "org.apache.commons.math.stat.descriptive.summary.Product.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.summary.Product" "org.apache.commons.math.stat.descriptive.summary.Product.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.summary.Product" "org.apache.commons.math.stat.descriptive.summary.Product.n : long"
contain "org.apache.commons.math.stat.descriptive.summary.Product" "org.apache.commons.math.stat.descriptive.summary.Product.value : double"
reference "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.SecondMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Mean"
reference "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()" "org.apache.commons.math.stat.descriptive.moment.Variance.moment : SecondMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()" "org.apache.commons.math.stat.descriptive.moment.Variance.incMoment : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()" "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected : boolean"
call "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment()"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()"
call "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(SecondMoment)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(SecondMoment)" "org.apache.commons.math.stat.descriptive.moment.Variance.moment : SecondMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(SecondMoment)" "org.apache.commons.math.stat.descriptive.moment.Variance.incMoment : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(SecondMoment)" "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected : boolean"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(SecondMoment)"
call "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean)" "org.apache.commons.math.stat.descriptive.moment.Variance.moment : SecondMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean)" "org.apache.commons.math.stat.descriptive.moment.Variance.incMoment : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean)" "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected : boolean"
call "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean)" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment()"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean)"
call "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean,SecondMoment)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean,SecondMoment)" "org.apache.commons.math.stat.descriptive.moment.Variance.moment : SecondMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean,SecondMoment)" "org.apache.commons.math.stat.descriptive.moment.Variance.incMoment : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean,SecondMoment)" "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected : boolean"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean,SecondMoment)"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.increment(double)" "org.apache.commons.math.stat.descriptive.moment.Variance.incMoment : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.increment(double)" "org.apache.commons.math.stat.descriptive.moment.Variance.moment : SecondMoment"
call "org.apache.commons.math.stat.descriptive.moment.Variance.increment(double)" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.increment(double)"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.increment(double)"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.getResult()" "org.apache.commons.math.stat.descriptive.moment.Variance.moment : SecondMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.getResult()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.n : long"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.getResult()" "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.getResult()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.m2 : double"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.getResult()"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.getN()" "org.apache.commons.math.stat.descriptive.moment.Variance.moment : SecondMoment"
call "org.apache.commons.math.stat.descriptive.moment.Variance.getN()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.getN()"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.getN()"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.clear()" "org.apache.commons.math.stat.descriptive.moment.Variance.incMoment : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.clear()" "org.apache.commons.math.stat.descriptive.moment.Variance.moment : SecondMoment"
call "org.apache.commons.math.stat.descriptive.moment.Variance.clear()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.clear()"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.clear()"
call "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[])" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Variance.test(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Variance.clear()"
call "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
call "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Mean.evaluate(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],double,int,int)"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],double,int,int)" "org.apache.commons.math.stat.descriptive.moment.Variance.test(double[],int,int)"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],double,int,int)" "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected : boolean"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],double,int,int)"
call "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],double)" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],double,int,int)"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],double)"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected()" "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected : boolean"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected()"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.setBiasCorrected(boolean)" "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected : boolean"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.setBiasCorrected(boolean)"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.moment.Variance.moment : SecondMoment" "org.apache.commons.math.stat.descriptive.moment.SecondMoment"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.moment : SecondMoment"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.incMoment : boolean"
contain "org.apache.commons.math.stat.descriptive.moment.Variance" "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.moment.FirstMoment.FirstMoment()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.FirstMoment()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.n : long"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.FirstMoment()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.m1 : double"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.FirstMoment()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.dev : double"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.FirstMoment()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.nDev : double"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMoment" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.FirstMoment()"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.n : long"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.m1 : double"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.dev : double"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.nDev : double"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMoment" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.increment(double)"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.clear()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.m1 : double"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.clear()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.n : long"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.clear()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.dev : double"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.clear()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.nDev : double"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMoment" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.clear()"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.getResult()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.m1 : double"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMoment" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.getResult()"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMoment.getN()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.n : long"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMoment" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.getN()"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMoment" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMoment" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.n : long"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMoment" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.m1 : double"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMoment" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.dev : double"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMoment" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.nDev : double"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DerivativeException"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator()" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator()"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator()" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v1 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator()" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v2 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator()" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v3 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator()" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v4 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator()" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.vectorsInitialized : boolean"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(DormandPrince54StepInterpolator)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(DormandPrince54StepInterpolator)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v1 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(DormandPrince54StepInterpolator)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v2 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(DormandPrince54StepInterpolator)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v3 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(DormandPrince54StepInterpolator)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v4 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(DormandPrince54StepInterpolator)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.vectorsInitialized : boolean"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(DormandPrince54StepInterpolator)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolator.doCopy()" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(DormandPrince54StepInterpolator)"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.doCopy()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v1 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v2 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v3 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v4 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.vectorsInitialized : boolean"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolator.storeTime(double)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.storeTime(double)"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.storeTime(double)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.vectorsInitialized : boolean"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.storeTime(double)"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.vectorsInitialized : boolean"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v1 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v2 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v3 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v4 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.h : double"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.yDotK : double[][]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.currentState : double[]"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.computeInterpolatedState(double,double)"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v1 : double[]" "double[]"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v1 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v2 : double[]" "double[]"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v2 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v3 : double[]" "double[]"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v3 : double[]"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v4 : double[]" "double[]"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.v4 : double[]"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.vectorsInitialized : boolean"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.a70 : double"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.a72 : double"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.a73 : double"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.a74 : double"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.a75 : double"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.d0 : double"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.d2 : double"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.d3 : double"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.d4 : double"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.d5 : double"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.d6 : double"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.serialVersionUID : long"
reference "org.apache.commons.math.stat.Frequency.NaturalComparator" "org.apache.commons.math.stat.Frequency"
contain "org.apache.commons.math.stat.Frequency.NaturalComparator" "org.apache.commons.math.stat.Frequency.NaturalComparator.NaturalComparator()"
contain "org.apache.commons.math.stat.Frequency.NaturalComparator" "org.apache.commons.math.stat.Frequency.NaturalComparator.compare(Object,Object)"
call "org.apache.commons.math.stat.Frequency.NaturalComparator.NaturalComparator(Frequency.1)" "org.apache.commons.math.stat.Frequency.NaturalComparator.NaturalComparator()"
contain "org.apache.commons.math.stat.Frequency.NaturalComparator" "org.apache.commons.math.stat.Frequency.NaturalComparator.NaturalComparator(Frequency.1)"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.AbstractUnivariateStatistic()"
call "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.evaluate(double[])" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.evaluate(double[])" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.evaluate(double[])"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.serialVersionUID : long"
reference "org.apache.commons.math.estimation.SimpleEstimationProblem" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.SimpleEstimationProblem" "org.apache.commons.math.estimation.EstimatedParameter[]"
reference "org.apache.commons.math.estimation.SimpleEstimationProblem" "org.apache.commons.math.estimation.WeightedMeasurement"
reference "org.apache.commons.math.estimation.SimpleEstimationProblem" "org.apache.commons.math.estimation.WeightedMeasurement[]"
reference "org.apache.commons.math.estimation.SimpleEstimationProblem" "org.apache.commons.math.estimation.EstimationProblem"
reference "org.apache.commons.math.estimation.SimpleEstimationProblem.SimpleEstimationProblem()" "org.apache.commons.math.estimation.SimpleEstimationProblem.parameters : ArrayList"
reference "org.apache.commons.math.estimation.SimpleEstimationProblem.SimpleEstimationProblem()" "org.apache.commons.math.estimation.SimpleEstimationProblem.measurements : ArrayList"
contain "org.apache.commons.math.estimation.SimpleEstimationProblem" "org.apache.commons.math.estimation.SimpleEstimationProblem.SimpleEstimationProblem()"
reference "org.apache.commons.math.estimation.SimpleEstimationProblem.getAllParameters()" "org.apache.commons.math.estimation.SimpleEstimationProblem.parameters : ArrayList"
contain "org.apache.commons.math.estimation.SimpleEstimationProblem" "org.apache.commons.math.estimation.SimpleEstimationProblem.getAllParameters()"
reference "org.apache.commons.math.estimation.SimpleEstimationProblem.getUnboundParameters()" "org.apache.commons.math.estimation.SimpleEstimationProblem.parameters : ArrayList"
call "org.apache.commons.math.estimation.SimpleEstimationProblem.getUnboundParameters()" "org.apache.commons.math.estimation.EstimatedParameter.isBound()"
contain "org.apache.commons.math.estimation.SimpleEstimationProblem" "org.apache.commons.math.estimation.SimpleEstimationProblem.getUnboundParameters()"
reference "org.apache.commons.math.estimation.SimpleEstimationProblem.getMeasurements()" "org.apache.commons.math.estimation.SimpleEstimationProblem.measurements : ArrayList"
contain "org.apache.commons.math.estimation.SimpleEstimationProblem" "org.apache.commons.math.estimation.SimpleEstimationProblem.getMeasurements()"
reference "org.apache.commons.math.estimation.SimpleEstimationProblem.addParameter(EstimatedParameter)" "org.apache.commons.math.estimation.SimpleEstimationProblem.parameters : ArrayList"
contain "org.apache.commons.math.estimation.SimpleEstimationProblem" "org.apache.commons.math.estimation.SimpleEstimationProblem.addParameter(EstimatedParameter)"
reference "org.apache.commons.math.estimation.SimpleEstimationProblem.addMeasurement(WeightedMeasurement)" "org.apache.commons.math.estimation.SimpleEstimationProblem.measurements : ArrayList"
contain "org.apache.commons.math.estimation.SimpleEstimationProblem" "org.apache.commons.math.estimation.SimpleEstimationProblem.addMeasurement(WeightedMeasurement)"
contain "org.apache.commons.math.estimation.SimpleEstimationProblem" "org.apache.commons.math.estimation.SimpleEstimationProblem.parameters : ArrayList"
contain "org.apache.commons.math.estimation.SimpleEstimationProblem" "org.apache.commons.math.estimation.SimpleEstimationProblem.measurements : ArrayList"
reference "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.AbstractContinuousDistribution"
reference "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistribution"
reference "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.special.Beta"
call "org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double,double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution()"
call "org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double,double)" "org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(double)"
call "org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double,double)" "org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(double)"
contain "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double,double)"
call "org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.FDistributionImpl.getNumeratorDegreesOfFreedom()"
call "org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.FDistributionImpl.getDenominatorDegreesOfFreedom()"
call "org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double)"
contain "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double)"
call "org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistributionImpl.getDomainLowerBound(double)"
contain "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistributionImpl.getDomainUpperBound(double)"
call "org.apache.commons.math.distribution.FDistributionImpl.getInitialDomain(double)" "org.apache.commons.math.distribution.FDistributionImpl.getDenominatorDegreesOfFreedom()"
contain "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistributionImpl.getInitialDomain(double)"
reference "org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(double)" "org.apache.commons.math.distribution.FDistributionImpl.numeratorDegreesOfFreedom : double"
contain "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(double)"
reference "org.apache.commons.math.distribution.FDistributionImpl.getNumeratorDegreesOfFreedom()" "org.apache.commons.math.distribution.FDistributionImpl.numeratorDegreesOfFreedom : double"
contain "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistributionImpl.getNumeratorDegreesOfFreedom()"
reference "org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(double)" "org.apache.commons.math.distribution.FDistributionImpl.denominatorDegreesOfFreedom : double"
contain "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(double)"
reference "org.apache.commons.math.distribution.FDistributionImpl.getDenominatorDegreesOfFreedom()" "org.apache.commons.math.distribution.FDistributionImpl.denominatorDegreesOfFreedom : double"
contain "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistributionImpl.getDenominatorDegreesOfFreedom()"
contain "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistributionImpl.serialVersionUID : long"
contain "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistributionImpl.numeratorDegreesOfFreedom : double"
contain "org.apache.commons.math.distribution.FDistributionImpl" "org.apache.commons.math.distribution.FDistributionImpl.denominatorDegreesOfFreedom : double"
reference "org.apache.commons.math.ode.GillIntegrator" "org.apache.commons.math.ode.GillStepInterpolator"
reference "org.apache.commons.math.ode.GillIntegrator" "double[]"
reference "org.apache.commons.math.ode.GillIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator"
reference "org.apache.commons.math.ode.GillIntegrator.GillIntegrator(double)" "org.apache.commons.math.ode.GillIntegrator.c : double[]"
reference "org.apache.commons.math.ode.GillIntegrator.GillIntegrator(double)" "org.apache.commons.math.ode.GillIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.GillIntegrator.GillIntegrator(double)" "org.apache.commons.math.ode.GillIntegrator.b : double[]"
call "org.apache.commons.math.ode.GillIntegrator.GillIntegrator(double)" "org.apache.commons.math.ode.GillStepInterpolator.GillStepInterpolator()"
call "org.apache.commons.math.ode.GillIntegrator.GillIntegrator(double)" "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)"
contain "org.apache.commons.math.ode.GillIntegrator" "org.apache.commons.math.ode.GillIntegrator.GillIntegrator(double)"
contain "org.apache.commons.math.ode.GillIntegrator" "org.apache.commons.math.ode.GillIntegrator.getName()"
reference "org.apache.commons.math.ode.GillIntegrator.static {...}" "org.apache.commons.math.ode.GillIntegrator.sqrt2 : double"
reference "org.apache.commons.math.ode.GillIntegrator.static {...}" "org.apache.commons.math.ode.GillIntegrator.c : double[]"
reference "org.apache.commons.math.ode.GillIntegrator.static {...}" "org.apache.commons.math.ode.GillIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.GillIntegrator.static {...}" "org.apache.commons.math.ode.GillIntegrator.b : double[]"
contain "org.apache.commons.math.ode.GillIntegrator" "org.apache.commons.math.ode.GillIntegrator.static {...}"
contain "org.apache.commons.math.ode.GillIntegrator" "org.apache.commons.math.ode.GillIntegrator.methodName : String"
contain "org.apache.commons.math.ode.GillIntegrator" "org.apache.commons.math.ode.GillIntegrator.sqrt2 : double"
reference "org.apache.commons.math.ode.GillIntegrator.c : double[]" "double[]"
contain "org.apache.commons.math.ode.GillIntegrator" "org.apache.commons.math.ode.GillIntegrator.c : double[]"
reference "org.apache.commons.math.ode.GillIntegrator.a : double[][]" "double[][]"
contain "org.apache.commons.math.ode.GillIntegrator" "org.apache.commons.math.ode.GillIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.GillIntegrator.b : double[]" "double[]"
contain "org.apache.commons.math.ode.GillIntegrator" "org.apache.commons.math.ode.GillIntegrator.b : double[]"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.DimensionMismatchException"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "double[]"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "double[][]"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.NotPositiveDefiniteMatrixException"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.linear.RealMatrixImpl"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.RandomVectorGenerator"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.linear.RealMatrix"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.NormalizedRandomGenerator"
call "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(double[],RealMatrix,double,NormalizedRandomGenerator)" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(double[],RealMatrix,double,NormalizedRandomGenerator)" "org.apache.commons.math.DimensionMismatchException.DimensionMismatchException(int,int)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(double[],RealMatrix,double,NormalizedRandomGenerator)" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.mean : double[]"
call "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(double[],RealMatrix,double,NormalizedRandomGenerator)" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.decompose(RealMatrix,double)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(double[],RealMatrix,double,NormalizedRandomGenerator)" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.generator : NormalizedRandomGenerator"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(double[],RealMatrix,double,NormalizedRandomGenerator)" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.rank : int"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(double[],RealMatrix,double,NormalizedRandomGenerator)" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.normalized : double[]"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(double[],RealMatrix,double,NormalizedRandomGenerator)"
call "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(RealMatrix,double,NormalizedRandomGenerator)" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(RealMatrix,double,NormalizedRandomGenerator)" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.mean : double[]"
call "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(RealMatrix,double,NormalizedRandomGenerator)" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.decompose(RealMatrix,double)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(RealMatrix,double,NormalizedRandomGenerator)" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.generator : NormalizedRandomGenerator"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(RealMatrix,double,NormalizedRandomGenerator)" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.rank : int"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(RealMatrix,double,NormalizedRandomGenerator)" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.normalized : double[]"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(RealMatrix,double,NormalizedRandomGenerator)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.getGenerator()" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.generator : NormalizedRandomGenerator"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.getGenerator()"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.getRootMatrix()" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.root : RealMatrixImpl"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.getRootMatrix()"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.getRank()" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.rank : int"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.getRank()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.decompose(RealMatrix,double)" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.decompose(RealMatrix,double)" "org.apache.commons.math.linear.RealMatrix.getData()"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.decompose(RealMatrix,double)" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.rank : int"
call "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.decompose(RealMatrix,double)" "org.apache.commons.math.random.NotPositiveDefiniteMatrixException.NotPositiveDefiniteMatrixException()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.decompose(RealMatrix,double)" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.decompose(RealMatrix,double)" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.root : RealMatrixImpl"
call "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.decompose(RealMatrix,double)" "org.apache.commons.math.linear.RealMatrixImpl.getDataRef()"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.decompose(RealMatrix,double)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.nextVector()" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.rank : int"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.nextVector()" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.normalized : double[]"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.nextVector()" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.generator : NormalizedRandomGenerator"
call "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.nextVector()" "org.apache.commons.math.random.NormalizedRandomGenerator.nextNormalizedDouble()"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.nextVector()" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.mean : double[]"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.nextVector()" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.root : RealMatrixImpl"
call "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.nextVector()" "org.apache.commons.math.linear.RealMatrixImpl.getEntry(int,int)"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.nextVector()"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.mean : double[]" "double[]"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.mean : double[]"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.root : RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.root : RealMatrixImpl"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.rank : int"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.generator : NormalizedRandomGenerator" "org.apache.commons.math.random.NormalizedRandomGenerator"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.generator : NormalizedRandomGenerator"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.normalized : double[]" "double[]"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.normalized : double[]"
reference "org.apache.commons.math.ode.FirstOrderDifferentialEquations" "org.apache.commons.math.ode.DerivativeException"
contain "org.apache.commons.math.ode.FirstOrderDifferentialEquations" "org.apache.commons.math.ode.FirstOrderDifferentialEquations.getDimension()"
contain "org.apache.commons.math.ode.FirstOrderDifferentialEquations" "org.apache.commons.math.ode.FirstOrderDifferentialEquations.computeDerivatives(double,double[],double[])"
reference "org.apache.commons.math.analysis.SplineInterpolator" "org.apache.commons.math.analysis.PolynomialFunction"
reference "org.apache.commons.math.analysis.SplineInterpolator" "org.apache.commons.math.analysis.PolynomialSplineFunction"
reference "org.apache.commons.math.analysis.SplineInterpolator" "org.apache.commons.math.analysis.UnivariateRealInterpolator"
contain "org.apache.commons.math.analysis.SplineInterpolator" "org.apache.commons.math.analysis.SplineInterpolator.SplineInterpolator()"
call "org.apache.commons.math.analysis.SplineInterpolator.interpolate(double[],double[])" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
call "org.apache.commons.math.analysis.SplineInterpolator.interpolate(double[],double[])" "org.apache.commons.math.analysis.PolynomialSplineFunction.PolynomialSplineFunction(double[],PolynomialFunction[])"
contain "org.apache.commons.math.analysis.SplineInterpolator" "org.apache.commons.math.analysis.SplineInterpolator.interpolate(double[],double[])"
reference "org.apache.commons.math.ode.SecondOrderDifferentialEquations" "org.apache.commons.math.ode.DerivativeException"
contain "org.apache.commons.math.ode.SecondOrderDifferentialEquations" "org.apache.commons.math.ode.SecondOrderDifferentialEquations.getDimension()"
contain "org.apache.commons.math.ode.SecondOrderDifferentialEquations" "org.apache.commons.math.ode.SecondOrderDifferentialEquations.computeSecondDerivatives(double,double[],double[],double[])"
reference "org.apache.commons.math.ArgumentOutsideDomainException" "org.apache.commons.math.FunctionEvaluationException"
call "org.apache.commons.math.ArgumentOutsideDomainException.ArgumentOutsideDomainException(double,double,double)" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Object[])"
contain "org.apache.commons.math.ArgumentOutsideDomainException" "org.apache.commons.math.ArgumentOutsideDomainException.ArgumentOutsideDomainException(double,double,double)"
contain "org.apache.commons.math.ArgumentOutsideDomainException" "org.apache.commons.math.ArgumentOutsideDomainException.serialVersionUID : long"
reference "org.apache.commons.math.random.AbstractRandomGenerator" "org.apache.commons.math.random.RandomGenerator"
reference "org.apache.commons.math.random.AbstractRandomGenerator.AbstractRandomGenerator()" "org.apache.commons.math.random.AbstractRandomGenerator.cachedNormalDeviate : double"
contain "org.apache.commons.math.random.AbstractRandomGenerator" "org.apache.commons.math.random.AbstractRandomGenerator.AbstractRandomGenerator()"
reference "org.apache.commons.math.random.AbstractRandomGenerator.clear()" "org.apache.commons.math.random.AbstractRandomGenerator.cachedNormalDeviate : double"
contain "org.apache.commons.math.random.AbstractRandomGenerator" "org.apache.commons.math.random.AbstractRandomGenerator.clear()"
contain "org.apache.commons.math.random.AbstractRandomGenerator" "org.apache.commons.math.random.AbstractRandomGenerator.setSeed(long)"
call "org.apache.commons.math.random.AbstractRandomGenerator.nextBytes(byte[])" "org.apache.commons.math.random.AbstractRandomGenerator.nextInt()"
contain "org.apache.commons.math.random.AbstractRandomGenerator" "org.apache.commons.math.random.AbstractRandomGenerator.nextBytes(byte[])"
call "org.apache.commons.math.random.AbstractRandomGenerator.nextInt()" "org.apache.commons.math.random.AbstractRandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.AbstractRandomGenerator" "org.apache.commons.math.random.AbstractRandomGenerator.nextInt()"
call "org.apache.commons.math.random.AbstractRandomGenerator.nextInt(int)" "org.apache.commons.math.random.AbstractRandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.AbstractRandomGenerator" "org.apache.commons.math.random.AbstractRandomGenerator.nextInt(int)"
call "org.apache.commons.math.random.AbstractRandomGenerator.nextLong()" "org.apache.commons.math.random.AbstractRandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.AbstractRandomGenerator" "org.apache.commons.math.random.AbstractRandomGenerator.nextLong()"
call "org.apache.commons.math.random.AbstractRandomGenerator.nextBoolean()" "org.apache.commons.math.random.AbstractRandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.AbstractRandomGenerator" "org.apache.commons.math.random.AbstractRandomGenerator.nextBoolean()"
call "org.apache.commons.math.random.AbstractRandomGenerator.nextFloat()" "org.apache.commons.math.random.AbstractRandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.AbstractRandomGenerator" "org.apache.commons.math.random.AbstractRandomGenerator.nextFloat()"
contain "org.apache.commons.math.random.AbstractRandomGenerator" "org.apache.commons.math.random.AbstractRandomGenerator.nextDouble()"
reference "org.apache.commons.math.random.AbstractRandomGenerator.nextGaussian()" "org.apache.commons.math.random.AbstractRandomGenerator.cachedNormalDeviate : double"
call "org.apache.commons.math.random.AbstractRandomGenerator.nextGaussian()" "org.apache.commons.math.random.AbstractRandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.AbstractRandomGenerator" "org.apache.commons.math.random.AbstractRandomGenerator.nextGaussian()"
contain "org.apache.commons.math.random.AbstractRandomGenerator" "org.apache.commons.math.random.AbstractRandomGenerator.cachedNormalDeviate : double"
reference "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.NotARotationMatrixException"
reference "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Vector3D"
reference "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.CardanEulerSingularityException"
reference "org.apache.commons.math.geometry.Rotation" "double[]"
reference "org.apache.commons.math.geometry.Rotation" "double[][]"
reference "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.RotationOrder"
reference "org.apache.commons.math.geometry.Rotation.Rotation()" "org.apache.commons.math.geometry.Rotation.q0 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation()" "org.apache.commons.math.geometry.Rotation.q1 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation()" "org.apache.commons.math.geometry.Rotation.q2 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation()" "org.apache.commons.math.geometry.Rotation.q3 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.Rotation()"
reference "org.apache.commons.math.geometry.Rotation.Rotation(double,double,double,double,boolean)" "org.apache.commons.math.geometry.Rotation.q0 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation(double,double,double,double,boolean)" "org.apache.commons.math.geometry.Rotation.q1 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation(double,double,double,double,boolean)" "org.apache.commons.math.geometry.Rotation.q2 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation(double,double,double,double,boolean)" "org.apache.commons.math.geometry.Rotation.q3 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.Rotation(double,double,double,double,boolean)"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)" "org.apache.commons.math.geometry.Vector3D.getNorm()"
reference "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)" "org.apache.commons.math.geometry.Rotation.q0 : double"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)" "org.apache.commons.math.geometry.Vector3D.getX()"
reference "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)" "org.apache.commons.math.geometry.Rotation.q1 : double"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)" "org.apache.commons.math.geometry.Vector3D.getY()"
reference "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)" "org.apache.commons.math.geometry.Rotation.q2 : double"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)" "org.apache.commons.math.geometry.Vector3D.getZ()"
reference "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)" "org.apache.commons.math.geometry.Rotation.q3 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)"
call "org.apache.commons.math.geometry.Rotation.Rotation(double[][],double)" "org.apache.commons.math.geometry.NotARotationMatrixException.NotARotationMatrixException(String,String[])"
call "org.apache.commons.math.geometry.Rotation.Rotation(double[][],double)" "org.apache.commons.math.geometry.Rotation.orthogonalizeMatrix(double[][],double)"
reference "org.apache.commons.math.geometry.Rotation.Rotation(double[][],double)" "org.apache.commons.math.geometry.Rotation.q0 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation(double[][],double)" "org.apache.commons.math.geometry.Rotation.q1 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation(double[][],double)" "org.apache.commons.math.geometry.Rotation.q2 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation(double[][],double)" "org.apache.commons.math.geometry.Rotation.q3 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.Rotation(double[][],double)"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.dotProduct(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.getX()"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.getY()"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.getZ()"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.crossProduct(Vector3D,Vector3D)"
reference "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.Rotation.q0 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.Rotation.q1 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.Rotation.q2 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.Rotation.q3 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.getNorm()"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.dotProduct(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.orthogonal()"
reference "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Rotation.q0 : double"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.getX()"
reference "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Rotation.q1 : double"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.getY()"
reference "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Rotation.q2 : double"
call "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.getZ()"
reference "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Rotation.q3 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.Rotation.Rotation(RotationOrder,double,double,double)" "org.apache.commons.math.geometry.RotationOrder.getA1()"
call "org.apache.commons.math.geometry.Rotation.Rotation(RotationOrder,double,double,double)" "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)"
call "org.apache.commons.math.geometry.Rotation.Rotation(RotationOrder,double,double,double)" "org.apache.commons.math.geometry.RotationOrder.getA2()"
call "org.apache.commons.math.geometry.Rotation.Rotation(RotationOrder,double,double,double)" "org.apache.commons.math.geometry.RotationOrder.getA3()"
call "org.apache.commons.math.geometry.Rotation.Rotation(RotationOrder,double,double,double)" "org.apache.commons.math.geometry.Rotation.applyTo(Rotation)"
reference "org.apache.commons.math.geometry.Rotation.Rotation(RotationOrder,double,double,double)" "org.apache.commons.math.geometry.Rotation.q0 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation(RotationOrder,double,double,double)" "org.apache.commons.math.geometry.Rotation.q1 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation(RotationOrder,double,double,double)" "org.apache.commons.math.geometry.Rotation.q2 : double"
reference "org.apache.commons.math.geometry.Rotation.Rotation(RotationOrder,double,double,double)" "org.apache.commons.math.geometry.Rotation.q3 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.Rotation(RotationOrder,double,double,double)"
reference "org.apache.commons.math.geometry.Rotation.revert()" "org.apache.commons.math.geometry.Rotation.q0 : double"
reference "org.apache.commons.math.geometry.Rotation.revert()" "org.apache.commons.math.geometry.Rotation.q1 : double"
reference "org.apache.commons.math.geometry.Rotation.revert()" "org.apache.commons.math.geometry.Rotation.q2 : double"
reference "org.apache.commons.math.geometry.Rotation.revert()" "org.apache.commons.math.geometry.Rotation.q3 : double"
call "org.apache.commons.math.geometry.Rotation.revert()" "org.apache.commons.math.geometry.Rotation.Rotation(double,double,double,double,boolean)"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.revert()"
reference "org.apache.commons.math.geometry.Rotation.getQ0()" "org.apache.commons.math.geometry.Rotation.q0 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.getQ0()"
reference "org.apache.commons.math.geometry.Rotation.getQ1()" "org.apache.commons.math.geometry.Rotation.q1 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.getQ1()"
reference "org.apache.commons.math.geometry.Rotation.getQ2()" "org.apache.commons.math.geometry.Rotation.q2 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.getQ2()"
reference "org.apache.commons.math.geometry.Rotation.getQ3()" "org.apache.commons.math.geometry.Rotation.q3 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.getQ3()"
reference "org.apache.commons.math.geometry.Rotation.getAxis()" "org.apache.commons.math.geometry.Rotation.q1 : double"
reference "org.apache.commons.math.geometry.Rotation.getAxis()" "org.apache.commons.math.geometry.Rotation.q2 : double"
reference "org.apache.commons.math.geometry.Rotation.getAxis()" "org.apache.commons.math.geometry.Rotation.q3 : double"
call "org.apache.commons.math.geometry.Rotation.getAxis()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
reference "org.apache.commons.math.geometry.Rotation.getAxis()" "org.apache.commons.math.geometry.Rotation.q0 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.getAxis()"
reference "org.apache.commons.math.geometry.Rotation.getAngle()" "org.apache.commons.math.geometry.Rotation.q0 : double"
reference "org.apache.commons.math.geometry.Rotation.getAngle()" "org.apache.commons.math.geometry.Rotation.q1 : double"
reference "org.apache.commons.math.geometry.Rotation.getAngle()" "org.apache.commons.math.geometry.Rotation.q2 : double"
reference "org.apache.commons.math.geometry.Rotation.getAngle()" "org.apache.commons.math.geometry.Rotation.q3 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.getAngle()"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.RotationOrder.XYZ : RotationOrder"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.Vector3D.plusK : Vector3D"
call "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.Vector3D.plusI : Vector3D"
call "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.Rotation.applyInverseTo(Vector3D)"
call "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.Vector3D.getZ()"
call "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.CardanEulerSingularityException.CardanEulerSingularityException(boolean)"
call "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.Vector3D.getY()"
call "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.Vector3D.getX()"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.RotationOrder.XZY : RotationOrder"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.Vector3D.plusJ : Vector3D"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.RotationOrder.YXZ : RotationOrder"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.RotationOrder.YZX : RotationOrder"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.RotationOrder.ZXY : RotationOrder"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.RotationOrder.ZYX : RotationOrder"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.RotationOrder.XYX : RotationOrder"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.RotationOrder.XZX : RotationOrder"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.RotationOrder.YXY : RotationOrder"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.RotationOrder.YZY : RotationOrder"
reference "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)" "org.apache.commons.math.geometry.RotationOrder.ZXZ : RotationOrder"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)"
reference "org.apache.commons.math.geometry.Rotation.getMatrix()" "org.apache.commons.math.geometry.Rotation.q0 : double"
reference "org.apache.commons.math.geometry.Rotation.getMatrix()" "org.apache.commons.math.geometry.Rotation.q1 : double"
reference "org.apache.commons.math.geometry.Rotation.getMatrix()" "org.apache.commons.math.geometry.Rotation.q2 : double"
reference "org.apache.commons.math.geometry.Rotation.getMatrix()" "org.apache.commons.math.geometry.Rotation.q3 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.getMatrix()"
call "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)" "org.apache.commons.math.geometry.Vector3D.getX()"
call "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)" "org.apache.commons.math.geometry.Vector3D.getY()"
call "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)" "org.apache.commons.math.geometry.Vector3D.getZ()"
reference "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)" "org.apache.commons.math.geometry.Rotation.q1 : double"
reference "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)" "org.apache.commons.math.geometry.Rotation.q2 : double"
reference "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)" "org.apache.commons.math.geometry.Rotation.q3 : double"
reference "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)" "org.apache.commons.math.geometry.Rotation.q0 : double"
call "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)"
call "org.apache.commons.math.geometry.Rotation.applyInverseTo(Vector3D)" "org.apache.commons.math.geometry.Vector3D.getX()"
call "org.apache.commons.math.geometry.Rotation.applyInverseTo(Vector3D)" "org.apache.commons.math.geometry.Vector3D.getY()"
call "org.apache.commons.math.geometry.Rotation.applyInverseTo(Vector3D)" "org.apache.commons.math.geometry.Vector3D.getZ()"
reference "org.apache.commons.math.geometry.Rotation.applyInverseTo(Vector3D)" "org.apache.commons.math.geometry.Rotation.q1 : double"
reference "org.apache.commons.math.geometry.Rotation.applyInverseTo(Vector3D)" "org.apache.commons.math.geometry.Rotation.q2 : double"
reference "org.apache.commons.math.geometry.Rotation.applyInverseTo(Vector3D)" "org.apache.commons.math.geometry.Rotation.q3 : double"
reference "org.apache.commons.math.geometry.Rotation.applyInverseTo(Vector3D)" "org.apache.commons.math.geometry.Rotation.q0 : double"
call "org.apache.commons.math.geometry.Rotation.applyInverseTo(Vector3D)" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.applyInverseTo(Vector3D)"
reference "org.apache.commons.math.geometry.Rotation.applyTo(Rotation)" "org.apache.commons.math.geometry.Rotation.q0 : double"
reference "org.apache.commons.math.geometry.Rotation.applyTo(Rotation)" "org.apache.commons.math.geometry.Rotation.q1 : double"
reference "org.apache.commons.math.geometry.Rotation.applyTo(Rotation)" "org.apache.commons.math.geometry.Rotation.q2 : double"
reference "org.apache.commons.math.geometry.Rotation.applyTo(Rotation)" "org.apache.commons.math.geometry.Rotation.q3 : double"
call "org.apache.commons.math.geometry.Rotation.applyTo(Rotation)" "org.apache.commons.math.geometry.Rotation.Rotation(double,double,double,double,boolean)"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.applyTo(Rotation)"
reference "org.apache.commons.math.geometry.Rotation.applyInverseTo(Rotation)" "org.apache.commons.math.geometry.Rotation.q0 : double"
reference "org.apache.commons.math.geometry.Rotation.applyInverseTo(Rotation)" "org.apache.commons.math.geometry.Rotation.q1 : double"
reference "org.apache.commons.math.geometry.Rotation.applyInverseTo(Rotation)" "org.apache.commons.math.geometry.Rotation.q2 : double"
reference "org.apache.commons.math.geometry.Rotation.applyInverseTo(Rotation)" "org.apache.commons.math.geometry.Rotation.q3 : double"
call "org.apache.commons.math.geometry.Rotation.applyInverseTo(Rotation)" "org.apache.commons.math.geometry.Rotation.Rotation(double,double,double,double,boolean)"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.applyInverseTo(Rotation)"
call "org.apache.commons.math.geometry.Rotation.orthogonalizeMatrix(double[][],double)" "org.apache.commons.math.geometry.NotARotationMatrixException.NotARotationMatrixException(String,String[])"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.orthogonalizeMatrix(double[][],double)"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.q0 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.q1 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.q2 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.q3 : double"
contain "org.apache.commons.math.geometry.Rotation" "org.apache.commons.math.geometry.Rotation.serialVersionUID : long"
reference "org.apache.commons.math.analysis.BisectionSolver" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.analysis.BisectionSolver" "org.apache.commons.math.analysis.UnivariateRealSolverImpl"
reference "org.apache.commons.math.analysis.BisectionSolver" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.BisectionSolver" "org.apache.commons.math.analysis.UnivariateRealSolverUtils"
reference "org.apache.commons.math.analysis.BisectionSolver" "org.apache.commons.math.analysis.UnivariateRealFunction"
call "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)"
contain "org.apache.commons.math.analysis.BisectionSolver" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BisectionSolver.solve(double,double,double)" "org.apache.commons.math.analysis.BisectionSolver.solve(double,double)"
contain "org.apache.commons.math.analysis.BisectionSolver" "org.apache.commons.math.analysis.BisectionSolver.solve(double,double,double)"
call "org.apache.commons.math.analysis.BisectionSolver.solve(double,double)" "org.apache.commons.math.analysis.BisectionSolver.clearResult()"
call "org.apache.commons.math.analysis.BisectionSolver.solve(double,double)" "org.apache.commons.math.analysis.BisectionSolver.verifyInterval(double,double)"
reference "org.apache.commons.math.analysis.BisectionSolver.solve(double,double)" "org.apache.commons.math.analysis.BisectionSolver.maximalIterationCount : int"
call "org.apache.commons.math.analysis.BisectionSolver.solve(double,double)" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.midpoint(double,double)"
reference "org.apache.commons.math.analysis.BisectionSolver.solve(double,double)" "org.apache.commons.math.analysis.BisectionSolver.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.BisectionSolver.solve(double,double)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
reference "org.apache.commons.math.analysis.BisectionSolver.solve(double,double)" "org.apache.commons.math.analysis.BisectionSolver.absoluteAccuracy : double"
call "org.apache.commons.math.analysis.BisectionSolver.solve(double,double)" "org.apache.commons.math.analysis.BisectionSolver.setResult(double,int)"
call "org.apache.commons.math.analysis.BisectionSolver.solve(double,double)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
contain "org.apache.commons.math.analysis.BisectionSolver" "org.apache.commons.math.analysis.BisectionSolver.solve(double,double)"
contain "org.apache.commons.math.analysis.BisectionSolver" "org.apache.commons.math.analysis.BisectionSolver.serialVersionUID : long"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.1" "org.apache.commons.math.random.EmpiricalDistributionImpl"
contain "org.apache.commons.math.random.EmpiricalDistribution" "org.apache.commons.math.random.EmpiricalDistribution.load(double[])"
contain "org.apache.commons.math.random.EmpiricalDistribution" "org.apache.commons.math.random.EmpiricalDistribution.load(File)"
contain "org.apache.commons.math.random.EmpiricalDistribution" "org.apache.commons.math.random.EmpiricalDistribution.load(URL)"
contain "org.apache.commons.math.random.EmpiricalDistribution" "org.apache.commons.math.random.EmpiricalDistribution.getNextValue()"
contain "org.apache.commons.math.random.EmpiricalDistribution" "org.apache.commons.math.random.EmpiricalDistribution.getSampleStats()"
contain "org.apache.commons.math.random.EmpiricalDistribution" "org.apache.commons.math.random.EmpiricalDistribution.isLoaded()"
contain "org.apache.commons.math.random.EmpiricalDistribution" "org.apache.commons.math.random.EmpiricalDistribution.getBinCount()"
contain "org.apache.commons.math.random.EmpiricalDistribution" "org.apache.commons.math.random.EmpiricalDistribution.getBinStats()"
contain "org.apache.commons.math.random.EmpiricalDistribution" "org.apache.commons.math.random.EmpiricalDistribution.getUpperBounds()"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.Variance"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation()" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation()"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(SecondMoment)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(SecondMoment)" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(SecondMoment)" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(SecondMoment)"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(SecondMoment)"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(boolean)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(boolean)" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(boolean)" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean)"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(boolean)"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(boolean,SecondMoment)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(boolean,SecondMoment)" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(boolean,SecondMoment)" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean,SecondMoment)"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(boolean,SecondMoment)"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.increment(double)" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.increment(double)" "org.apache.commons.math.stat.descriptive.moment.Variance.increment(double)"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.increment(double)"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.getN()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.getN()" "org.apache.commons.math.stat.descriptive.moment.Variance.getN()"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.getN()"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.getResult()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.getResult()" "org.apache.commons.math.stat.descriptive.moment.Variance.getResult()"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.getResult()"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.clear()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.clear()" "org.apache.commons.math.stat.descriptive.moment.Variance.clear()"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.clear()"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.evaluate(double[])" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.evaluate(double[])" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[])"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.evaluate(double[])"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.evaluate(double[],int,int)"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.evaluate(double[],double,int,int)" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.evaluate(double[],double,int,int)" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],double,int,int)"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.evaluate(double[],double,int,int)"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.evaluate(double[],double)" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.evaluate(double[],double)" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],double)"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.evaluate(double[],double)"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.isBiasCorrected()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.isBiasCorrected()" "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected()"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.isBiasCorrected()"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.setBiasCorrected(boolean)" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.setBiasCorrected(boolean)" "org.apache.commons.math.stat.descriptive.moment.Variance.setBiasCorrected(boolean)"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.setBiasCorrected(boolean)"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance" "org.apache.commons.math.stat.descriptive.moment.Variance"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance : Variance"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[])"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[],int,int)"
reference "org.apache.commons.math.util.NumberTransformer" "org.apache.commons.math.MathException"
contain "org.apache.commons.math.util.NumberTransformer" "org.apache.commons.math.util.NumberTransformer.transform(Object)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory" "double[]"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory" "org.apache.commons.math.random.EmpiricalDistributionImpl"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.DataAdapterFactory()" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.this$0 : EmpiricalDistributionImpl"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.DataAdapterFactory()"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.getAdapter(Object)" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.this$0 : EmpiricalDistributionImpl"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.getAdapter(Object)" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.StreamDataAdapter(BufferedReader)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.getAdapter(Object)" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.ArrayDataAdapter(double[])"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.getAdapter(Object)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.DataAdapterFactory(EmpiricalDistributionImpl.1)" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.DataAdapterFactory()"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.DataAdapterFactory(EmpiricalDistributionImpl.1)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.this$0 : EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.this$0 : EmpiricalDistributionImpl"
reference "org.apache.commons.math.MaxIterationsExceededException" "org.apache.commons.math.ConvergenceException"
call "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)" "org.apache.commons.math.ConvergenceException.ConvergenceException(String,Object[])"
reference "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)" "org.apache.commons.math.MaxIterationsExceededException.maxIterations : int"
contain "org.apache.commons.math.MaxIterationsExceededException" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
call "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int,String,Object[])" "org.apache.commons.math.ConvergenceException.ConvergenceException(String,Object[])"
reference "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int,String,Object[])" "org.apache.commons.math.MaxIterationsExceededException.maxIterations : int"
contain "org.apache.commons.math.MaxIterationsExceededException" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int,String,Object[])"
reference "org.apache.commons.math.MaxIterationsExceededException.getMaxIterations()" "org.apache.commons.math.MaxIterationsExceededException.maxIterations : int"
contain "org.apache.commons.math.MaxIterationsExceededException" "org.apache.commons.math.MaxIterationsExceededException.getMaxIterations()"
contain "org.apache.commons.math.MaxIterationsExceededException" "org.apache.commons.math.MaxIterationsExceededException.serialVersionUID : long"
contain "org.apache.commons.math.MaxIterationsExceededException" "org.apache.commons.math.MaxIterationsExceededException.maxIterations : int"
reference "org.apache.commons.math.distribution.CauchyDistribution" "org.apache.commons.math.distribution.ContinuousDistribution"
contain "org.apache.commons.math.distribution.CauchyDistribution" "org.apache.commons.math.distribution.CauchyDistribution.getMedian()"
contain "org.apache.commons.math.distribution.CauchyDistribution" "org.apache.commons.math.distribution.CauchyDistribution.getScale()"
contain "org.apache.commons.math.distribution.CauchyDistribution" "org.apache.commons.math.distribution.CauchyDistribution.setMedian(double)"
contain "org.apache.commons.math.distribution.CauchyDistribution" "org.apache.commons.math.distribution.CauchyDistribution.setScale(double)"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator" "org.apache.commons.math.ode.DerivativeException"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator()" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator()"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator(ClassicalRungeKuttaStepInterpolator)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator(ClassicalRungeKuttaStepInterpolator)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.doCopy()" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator(ClassicalRungeKuttaStepInterpolator)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.doCopy()"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.yDotK : double[][]"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.computeInterpolatedState(double,double)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness" "org.apache.commons.math.stat.descriptive.moment.Mean"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness()" "org.apache.commons.math.stat.descriptive.moment.Skewness.moment : ThirdMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness()" "org.apache.commons.math.stat.descriptive.moment.Skewness.incMoment : boolean"
call "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.ThirdMoment()"
contain "org.apache.commons.math.stat.descriptive.moment.Skewness" "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness()"
call "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness(ThirdMoment)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness(ThirdMoment)" "org.apache.commons.math.stat.descriptive.moment.Skewness.moment : ThirdMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness(ThirdMoment)" "org.apache.commons.math.stat.descriptive.moment.Skewness.incMoment : boolean"
contain "org.apache.commons.math.stat.descriptive.moment.Skewness" "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness(ThirdMoment)"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.increment(double)" "org.apache.commons.math.stat.descriptive.moment.Skewness.incMoment : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.increment(double)" "org.apache.commons.math.stat.descriptive.moment.Skewness.moment : ThirdMoment"
call "org.apache.commons.math.stat.descriptive.moment.Skewness.increment(double)" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.increment(double)"
contain "org.apache.commons.math.stat.descriptive.moment.Skewness" "org.apache.commons.math.stat.descriptive.moment.Skewness.increment(double)"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.getResult()" "org.apache.commons.math.stat.descriptive.moment.Skewness.moment : ThirdMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.getResult()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.n : long"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.getResult()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.m2 : double"
call "org.apache.commons.math.stat.descriptive.moment.Skewness.getResult()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.getN()"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.getResult()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.m3 : double"
contain "org.apache.commons.math.stat.descriptive.moment.Skewness" "org.apache.commons.math.stat.descriptive.moment.Skewness.getResult()"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.getN()" "org.apache.commons.math.stat.descriptive.moment.Skewness.moment : ThirdMoment"
call "org.apache.commons.math.stat.descriptive.moment.Skewness.getN()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.getN()"
contain "org.apache.commons.math.stat.descriptive.moment.Skewness" "org.apache.commons.math.stat.descriptive.moment.Skewness.getN()"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.clear()" "org.apache.commons.math.stat.descriptive.moment.Skewness.incMoment : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.clear()" "org.apache.commons.math.stat.descriptive.moment.Skewness.moment : ThirdMoment"
call "org.apache.commons.math.stat.descriptive.moment.Skewness.clear()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.clear()"
contain "org.apache.commons.math.stat.descriptive.moment.Skewness" "org.apache.commons.math.stat.descriptive.moment.Skewness.clear()"
call "org.apache.commons.math.stat.descriptive.moment.Skewness.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Skewness.test(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.moment.Skewness.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
call "org.apache.commons.math.stat.descriptive.moment.Skewness.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Mean.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.moment.Skewness" "org.apache.commons.math.stat.descriptive.moment.Skewness.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.moment.Skewness" "org.apache.commons.math.stat.descriptive.moment.Skewness.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.moment.Skewness.moment : ThirdMoment" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment"
contain "org.apache.commons.math.stat.descriptive.moment.Skewness" "org.apache.commons.math.stat.descriptive.moment.Skewness.moment : ThirdMoment"
contain "org.apache.commons.math.stat.descriptive.moment.Skewness" "org.apache.commons.math.stat.descriptive.moment.Skewness.incMoment : boolean"
reference "org.apache.commons.math.ode.StepNormalizer" "double[]"
reference "org.apache.commons.math.ode.StepNormalizer" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.StepNormalizer" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.StepNormalizer" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.StepNormalizer" "org.apache.commons.math.ode.FixedStepHandler"
reference "org.apache.commons.math.ode.StepNormalizer.StepNormalizer(double,FixedStepHandler)" "org.apache.commons.math.ode.StepNormalizer.h : double"
reference "org.apache.commons.math.ode.StepNormalizer.StepNormalizer(double,FixedStepHandler)" "org.apache.commons.math.ode.StepNormalizer.handler : FixedStepHandler"
call "org.apache.commons.math.ode.StepNormalizer.StepNormalizer(double,FixedStepHandler)" "org.apache.commons.math.ode.StepNormalizer.reset()"
contain "org.apache.commons.math.ode.StepNormalizer" "org.apache.commons.math.ode.StepNormalizer.StepNormalizer(double,FixedStepHandler)"
contain "org.apache.commons.math.ode.StepNormalizer" "org.apache.commons.math.ode.StepNormalizer.requiresDenseOutput()"
reference "org.apache.commons.math.ode.StepNormalizer.reset()" "org.apache.commons.math.ode.StepNormalizer.lastTime : double"
reference "org.apache.commons.math.ode.StepNormalizer.reset()" "org.apache.commons.math.ode.StepNormalizer.lastState : double[]"
reference "org.apache.commons.math.ode.StepNormalizer.reset()" "org.apache.commons.math.ode.StepNormalizer.forward : boolean"
contain "org.apache.commons.math.ode.StepNormalizer" "org.apache.commons.math.ode.StepNormalizer.reset()"
reference "org.apache.commons.math.ode.StepNormalizer.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepNormalizer.lastState : double[]"
call "org.apache.commons.math.ode.StepNormalizer.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
reference "org.apache.commons.math.ode.StepNormalizer.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepNormalizer.lastTime : double"
call "org.apache.commons.math.ode.StepNormalizer.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.StepNormalizer.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
call "org.apache.commons.math.ode.StepNormalizer.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
reference "org.apache.commons.math.ode.StepNormalizer.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepNormalizer.forward : boolean"
reference "org.apache.commons.math.ode.StepNormalizer.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepNormalizer.h : double"
reference "org.apache.commons.math.ode.StepNormalizer.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepNormalizer.handler : FixedStepHandler"
call "org.apache.commons.math.ode.StepNormalizer.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.FixedStepHandler.handleStep(double,double[],boolean)"
contain "org.apache.commons.math.ode.StepNormalizer" "org.apache.commons.math.ode.StepNormalizer.handleStep(StepInterpolator,boolean)"
contain "org.apache.commons.math.ode.StepNormalizer" "org.apache.commons.math.ode.StepNormalizer.h : double"
reference "org.apache.commons.math.ode.StepNormalizer.handler : FixedStepHandler" "org.apache.commons.math.ode.FixedStepHandler"
contain "org.apache.commons.math.ode.StepNormalizer" "org.apache.commons.math.ode.StepNormalizer.handler : FixedStepHandler"
contain "org.apache.commons.math.ode.StepNormalizer" "org.apache.commons.math.ode.StepNormalizer.lastTime : double"
reference "org.apache.commons.math.ode.StepNormalizer.lastState : double[]" "double[]"
contain "org.apache.commons.math.ode.StepNormalizer" "org.apache.commons.math.ode.StepNormalizer.lastState : double[]"
contain "org.apache.commons.math.ode.StepNormalizer" "org.apache.commons.math.ode.StepNormalizer.forward : boolean"
reference "org.apache.commons.math.special.Gamma" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.special.Gamma" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.special.Gamma" "org.apache.commons.math.util.ContinuedFraction"
contain "org.apache.commons.math.special.Gamma" "org.apache.commons.math.special.Gamma.Gamma()"
reference "org.apache.commons.math.special.Gamma.logGamma(double)" "org.apache.commons.math.special.Gamma.lanczos : double[]"
reference "org.apache.commons.math.special.Gamma.logGamma(double)" "org.apache.commons.math.special.Gamma.HALF_LOG_2_PI : double"
contain "org.apache.commons.math.special.Gamma" "org.apache.commons.math.special.Gamma.logGamma(double)"
call "org.apache.commons.math.special.Gamma.regularizedGammaP(double,double)" "org.apache.commons.math.special.Gamma.regularizedGammaP(double,double,double,int)"
contain "org.apache.commons.math.special.Gamma" "org.apache.commons.math.special.Gamma.regularizedGammaP(double,double)"
call "org.apache.commons.math.special.Gamma.regularizedGammaP(double,double,double,int)" "org.apache.commons.math.special.Gamma.regularizedGammaQ(double,double,double,int)"
call "org.apache.commons.math.special.Gamma.regularizedGammaP(double,double,double,int)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
call "org.apache.commons.math.special.Gamma.regularizedGammaP(double,double,double,int)" "org.apache.commons.math.special.Gamma.logGamma(double)"
contain "org.apache.commons.math.special.Gamma" "org.apache.commons.math.special.Gamma.regularizedGammaP(double,double,double,int)"
call "org.apache.commons.math.special.Gamma.regularizedGammaQ(double,double)" "org.apache.commons.math.special.Gamma.regularizedGammaQ(double,double,double,int)"
contain "org.apache.commons.math.special.Gamma" "org.apache.commons.math.special.Gamma.regularizedGammaQ(double,double)"
call "org.apache.commons.math.special.Gamma.regularizedGammaQ(double,double,double,int)" "org.apache.commons.math.special.Gamma.regularizedGammaP(double,double,double,int)"
call "org.apache.commons.math.special.Gamma.regularizedGammaQ(double,double,double,int)" "org.apache.commons.math.special.Gamma.1.{...}"
call "org.apache.commons.math.special.Gamma.regularizedGammaQ(double,double,double,int)" "org.apache.commons.math.util.ContinuedFraction.evaluate(double,double,int)"
call "org.apache.commons.math.special.Gamma.regularizedGammaQ(double,double,double,int)" "org.apache.commons.math.special.Gamma.logGamma(double)"
contain "org.apache.commons.math.special.Gamma" "org.apache.commons.math.special.Gamma.regularizedGammaQ(double,double,double,int)"
reference "org.apache.commons.math.special.Gamma.static {...}" "org.apache.commons.math.special.Gamma.lanczos : double[]"
reference "org.apache.commons.math.special.Gamma.static {...}" "org.apache.commons.math.special.Gamma.HALF_LOG_2_PI : double"
contain "org.apache.commons.math.special.Gamma" "org.apache.commons.math.special.Gamma.static {...}"
contain "org.apache.commons.math.special.Gamma" "org.apache.commons.math.special.Gamma.serialVersionUID : long"
contain "org.apache.commons.math.special.Gamma" "org.apache.commons.math.special.Gamma.DEFAULT_EPSILON : double"
reference "org.apache.commons.math.special.Gamma.lanczos : double[]" "double[]"
contain "org.apache.commons.math.special.Gamma" "org.apache.commons.math.special.Gamma.lanczos : double[]"
contain "org.apache.commons.math.special.Gamma" "org.apache.commons.math.special.Gamma.HALF_LOG_2_PI : double"
reference "org.apache.commons.math.analysis.SecantSolver" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.analysis.SecantSolver" "org.apache.commons.math.analysis.UnivariateRealSolverImpl"
reference "org.apache.commons.math.analysis.SecantSolver" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.SecantSolver" "org.apache.commons.math.analysis.UnivariateRealFunction"
call "org.apache.commons.math.analysis.SecantSolver.SecantSolver(UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)"
contain "org.apache.commons.math.analysis.SecantSolver" "org.apache.commons.math.analysis.SecantSolver.SecantSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.SecantSolver.solve(double,double,double)" "org.apache.commons.math.analysis.SecantSolver.solve(double,double)"
contain "org.apache.commons.math.analysis.SecantSolver" "org.apache.commons.math.analysis.SecantSolver.solve(double,double,double)"
call "org.apache.commons.math.analysis.SecantSolver.solve(double,double)" "org.apache.commons.math.analysis.SecantSolver.clearResult()"
call "org.apache.commons.math.analysis.SecantSolver.solve(double,double)" "org.apache.commons.math.analysis.SecantSolver.verifyInterval(double,double)"
reference "org.apache.commons.math.analysis.SecantSolver.solve(double,double)" "org.apache.commons.math.analysis.SecantSolver.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.SecantSolver.solve(double,double)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
reference "org.apache.commons.math.analysis.SecantSolver.solve(double,double)" "org.apache.commons.math.analysis.SecantSolver.maximalIterationCount : int"
reference "org.apache.commons.math.analysis.SecantSolver.solve(double,double)" "org.apache.commons.math.analysis.SecantSolver.functionValueAccuracy : double"
call "org.apache.commons.math.analysis.SecantSolver.solve(double,double)" "org.apache.commons.math.analysis.SecantSolver.setResult(double,int)"
reference "org.apache.commons.math.analysis.SecantSolver.solve(double,double)" "org.apache.commons.math.analysis.SecantSolver.result : double"
reference "org.apache.commons.math.analysis.SecantSolver.solve(double,double)" "org.apache.commons.math.analysis.SecantSolver.relativeAccuracy : double"
reference "org.apache.commons.math.analysis.SecantSolver.solve(double,double)" "org.apache.commons.math.analysis.SecantSolver.absoluteAccuracy : double"
call "org.apache.commons.math.analysis.SecantSolver.solve(double,double)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
contain "org.apache.commons.math.analysis.SecantSolver" "org.apache.commons.math.analysis.SecantSolver.solve(double,double)"
contain "org.apache.commons.math.analysis.SecantSolver" "org.apache.commons.math.analysis.SecantSolver.serialVersionUID : long"
reference "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.Vector3D"
reference "org.apache.commons.math.geometry.RotationOrder.RotationOrder(String,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.RotationOrder.name : String"
reference "org.apache.commons.math.geometry.RotationOrder.RotationOrder(String,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.RotationOrder.a1 : Vector3D"
reference "org.apache.commons.math.geometry.RotationOrder.RotationOrder(String,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.RotationOrder.a2 : Vector3D"
reference "org.apache.commons.math.geometry.RotationOrder.RotationOrder(String,Vector3D,Vector3D,Vector3D)" "org.apache.commons.math.geometry.RotationOrder.a3 : Vector3D"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.RotationOrder(String,Vector3D,Vector3D,Vector3D)"
reference "org.apache.commons.math.geometry.RotationOrder.toString()" "org.apache.commons.math.geometry.RotationOrder.name : String"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.toString()"
reference "org.apache.commons.math.geometry.RotationOrder.getA1()" "org.apache.commons.math.geometry.RotationOrder.a1 : Vector3D"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.getA1()"
reference "org.apache.commons.math.geometry.RotationOrder.getA2()" "org.apache.commons.math.geometry.RotationOrder.a2 : Vector3D"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.getA2()"
reference "org.apache.commons.math.geometry.RotationOrder.getA3()" "org.apache.commons.math.geometry.RotationOrder.a3 : Vector3D"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.getA3()"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.Vector3D.plusI : Vector3D"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.Vector3D.plusJ : Vector3D"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.Vector3D.plusK : Vector3D"
call "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.RotationOrder.RotationOrder(String,Vector3D,Vector3D,Vector3D)"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.RotationOrder.XYZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.RotationOrder.XZY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.RotationOrder.YXZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.RotationOrder.YZX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.RotationOrder.ZXY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.RotationOrder.ZYX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.RotationOrder.XYX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.RotationOrder.XZX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.RotationOrder.YXY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.RotationOrder.YZY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.RotationOrder.ZXZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.static {...}" "org.apache.commons.math.geometry.RotationOrder.ZYZ : RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.static {...}"
reference "org.apache.commons.math.geometry.RotationOrder.XYZ : RotationOrder" "org.apache.commons.math.geometry.RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.XYZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.XZY : RotationOrder" "org.apache.commons.math.geometry.RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.XZY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.YXZ : RotationOrder" "org.apache.commons.math.geometry.RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.YXZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.YZX : RotationOrder" "org.apache.commons.math.geometry.RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.YZX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.ZXY : RotationOrder" "org.apache.commons.math.geometry.RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.ZXY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.ZYX : RotationOrder" "org.apache.commons.math.geometry.RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.ZYX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.XYX : RotationOrder" "org.apache.commons.math.geometry.RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.XYX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.XZX : RotationOrder" "org.apache.commons.math.geometry.RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.XZX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.YXY : RotationOrder" "org.apache.commons.math.geometry.RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.YXY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.YZY : RotationOrder" "org.apache.commons.math.geometry.RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.YZY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.ZXZ : RotationOrder" "org.apache.commons.math.geometry.RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.ZXZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrder.ZYZ : RotationOrder" "org.apache.commons.math.geometry.RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.ZYZ : RotationOrder"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.name : String"
reference "org.apache.commons.math.geometry.RotationOrder.a1 : Vector3D" "org.apache.commons.math.geometry.Vector3D"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.a1 : Vector3D"
reference "org.apache.commons.math.geometry.RotationOrder.a2 : Vector3D" "org.apache.commons.math.geometry.Vector3D"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.a2 : Vector3D"
reference "org.apache.commons.math.geometry.RotationOrder.a3 : Vector3D" "org.apache.commons.math.geometry.Vector3D"
contain "org.apache.commons.math.geometry.RotationOrder" "org.apache.commons.math.geometry.RotationOrder.a3 : Vector3D"
reference "org.apache.commons.math.stat.descriptive.moment.Mean" "org.apache.commons.math.stat.descriptive.moment.FirstMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Mean" "org.apache.commons.math.stat.descriptive.summary.Sum"
reference "org.apache.commons.math.stat.descriptive.moment.Mean" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()" "org.apache.commons.math.stat.descriptive.moment.Mean.incMoment : boolean"
call "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.FirstMoment()"
reference "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()" "org.apache.commons.math.stat.descriptive.moment.Mean.moment : FirstMoment"
contain "org.apache.commons.math.stat.descriptive.moment.Mean" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
call "org.apache.commons.math.stat.descriptive.moment.Mean.Mean(FirstMoment)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.Mean.Mean(FirstMoment)" "org.apache.commons.math.stat.descriptive.moment.Mean.moment : FirstMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Mean.Mean(FirstMoment)" "org.apache.commons.math.stat.descriptive.moment.Mean.incMoment : boolean"
contain "org.apache.commons.math.stat.descriptive.moment.Mean" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean(FirstMoment)"
reference "org.apache.commons.math.stat.descriptive.moment.Mean.increment(double)" "org.apache.commons.math.stat.descriptive.moment.Mean.incMoment : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Mean.increment(double)" "org.apache.commons.math.stat.descriptive.moment.Mean.moment : FirstMoment"
call "org.apache.commons.math.stat.descriptive.moment.Mean.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.increment(double)"
contain "org.apache.commons.math.stat.descriptive.moment.Mean" "org.apache.commons.math.stat.descriptive.moment.Mean.increment(double)"
reference "org.apache.commons.math.stat.descriptive.moment.Mean.clear()" "org.apache.commons.math.stat.descriptive.moment.Mean.incMoment : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Mean.clear()" "org.apache.commons.math.stat.descriptive.moment.Mean.moment : FirstMoment"
call "org.apache.commons.math.stat.descriptive.moment.Mean.clear()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.clear()"
contain "org.apache.commons.math.stat.descriptive.moment.Mean" "org.apache.commons.math.stat.descriptive.moment.Mean.clear()"
reference "org.apache.commons.math.stat.descriptive.moment.Mean.getResult()" "org.apache.commons.math.stat.descriptive.moment.Mean.moment : FirstMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Mean.getResult()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.m1 : double"
contain "org.apache.commons.math.stat.descriptive.moment.Mean" "org.apache.commons.math.stat.descriptive.moment.Mean.getResult()"
reference "org.apache.commons.math.stat.descriptive.moment.Mean.getN()" "org.apache.commons.math.stat.descriptive.moment.Mean.moment : FirstMoment"
call "org.apache.commons.math.stat.descriptive.moment.Mean.getN()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.getN()"
contain "org.apache.commons.math.stat.descriptive.moment.Mean" "org.apache.commons.math.stat.descriptive.moment.Mean.getN()"
call "org.apache.commons.math.stat.descriptive.moment.Mean.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Mean.test(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.moment.Mean.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.summary.Sum.Sum()"
call "org.apache.commons.math.stat.descriptive.moment.Mean.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.summary.Sum.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.moment.Mean" "org.apache.commons.math.stat.descriptive.moment.Mean.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.moment.Mean" "org.apache.commons.math.stat.descriptive.moment.Mean.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.moment.Mean.moment : FirstMoment" "org.apache.commons.math.stat.descriptive.moment.FirstMoment"
contain "org.apache.commons.math.stat.descriptive.moment.Mean" "org.apache.commons.math.stat.descriptive.moment.Mean.moment : FirstMoment"
contain "org.apache.commons.math.stat.descriptive.moment.Mean" "org.apache.commons.math.stat.descriptive.moment.Mean.incMoment : boolean"
reference "org.apache.commons.math.ode.EulerIntegrator" "org.apache.commons.math.ode.EulerStepInterpolator"
reference "org.apache.commons.math.ode.EulerIntegrator" "double[]"
reference "org.apache.commons.math.ode.EulerIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator"
reference "org.apache.commons.math.ode.EulerIntegrator.EulerIntegrator(double)" "org.apache.commons.math.ode.EulerIntegrator.c : double[]"
reference "org.apache.commons.math.ode.EulerIntegrator.EulerIntegrator(double)" "org.apache.commons.math.ode.EulerIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.EulerIntegrator.EulerIntegrator(double)" "org.apache.commons.math.ode.EulerIntegrator.b : double[]"
call "org.apache.commons.math.ode.EulerIntegrator.EulerIntegrator(double)" "org.apache.commons.math.ode.EulerStepInterpolator.EulerStepInterpolator()"
call "org.apache.commons.math.ode.EulerIntegrator.EulerIntegrator(double)" "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)"
contain "org.apache.commons.math.ode.EulerIntegrator" "org.apache.commons.math.ode.EulerIntegrator.EulerIntegrator(double)"
contain "org.apache.commons.math.ode.EulerIntegrator" "org.apache.commons.math.ode.EulerIntegrator.getName()"
reference "org.apache.commons.math.ode.EulerIntegrator.static {...}" "org.apache.commons.math.ode.EulerIntegrator.c : double[]"
reference "org.apache.commons.math.ode.EulerIntegrator.static {...}" "org.apache.commons.math.ode.EulerIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.EulerIntegrator.static {...}" "org.apache.commons.math.ode.EulerIntegrator.b : double[]"
contain "org.apache.commons.math.ode.EulerIntegrator" "org.apache.commons.math.ode.EulerIntegrator.static {...}"
contain "org.apache.commons.math.ode.EulerIntegrator" "org.apache.commons.math.ode.EulerIntegrator.methodName : String"
reference "org.apache.commons.math.ode.EulerIntegrator.c : double[]" "double[]"
contain "org.apache.commons.math.ode.EulerIntegrator" "org.apache.commons.math.ode.EulerIntegrator.c : double[]"
reference "org.apache.commons.math.ode.EulerIntegrator.a : double[][]" "double[][]"
contain "org.apache.commons.math.ode.EulerIntegrator" "org.apache.commons.math.ode.EulerIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.EulerIntegrator.b : double[]" "double[]"
contain "org.apache.commons.math.ode.EulerIntegrator" "org.apache.commons.math.ode.EulerIntegrator.b : double[]"
reference "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.ComplexUtils()"
call "org.apache.commons.math.complex.ComplexUtils.acos(Complex)" "org.apache.commons.math.complex.Complex.acos()"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.acos(Complex)"
call "org.apache.commons.math.complex.ComplexUtils.asin(Complex)" "org.apache.commons.math.complex.Complex.asin()"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.asin(Complex)"
call "org.apache.commons.math.complex.ComplexUtils.atan(Complex)" "org.apache.commons.math.complex.Complex.atan()"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.atan(Complex)"
call "org.apache.commons.math.complex.ComplexUtils.cos(Complex)" "org.apache.commons.math.complex.Complex.cos()"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.cos(Complex)"
call "org.apache.commons.math.complex.ComplexUtils.cosh(Complex)" "org.apache.commons.math.complex.Complex.cosh()"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.cosh(Complex)"
call "org.apache.commons.math.complex.ComplexUtils.exp(Complex)" "org.apache.commons.math.complex.Complex.exp()"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.exp(Complex)"
call "org.apache.commons.math.complex.ComplexUtils.log(Complex)" "org.apache.commons.math.complex.Complex.log()"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.log(Complex)"
call "org.apache.commons.math.complex.ComplexUtils.polar2Complex(double,double)" "org.apache.commons.math.complex.Complex.Complex(double,double)"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.polar2Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtils.pow(Complex,Complex)" "org.apache.commons.math.complex.Complex.pow(Complex)"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.pow(Complex,Complex)"
call "org.apache.commons.math.complex.ComplexUtils.sin(Complex)" "org.apache.commons.math.complex.Complex.sin()"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.sin(Complex)"
call "org.apache.commons.math.complex.ComplexUtils.sinh(Complex)" "org.apache.commons.math.complex.Complex.sinh()"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.sinh(Complex)"
call "org.apache.commons.math.complex.ComplexUtils.sqrt(Complex)" "org.apache.commons.math.complex.Complex.sqrt()"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.sqrt(Complex)"
call "org.apache.commons.math.complex.ComplexUtils.sqrt1z(Complex)" "org.apache.commons.math.complex.Complex.sqrt1z()"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.sqrt1z(Complex)"
call "org.apache.commons.math.complex.ComplexUtils.tan(Complex)" "org.apache.commons.math.complex.Complex.tan()"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.tan(Complex)"
call "org.apache.commons.math.complex.ComplexUtils.tanh(Complex)" "org.apache.commons.math.complex.Complex.tanh()"
contain "org.apache.commons.math.complex.ComplexUtils" "org.apache.commons.math.complex.ComplexUtils.tanh(Complex)"
reference "org.apache.commons.math.stat.inference.TestFactory" "org.apache.commons.discovery.tools.DiscoverClass"
reference "org.apache.commons.math.stat.inference.TestFactory" "org.apache.commons.math.stat.inference.TestFactoryImpl"
contain "org.apache.commons.math.stat.inference.TestFactory" "org.apache.commons.math.stat.inference.TestFactory.TestFactory()"
call "org.apache.commons.math.stat.inference.TestFactory.newInstance()" "org.apache.commons.discovery.tools.DiscoverClass.DiscoverClass()"
reference "org.apache.commons.math.stat.inference.TestFactory.newInstance()" "org.apache.commons.math.stat.inference.TestFactory.class$org$apache$commons$math$stat$inference$TestFactory : Class"
call "org.apache.commons.math.stat.inference.TestFactory.newInstance()" "org.apache.commons.math.stat.inference.TestFactory.class$(String)"
call "org.apache.commons.math.stat.inference.TestFactory.newInstance()" "org.apache.commons.discovery.tools.DiscoverClass.newInstance(Class,String)"
call "org.apache.commons.math.stat.inference.TestFactory.newInstance()" "org.apache.commons.math.stat.inference.TestFactoryImpl.TestFactoryImpl()"
contain "org.apache.commons.math.stat.inference.TestFactory" "org.apache.commons.math.stat.inference.TestFactory.newInstance()"
contain "org.apache.commons.math.stat.inference.TestFactory" "org.apache.commons.math.stat.inference.TestFactory.createTTest()"
contain "org.apache.commons.math.stat.inference.TestFactory" "org.apache.commons.math.stat.inference.TestFactory.createChiSquareTest()"
contain "org.apache.commons.math.stat.inference.TestFactory" "org.apache.commons.math.stat.inference.TestFactory.class$(String)"
contain "org.apache.commons.math.stat.inference.TestFactory" "org.apache.commons.math.stat.inference.TestFactory.class$org$apache$commons$math$stat$inference$TestFactory : Class"
reference "org.apache.commons.math.stat.descriptive.rank.Max" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.rank.Max.Max()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.rank.Max.Max()" "org.apache.commons.math.stat.descriptive.rank.Max.n : long"
reference "org.apache.commons.math.stat.descriptive.rank.Max.Max()" "org.apache.commons.math.stat.descriptive.rank.Max.value : double"
contain "org.apache.commons.math.stat.descriptive.rank.Max" "org.apache.commons.math.stat.descriptive.rank.Max.Max()"
reference "org.apache.commons.math.stat.descriptive.rank.Max.increment(double)" "org.apache.commons.math.stat.descriptive.rank.Max.value : double"
reference "org.apache.commons.math.stat.descriptive.rank.Max.increment(double)" "org.apache.commons.math.stat.descriptive.rank.Max.n : long"
contain "org.apache.commons.math.stat.descriptive.rank.Max" "org.apache.commons.math.stat.descriptive.rank.Max.increment(double)"
reference "org.apache.commons.math.stat.descriptive.rank.Max.clear()" "org.apache.commons.math.stat.descriptive.rank.Max.value : double"
reference "org.apache.commons.math.stat.descriptive.rank.Max.clear()" "org.apache.commons.math.stat.descriptive.rank.Max.n : long"
contain "org.apache.commons.math.stat.descriptive.rank.Max" "org.apache.commons.math.stat.descriptive.rank.Max.clear()"
reference "org.apache.commons.math.stat.descriptive.rank.Max.getResult()" "org.apache.commons.math.stat.descriptive.rank.Max.value : double"
contain "org.apache.commons.math.stat.descriptive.rank.Max" "org.apache.commons.math.stat.descriptive.rank.Max.getResult()"
reference "org.apache.commons.math.stat.descriptive.rank.Max.getN()" "org.apache.commons.math.stat.descriptive.rank.Max.n : long"
contain "org.apache.commons.math.stat.descriptive.rank.Max" "org.apache.commons.math.stat.descriptive.rank.Max.getN()"
call "org.apache.commons.math.stat.descriptive.rank.Max.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.rank.Max.test(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.rank.Max" "org.apache.commons.math.stat.descriptive.rank.Max.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.rank.Max" "org.apache.commons.math.stat.descriptive.rank.Max.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.rank.Max" "org.apache.commons.math.stat.descriptive.rank.Max.n : long"
contain "org.apache.commons.math.stat.descriptive.rank.Max" "org.apache.commons.math.stat.descriptive.rank.Max.value : double"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.FunctionEvaluationException"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.PolynomialFunctionNewtonForm(double[],double[])" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.verifyInputArray(double[],double[])"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.PolynomialFunctionNewtonForm(double[],double[])" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.a : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.PolynomialFunctionNewtonForm(double[],double[])" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.c : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.PolynomialFunctionNewtonForm(double[],double[])" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.coefficientsComputed : boolean"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.PolynomialFunctionNewtonForm(double[],double[])"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.value(double)" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.a : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.value(double)" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.c : double[]"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.value(double)" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.evaluate(double[],double[],double)"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.value(double)"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.degree()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.c : double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.degree()"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.getNewtonCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.a : double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.getNewtonCoefficients()"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.getCenters()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.c : double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.getCenters()"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.getCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.coefficientsComputed : boolean"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.getCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.computeCoefficients()"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.getCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.coefficients : double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.getCoefficients()"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.evaluate(double[],double[],double)" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.verifyInputArray(double[],double[])"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.evaluate(double[],double[],double)"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.computeCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.degree()"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.computeCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.coefficients : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.computeCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.a : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.computeCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.c : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.computeCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.coefficientsComputed : boolean"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.computeCoefficients()"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.verifyInputArray(double[],double[])"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.serialVersionUID : long"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.coefficients : double[]" "double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.coefficients : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.a : double[]" "double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.a : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.c : double[]" "double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.c : double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.coefficientsComputed : boolean"
reference "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl"
reference "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.AbstractContinuousDistribution"
reference "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistribution"
reference "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.GammaDistribution"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double)" "org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double,double)"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double)" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double,GammaDistribution)"
contain "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double)"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double,GammaDistribution)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution()"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double,GammaDistribution)" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setGamma(GammaDistribution)"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double,GammaDistribution)" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setDegreesOfFreedom(double)"
contain "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double,GammaDistribution)"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setDegreesOfFreedom(double)" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getGamma()"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setDegreesOfFreedom(double)" "org.apache.commons.math.distribution.GammaDistribution.setAlpha(double)"
contain "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setDegreesOfFreedom(double)"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDegreesOfFreedom()" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getGamma()"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDegreesOfFreedom()" "org.apache.commons.math.distribution.GammaDistribution.getAlpha()"
contain "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDegreesOfFreedom()"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getGamma()"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.GammaDistribution.cumulativeProbability(double)"
contain "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.cumulativeProbability(double)"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double)"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainLowerBound(double)" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getGamma()"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainLowerBound(double)" "org.apache.commons.math.distribution.GammaDistribution.getBeta()"
contain "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainLowerBound(double)"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainUpperBound(double)" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDegreesOfFreedom()"
contain "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainUpperBound(double)"
call "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getInitialDomain(double)" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDegreesOfFreedom()"
contain "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getInitialDomain(double)"
reference "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setGamma(GammaDistribution)" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.gamma : GammaDistribution"
contain "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setGamma(GammaDistribution)"
reference "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getGamma()" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.gamma : GammaDistribution"
contain "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getGamma()"
contain "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.serialVersionUID : long"
reference "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.gamma : GammaDistribution" "org.apache.commons.math.distribution.GammaDistribution"
contain "org.apache.commons.math.distribution.ChiSquaredDistributionImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.gamma : GammaDistribution"
reference "org.apache.commons.math.analysis.DividedDifferenceInterpolator" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm"
reference "org.apache.commons.math.analysis.DividedDifferenceInterpolator" "org.apache.commons.math.DuplicateSampleAbscissaException"
reference "org.apache.commons.math.analysis.DividedDifferenceInterpolator" "org.apache.commons.math.analysis.UnivariateRealInterpolator"
reference "org.apache.commons.math.analysis.DividedDifferenceInterpolator" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm"
contain "org.apache.commons.math.analysis.DividedDifferenceInterpolator" "org.apache.commons.math.analysis.DividedDifferenceInterpolator.DividedDifferenceInterpolator()"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolator.interpolate(double[],double[])" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.verifyInterpolationArray(double[],double[])"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolator.interpolate(double[],double[])" "org.apache.commons.math.analysis.DividedDifferenceInterpolator.computeDividedDifference(double[],double[])"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolator.interpolate(double[],double[])" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.PolynomialFunctionNewtonForm(double[],double[])"
contain "org.apache.commons.math.analysis.DividedDifferenceInterpolator" "org.apache.commons.math.analysis.DividedDifferenceInterpolator.interpolate(double[],double[])"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolator.computeDividedDifference(double[],double[])" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.verifyInterpolationArray(double[],double[])"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolator.computeDividedDifference(double[],double[])" "org.apache.commons.math.DuplicateSampleAbscissaException.DuplicateSampleAbscissaException(double,int,int)"
contain "org.apache.commons.math.analysis.DividedDifferenceInterpolator" "org.apache.commons.math.analysis.DividedDifferenceInterpolator.computeDividedDifference(double[],double[])"
contain "org.apache.commons.math.analysis.DividedDifferenceInterpolator" "org.apache.commons.math.analysis.DividedDifferenceInterpolator.serialVersionUID : long"
reference "org.apache.commons.math.stat.inference.TestFactoryImpl" "org.apache.commons.math.stat.inference.TTestImpl"
reference "org.apache.commons.math.stat.inference.TestFactoryImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl"
reference "org.apache.commons.math.stat.inference.TestFactoryImpl" "org.apache.commons.math.stat.inference.TestFactory"
call "org.apache.commons.math.stat.inference.TestFactoryImpl.TestFactoryImpl()" "org.apache.commons.math.stat.inference.TestFactory.TestFactory()"
contain "org.apache.commons.math.stat.inference.TestFactoryImpl" "org.apache.commons.math.stat.inference.TestFactoryImpl.TestFactoryImpl()"
call "org.apache.commons.math.stat.inference.TestFactoryImpl.createTTest()" "org.apache.commons.math.stat.inference.TTestImpl.TTestImpl()"
contain "org.apache.commons.math.stat.inference.TestFactoryImpl" "org.apache.commons.math.stat.inference.TestFactoryImpl.createTTest()"
call "org.apache.commons.math.stat.inference.TestFactoryImpl.createChiSquareTest()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl()"
contain "org.apache.commons.math.stat.inference.TestFactoryImpl" "org.apache.commons.math.stat.inference.TestFactoryImpl.createChiSquareTest()"
reference "org.apache.commons.math.ode.SecondOrderIntegrator" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.SecondOrderIntegrator" "org.apache.commons.math.ode.IntegratorException"
contain "org.apache.commons.math.ode.SecondOrderIntegrator" "org.apache.commons.math.ode.SecondOrderIntegrator.getName()"
contain "org.apache.commons.math.ode.SecondOrderIntegrator" "org.apache.commons.math.ode.SecondOrderIntegrator.setStepHandler(StepHandler)"
contain "org.apache.commons.math.ode.SecondOrderIntegrator" "org.apache.commons.math.ode.SecondOrderIntegrator.getStepHandler()"
contain "org.apache.commons.math.ode.SecondOrderIntegrator" "org.apache.commons.math.ode.SecondOrderIntegrator.integrate(SecondOrderDifferentialEquations,double,double[],double[],double,double[],double[])"
reference "org.apache.commons.math.random.JDKRandomGenerator" "org.apache.commons.math.random.RandomGenerator"
contain "org.apache.commons.math.random.JDKRandomGenerator" "org.apache.commons.math.random.JDKRandomGenerator.JDKRandomGenerator()"
contain "org.apache.commons.math.random.JDKRandomGenerator" "org.apache.commons.math.random.JDKRandomGenerator.serialVersionUID : long"
reference "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest" "org.apache.commons.math.stat.inference.ChiSquareTest"
reference "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest" "org.apache.commons.math.MathException"
contain "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareDataSetsComparison(long[],long[])"
contain "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(long[],long[])"
contain "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(long[],long[],double)"
reference "org.apache.commons.math.distribution.ChiSquaredDistribution" "org.apache.commons.math.distribution.ContinuousDistribution"
contain "org.apache.commons.math.distribution.ChiSquaredDistribution" "org.apache.commons.math.distribution.ChiSquaredDistribution.setDegreesOfFreedom(double)"
contain "org.apache.commons.math.distribution.ChiSquaredDistribution" "org.apache.commons.math.distribution.ChiSquaredDistribution.getDegreesOfFreedom()"
reference "org.apache.commons.math.special.Beta" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.special.Beta" "org.apache.commons.math.util.ContinuedFraction"
reference "org.apache.commons.math.special.Beta" "org.apache.commons.math.special.Gamma"
contain "org.apache.commons.math.special.Beta" "org.apache.commons.math.special.Beta.Beta()"
call "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double)" "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double,double,int)"
contain "org.apache.commons.math.special.Beta" "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double)"
call "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double,double)" "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double,double,int)"
contain "org.apache.commons.math.special.Beta" "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double,double)"
call "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double,int)" "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double,double,int)"
contain "org.apache.commons.math.special.Beta" "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double,int)"
call "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double,double,int)" "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double,double,int)"
call "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double,double,int)" "org.apache.commons.math.special.Beta.1.{...}"
call "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double,double,int)" "org.apache.commons.math.special.Beta.logBeta(double,double,double,int)"
call "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double,double,int)" "org.apache.commons.math.util.ContinuedFraction.evaluate(double,double,int)"
contain "org.apache.commons.math.special.Beta" "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double,double,int)"
call "org.apache.commons.math.special.Beta.logBeta(double,double)" "org.apache.commons.math.special.Beta.logBeta(double,double,double,int)"
contain "org.apache.commons.math.special.Beta" "org.apache.commons.math.special.Beta.logBeta(double,double)"
call "org.apache.commons.math.special.Beta.logBeta(double,double,double,int)" "org.apache.commons.math.special.Gamma.logGamma(double)"
contain "org.apache.commons.math.special.Beta" "org.apache.commons.math.special.Beta.logBeta(double,double,double,int)"
contain "org.apache.commons.math.special.Beta" "org.apache.commons.math.special.Beta.serialVersionUID : long"
contain "org.apache.commons.math.special.Beta" "org.apache.commons.math.special.Beta.DEFAULT_EPSILON : double"
contain "org.apache.commons.math.MessagesResources_fr" "org.apache.commons.math.MessagesResources_fr.MessagesResources_fr()"
reference "org.apache.commons.math.MessagesResources_fr.getContents()" "org.apache.commons.math.MessagesResources_fr.contents : Object[][]"
contain "org.apache.commons.math.MessagesResources_fr" "org.apache.commons.math.MessagesResources_fr.getContents()"
reference "org.apache.commons.math.MessagesResources_fr.static {...}" "org.apache.commons.math.MessagesResources_fr.contents : Object[][]"
contain "org.apache.commons.math.MessagesResources_fr" "org.apache.commons.math.MessagesResources_fr.static {...}"
contain "org.apache.commons.math.MessagesResources_fr" "org.apache.commons.math.MessagesResources_fr.contents : Object[][]"
reference "org.apache.commons.math.distribution.ContinuousDistribution" "org.apache.commons.math.distribution.Distribution"
reference "org.apache.commons.math.distribution.ContinuousDistribution" "org.apache.commons.math.MathException"
contain "org.apache.commons.math.distribution.ContinuousDistribution" "org.apache.commons.math.distribution.ContinuousDistribution.inverseCumulativeProbability(double)"
reference "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.transform.FastFourierTransformer"
reference "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.transform.FastSineTransformer.FastSineTransformer()"
call "org.apache.commons.math.transform.FastSineTransformer.transform(double[])" "org.apache.commons.math.transform.FastSineTransformer.fst(double[])"
contain "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.transform.FastSineTransformer.transform(double[])"
call "org.apache.commons.math.transform.FastSineTransformer.transform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.sample(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastSineTransformer.transform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastSineTransformer.fst(double[])"
contain "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.transform.FastSineTransformer.transform(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastSineTransformer.transform2(double[])" "org.apache.commons.math.transform.FastSineTransformer.fst(double[])"
call "org.apache.commons.math.transform.FastSineTransformer.transform2(double[])" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[],double)"
contain "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.transform.FastSineTransformer.transform2(double[])"
call "org.apache.commons.math.transform.FastSineTransformer.transform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.sample(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastSineTransformer.transform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastSineTransformer.fst(double[])"
call "org.apache.commons.math.transform.FastSineTransformer.transform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[],double)"
contain "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.transform.FastSineTransformer.transform2(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastSineTransformer.inversetransform(double[])" "org.apache.commons.math.transform.FastSineTransformer.fst(double[])"
call "org.apache.commons.math.transform.FastSineTransformer.inversetransform(double[])" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[],double)"
contain "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.transform.FastSineTransformer.inversetransform(double[])"
call "org.apache.commons.math.transform.FastSineTransformer.inversetransform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.sample(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastSineTransformer.inversetransform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastSineTransformer.fst(double[])"
call "org.apache.commons.math.transform.FastSineTransformer.inversetransform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[],double)"
contain "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.transform.FastSineTransformer.inversetransform(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastSineTransformer.inversetransform2(double[])" "org.apache.commons.math.transform.FastSineTransformer.transform2(double[])"
contain "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.transform.FastSineTransformer.inversetransform2(double[])"
call "org.apache.commons.math.transform.FastSineTransformer.inversetransform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastSineTransformer.transform2(UnivariateRealFunction,double,double,int)"
contain "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.transform.FastSineTransformer.inversetransform2(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastSineTransformer.fst(double[])" "org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(double[])"
call "org.apache.commons.math.transform.FastSineTransformer.fst(double[])" "org.apache.commons.math.transform.FastFourierTransformer.FastFourierTransformer()"
call "org.apache.commons.math.transform.FastSineTransformer.fst(double[])" "org.apache.commons.math.transform.FastFourierTransformer.transform(double[])"
call "org.apache.commons.math.transform.FastSineTransformer.fst(double[])" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.transform.FastSineTransformer.fst(double[])" "org.apache.commons.math.complex.Complex.getImaginary()"
contain "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.transform.FastSineTransformer.fst(double[])"
contain "org.apache.commons.math.transform.FastSineTransformer" "org.apache.commons.math.transform.FastSineTransformer.serialVersionUID : long"
reference "org.apache.commons.math.analysis.RiddersSolver" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.analysis.RiddersSolver" "org.apache.commons.math.analysis.UnivariateRealSolverImpl"
reference "org.apache.commons.math.analysis.RiddersSolver" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.RiddersSolver" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.analysis.RiddersSolver" "org.apache.commons.math.util.MathUtils"
call "org.apache.commons.math.analysis.RiddersSolver.RiddersSolver(UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)"
contain "org.apache.commons.math.analysis.RiddersSolver" "org.apache.commons.math.analysis.RiddersSolver.RiddersSolver(UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.RiddersSolver.solve(double,double,double)" "org.apache.commons.math.analysis.RiddersSolver.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.RiddersSolver.solve(double,double,double)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.RiddersSolver.solve(double,double,double)" "org.apache.commons.math.analysis.RiddersSolver.verifyBracketing(double,double,UnivariateRealFunction)"
call "org.apache.commons.math.analysis.RiddersSolver.solve(double,double,double)" "org.apache.commons.math.analysis.RiddersSolver.verifySequence(double,double,double)"
call "org.apache.commons.math.analysis.RiddersSolver.solve(double,double,double)" "org.apache.commons.math.analysis.RiddersSolver.isBracketing(double,double,UnivariateRealFunction)"
call "org.apache.commons.math.analysis.RiddersSolver.solve(double,double,double)" "org.apache.commons.math.analysis.RiddersSolver.solve(double,double)"
contain "org.apache.commons.math.analysis.RiddersSolver" "org.apache.commons.math.analysis.RiddersSolver.solve(double,double,double)"
reference "org.apache.commons.math.analysis.RiddersSolver.solve(double,double)" "org.apache.commons.math.analysis.RiddersSolver.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.RiddersSolver.solve(double,double)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.RiddersSolver.solve(double,double)" "org.apache.commons.math.analysis.RiddersSolver.verifyBracketing(double,double,UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.RiddersSolver.solve(double,double)" "org.apache.commons.math.analysis.RiddersSolver.maximalIterationCount : int"
reference "org.apache.commons.math.analysis.RiddersSolver.solve(double,double)" "org.apache.commons.math.analysis.RiddersSolver.functionValueAccuracy : double"
call "org.apache.commons.math.analysis.RiddersSolver.solve(double,double)" "org.apache.commons.math.analysis.RiddersSolver.setResult(double,int)"
reference "org.apache.commons.math.analysis.RiddersSolver.solve(double,double)" "org.apache.commons.math.analysis.RiddersSolver.result : double"
call "org.apache.commons.math.analysis.RiddersSolver.solve(double,double)" "org.apache.commons.math.util.MathUtils.sign(double)"
reference "org.apache.commons.math.analysis.RiddersSolver.solve(double,double)" "org.apache.commons.math.analysis.RiddersSolver.relativeAccuracy : double"
reference "org.apache.commons.math.analysis.RiddersSolver.solve(double,double)" "org.apache.commons.math.analysis.RiddersSolver.absoluteAccuracy : double"
call "org.apache.commons.math.analysis.RiddersSolver.solve(double,double)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
contain "org.apache.commons.math.analysis.RiddersSolver" "org.apache.commons.math.analysis.RiddersSolver.solve(double,double)"
contain "org.apache.commons.math.analysis.RiddersSolver" "org.apache.commons.math.analysis.RiddersSolver.serialVersionUID : long"
reference "org.apache.commons.math.distribution.PoissonDistribution" "org.apache.commons.math.distribution.IntegerDistribution"
reference "org.apache.commons.math.distribution.PoissonDistribution" "org.apache.commons.math.MathException"
contain "org.apache.commons.math.distribution.PoissonDistribution" "org.apache.commons.math.distribution.PoissonDistribution.getMean()"
contain "org.apache.commons.math.distribution.PoissonDistribution" "org.apache.commons.math.distribution.PoissonDistribution.setMean(double)"
contain "org.apache.commons.math.distribution.PoissonDistribution" "org.apache.commons.math.distribution.PoissonDistribution.normalApproximateProbability(int)"
reference "org.apache.commons.math.distribution.PascalDistribution" "org.apache.commons.math.distribution.IntegerDistribution"
contain "org.apache.commons.math.distribution.PascalDistribution" "org.apache.commons.math.distribution.PascalDistribution.getNumberOfSuccesses()"
contain "org.apache.commons.math.distribution.PascalDistribution" "org.apache.commons.math.distribution.PascalDistribution.getProbabilityOfSuccess()"
contain "org.apache.commons.math.distribution.PascalDistribution" "org.apache.commons.math.distribution.PascalDistribution.setNumberOfSuccesses(int)"
contain "org.apache.commons.math.distribution.PascalDistribution" "org.apache.commons.math.distribution.PascalDistribution.setProbabilityOfSuccess(double)"
reference "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.MatrixIndexException"
reference "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.InvalidMatrixException"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.copy()"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.add(RealMatrix)"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.subtract(RealMatrix)"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.scalarAdd(double)"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.scalarMultiply(double)"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.multiply(RealMatrix)"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.preMultiply(RealMatrix)"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.getData()"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.getNorm()"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.getSubMatrix(int,int,int,int)"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.getSubMatrix(int[],int[])"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.getRowMatrix(int)"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.getColumnMatrix(int)"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.getRow(int)"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.getColumn(int)"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.transpose()"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.inverse()"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.getDeterminant()"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.isSquare()"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.isSingular()"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.getColumnDimension()"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.getTrace()"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.operate(double[])"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.preMultiply(double[])"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.solve(double[])"
contain "org.apache.commons.math.linear.RealMatrix" "org.apache.commons.math.linear.RealMatrix.solve(RealMatrix)"
reference "org.apache.commons.math.util.ContinuedFraction" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.util.ContinuedFraction" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.util.ContinuedFraction" "org.apache.commons.math.MathException"
contain "org.apache.commons.math.util.ContinuedFraction" "org.apache.commons.math.util.ContinuedFraction.ContinuedFraction()"
contain "org.apache.commons.math.util.ContinuedFraction" "org.apache.commons.math.util.ContinuedFraction.getA(int,double)"
contain "org.apache.commons.math.util.ContinuedFraction" "org.apache.commons.math.util.ContinuedFraction.getB(int,double)"
call "org.apache.commons.math.util.ContinuedFraction.evaluate(double)" "org.apache.commons.math.util.ContinuedFraction.evaluate(double,double,int)"
contain "org.apache.commons.math.util.ContinuedFraction" "org.apache.commons.math.util.ContinuedFraction.evaluate(double)"
call "org.apache.commons.math.util.ContinuedFraction.evaluate(double,double)" "org.apache.commons.math.util.ContinuedFraction.evaluate(double,double,int)"
contain "org.apache.commons.math.util.ContinuedFraction" "org.apache.commons.math.util.ContinuedFraction.evaluate(double,double)"
call "org.apache.commons.math.util.ContinuedFraction.evaluate(double,int)" "org.apache.commons.math.util.ContinuedFraction.evaluate(double,double,int)"
contain "org.apache.commons.math.util.ContinuedFraction" "org.apache.commons.math.util.ContinuedFraction.evaluate(double,int)"
call "org.apache.commons.math.util.ContinuedFraction.evaluate(double,double,int)" "org.apache.commons.math.util.ContinuedFraction.getA(int,double)"
call "org.apache.commons.math.util.ContinuedFraction.evaluate(double,double,int)" "org.apache.commons.math.util.ContinuedFraction.getB(int,double)"
call "org.apache.commons.math.util.ContinuedFraction.evaluate(double,double,int)" "org.apache.commons.math.ConvergenceException.ConvergenceException(String,Object[])"
call "org.apache.commons.math.util.ContinuedFraction.evaluate(double,double,int)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int,String,Object[])"
contain "org.apache.commons.math.util.ContinuedFraction" "org.apache.commons.math.util.ContinuedFraction.evaluate(double,double,int)"
contain "org.apache.commons.math.util.ContinuedFraction" "org.apache.commons.math.util.ContinuedFraction.serialVersionUID : long"
contain "org.apache.commons.math.util.ContinuedFraction" "org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON : double"
contain "org.apache.commons.math.random.RandomGenerator" "org.apache.commons.math.random.RandomGenerator.setSeed(long)"
contain "org.apache.commons.math.random.RandomGenerator" "org.apache.commons.math.random.RandomGenerator.nextBytes(byte[])"
contain "org.apache.commons.math.random.RandomGenerator" "org.apache.commons.math.random.RandomGenerator.nextInt()"
contain "org.apache.commons.math.random.RandomGenerator" "org.apache.commons.math.random.RandomGenerator.nextInt(int)"
contain "org.apache.commons.math.random.RandomGenerator" "org.apache.commons.math.random.RandomGenerator.nextLong()"
contain "org.apache.commons.math.random.RandomGenerator" "org.apache.commons.math.random.RandomGenerator.nextBoolean()"
contain "org.apache.commons.math.random.RandomGenerator" "org.apache.commons.math.random.RandomGenerator.nextFloat()"
contain "org.apache.commons.math.random.RandomGenerator" "org.apache.commons.math.random.RandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.RandomGenerator" "org.apache.commons.math.random.RandomGenerator.nextGaussian()"
reference "org.apache.commons.math.MathConfigurationException" "org.apache.commons.math.MathException"
call "org.apache.commons.math.MathConfigurationException.MathConfigurationException()" "org.apache.commons.math.MathException.MathException()"
contain "org.apache.commons.math.MathConfigurationException" "org.apache.commons.math.MathConfigurationException.MathConfigurationException()"
call "org.apache.commons.math.MathConfigurationException.MathConfigurationException(String)" "org.apache.commons.math.MathException.MathException(String)"
contain "org.apache.commons.math.MathConfigurationException" "org.apache.commons.math.MathConfigurationException.MathConfigurationException(String)"
call "org.apache.commons.math.MathConfigurationException.MathConfigurationException(String,Object[])" "org.apache.commons.math.MathException.MathException(String,Object[])"
contain "org.apache.commons.math.MathConfigurationException" "org.apache.commons.math.MathConfigurationException.MathConfigurationException(String,Object[])"
call "org.apache.commons.math.MathConfigurationException.MathConfigurationException(String,Throwable)" "org.apache.commons.math.MathException.MathException(String,Throwable)"
contain "org.apache.commons.math.MathConfigurationException" "org.apache.commons.math.MathConfigurationException.MathConfigurationException(String,Throwable)"
call "org.apache.commons.math.MathConfigurationException.MathConfigurationException(Throwable)" "org.apache.commons.math.MathException.MathException(Throwable)"
contain "org.apache.commons.math.MathConfigurationException" "org.apache.commons.math.MathConfigurationException.MathConfigurationException(Throwable)"
call "org.apache.commons.math.MathConfigurationException.MathConfigurationException(String,Object[],Throwable)" "org.apache.commons.math.MathException.MathException(String,Object[],Throwable)"
contain "org.apache.commons.math.MathConfigurationException" "org.apache.commons.math.MathConfigurationException.MathConfigurationException(String,Object[],Throwable)"
contain "org.apache.commons.math.MathConfigurationException" "org.apache.commons.math.MathConfigurationException.serialVersionUID : long"
reference "org.apache.commons.math.ode.DummyStepInterpolator" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DummyStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator"
call "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator()" "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator()"
contain "org.apache.commons.math.ode.DummyStepInterpolator" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator()"
call "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(double[],boolean)"
contain "org.apache.commons.math.ode.DummyStepInterpolator" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(double[],boolean)"
call "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(DummyStepInterpolator)" "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(AbstractStepInterpolator)"
contain "org.apache.commons.math.ode.DummyStepInterpolator" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(DummyStepInterpolator)"
call "org.apache.commons.math.ode.DummyStepInterpolator.doCopy()" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(DummyStepInterpolator)"
contain "org.apache.commons.math.ode.DummyStepInterpolator" "org.apache.commons.math.ode.DummyStepInterpolator.doCopy()"
reference "org.apache.commons.math.ode.DummyStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DummyStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.DummyStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DummyStepInterpolator.interpolatedState : double[]"
contain "org.apache.commons.math.ode.DummyStepInterpolator" "org.apache.commons.math.ode.DummyStepInterpolator.computeInterpolatedState(double,double)"
call "org.apache.commons.math.ode.DummyStepInterpolator.writeExternal(ObjectOutput)" "org.apache.commons.math.ode.DummyStepInterpolator.writeBaseExternal(ObjectOutput)"
contain "org.apache.commons.math.ode.DummyStepInterpolator" "org.apache.commons.math.ode.DummyStepInterpolator.writeExternal(ObjectOutput)"
call "org.apache.commons.math.ode.DummyStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.DummyStepInterpolator.readBaseExternal(ObjectInput)"
call "org.apache.commons.math.ode.DummyStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.DummyStepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.DummyStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.DerivativeException.getMessage()"
contain "org.apache.commons.math.ode.DummyStepInterpolator" "org.apache.commons.math.ode.DummyStepInterpolator.readExternal(ObjectInput)"
contain "org.apache.commons.math.ode.DummyStepInterpolator" "org.apache.commons.math.ode.DummyStepInterpolator.serialVersionUID : long"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.PolynomialFunction"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.ArgumentOutsideDomainException"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.PolynomialSplineFunction(double[],PolynomialFunction[])" "org.apache.commons.math.analysis.PolynomialSplineFunction.polynomials : PolynomialFunction[]"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.PolynomialSplineFunction(double[],PolynomialFunction[])" "org.apache.commons.math.analysis.PolynomialSplineFunction.n : int"
call "org.apache.commons.math.analysis.PolynomialSplineFunction.PolynomialSplineFunction(double[],PolynomialFunction[])" "org.apache.commons.math.analysis.PolynomialSplineFunction.isStrictlyIncreasing(double[])"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.PolynomialSplineFunction(double[],PolynomialFunction[])" "org.apache.commons.math.analysis.PolynomialSplineFunction.knots : double[]"
contain "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.PolynomialSplineFunction.PolynomialSplineFunction(double[],PolynomialFunction[])"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.value(double)" "org.apache.commons.math.analysis.PolynomialSplineFunction.knots : double[]"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.value(double)" "org.apache.commons.math.analysis.PolynomialSplineFunction.n : int"
call "org.apache.commons.math.analysis.PolynomialSplineFunction.value(double)" "org.apache.commons.math.ArgumentOutsideDomainException.ArgumentOutsideDomainException(double,double,double)"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.value(double)" "org.apache.commons.math.analysis.PolynomialSplineFunction.polynomials : PolynomialFunction[]"
call "org.apache.commons.math.analysis.PolynomialSplineFunction.value(double)" "org.apache.commons.math.analysis.PolynomialFunction.value(double)"
contain "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.PolynomialSplineFunction.value(double)"
call "org.apache.commons.math.analysis.PolynomialSplineFunction.derivative()" "org.apache.commons.math.analysis.PolynomialSplineFunction.polynomialSplineDerivative()"
contain "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.PolynomialSplineFunction.derivative()"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.polynomialSplineDerivative()" "org.apache.commons.math.analysis.PolynomialSplineFunction.n : int"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.polynomialSplineDerivative()" "org.apache.commons.math.analysis.PolynomialSplineFunction.polynomials : PolynomialFunction[]"
call "org.apache.commons.math.analysis.PolynomialSplineFunction.polynomialSplineDerivative()" "org.apache.commons.math.analysis.PolynomialFunction.polynomialDerivative()"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.polynomialSplineDerivative()" "org.apache.commons.math.analysis.PolynomialSplineFunction.knots : double[]"
call "org.apache.commons.math.analysis.PolynomialSplineFunction.polynomialSplineDerivative()" "org.apache.commons.math.analysis.PolynomialSplineFunction.PolynomialSplineFunction(double[],PolynomialFunction[])"
contain "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.PolynomialSplineFunction.polynomialSplineDerivative()"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.getN()" "org.apache.commons.math.analysis.PolynomialSplineFunction.n : int"
contain "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.PolynomialSplineFunction.getN()"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.getPolynomials()" "org.apache.commons.math.analysis.PolynomialSplineFunction.n : int"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.getPolynomials()" "org.apache.commons.math.analysis.PolynomialSplineFunction.polynomials : PolynomialFunction[]"
contain "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.PolynomialSplineFunction.getPolynomials()"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.getKnots()" "org.apache.commons.math.analysis.PolynomialSplineFunction.n : int"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.getKnots()" "org.apache.commons.math.analysis.PolynomialSplineFunction.knots : double[]"
contain "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.PolynomialSplineFunction.getKnots()"
contain "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.PolynomialSplineFunction.isStrictlyIncreasing(double[])"
contain "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.PolynomialSplineFunction.serialVersionUID : long"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.knots : double[]" "double[]"
contain "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.PolynomialSplineFunction.knots : double[]"
reference "org.apache.commons.math.analysis.PolynomialSplineFunction.polynomials : PolynomialFunction[]" "org.apache.commons.math.analysis.PolynomialFunction[]"
contain "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.PolynomialSplineFunction.polynomials : PolynomialFunction[]"
contain "org.apache.commons.math.analysis.PolynomialSplineFunction" "org.apache.commons.math.analysis.PolynomialSplineFunction.n : int"
reference "org.apache.commons.math.ode.EulerStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator"
reference "org.apache.commons.math.ode.EulerStepInterpolator" "org.apache.commons.math.ode.DerivativeException"
call "org.apache.commons.math.ode.EulerStepInterpolator.EulerStepInterpolator()" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator()"
contain "org.apache.commons.math.ode.EulerStepInterpolator" "org.apache.commons.math.ode.EulerStepInterpolator.EulerStepInterpolator()"
call "org.apache.commons.math.ode.EulerStepInterpolator.EulerStepInterpolator(EulerStepInterpolator)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
contain "org.apache.commons.math.ode.EulerStepInterpolator" "org.apache.commons.math.ode.EulerStepInterpolator.EulerStepInterpolator(EulerStepInterpolator)"
call "org.apache.commons.math.ode.EulerStepInterpolator.doCopy()" "org.apache.commons.math.ode.EulerStepInterpolator.EulerStepInterpolator(EulerStepInterpolator)"
contain "org.apache.commons.math.ode.EulerStepInterpolator" "org.apache.commons.math.ode.EulerStepInterpolator.doCopy()"
reference "org.apache.commons.math.ode.EulerStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.EulerStepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.EulerStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.EulerStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.EulerStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.EulerStepInterpolator.yDotK : double[][]"
contain "org.apache.commons.math.ode.EulerStepInterpolator" "org.apache.commons.math.ode.EulerStepInterpolator.computeInterpolatedState(double,double)"
contain "org.apache.commons.math.ode.EulerStepInterpolator" "org.apache.commons.math.ode.EulerStepInterpolator.serialVersionUID : long"
reference "org.apache.commons.math.analysis.SimpsonIntegrator" "org.apache.commons.math.analysis.TrapezoidIntegrator"
reference "org.apache.commons.math.analysis.SimpsonIntegrator" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.analysis.SimpsonIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl"
reference "org.apache.commons.math.analysis.SimpsonIntegrator" "org.apache.commons.math.FunctionEvaluationException"
call "org.apache.commons.math.analysis.SimpsonIntegrator.SimpsonIntegrator(UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.UnivariateRealIntegratorImpl(UnivariateRealFunction,int)"
contain "org.apache.commons.math.analysis.SimpsonIntegrator" "org.apache.commons.math.analysis.SimpsonIntegrator.SimpsonIntegrator(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.SimpsonIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.SimpsonIntegrator.clearResult()"
call "org.apache.commons.math.analysis.SimpsonIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.SimpsonIntegrator.verifyInterval(double,double)"
call "org.apache.commons.math.analysis.SimpsonIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.SimpsonIntegrator.verifyIterationCount()"
reference "org.apache.commons.math.analysis.SimpsonIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.SimpsonIntegrator.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.SimpsonIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.TrapezoidIntegrator.TrapezoidIntegrator(UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.SimpsonIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.SimpsonIntegrator.minimalIterationCount : int"
call "org.apache.commons.math.analysis.SimpsonIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.TrapezoidIntegrator.stage(double,double,int)"
call "org.apache.commons.math.analysis.SimpsonIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.SimpsonIntegrator.setResult(double,int)"
reference "org.apache.commons.math.analysis.SimpsonIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.SimpsonIntegrator.result : double"
reference "org.apache.commons.math.analysis.SimpsonIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.SimpsonIntegrator.maximalIterationCount : int"
reference "org.apache.commons.math.analysis.SimpsonIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.SimpsonIntegrator.relativeAccuracy : double"
call "org.apache.commons.math.analysis.SimpsonIntegrator.integrate(double,double)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
contain "org.apache.commons.math.analysis.SimpsonIntegrator" "org.apache.commons.math.analysis.SimpsonIntegrator.integrate(double,double)"
call "org.apache.commons.math.analysis.SimpsonIntegrator.verifyIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.verifyIterationCount()"
reference "org.apache.commons.math.analysis.SimpsonIntegrator.verifyIterationCount()" "org.apache.commons.math.analysis.SimpsonIntegrator.maximalIterationCount : int"
contain "org.apache.commons.math.analysis.SimpsonIntegrator" "org.apache.commons.math.analysis.SimpsonIntegrator.verifyIterationCount()"
contain "org.apache.commons.math.analysis.SimpsonIntegrator" "org.apache.commons.math.analysis.SimpsonIntegrator.serialVersionUID : long"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.analysis.UnivariateRealSolverFactory"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.analysis.UnivariateRealSolver"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.analysis.UnivariateRealFunction"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.UnivariateRealSolverUtils()"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double)" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.setup(UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double)" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory : UnivariateRealSolverFactory"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double)" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newDefaultSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double)" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double,double)" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.setup(UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double,double)" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory : UnivariateRealSolverFactory"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double,double)" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newDefaultSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double,double)" "org.apache.commons.math.analysis.UnivariateRealSolver.setAbsoluteAccuracy(double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double,double)" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealFunction,double,double,double)" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealFunction,double,double,double,int)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealFunction,double,double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealFunction,double,double,double,int)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealFunction,double,double,double,int)" "org.apache.commons.math.ConvergenceException.ConvergenceException(String,Object[])"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealFunction,double,double,double,int)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.midpoint(double,double)"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtils.setup(UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory : UnivariateRealSolverFactory"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtils.setup(UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newInstance()"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.setup(UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtils.static {...}" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory : UnivariateRealSolverFactory"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.static {...}"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory : UnivariateRealSolverFactory" "org.apache.commons.math.analysis.UnivariateRealSolverFactory"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtils" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory : UnivariateRealSolverFactory"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.ArrayDataAdapter(double[])" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.DataAdapter(EmpiricalDistributionImpl.1)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.ArrayDataAdapter(double[])" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.this$0 : EmpiricalDistributionImpl"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.ArrayDataAdapter(double[])" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.inputArray : double[]"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.ArrayDataAdapter(double[])"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.computeStats()" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.this$0 : EmpiricalDistributionImpl"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.computeStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.computeStats()" "org.apache.commons.math.random.EmpiricalDistributionImpl.access$302(EmpiricalDistributionImpl,SummaryStatistics)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.computeStats()" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.inputArray : double[]"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.computeStats()" "org.apache.commons.math.random.EmpiricalDistributionImpl.access$300(EmpiricalDistributionImpl)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.computeStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.computeStats()"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.computeBinStats(double,double)" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.inputArray : double[]"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.computeBinStats(double,double)" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.this$0 : EmpiricalDistributionImpl"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.computeBinStats(double,double)" "org.apache.commons.math.random.EmpiricalDistributionImpl.access$200(EmpiricalDistributionImpl)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.computeBinStats(double,double)" "org.apache.commons.math.random.EmpiricalDistributionImpl.access$100(EmpiricalDistributionImpl,double,double,double)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.computeBinStats(double,double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.computeBinStats(double,double)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.inputArray : double[]" "double[]"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.inputArray : double[]"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.this$0 : EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.this$0 : EmpiricalDistributionImpl"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator" "double[][]"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator" "double[]"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator"
call "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator()" "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator()"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator()" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.yDotK : double[][]"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator()" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.equations : FirstOrderDifferentialEquations"
contain "org.apache.commons.math.ode.RungeKuttaStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator()"
call "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)" "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(AbstractStepInterpolator)"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.yDotK : double[][]"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.equations : FirstOrderDifferentialEquations"
contain "org.apache.commons.math.ode.RungeKuttaStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
call "org.apache.commons.math.ode.RungeKuttaStepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.reinitialize(double[],boolean)"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.yDotK : double[][]"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.equations : FirstOrderDifferentialEquations"
contain "org.apache.commons.math.ode.RungeKuttaStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)"
call "org.apache.commons.math.ode.RungeKuttaStepInterpolator.writeExternal(ObjectOutput)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.writeBaseExternal(ObjectOutput)"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.writeExternal(ObjectOutput)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.yDotK : double[][]"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.writeExternal(ObjectOutput)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.currentState : double[]"
contain "org.apache.commons.math.ode.RungeKuttaStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.writeExternal(ObjectOutput)"
call "org.apache.commons.math.ode.RungeKuttaStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.readBaseExternal(ObjectInput)"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.yDotK : double[][]"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.equations : FirstOrderDifferentialEquations"
call "org.apache.commons.math.ode.RungeKuttaStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.RungeKuttaStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.DerivativeException.getMessage()"
contain "org.apache.commons.math.ode.RungeKuttaStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.readExternal(ObjectInput)"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.yDotK : double[][]" "double[][]"
contain "org.apache.commons.math.ode.RungeKuttaStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.yDotK : double[][]"
reference "org.apache.commons.math.ode.RungeKuttaStepInterpolator.equations : FirstOrderDifferentialEquations" "org.apache.commons.math.ode.FirstOrderDifferentialEquations"
contain "org.apache.commons.math.ode.RungeKuttaStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.equations : FirstOrderDifferentialEquations"
reference "org.apache.commons.math.ode.HighamHall54Integrator" "org.apache.commons.math.ode.HighamHall54StepInterpolator"
reference "org.apache.commons.math.ode.HighamHall54Integrator" "double[]"
reference "org.apache.commons.math.ode.HighamHall54Integrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator"
reference "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)" "org.apache.commons.math.ode.HighamHall54Integrator.staticC : double[]"
reference "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)" "org.apache.commons.math.ode.HighamHall54Integrator.staticA : double[][]"
reference "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)" "org.apache.commons.math.ode.HighamHall54Integrator.staticB : double[]"
call "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)" "org.apache.commons.math.ode.HighamHall54StepInterpolator.HighamHall54StepInterpolator()"
call "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)"
contain "org.apache.commons.math.ode.HighamHall54Integrator" "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)"
reference "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.HighamHall54Integrator.staticC : double[]"
reference "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.HighamHall54Integrator.staticA : double[][]"
reference "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.HighamHall54Integrator.staticB : double[]"
call "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.HighamHall54StepInterpolator.HighamHall54StepInterpolator()"
call "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])"
contain "org.apache.commons.math.ode.HighamHall54Integrator" "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double[],double[])"
contain "org.apache.commons.math.ode.HighamHall54Integrator" "org.apache.commons.math.ode.HighamHall54Integrator.getName()"
contain "org.apache.commons.math.ode.HighamHall54Integrator" "org.apache.commons.math.ode.HighamHall54Integrator.getOrder()"
reference "org.apache.commons.math.ode.HighamHall54Integrator.estimateError(double[][],double[],double[],double)" "org.apache.commons.math.ode.HighamHall54Integrator.staticE : double[]"
reference "org.apache.commons.math.ode.HighamHall54Integrator.estimateError(double[][],double[],double[],double)" "org.apache.commons.math.ode.HighamHall54Integrator.vecAbsoluteTolerance : double[]"
reference "org.apache.commons.math.ode.HighamHall54Integrator.estimateError(double[][],double[],double[],double)" "org.apache.commons.math.ode.HighamHall54Integrator.scalAbsoluteTolerance : double"
reference "org.apache.commons.math.ode.HighamHall54Integrator.estimateError(double[][],double[],double[],double)" "org.apache.commons.math.ode.HighamHall54Integrator.scalRelativeTolerance : double"
reference "org.apache.commons.math.ode.HighamHall54Integrator.estimateError(double[][],double[],double[],double)" "org.apache.commons.math.ode.HighamHall54Integrator.vecRelativeTolerance : double[]"
contain "org.apache.commons.math.ode.HighamHall54Integrator" "org.apache.commons.math.ode.HighamHall54Integrator.estimateError(double[][],double[],double[],double)"
reference "org.apache.commons.math.ode.HighamHall54Integrator.static {...}" "org.apache.commons.math.ode.HighamHall54Integrator.staticC : double[]"
reference "org.apache.commons.math.ode.HighamHall54Integrator.static {...}" "org.apache.commons.math.ode.HighamHall54Integrator.staticA : double[][]"
reference "org.apache.commons.math.ode.HighamHall54Integrator.static {...}" "org.apache.commons.math.ode.HighamHall54Integrator.staticB : double[]"
reference "org.apache.commons.math.ode.HighamHall54Integrator.static {...}" "org.apache.commons.math.ode.HighamHall54Integrator.staticE : double[]"
contain "org.apache.commons.math.ode.HighamHall54Integrator" "org.apache.commons.math.ode.HighamHall54Integrator.static {...}"
contain "org.apache.commons.math.ode.HighamHall54Integrator" "org.apache.commons.math.ode.HighamHall54Integrator.methodName : String"
reference "org.apache.commons.math.ode.HighamHall54Integrator.staticC : double[]" "double[]"
contain "org.apache.commons.math.ode.HighamHall54Integrator" "org.apache.commons.math.ode.HighamHall54Integrator.staticC : double[]"
reference "org.apache.commons.math.ode.HighamHall54Integrator.staticA : double[][]" "double[][]"
contain "org.apache.commons.math.ode.HighamHall54Integrator" "org.apache.commons.math.ode.HighamHall54Integrator.staticA : double[][]"
reference "org.apache.commons.math.ode.HighamHall54Integrator.staticB : double[]" "double[]"
contain "org.apache.commons.math.ode.HighamHall54Integrator" "org.apache.commons.math.ode.HighamHall54Integrator.staticB : double[]"
reference "org.apache.commons.math.ode.HighamHall54Integrator.staticE : double[]" "double[]"
contain "org.apache.commons.math.ode.HighamHall54Integrator" "org.apache.commons.math.ode.HighamHall54Integrator.staticE : double[]"
reference "org.apache.commons.math.analysis.RombergIntegrator" "double[][]"
reference "org.apache.commons.math.analysis.RombergIntegrator" "org.apache.commons.math.analysis.TrapezoidIntegrator"
reference "org.apache.commons.math.analysis.RombergIntegrator" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.analysis.RombergIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl"
reference "org.apache.commons.math.analysis.RombergIntegrator" "org.apache.commons.math.FunctionEvaluationException"
call "org.apache.commons.math.analysis.RombergIntegrator.RombergIntegrator(UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.UnivariateRealIntegratorImpl(UnivariateRealFunction,int)"
contain "org.apache.commons.math.analysis.RombergIntegrator" "org.apache.commons.math.analysis.RombergIntegrator.RombergIntegrator(UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.RombergIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.RombergIntegrator.maximalIterationCount : int"
call "org.apache.commons.math.analysis.RombergIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.RombergIntegrator.clearResult()"
call "org.apache.commons.math.analysis.RombergIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.RombergIntegrator.verifyInterval(double,double)"
call "org.apache.commons.math.analysis.RombergIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.RombergIntegrator.verifyIterationCount()"
reference "org.apache.commons.math.analysis.RombergIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.RombergIntegrator.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.RombergIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.TrapezoidIntegrator.TrapezoidIntegrator(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.RombergIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.TrapezoidIntegrator.stage(double,double,int)"
reference "org.apache.commons.math.analysis.RombergIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.RombergIntegrator.minimalIterationCount : int"
reference "org.apache.commons.math.analysis.RombergIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.RombergIntegrator.relativeAccuracy : double"
call "org.apache.commons.math.analysis.RombergIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.RombergIntegrator.setResult(double,int)"
reference "org.apache.commons.math.analysis.RombergIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.RombergIntegrator.result : double"
call "org.apache.commons.math.analysis.RombergIntegrator.integrate(double,double)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
contain "org.apache.commons.math.analysis.RombergIntegrator" "org.apache.commons.math.analysis.RombergIntegrator.integrate(double,double)"
call "org.apache.commons.math.analysis.RombergIntegrator.verifyIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.verifyIterationCount()"
reference "org.apache.commons.math.analysis.RombergIntegrator.verifyIterationCount()" "org.apache.commons.math.analysis.RombergIntegrator.maximalIterationCount : int"
contain "org.apache.commons.math.analysis.RombergIntegrator" "org.apache.commons.math.analysis.RombergIntegrator.verifyIterationCount()"
contain "org.apache.commons.math.analysis.RombergIntegrator" "org.apache.commons.math.analysis.RombergIntegrator.serialVersionUID : long"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolator" "org.apache.commons.math.ode.DerivativeException"
call "org.apache.commons.math.ode.HighamHall54StepInterpolator.HighamHall54StepInterpolator()" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator()"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolator" "org.apache.commons.math.ode.HighamHall54StepInterpolator.HighamHall54StepInterpolator()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolator.HighamHall54StepInterpolator(HighamHall54StepInterpolator)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolator" "org.apache.commons.math.ode.HighamHall54StepInterpolator.HighamHall54StepInterpolator(HighamHall54StepInterpolator)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolator.doCopy()" "org.apache.commons.math.ode.HighamHall54StepInterpolator.HighamHall54StepInterpolator(HighamHall54StepInterpolator)"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolator" "org.apache.commons.math.ode.HighamHall54StepInterpolator.doCopy()"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.HighamHall54StepInterpolator.h : double"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.HighamHall54StepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.HighamHall54StepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.HighamHall54StepInterpolator.yDotK : double[][]"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolator" "org.apache.commons.math.ode.HighamHall54StepInterpolator.computeInterpolatedState(double,double)"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolator" "org.apache.commons.math.ode.HighamHall54StepInterpolator.serialVersionUID : long"
reference "org.apache.commons.math.distribution.AbstractIntegerDistribution" "org.apache.commons.math.distribution.AbstractDistribution"
reference "org.apache.commons.math.distribution.AbstractIntegerDistribution" "org.apache.commons.math.distribution.IntegerDistribution"
reference "org.apache.commons.math.distribution.AbstractIntegerDistribution" "org.apache.commons.math.MathException"
call "org.apache.commons.math.distribution.AbstractIntegerDistribution.AbstractIntegerDistribution()" "org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution()"
contain "org.apache.commons.math.distribution.AbstractIntegerDistribution" "org.apache.commons.math.distribution.AbstractIntegerDistribution.AbstractIntegerDistribution()"
call "org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability(int)"
contain "org.apache.commons.math.distribution.AbstractIntegerDistribution" "org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability(double)"
contain "org.apache.commons.math.distribution.AbstractIntegerDistribution" "org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability(int)"
call "org.apache.commons.math.distribution.AbstractIntegerDistribution.probability(double)" "org.apache.commons.math.distribution.AbstractIntegerDistribution.probability(int)"
contain "org.apache.commons.math.distribution.AbstractIntegerDistribution" "org.apache.commons.math.distribution.AbstractIntegerDistribution.probability(double)"
call "org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability(int,int)" "org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability(int)"
contain "org.apache.commons.math.distribution.AbstractIntegerDistribution" "org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability(int,int)"
call "org.apache.commons.math.distribution.AbstractIntegerDistribution.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractIntegerDistribution.getDomainLowerBound(double)"
call "org.apache.commons.math.distribution.AbstractIntegerDistribution.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractIntegerDistribution.getDomainUpperBound(double)"
call "org.apache.commons.math.distribution.AbstractIntegerDistribution.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability(int)"
contain "org.apache.commons.math.distribution.AbstractIntegerDistribution" "org.apache.commons.math.distribution.AbstractIntegerDistribution.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.AbstractIntegerDistribution" "org.apache.commons.math.distribution.AbstractIntegerDistribution.getDomainLowerBound(double)"
contain "org.apache.commons.math.distribution.AbstractIntegerDistribution" "org.apache.commons.math.distribution.AbstractIntegerDistribution.getDomainUpperBound(double)"
contain "org.apache.commons.math.distribution.AbstractIntegerDistribution" "org.apache.commons.math.distribution.AbstractIntegerDistribution.serialVersionUID : long"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.RandomDataImpl"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistribution"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.RandomData"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl()" "org.apache.commons.math.random.EmpiricalDistributionImpl.binStats : ArrayList"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl()" "org.apache.commons.math.random.EmpiricalDistributionImpl.sampleStats : SummaryStatistics"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl()" "org.apache.commons.math.random.EmpiricalDistributionImpl.binCount : int"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl()" "org.apache.commons.math.random.EmpiricalDistributionImpl.loaded : boolean"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl()" "org.apache.commons.math.random.EmpiricalDistributionImpl.upperBounds : double[]"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl()" "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl()"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl()" "org.apache.commons.math.random.EmpiricalDistributionImpl.randomData : RandomData"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl()"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl(int)" "org.apache.commons.math.random.EmpiricalDistributionImpl.binStats : ArrayList"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl(int)" "org.apache.commons.math.random.EmpiricalDistributionImpl.sampleStats : SummaryStatistics"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl(int)" "org.apache.commons.math.random.EmpiricalDistributionImpl.binCount : int"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl(int)" "org.apache.commons.math.random.EmpiricalDistributionImpl.loaded : boolean"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl(int)" "org.apache.commons.math.random.EmpiricalDistributionImpl.upperBounds : double[]"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl(int)" "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl()"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl(int)" "org.apache.commons.math.random.EmpiricalDistributionImpl.randomData : RandomData"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl(int)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.load(double[])" "org.apache.commons.math.random.EmpiricalDistributionImpl.ArrayDataAdapter.ArrayDataAdapter(double[])"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.load(double[])" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.computeStats()"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.load(double[])" "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.load(double[])" "org.apache.commons.math.random.EmpiricalDistributionImpl.loaded : boolean"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.load(double[])"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.load(URL)" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.StreamDataAdapter(BufferedReader)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.load(URL)" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.computeStats()"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.load(URL)" "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.load(URL)" "org.apache.commons.math.random.EmpiricalDistributionImpl.loaded : boolean"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.load(URL)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.load(File)" "org.apache.commons.math.random.EmpiricalDistributionImpl.StreamDataAdapter.StreamDataAdapter(BufferedReader)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.load(File)" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.computeStats()"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.load(File)" "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.load(File)" "org.apache.commons.math.random.EmpiricalDistributionImpl.loaded : boolean"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.load(File)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)" "org.apache.commons.math.random.EmpiricalDistributionImpl.sampleStats : SummaryStatistics"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMin()"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMax()"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)" "org.apache.commons.math.random.EmpiricalDistributionImpl.binCount : int"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)" "org.apache.commons.math.random.EmpiricalDistributionImpl.binStats : ArrayList"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.DataAdapterFactory(EmpiricalDistributionImpl.1)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapterFactory.getAdapter(Object)"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)" "org.apache.commons.math.random.EmpiricalDistributionImpl.DataAdapter.computeBinStats(double,double)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)" "org.apache.commons.math.random.EmpiricalDistributionImpl.upperBounds : double[]"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getN()"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.fillBinStats(Object)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.findBin(double,double,double)" "org.apache.commons.math.random.EmpiricalDistributionImpl.binCount : int"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.findBin(double,double,double)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.getNextValue()" "org.apache.commons.math.random.EmpiricalDistributionImpl.loaded : boolean"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.getNextValue()" "org.apache.commons.math.random.EmpiricalDistributionImpl.binCount : int"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.getNextValue()" "org.apache.commons.math.random.EmpiricalDistributionImpl.upperBounds : double[]"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.getNextValue()" "org.apache.commons.math.random.EmpiricalDistributionImpl.binStats : ArrayList"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.getNextValue()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getN()"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.getNextValue()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.getNextValue()" "org.apache.commons.math.random.EmpiricalDistributionImpl.randomData : RandomData"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.getNextValue()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.getNextValue()" "org.apache.commons.math.random.RandomData.nextGaussian(double,double)"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.getNextValue()"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.getSampleStats()" "org.apache.commons.math.random.EmpiricalDistributionImpl.sampleStats : SummaryStatistics"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.getSampleStats()"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.getBinCount()" "org.apache.commons.math.random.EmpiricalDistributionImpl.binCount : int"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.getBinCount()"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.getBinStats()" "org.apache.commons.math.random.EmpiricalDistributionImpl.binStats : ArrayList"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.getBinStats()"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.getUpperBounds()" "org.apache.commons.math.random.EmpiricalDistributionImpl.upperBounds : double[]"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.getUpperBounds()"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.isLoaded()" "org.apache.commons.math.random.EmpiricalDistributionImpl.loaded : boolean"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.isLoaded()"
call "org.apache.commons.math.random.EmpiricalDistributionImpl.access$100(EmpiricalDistributionImpl,double,double,double)" "org.apache.commons.math.random.EmpiricalDistributionImpl.findBin(double,double,double)"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.access$100(EmpiricalDistributionImpl,double,double,double)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.access$200(EmpiricalDistributionImpl)" "org.apache.commons.math.random.EmpiricalDistributionImpl.binStats : ArrayList"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.access$200(EmpiricalDistributionImpl)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.access$302(EmpiricalDistributionImpl,SummaryStatistics)" "org.apache.commons.math.random.EmpiricalDistributionImpl.sampleStats : SummaryStatistics"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.access$302(EmpiricalDistributionImpl,SummaryStatistics)"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.access$300(EmpiricalDistributionImpl)" "org.apache.commons.math.random.EmpiricalDistributionImpl.sampleStats : SummaryStatistics"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.access$300(EmpiricalDistributionImpl)"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.serialVersionUID : long"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.binStats : ArrayList"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.sampleStats : SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.sampleStats : SummaryStatistics"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.binCount : int"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.loaded : boolean"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.upperBounds : double[]" "double[]"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.upperBounds : double[]"
reference "org.apache.commons.math.random.EmpiricalDistributionImpl.randomData : RandomData" "org.apache.commons.math.random.RandomData"
contain "org.apache.commons.math.random.EmpiricalDistributionImpl" "org.apache.commons.math.random.EmpiricalDistributionImpl.randomData : RandomData"
reference "org.apache.commons.math.linear.RealMatrixImpl" "double[][]"
reference "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.MatrixIndexException"
reference "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.InvalidMatrixException"
reference "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrix"
reference "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.MatrixUtils"
reference "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.util.MathUtils"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl()" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl()" "org.apache.commons.math.linear.RealMatrixImpl.lu : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl()" "org.apache.commons.math.linear.RealMatrixImpl.permutation : int[]"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl()" "org.apache.commons.math.linear.RealMatrixImpl.parity : int"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl()"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)" "org.apache.commons.math.linear.RealMatrixImpl.lu : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)" "org.apache.commons.math.linear.RealMatrixImpl.permutation : int[]"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)" "org.apache.commons.math.linear.RealMatrixImpl.parity : int"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])" "org.apache.commons.math.linear.RealMatrixImpl.lu : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])" "org.apache.commons.math.linear.RealMatrixImpl.permutation : int[]"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])" "org.apache.commons.math.linear.RealMatrixImpl.parity : int"
call "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])" "org.apache.commons.math.linear.RealMatrixImpl.copyIn(double[][])"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[])" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[])" "org.apache.commons.math.linear.RealMatrixImpl.lu : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[])" "org.apache.commons.math.linear.RealMatrixImpl.permutation : int[]"
reference "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[])" "org.apache.commons.math.linear.RealMatrixImpl.parity : int"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[])"
call "org.apache.commons.math.linear.RealMatrixImpl.copy()" "org.apache.commons.math.linear.RealMatrixImpl.copyOut()"
call "org.apache.commons.math.linear.RealMatrixImpl.copy()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.copy()"
call "org.apache.commons.math.linear.RealMatrixImpl.add(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.add(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.add(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.add(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.add(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.add(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.add(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.add(RealMatrix)"
call "org.apache.commons.math.linear.RealMatrixImpl.subtract(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.subtract(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.subtract(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.subtract(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.subtract(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.subtract(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.subtract(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.subtract(RealMatrix)"
call "org.apache.commons.math.linear.RealMatrixImpl.scalarAdd(double)" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.scalarAdd(double)" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.scalarAdd(double)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.scalarAdd(double)" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.scalarAdd(double)"
call "org.apache.commons.math.linear.RealMatrixImpl.scalarMultiply(double)" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.scalarMultiply(double)" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.scalarMultiply(double)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.scalarMultiply(double)" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.scalarMultiply(double)"
call "org.apache.commons.math.linear.RealMatrixImpl.multiply(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.multiply(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.multiply(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.multiply(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getColumnDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.multiply(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.multiply(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.multiply(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.multiply(RealMatrix)"
call "org.apache.commons.math.linear.RealMatrixImpl.preMultiply(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.multiply(RealMatrix)"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.preMultiply(RealMatrix)"
call "org.apache.commons.math.linear.RealMatrixImpl.getData()" "org.apache.commons.math.linear.RealMatrixImpl.copyOut()"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getData()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getDataRef()" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getDataRef()"
call "org.apache.commons.math.linear.RealMatrixImpl.getNorm()" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.getNorm()" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getNorm()" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getNorm()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getSubMatrix(int,int,int,int)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.getSubMatrix(int,int,int,int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.RealMatrixImpl.getSubMatrix(int,int,int,int)" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.getSubMatrix(int,int,int,int)" "org.apache.commons.math.linear.RealMatrixImpl.getDataRef()"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getSubMatrix(int,int,int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.getSubMatrix(int[],int[])" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.RealMatrixImpl.getSubMatrix(int[],int[])" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.getSubMatrix(int[],int[])" "org.apache.commons.math.linear.RealMatrixImpl.getDataRef()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getSubMatrix(int[],int[])" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getSubMatrix(int[],int[])"
call "org.apache.commons.math.linear.RealMatrixImpl.setSubMatrix(double[][],int,int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
reference "org.apache.commons.math.linear.RealMatrixImpl.setSubMatrix(double[][],int,int)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.setSubMatrix(double[][],int,int)" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.setSubMatrix(double[][],int,int)" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.setSubMatrix(double[][],int,int)" "org.apache.commons.math.linear.RealMatrixImpl.lu : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.setSubMatrix(double[][],int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.getRowMatrix(int)" "org.apache.commons.math.linear.RealMatrixImpl.isValidCoordinate(int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.getRowMatrix(int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.RealMatrixImpl.getRowMatrix(int)" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getRowMatrix(int)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.getRowMatrix(int)" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getRowMatrix(int)"
call "org.apache.commons.math.linear.RealMatrixImpl.getColumnMatrix(int)" "org.apache.commons.math.linear.RealMatrixImpl.isValidCoordinate(int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.getColumnMatrix(int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.RealMatrixImpl.getColumnMatrix(int)" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getColumnMatrix(int)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.getColumnMatrix(int)" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getColumnMatrix(int)"
call "org.apache.commons.math.linear.RealMatrixImpl.getRow(int)" "org.apache.commons.math.linear.RealMatrixImpl.isValidCoordinate(int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.getRow(int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.RealMatrixImpl.getRow(int)" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getRow(int)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getRow(int)"
call "org.apache.commons.math.linear.RealMatrixImpl.getColumn(int)" "org.apache.commons.math.linear.RealMatrixImpl.isValidCoordinate(int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.getColumn(int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.RealMatrixImpl.getColumn(int)" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getColumn(int)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getColumn(int)"
call "org.apache.commons.math.linear.RealMatrixImpl.getEntry(int,int)" "org.apache.commons.math.linear.RealMatrixImpl.isValidCoordinate(int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.getEntry(int,int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
reference "org.apache.commons.math.linear.RealMatrixImpl.getEntry(int,int)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getEntry(int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.transpose()" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.transpose()" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.transpose()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)"
call "org.apache.commons.math.linear.RealMatrixImpl.transpose()" "org.apache.commons.math.linear.RealMatrixImpl.getDataRef()"
reference "org.apache.commons.math.linear.RealMatrixImpl.transpose()" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.transpose()"
call "org.apache.commons.math.linear.RealMatrixImpl.inverse()" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.inverse()" "org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(int)"
call "org.apache.commons.math.linear.RealMatrixImpl.inverse()" "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.inverse()"
call "org.apache.commons.math.linear.RealMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.RealMatrixImpl.isSquare()"
call "org.apache.commons.math.linear.RealMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(String)"
call "org.apache.commons.math.linear.RealMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.RealMatrixImpl.isSingular()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.RealMatrixImpl.parity : int"
call "org.apache.commons.math.linear.RealMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.RealMatrixImpl.lu : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getDeterminant()"
call "org.apache.commons.math.linear.RealMatrixImpl.isSquare()" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.isSquare()" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.isSquare()"
reference "org.apache.commons.math.linear.RealMatrixImpl.isSingular()" "org.apache.commons.math.linear.RealMatrixImpl.lu : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.isSingular()" "org.apache.commons.math.linear.RealMatrixImpl.luDecompose()"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.isSingular()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.getTrace()" "org.apache.commons.math.linear.RealMatrixImpl.isSquare()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getTrace()" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.getTrace()" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getTrace()"
call "org.apache.commons.math.linear.RealMatrixImpl.operate(double[])" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.operate(double[])" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.operate(double[])" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.operate(double[])"
call "org.apache.commons.math.linear.RealMatrixImpl.preMultiply(double[])" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.preMultiply(double[])" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.preMultiply(double[])" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.preMultiply(double[])"
call "org.apache.commons.math.linear.RealMatrixImpl.solve(double[])" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.solve(double[])" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[])"
call "org.apache.commons.math.linear.RealMatrixImpl.solve(double[])" "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)"
call "org.apache.commons.math.linear.RealMatrixImpl.solve(double[])" "org.apache.commons.math.linear.RealMatrixImpl.getDataRef()"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.solve(double[])"
call "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.isSquare()"
call "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)" "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(String)"
call "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.isSingular()"
call "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getColumnDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.permutation : int[]"
call "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
reference "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.lu : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)"
call "org.apache.commons.math.linear.RealMatrixImpl.luDecompose()" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.luDecompose()" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.luDecompose()" "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(String)"
call "org.apache.commons.math.linear.RealMatrixImpl.luDecompose()" "org.apache.commons.math.linear.RealMatrixImpl.getData()"
reference "org.apache.commons.math.linear.RealMatrixImpl.luDecompose()" "org.apache.commons.math.linear.RealMatrixImpl.lu : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImpl.luDecompose()" "org.apache.commons.math.linear.RealMatrixImpl.permutation : int[]"
reference "org.apache.commons.math.linear.RealMatrixImpl.luDecompose()" "org.apache.commons.math.linear.RealMatrixImpl.parity : int"
reference "org.apache.commons.math.linear.RealMatrixImpl.luDecompose()" "org.apache.commons.math.linear.RealMatrixImpl.TOO_SMALL : double"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.luDecompose()"
reference "org.apache.commons.math.linear.RealMatrixImpl.toString()" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.toString()"
call "org.apache.commons.math.linear.RealMatrixImpl.equals(Object)" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.equals(Object)" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.equals(Object)" "org.apache.commons.math.linear.RealMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.equals(Object)" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.equals(Object)" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.equals(Object)" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.equals(Object)"
call "org.apache.commons.math.linear.RealMatrixImpl.hashCode()" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.hashCode()" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.hashCode()" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.hashCode()" "org.apache.commons.math.util.MathUtils.hash(double)"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.hashCode()"
call "org.apache.commons.math.linear.RealMatrixImpl.getIdentity(int)" "org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(int)"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getIdentity(int)"
reference "org.apache.commons.math.linear.RealMatrixImpl.getLUMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.lu : double[][]"
call "org.apache.commons.math.linear.RealMatrixImpl.getLUMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.luDecompose()"
call "org.apache.commons.math.linear.RealMatrixImpl.getLUMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getLUMatrix()"
reference "org.apache.commons.math.linear.RealMatrixImpl.getPermutation()" "org.apache.commons.math.linear.RealMatrixImpl.permutation : int[]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.getPermutation()"
call "org.apache.commons.math.linear.RealMatrixImpl.copyOut()" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.copyOut()" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.RealMatrixImpl.copyOut()" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.copyOut()"
call "org.apache.commons.math.linear.RealMatrixImpl.copyIn(double[][])" "org.apache.commons.math.linear.RealMatrixImpl.setSubMatrix(double[][],int,int)"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.copyIn(double[][])"
call "org.apache.commons.math.linear.RealMatrixImpl.isValidCoordinate(int,int)" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImpl.isValidCoordinate(int,int)" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.isValidCoordinate(int,int)"
reference "org.apache.commons.math.linear.RealMatrixImpl.static {...}" "org.apache.commons.math.linear.RealMatrixImpl.TOO_SMALL : double"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.static {...}"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.serialVersionUID : long"
reference "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.data : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImpl.lu : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.lu : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImpl.permutation : int[]" "int[]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.permutation : int[]"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.parity : int"
contain "org.apache.commons.math.linear.RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl.TOO_SMALL : double"
reference "org.apache.commons.math.distribution.HypergeometricDistribution" "org.apache.commons.math.distribution.IntegerDistribution"
contain "org.apache.commons.math.distribution.HypergeometricDistribution" "org.apache.commons.math.distribution.HypergeometricDistribution.getNumberOfSuccesses()"
contain "org.apache.commons.math.distribution.HypergeometricDistribution" "org.apache.commons.math.distribution.HypergeometricDistribution.getPopulationSize()"
contain "org.apache.commons.math.distribution.HypergeometricDistribution" "org.apache.commons.math.distribution.HypergeometricDistribution.getSampleSize()"
contain "org.apache.commons.math.distribution.HypergeometricDistribution" "org.apache.commons.math.distribution.HypergeometricDistribution.setNumberOfSuccesses(int)"
contain "org.apache.commons.math.distribution.HypergeometricDistribution" "org.apache.commons.math.distribution.HypergeometricDistribution.setPopulationSize(int)"
contain "org.apache.commons.math.distribution.HypergeometricDistribution" "org.apache.commons.math.distribution.HypergeometricDistribution.setSampleSize(int)"
contain "org.apache.commons.math.util.DoubleArray" "org.apache.commons.math.util.DoubleArray.getNumElements()"
contain "org.apache.commons.math.util.DoubleArray" "org.apache.commons.math.util.DoubleArray.getElement(int)"
contain "org.apache.commons.math.util.DoubleArray" "org.apache.commons.math.util.DoubleArray.setElement(int,double)"
contain "org.apache.commons.math.util.DoubleArray" "org.apache.commons.math.util.DoubleArray.addElement(double)"
contain "org.apache.commons.math.util.DoubleArray" "org.apache.commons.math.util.DoubleArray.addElementRolling(double)"
contain "org.apache.commons.math.util.DoubleArray" "org.apache.commons.math.util.DoubleArray.getElements()"
contain "org.apache.commons.math.util.DoubleArray" "org.apache.commons.math.util.DoubleArray.clear()"
contain "org.apache.commons.math.optimization.ConvergenceChecker" "org.apache.commons.math.optimization.ConvergenceChecker.converged(PointCostPair[])"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.EstimationException"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.Estimator"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.WeightedMeasurement"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.EstimationProblem"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.EstimatedParameter"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setInitialStepBoundFactor(double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setMaxCostEval(int)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setCostRelativeTolerance(double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setParRelativeTolerance(double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setOrthoTolerance(double)"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setInitialStepBoundFactor(double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.initialStepBoundFactor : double"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setInitialStepBoundFactor(double)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setMaxCostEval(int)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.maxCostEval : int"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setMaxCostEval(int)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setCostRelativeTolerance(double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.costRelativeTolerance : double"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setCostRelativeTolerance(double)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setParRelativeTolerance(double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.parRelativeTolerance : double"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setParRelativeTolerance(double)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setOrthoTolerance(double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.orthoTolerance : double"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setOrthoTolerance(double)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getCostEvaluations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.costEvaluations : int"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getCostEvaluations()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getJacobianEvaluations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacobianEvaluations : int"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getJacobianEvaluations()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateJacobian()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacobianEvaluations : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateJacobian()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacobian : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateJacobian()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.rows : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateJacobian()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.measurements : WeightedMeasurement[]"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateJacobian()" "org.apache.commons.math.estimation.WeightedMeasurement.getWeight()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateJacobian()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.cols : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateJacobian()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateJacobian()" "org.apache.commons.math.estimation.WeightedMeasurement.getPartial(EstimatedParameter)"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateJacobian()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateResidualsAndCost()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.costEvaluations : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateResidualsAndCost()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.cost : double"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateResidualsAndCost()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.rows : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateResidualsAndCost()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.measurements : WeightedMeasurement[]"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateResidualsAndCost()" "org.apache.commons.math.estimation.WeightedMeasurement.getResidual()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateResidualsAndCost()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.residuals : double[]"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateResidualsAndCost()" "org.apache.commons.math.estimation.WeightedMeasurement.getWeight()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateResidualsAndCost()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.cols : int"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateResidualsAndCost()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)" "org.apache.commons.math.estimation.EstimationProblem.getMeasurements()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)" "org.apache.commons.math.estimation.WeightedMeasurement.getResidual()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)" "org.apache.commons.math.estimation.WeightedMeasurement.getWeight()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.EstimationProblem.getMeasurements()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.measurements : WeightedMeasurement[]"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.EstimationProblem.getUnboundParameters()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.parameters : EstimatedParameter[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.rows : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.cols : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.solvedCols : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacobian : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.diagR : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacNorm : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.beta : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.permutation : int[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.lmDir : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.residuals : double[]"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateResidualsAndCost()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.lmPar : double"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.costEvaluations : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacobianEvaluations : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.maxCostEval : int"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.updateJacobian()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qrDecomposition()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qTy(double[])"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.initialStepBoundFactor : double"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.cost : double"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.orthoTolerance : double"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMParameter(double[],double,double[],double[],double[],double[])"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.EstimatedParameter.setEstimate(double)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.costRelativeTolerance : double"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.parRelativeTolerance : double"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.EstimationException.EstimationException(String,String[])"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMParameter(double[],double,double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.rank : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMParameter(double[],double,double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.lmDir : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMParameter(double[],double,double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.permutation : int[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMParameter(double[],double,double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.cols : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMParameter(double[],double,double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.diagR : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMParameter(double[],double,double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacobian : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMParameter(double[],double,double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.solvedCols : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMParameter(double[],double,double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.lmPar : double"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMParameter(double[],double,double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMDirection(double[],double[],double[],double[])"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMParameter(double[],double,double[],double[],double[],double[])"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMDirection(double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.solvedCols : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMDirection(double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.permutation : int[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMDirection(double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacobian : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMDirection(double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.cols : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMDirection(double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.lmDir : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMDirection(double[],double[],double[],double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.diagR : double[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.determineLMDirection(double[],double[],double[],double[])"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qrDecomposition()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.cols : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qrDecomposition()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.permutation : int[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qrDecomposition()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacobian : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qrDecomposition()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacNorm : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qrDecomposition()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.rank : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qrDecomposition()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.beta : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qrDecomposition()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.diagR : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qrDecomposition()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.solvedCols : int"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qrDecomposition()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qTy(double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.cols : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qTy(double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.permutation : int[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qTy(double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.rows : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qTy(double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacobian : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qTy(double[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.beta : double[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qTy(double[])"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.measurements : WeightedMeasurement[]" "org.apache.commons.math.estimation.WeightedMeasurement[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.measurements : WeightedMeasurement[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.parameters : EstimatedParameter[]" "org.apache.commons.math.estimation.EstimatedParameter[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.parameters : EstimatedParameter[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacobian : double[]" "double[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacobian : double[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.cols : int"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.solvedCols : int"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.rows : int"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.diagR : double[]" "double[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.diagR : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacNorm : double[]" "double[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacNorm : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.beta : double[]" "double[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.beta : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.permutation : int[]" "int[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.permutation : int[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.rank : int"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.lmPar : double"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.lmDir : double[]" "double[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.lmDir : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.residuals : double[]" "double[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.residuals : double[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.cost : double"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.initialStepBoundFactor : double"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.maxCostEval : int"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.costEvaluations : int"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacobianEvaluations : int"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.costRelativeTolerance : double"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.parRelativeTolerance : double"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.orthoTolerance : double"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimator" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.serialVersionUID : long"
reference "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.AbstractIntegerDistribution"
reference "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistribution"
reference "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.special.Beta"
reference "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.util.MathUtils"
call "org.apache.commons.math.distribution.PascalDistributionImpl.PascalDistributionImpl(int,double)" "org.apache.commons.math.distribution.AbstractIntegerDistribution.AbstractIntegerDistribution()"
call "org.apache.commons.math.distribution.PascalDistributionImpl.PascalDistributionImpl(int,double)" "org.apache.commons.math.distribution.PascalDistributionImpl.setNumberOfSuccesses(int)"
call "org.apache.commons.math.distribution.PascalDistributionImpl.PascalDistributionImpl(int,double)" "org.apache.commons.math.distribution.PascalDistributionImpl.setProbabilityOfSuccess(double)"
contain "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistributionImpl.PascalDistributionImpl(int,double)"
reference "org.apache.commons.math.distribution.PascalDistributionImpl.getNumberOfSuccesses()" "org.apache.commons.math.distribution.PascalDistributionImpl.numberOfSuccesses : int"
contain "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistributionImpl.getNumberOfSuccesses()"
reference "org.apache.commons.math.distribution.PascalDistributionImpl.getProbabilityOfSuccess()" "org.apache.commons.math.distribution.PascalDistributionImpl.probabilityOfSuccess : double"
contain "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistributionImpl.getProbabilityOfSuccess()"
reference "org.apache.commons.math.distribution.PascalDistributionImpl.setNumberOfSuccesses(int)" "org.apache.commons.math.distribution.PascalDistributionImpl.numberOfSuccesses : int"
contain "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistributionImpl.setNumberOfSuccesses(int)"
reference "org.apache.commons.math.distribution.PascalDistributionImpl.setProbabilityOfSuccess(double)" "org.apache.commons.math.distribution.PascalDistributionImpl.probabilityOfSuccess : double"
contain "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistributionImpl.setProbabilityOfSuccess(double)"
contain "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistributionImpl.getDomainLowerBound(double)"
contain "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistributionImpl.getDomainUpperBound(double)"
call "org.apache.commons.math.distribution.PascalDistributionImpl.cumulativeProbability(int)" "org.apache.commons.math.distribution.PascalDistributionImpl.getProbabilityOfSuccess()"
call "org.apache.commons.math.distribution.PascalDistributionImpl.cumulativeProbability(int)" "org.apache.commons.math.distribution.PascalDistributionImpl.getNumberOfSuccesses()"
call "org.apache.commons.math.distribution.PascalDistributionImpl.cumulativeProbability(int)" "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double)"
contain "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistributionImpl.cumulativeProbability(int)"
call "org.apache.commons.math.distribution.PascalDistributionImpl.probability(int)" "org.apache.commons.math.distribution.PascalDistributionImpl.getNumberOfSuccesses()"
call "org.apache.commons.math.distribution.PascalDistributionImpl.probability(int)" "org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(int,int)"
call "org.apache.commons.math.distribution.PascalDistributionImpl.probability(int)" "org.apache.commons.math.distribution.PascalDistributionImpl.getProbabilityOfSuccess()"
contain "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistributionImpl.probability(int)"
call "org.apache.commons.math.distribution.PascalDistributionImpl.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractIntegerDistribution.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistributionImpl.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistributionImpl.serialVersionUID : long"
contain "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistributionImpl.numberOfSuccesses : int"
contain "org.apache.commons.math.distribution.PascalDistributionImpl" "org.apache.commons.math.distribution.PascalDistributionImpl.probabilityOfSuccess : double"
reference "org.apache.commons.math.ode.ThreeEighthesStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator"
reference "org.apache.commons.math.ode.ThreeEighthesStepInterpolator" "org.apache.commons.math.ode.DerivativeException"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator()" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator()"
contain "org.apache.commons.math.ode.ThreeEighthesStepInterpolator" "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator()"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator(ThreeEighthesStepInterpolator)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
contain "org.apache.commons.math.ode.ThreeEighthesStepInterpolator" "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator(ThreeEighthesStepInterpolator)"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.doCopy()" "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator(ThreeEighthesStepInterpolator)"
contain "org.apache.commons.math.ode.ThreeEighthesStepInterpolator" "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.doCopy()"
reference "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.yDotK : double[][]"
contain "org.apache.commons.math.ode.ThreeEighthesStepInterpolator" "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.computeInterpolatedState(double,double)"
contain "org.apache.commons.math.ode.ThreeEighthesStepInterpolator" "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.serialVersionUID : long"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "double[][]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "double[]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.FirstOrderDifferentialEquations"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator()" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator()"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.yDotKLast : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.v : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.vectorsInitialized : boolean"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(DormandPrince853StepInterpolator)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(DormandPrince853StepInterpolator)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(DormandPrince853StepInterpolator)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.yDotKLast : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(DormandPrince853StepInterpolator)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.v : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(DormandPrince853StepInterpolator)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.vectorsInitialized : boolean"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(DormandPrince853StepInterpolator)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doCopy()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(DormandPrince853StepInterpolator)"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doCopy()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.yDotKLast : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.v : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.vectorsInitialized : boolean"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolator.storeTime(double)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.storeTime(double)"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.storeTime(double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.vectorsInitialized : boolean"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.storeTime(double)"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.vectorsInitialized : boolean"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.v : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.interpolatedState : double[]"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.finalizeStep()"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.h : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_01 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.yDotK : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_06 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_07 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_08 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_09 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_10 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_11 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_12 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.d : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.yDotKLast : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.currentState : double[]"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.computeInterpolatedState(double,double)"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_01 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.yDotK : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_06 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_07 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_08 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_09 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_10 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_11 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_12 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_13 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.h : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.equations : FirstOrderDifferentialEquations"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.previousTime : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.c14 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.yDotKLast : double[][]"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.FirstOrderDifferentialEquations.computeDerivatives(double,double[],double[])"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_01 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_06 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_07 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_08 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_09 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_10 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_11 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_12 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_13 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_14 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.c15 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_01 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_06 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_07 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_08 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_09 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_10 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_11 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_12 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_13 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_14 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_15 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.c16 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.doFinalize()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolator.writeExternal(ObjectOutput)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.finalizeStep()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolator.writeExternal(ObjectOutput)" "org.apache.commons.math.ode.DerivativeException.getMessage()"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.writeExternal(ObjectOutput)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.writeExternal(ObjectOutput)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.yDotKLast : double[][]"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolator.writeExternal(ObjectOutput)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.writeExternal(ObjectOutput)"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.writeExternal(ObjectOutput)"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.yDotKLast : double[][]"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.readExternal(ObjectInput)"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.readExternal(ObjectInput)"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_01 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_06 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_07 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_08 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_09 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_10 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_11 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_12 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.c14 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_01 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_06 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_07 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_08 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_09 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_10 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_11 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_12 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_13 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.c15 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_01 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_06 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_07 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_08 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_09 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_10 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_11 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_12 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_13 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_14 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.c16 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_01 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_06 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_07 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_08 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_09 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_10 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_11 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_12 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_13 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_14 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_15 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.d : double[][]"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.static {...}"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.yDotKLast : double[][]" "double[][]"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.yDotKLast : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.v : double[][]" "double[][]"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.v : double[][]"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.vectorsInitialized : boolean"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_01 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_06 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_07 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_08 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_09 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_10 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_11 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.b_12 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.c14 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_01 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_06 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_07 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_08 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_09 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_10 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_11 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_12 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k14_13 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.c15 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_01 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_06 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_07 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_08 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_09 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_10 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_11 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_12 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_13 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k15_14 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.c16 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_01 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_06 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_07 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_08 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_09 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_10 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_11 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_12 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_13 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_14 : double"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.k16_15 : double"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolator.d : double[][]" "double[][]"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.d : double[][]"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.serialVersionUID : long"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.SwitchingFunctionsHandler"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.FirstOrderIntegrator"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.DummyStepHandler"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.FirstOrderDifferentialEquations"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.minStep : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.maxStep : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.initialStep : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.scalAbsoluteTolerance : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.scalRelativeTolerance : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.vecAbsoluteTolerance : double[]"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.vecRelativeTolerance : double[]"
call "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)" "org.apache.commons.math.ode.DummyStepHandler.getInstance()"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.handler : StepHandler"
call "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)" "org.apache.commons.math.ode.SwitchingFunctionsHandler.SwitchingFunctionsHandler()"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.switchesHandler : SwitchingFunctionsHandler"
call "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.resetInternalState()"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.minStep : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.maxStep : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.initialStep : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.scalAbsoluteTolerance : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.scalRelativeTolerance : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.vecAbsoluteTolerance : double[]"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.vecRelativeTolerance : double[]"
call "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.DummyStepHandler.getInstance()"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.handler : StepHandler"
call "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.SwitchingFunctionsHandler()"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.switchesHandler : SwitchingFunctionsHandler"
call "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.resetInternalState()"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.setInitialStepSize(double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.minStep : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.setInitialStepSize(double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.maxStep : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.setInitialStepSize(double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.initialStep : double"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.setInitialStepSize(double)"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.setStepHandler(StepHandler)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.handler : StepHandler"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.setStepHandler(StepHandler)"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getStepHandler()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.handler : StepHandler"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getStepHandler()"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.switchesHandler : SwitchingFunctionsHandler"
call "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchingFunctionsHandler.add(SwitchingFunction,double,double,int)"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.sanityChecks(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.FirstOrderDifferentialEquations.getDimension()"
call "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.sanityChecks(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.IntegratorException.IntegratorException(String,String[])"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.sanityChecks(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.vecAbsoluteTolerance : double[]"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.sanityChecks(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.vecRelativeTolerance : double[]"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.sanityChecks(FirstOrderDifferentialEquations,double,double[],double,double[])"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.initializeStep(FirstOrderDifferentialEquations,boolean,int,double[],double,double[],double[],double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.initialStep : double"
call "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.initializeStep(FirstOrderDifferentialEquations,boolean,int,double[],double,double[],double[],double[],double[])" "org.apache.commons.math.ode.FirstOrderDifferentialEquations.computeDerivatives(double,double[],double[])"
call "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.initializeStep(FirstOrderDifferentialEquations,boolean,int,double[],double,double[],double[],double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getMinStep()"
call "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.initializeStep(FirstOrderDifferentialEquations,boolean,int,double[],double,double[],double[],double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getMaxStep()"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.initializeStep(FirstOrderDifferentialEquations,boolean,int,double[],double,double[],double[],double[],double[])"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.filterStep(double,boolean)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.minStep : double"
call "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.filterStep(double,boolean)" "org.apache.commons.math.ode.IntegratorException.IntegratorException(String,String[])"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.filterStep(double,boolean)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.maxStep : double"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.filterStep(double,boolean)"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getCurrentStepStart()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.stepStart : double"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getCurrentStepStart()"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getCurrentSignedStepsize()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.stepSize : double"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getCurrentSignedStepsize()"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.resetInternalState()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.stepStart : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.resetInternalState()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.minStep : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.resetInternalState()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.maxStep : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.resetInternalState()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.stepSize : double"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.resetInternalState()"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getMinStep()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.minStep : double"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getMinStep()"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getMaxStep()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.maxStep : double"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getMaxStep()"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.minStep : double"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.maxStep : double"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.initialStep : double"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.scalAbsoluteTolerance : double"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.scalRelativeTolerance : double"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.vecAbsoluteTolerance : double[]" "double[]"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.vecAbsoluteTolerance : double[]"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.vecRelativeTolerance : double[]" "double[]"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.vecRelativeTolerance : double[]"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.handler : StepHandler" "org.apache.commons.math.ode.StepHandler"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.handler : StepHandler"
reference "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.switchesHandler : SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchingFunctionsHandler"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.switchesHandler : SwitchingFunctionsHandler"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.stepStart : double"
contain "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.stepSize : double"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegrator"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.UnivariateRealIntegratorImpl(UnivariateRealFunction,int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resultComputed : boolean"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.UnivariateRealIntegratorImpl(UnivariateRealFunction,int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.f : UnivariateRealFunction"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.UnivariateRealIntegratorImpl(UnivariateRealFunction,int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.defaultMaximalIterationCount : int"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.UnivariateRealIntegratorImpl(UnivariateRealFunction,int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.maximalIterationCount : int"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.UnivariateRealIntegratorImpl(UnivariateRealFunction,int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.defaultRelativeAccuracy : double"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.UnivariateRealIntegratorImpl(UnivariateRealFunction,int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.relativeAccuracy : double"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.UnivariateRealIntegratorImpl(UnivariateRealFunction,int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.defaultMinimalIterationCount : int"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.UnivariateRealIntegratorImpl(UnivariateRealFunction,int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.minimalIterationCount : int"
call "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.UnivariateRealIntegratorImpl(UnivariateRealFunction,int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.verifyIterationCount()"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.UnivariateRealIntegratorImpl(UnivariateRealFunction,int)"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.getResult()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resultComputed : boolean"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.getResult()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.result : double"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.getResult()"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.getIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resultComputed : boolean"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.getIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.iterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.getIterationCount()"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.setResult(double,int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.result : double"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.setResult(double,int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.iterationCount : int"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.setResult(double,int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resultComputed : boolean"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.setResult(double,int)"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.clearResult()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resultComputed : boolean"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.clearResult()"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.setMaximalIterationCount(int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.maximalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.setMaximalIterationCount(int)"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.getMaximalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.maximalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.getMaximalIterationCount()"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resetMaximalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.defaultMaximalIterationCount : int"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resetMaximalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.maximalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resetMaximalIterationCount()"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.setMinimalIterationCount(int)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.minimalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.setMinimalIterationCount(int)"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.getMinimalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.minimalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.getMinimalIterationCount()"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resetMinimalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.defaultMinimalIterationCount : int"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resetMinimalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.minimalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resetMinimalIterationCount()"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.setRelativeAccuracy(double)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.relativeAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.setRelativeAccuracy(double)"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.getRelativeAccuracy()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.relativeAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.getRelativeAccuracy()"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resetRelativeAccuracy()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.defaultRelativeAccuracy : double"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resetRelativeAccuracy()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.relativeAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resetRelativeAccuracy()"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.isSequence(double,double,double)"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.verifyInterval(double,double)"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.verifyIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.minimalIterationCount : int"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.verifyIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.maximalIterationCount : int"
call "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.verifyIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.isSequence(double,double,double)"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.verifyIterationCount()"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.serialVersionUID : long"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.relativeAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.maximalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.minimalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.defaultRelativeAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.defaultMaximalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.defaultMinimalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.resultComputed : boolean"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.result : double"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.iterationCount : int"
reference "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.f : UnivariateRealFunction" "org.apache.commons.math.analysis.UnivariateRealFunction"
contain "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.f : UnivariateRealFunction"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummary"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.util.MathUtils"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.StatisticalSummaryValues(double,double,long,double,double,double)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.mean : double"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.StatisticalSummaryValues(double,double,long,double,double,double)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.variance : double"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.StatisticalSummaryValues(double,double,long,double,double,double)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.n : long"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.StatisticalSummaryValues(double,double,long,double,double,double)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.max : double"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.StatisticalSummaryValues(double,double,long,double,double,double)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.min : double"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.StatisticalSummaryValues(double,double,long,double,double,double)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.sum : double"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.StatisticalSummaryValues(double,double,long,double,double,double)"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMax()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.max : double"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMax()"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMean()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.mean : double"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMean()"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMin()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.min : double"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMin()"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getN()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.n : long"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getN()"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getSum()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.sum : double"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getSum()"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getStandardDeviation()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.variance : double"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getStandardDeviation()"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getVariance()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.variance : double"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getVariance()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.equals(Object)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMax()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.equals(Object)" "org.apache.commons.math.util.MathUtils.equals(double,double)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.equals(Object)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMean()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.equals(Object)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMin()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.equals(Object)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getN()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.equals(Object)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getSum()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.equals(Object)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getVariance()"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.equals(Object)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.hashCode()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMax()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.hashCode()" "org.apache.commons.math.util.MathUtils.hash(double)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.hashCode()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMean()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.hashCode()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMin()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.hashCode()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getN()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.hashCode()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getSum()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.hashCode()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getVariance()"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.hashCode()"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.mean : double"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.variance : double"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.n : long"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.max : double"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.min : double"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.sum : double"
reference "org.apache.commons.math.optimization.CostException" "org.apache.commons.math.MathException"
call "org.apache.commons.math.optimization.CostException.CostException(String,Object[])" "org.apache.commons.math.MathException.MathException(String,Object[])"
contain "org.apache.commons.math.optimization.CostException" "org.apache.commons.math.optimization.CostException.CostException(String,Object[])"
call "org.apache.commons.math.optimization.CostException.CostException(Throwable)" "org.apache.commons.math.MathException.MathException(Throwable)"
contain "org.apache.commons.math.optimization.CostException" "org.apache.commons.math.optimization.CostException.CostException(Throwable)"
contain "org.apache.commons.math.optimization.CostException" "org.apache.commons.math.optimization.CostException.serialVersionUID : long"
reference "org.apache.commons.math.ode.MidpointStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator"
reference "org.apache.commons.math.ode.MidpointStepInterpolator" "org.apache.commons.math.ode.DerivativeException"
call "org.apache.commons.math.ode.MidpointStepInterpolator.MidpointStepInterpolator()" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator()"
contain "org.apache.commons.math.ode.MidpointStepInterpolator" "org.apache.commons.math.ode.MidpointStepInterpolator.MidpointStepInterpolator()"
call "org.apache.commons.math.ode.MidpointStepInterpolator.MidpointStepInterpolator(MidpointStepInterpolator)" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
contain "org.apache.commons.math.ode.MidpointStepInterpolator" "org.apache.commons.math.ode.MidpointStepInterpolator.MidpointStepInterpolator(MidpointStepInterpolator)"
call "org.apache.commons.math.ode.MidpointStepInterpolator.doCopy()" "org.apache.commons.math.ode.MidpointStepInterpolator.MidpointStepInterpolator(MidpointStepInterpolator)"
contain "org.apache.commons.math.ode.MidpointStepInterpolator" "org.apache.commons.math.ode.MidpointStepInterpolator.doCopy()"
reference "org.apache.commons.math.ode.MidpointStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.MidpointStepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.MidpointStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.MidpointStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.MidpointStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.MidpointStepInterpolator.yDotK : double[][]"
contain "org.apache.commons.math.ode.MidpointStepInterpolator" "org.apache.commons.math.ode.MidpointStepInterpolator.computeInterpolatedState(double,double)"
contain "org.apache.commons.math.ode.MidpointStepInterpolator" "org.apache.commons.math.ode.MidpointStepInterpolator.serialVersionUID : long"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution.1" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution.1" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution.1" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution.1" "org.apache.commons.math.distribution.AbstractContinuousDistribution"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.{...}" "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.this$0 : AbstractContinuousDistribution"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.{...}" "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.val$p : double"
contain "org.apache.commons.math.distribution.AbstractContinuousDistribution.1" "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.{...}"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.value(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.this$0 : AbstractContinuousDistribution"
call "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.value(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.cumulativeProbability(double)"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.value(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.val$p : double"
call "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.value(double)" "org.apache.commons.math.MathException.getPattern()"
call "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.value(double)" "org.apache.commons.math.MathException.getArguments()"
call "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.value(double)" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Object[],Throwable)"
contain "org.apache.commons.math.distribution.AbstractContinuousDistribution.1" "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.value(double)"
contain "org.apache.commons.math.distribution.AbstractContinuousDistribution.1" "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.val$p : double"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.this$0 : AbstractContinuousDistribution" "org.apache.commons.math.distribution.AbstractContinuousDistribution"
contain "org.apache.commons.math.distribution.AbstractContinuousDistribution.1" "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.this$0 : AbstractContinuousDistribution"
reference "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.MatrixIndexException"
reference "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.InvalidMatrixException"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.copy()"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.add(BigMatrix)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.subtract(BigMatrix)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.scalarAdd(BigDecimal)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.scalarMultiply(BigDecimal)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.multiply(BigMatrix)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.preMultiply(BigMatrix)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getData()"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getDataAsDoubleArray()"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getRoundingMode()"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getNorm()"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getSubMatrix(int,int,int,int)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getSubMatrix(int[],int[])"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getRowMatrix(int)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getColumnMatrix(int)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getRow(int)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getRowAsDoubleArray(int)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getColumn(int)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getColumnAsDoubleArray(int)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getEntry(int,int)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getEntryAsDouble(int,int)"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.transpose()"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.inverse()"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getDeterminant()"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.isSquare()"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.isSingular()"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getRowDimension()"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getColumnDimension()"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.getTrace()"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.operate(BigDecimal[])"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.preMultiply(BigDecimal[])"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.solve(BigDecimal[])"
contain "org.apache.commons.math.linear.BigMatrix" "org.apache.commons.math.linear.BigMatrix.solve(BigMatrix)"
reference "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl"
reference "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.GammaDistributionImpl"
reference "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.TDistributionImpl"
reference "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.FDistributionImpl"
reference "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.ExponentialDistributionImpl"
reference "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl"
reference "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl"
reference "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.NormalDistributionImpl"
reference "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl"
reference "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.DistributionFactory"
call "org.apache.commons.math.distribution.DistributionFactoryImpl.DistributionFactoryImpl()" "org.apache.commons.math.distribution.DistributionFactory.DistributionFactory()"
contain "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.DistributionFactoryImpl.DistributionFactoryImpl()"
call "org.apache.commons.math.distribution.DistributionFactoryImpl.createChiSquareDistribution(double)" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double)"
contain "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.DistributionFactoryImpl.createChiSquareDistribution(double)"
call "org.apache.commons.math.distribution.DistributionFactoryImpl.createGammaDistribution(double,double)" "org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double,double)"
contain "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.DistributionFactoryImpl.createGammaDistribution(double,double)"
call "org.apache.commons.math.distribution.DistributionFactoryImpl.createTDistribution(double)" "org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double)"
contain "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.DistributionFactoryImpl.createTDistribution(double)"
call "org.apache.commons.math.distribution.DistributionFactoryImpl.createFDistribution(double,double)" "org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double,double)"
contain "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.DistributionFactoryImpl.createFDistribution(double,double)"
call "org.apache.commons.math.distribution.DistributionFactoryImpl.createExponentialDistribution(double)" "org.apache.commons.math.distribution.ExponentialDistributionImpl.ExponentialDistributionImpl(double)"
contain "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.DistributionFactoryImpl.createExponentialDistribution(double)"
call "org.apache.commons.math.distribution.DistributionFactoryImpl.createBinomialDistribution(int,double)" "org.apache.commons.math.distribution.BinomialDistributionImpl.BinomialDistributionImpl(int,double)"
contain "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.DistributionFactoryImpl.createBinomialDistribution(int,double)"
call "org.apache.commons.math.distribution.DistributionFactoryImpl.createHypergeometricDistribution(int,int,int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.HypergeometricDistributionImpl(int,int,int)"
contain "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.DistributionFactoryImpl.createHypergeometricDistribution(int,int,int)"
call "org.apache.commons.math.distribution.DistributionFactoryImpl.createNormalDistribution(double,double)" "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double)"
contain "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.DistributionFactoryImpl.createNormalDistribution(double,double)"
call "org.apache.commons.math.distribution.DistributionFactoryImpl.createNormalDistribution()" "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl()"
contain "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.DistributionFactoryImpl.createNormalDistribution()"
call "org.apache.commons.math.distribution.DistributionFactoryImpl.createPoissonDistribution(double)" "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double)"
contain "org.apache.commons.math.distribution.DistributionFactoryImpl" "org.apache.commons.math.distribution.DistributionFactoryImpl.createPoissonDistribution(double)"
reference "org.apache.commons.math.random.NotPositiveDefiniteMatrixException" "org.apache.commons.math.MathException"
call "org.apache.commons.math.random.NotPositiveDefiniteMatrixException.NotPositiveDefiniteMatrixException()" "org.apache.commons.math.MathException.MathException(String,Object[])"
contain "org.apache.commons.math.random.NotPositiveDefiniteMatrixException" "org.apache.commons.math.random.NotPositiveDefiniteMatrixException.NotPositiveDefiniteMatrixException()"
contain "org.apache.commons.math.random.NotPositiveDefiniteMatrixException" "org.apache.commons.math.random.NotPositiveDefiniteMatrixException.serialVersionUID : long"
reference "org.apache.commons.math.stat.inference.ChiSquareTest" "org.apache.commons.math.MathException"
contain "org.apache.commons.math.stat.inference.ChiSquareTest" "org.apache.commons.math.stat.inference.ChiSquareTest.chiSquare(double[],long[])"
contain "org.apache.commons.math.stat.inference.ChiSquareTest" "org.apache.commons.math.stat.inference.ChiSquareTest.chiSquareTest(double[],long[])"
contain "org.apache.commons.math.stat.inference.ChiSquareTest" "org.apache.commons.math.stat.inference.ChiSquareTest.chiSquareTest(double[],long[],double)"
contain "org.apache.commons.math.stat.inference.ChiSquareTest" "org.apache.commons.math.stat.inference.ChiSquareTest.chiSquare(long[][])"
contain "org.apache.commons.math.stat.inference.ChiSquareTest" "org.apache.commons.math.stat.inference.ChiSquareTest.chiSquareTest(long[][])"
contain "org.apache.commons.math.stat.inference.ChiSquareTest" "org.apache.commons.math.stat.inference.ChiSquareTest.chiSquareTest(long[][],double)"
reference "org.apache.commons.math.stat.descriptive.rank.Percentile" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)"
contain "org.apache.commons.math.stat.descriptive.rank.Percentile" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile()"
call "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.AbstractUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)" "org.apache.commons.math.stat.descriptive.rank.Percentile.quantile : double"
call "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)" "org.apache.commons.math.stat.descriptive.rank.Percentile.setQuantile(double)"
contain "org.apache.commons.math.stat.descriptive.rank.Percentile" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)"
call "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],double)" "org.apache.commons.math.stat.descriptive.rank.Percentile.test(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],double)" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int,double)"
contain "org.apache.commons.math.stat.descriptive.rank.Percentile" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],double)"
reference "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.rank.Percentile.quantile : double"
call "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int,double)"
contain "org.apache.commons.math.stat.descriptive.rank.Percentile" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int,double)" "org.apache.commons.math.stat.descriptive.rank.Percentile.test(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.rank.Percentile" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int,double)"
reference "org.apache.commons.math.stat.descriptive.rank.Percentile.getQuantile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.quantile : double"
contain "org.apache.commons.math.stat.descriptive.rank.Percentile" "org.apache.commons.math.stat.descriptive.rank.Percentile.getQuantile()"
reference "org.apache.commons.math.stat.descriptive.rank.Percentile.setQuantile(double)" "org.apache.commons.math.stat.descriptive.rank.Percentile.quantile : double"
contain "org.apache.commons.math.stat.descriptive.rank.Percentile" "org.apache.commons.math.stat.descriptive.rank.Percentile.setQuantile(double)"
contain "org.apache.commons.math.stat.descriptive.rank.Percentile" "org.apache.commons.math.stat.descriptive.rank.Percentile.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.rank.Percentile" "org.apache.commons.math.stat.descriptive.rank.Percentile.quantile : double"
reference "org.apache.commons.math.optimization.NelderMead" "org.apache.commons.math.optimization.PointCostPair"
reference "org.apache.commons.math.optimization.NelderMead" "org.apache.commons.math.optimization.DirectSearchOptimizer"
reference "org.apache.commons.math.optimization.NelderMead" "org.apache.commons.math.optimization.CostException"
call "org.apache.commons.math.optimization.NelderMead.NelderMead()" "org.apache.commons.math.optimization.DirectSearchOptimizer.DirectSearchOptimizer()"
reference "org.apache.commons.math.optimization.NelderMead.NelderMead()" "org.apache.commons.math.optimization.NelderMead.rho : double"
reference "org.apache.commons.math.optimization.NelderMead.NelderMead()" "org.apache.commons.math.optimization.NelderMead.khi : double"
reference "org.apache.commons.math.optimization.NelderMead.NelderMead()" "org.apache.commons.math.optimization.NelderMead.gamma : double"
reference "org.apache.commons.math.optimization.NelderMead.NelderMead()" "org.apache.commons.math.optimization.NelderMead.sigma : double"
contain "org.apache.commons.math.optimization.NelderMead" "org.apache.commons.math.optimization.NelderMead.NelderMead()"
call "org.apache.commons.math.optimization.NelderMead.NelderMead(double,double,double,double)" "org.apache.commons.math.optimization.DirectSearchOptimizer.DirectSearchOptimizer()"
reference "org.apache.commons.math.optimization.NelderMead.NelderMead(double,double,double,double)" "org.apache.commons.math.optimization.NelderMead.rho : double"
reference "org.apache.commons.math.optimization.NelderMead.NelderMead(double,double,double,double)" "org.apache.commons.math.optimization.NelderMead.khi : double"
reference "org.apache.commons.math.optimization.NelderMead.NelderMead(double,double,double,double)" "org.apache.commons.math.optimization.NelderMead.gamma : double"
reference "org.apache.commons.math.optimization.NelderMead.NelderMead(double,double,double,double)" "org.apache.commons.math.optimization.NelderMead.sigma : double"
contain "org.apache.commons.math.optimization.NelderMead" "org.apache.commons.math.optimization.NelderMead.NelderMead(double,double,double,double)"
reference "org.apache.commons.math.optimization.NelderMead.iterateSimplex()" "org.apache.commons.math.optimization.NelderMead.simplex : PointCostPair[]"
reference "org.apache.commons.math.optimization.NelderMead.iterateSimplex()" "org.apache.commons.math.optimization.PointCostPair.cost : double"
reference "org.apache.commons.math.optimization.NelderMead.iterateSimplex()" "org.apache.commons.math.optimization.PointCostPair.point : double[]"
reference "org.apache.commons.math.optimization.NelderMead.iterateSimplex()" "org.apache.commons.math.optimization.NelderMead.rho : double"
call "org.apache.commons.math.optimization.NelderMead.iterateSimplex()" "org.apache.commons.math.optimization.NelderMead.evaluateCost(double[])"
call "org.apache.commons.math.optimization.NelderMead.iterateSimplex()" "org.apache.commons.math.optimization.PointCostPair.PointCostPair(double[],double)"
call "org.apache.commons.math.optimization.NelderMead.iterateSimplex()" "org.apache.commons.math.optimization.NelderMead.replaceWorstPoint(PointCostPair)"
reference "org.apache.commons.math.optimization.NelderMead.iterateSimplex()" "org.apache.commons.math.optimization.NelderMead.khi : double"
reference "org.apache.commons.math.optimization.NelderMead.iterateSimplex()" "org.apache.commons.math.optimization.NelderMead.gamma : double"
reference "org.apache.commons.math.optimization.NelderMead.iterateSimplex()" "org.apache.commons.math.optimization.NelderMead.sigma : double"
call "org.apache.commons.math.optimization.NelderMead.iterateSimplex()" "org.apache.commons.math.optimization.NelderMead.evaluateSimplex()"
contain "org.apache.commons.math.optimization.NelderMead" "org.apache.commons.math.optimization.NelderMead.iterateSimplex()"
contain "org.apache.commons.math.optimization.NelderMead" "org.apache.commons.math.optimization.NelderMead.rho : double"
contain "org.apache.commons.math.optimization.NelderMead" "org.apache.commons.math.optimization.NelderMead.khi : double"
contain "org.apache.commons.math.optimization.NelderMead" "org.apache.commons.math.optimization.NelderMead.gamma : double"
contain "org.apache.commons.math.optimization.NelderMead" "org.apache.commons.math.optimization.NelderMead.sigma : double"
reference "org.apache.commons.math.optimization.MultiDirectional" "org.apache.commons.math.optimization.PointCostPair"
reference "org.apache.commons.math.optimization.MultiDirectional" "org.apache.commons.math.optimization.DirectSearchOptimizer"
reference "org.apache.commons.math.optimization.MultiDirectional" "org.apache.commons.math.optimization.CostException"
call "org.apache.commons.math.optimization.MultiDirectional.MultiDirectional()" "org.apache.commons.math.optimization.DirectSearchOptimizer.DirectSearchOptimizer()"
reference "org.apache.commons.math.optimization.MultiDirectional.MultiDirectional()" "org.apache.commons.math.optimization.MultiDirectional.khi : double"
reference "org.apache.commons.math.optimization.MultiDirectional.MultiDirectional()" "org.apache.commons.math.optimization.MultiDirectional.gamma : double"
contain "org.apache.commons.math.optimization.MultiDirectional" "org.apache.commons.math.optimization.MultiDirectional.MultiDirectional()"
call "org.apache.commons.math.optimization.MultiDirectional.MultiDirectional(double,double)" "org.apache.commons.math.optimization.DirectSearchOptimizer.DirectSearchOptimizer()"
reference "org.apache.commons.math.optimization.MultiDirectional.MultiDirectional(double,double)" "org.apache.commons.math.optimization.MultiDirectional.khi : double"
reference "org.apache.commons.math.optimization.MultiDirectional.MultiDirectional(double,double)" "org.apache.commons.math.optimization.MultiDirectional.gamma : double"
contain "org.apache.commons.math.optimization.MultiDirectional" "org.apache.commons.math.optimization.MultiDirectional.MultiDirectional(double,double)"
reference "org.apache.commons.math.optimization.MultiDirectional.iterateSimplex()" "org.apache.commons.math.optimization.MultiDirectional.simplex : PointCostPair[]"
reference "org.apache.commons.math.optimization.MultiDirectional.iterateSimplex()" "org.apache.commons.math.optimization.PointCostPair.cost : double"
call "org.apache.commons.math.optimization.MultiDirectional.iterateSimplex()" "org.apache.commons.math.optimization.MultiDirectional.evaluateNewSimplex(PointCostPair[],double)"
reference "org.apache.commons.math.optimization.MultiDirectional.iterateSimplex()" "org.apache.commons.math.optimization.MultiDirectional.khi : double"
reference "org.apache.commons.math.optimization.MultiDirectional.iterateSimplex()" "org.apache.commons.math.optimization.MultiDirectional.gamma : double"
contain "org.apache.commons.math.optimization.MultiDirectional" "org.apache.commons.math.optimization.MultiDirectional.iterateSimplex()"
reference "org.apache.commons.math.optimization.MultiDirectional.evaluateNewSimplex(PointCostPair[],double)" "org.apache.commons.math.optimization.PointCostPair.point : double[]"
reference "org.apache.commons.math.optimization.MultiDirectional.evaluateNewSimplex(PointCostPair[],double)" "org.apache.commons.math.optimization.MultiDirectional.simplex : PointCostPair[]"
call "org.apache.commons.math.optimization.MultiDirectional.evaluateNewSimplex(PointCostPair[],double)" "org.apache.commons.math.optimization.PointCostPair.PointCostPair(double[],double)"
call "org.apache.commons.math.optimization.MultiDirectional.evaluateNewSimplex(PointCostPair[],double)" "org.apache.commons.math.optimization.MultiDirectional.evaluateSimplex()"
reference "org.apache.commons.math.optimization.MultiDirectional.evaluateNewSimplex(PointCostPair[],double)" "org.apache.commons.math.optimization.PointCostPair.cost : double"
contain "org.apache.commons.math.optimization.MultiDirectional" "org.apache.commons.math.optimization.MultiDirectional.evaluateNewSimplex(PointCostPair[],double)"
contain "org.apache.commons.math.optimization.MultiDirectional" "org.apache.commons.math.optimization.MultiDirectional.khi : double"
contain "org.apache.commons.math.optimization.MultiDirectional" "org.apache.commons.math.optimization.MultiDirectional.gamma : double"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.AbstractIntegerDistribution"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistribution"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.NormalDistribution"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.util.MathUtils"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.special.Gamma"
call "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double)" "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl()"
call "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double)" "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double,NormalDistribution)"
contain "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double)"
call "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double,NormalDistribution)" "org.apache.commons.math.distribution.AbstractIntegerDistribution.AbstractIntegerDistribution()"
call "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double,NormalDistribution)" "org.apache.commons.math.distribution.PoissonDistributionImpl.setNormal(NormalDistribution)"
call "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double,NormalDistribution)" "org.apache.commons.math.distribution.PoissonDistributionImpl.setMean(double)"
contain "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double,NormalDistribution)"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl.getMean()" "org.apache.commons.math.distribution.PoissonDistributionImpl.mean : double"
contain "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl.getMean()"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl.setMean(double)" "org.apache.commons.math.distribution.PoissonDistributionImpl.mean : double"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl.setMean(double)" "org.apache.commons.math.distribution.PoissonDistributionImpl.normal : NormalDistribution"
call "org.apache.commons.math.distribution.PoissonDistributionImpl.setMean(double)" "org.apache.commons.math.distribution.NormalDistribution.setMean(double)"
call "org.apache.commons.math.distribution.PoissonDistributionImpl.setMean(double)" "org.apache.commons.math.distribution.NormalDistribution.setStandardDeviation(double)"
contain "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl.setMean(double)"
call "org.apache.commons.math.distribution.PoissonDistributionImpl.probability(int)" "org.apache.commons.math.distribution.PoissonDistributionImpl.getMean()"
call "org.apache.commons.math.distribution.PoissonDistributionImpl.probability(int)" "org.apache.commons.math.util.MathUtils.factorialDouble(int)"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl.probability(int)" "org.apache.commons.math.distribution.PoissonDistributionImpl.mean : double"
contain "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl.probability(int)"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl.cumulativeProbability(int)" "org.apache.commons.math.distribution.PoissonDistributionImpl.mean : double"
call "org.apache.commons.math.distribution.PoissonDistributionImpl.cumulativeProbability(int)" "org.apache.commons.math.special.Gamma.regularizedGammaQ(double,double,double,int)"
contain "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl.cumulativeProbability(int)"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl.normalApproximateProbability(int)" "org.apache.commons.math.distribution.PoissonDistributionImpl.normal : NormalDistribution"
call "org.apache.commons.math.distribution.PoissonDistributionImpl.normalApproximateProbability(int)" "org.apache.commons.math.distribution.NormalDistribution.cumulativeProbability(double)"
contain "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl.normalApproximateProbability(int)"
contain "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl.getDomainLowerBound(double)"
contain "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl.getDomainUpperBound(double)"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl.setNormal(NormalDistribution)" "org.apache.commons.math.distribution.PoissonDistributionImpl.normal : NormalDistribution"
contain "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl.setNormal(NormalDistribution)"
contain "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl.serialVersionUID : long"
reference "org.apache.commons.math.distribution.PoissonDistributionImpl.normal : NormalDistribution" "org.apache.commons.math.distribution.NormalDistribution"
contain "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl.normal : NormalDistribution"
contain "org.apache.commons.math.distribution.PoissonDistributionImpl" "org.apache.commons.math.distribution.PoissonDistributionImpl.mean : double"
reference "org.apache.commons.math.optimization.CostFunction" "org.apache.commons.math.optimization.CostException"
contain "org.apache.commons.math.optimization.CostFunction" "org.apache.commons.math.optimization.CostFunction.cost(double[])"
reference "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomGenerator"
reference "org.apache.commons.math.random.RandomAdaptor.RandomAdaptor()" "org.apache.commons.math.random.RandomAdaptor.randomGenerator : RandomGenerator"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.RandomAdaptor()"
reference "org.apache.commons.math.random.RandomAdaptor.RandomAdaptor(RandomGenerator)" "org.apache.commons.math.random.RandomAdaptor.randomGenerator : RandomGenerator"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.RandomAdaptor(RandomGenerator)"
call "org.apache.commons.math.random.RandomAdaptor.createAdaptor(RandomGenerator)" "org.apache.commons.math.random.RandomAdaptor.RandomAdaptor(RandomGenerator)"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.createAdaptor(RandomGenerator)"
reference "org.apache.commons.math.random.RandomAdaptor.nextBoolean()" "org.apache.commons.math.random.RandomAdaptor.randomGenerator : RandomGenerator"
call "org.apache.commons.math.random.RandomAdaptor.nextBoolean()" "org.apache.commons.math.random.RandomGenerator.nextBoolean()"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.nextBoolean()"
reference "org.apache.commons.math.random.RandomAdaptor.nextBytes(byte[])" "org.apache.commons.math.random.RandomAdaptor.randomGenerator : RandomGenerator"
call "org.apache.commons.math.random.RandomAdaptor.nextBytes(byte[])" "org.apache.commons.math.random.RandomGenerator.nextBytes(byte[])"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.nextBytes(byte[])"
reference "org.apache.commons.math.random.RandomAdaptor.nextDouble()" "org.apache.commons.math.random.RandomAdaptor.randomGenerator : RandomGenerator"
call "org.apache.commons.math.random.RandomAdaptor.nextDouble()" "org.apache.commons.math.random.RandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.nextDouble()"
reference "org.apache.commons.math.random.RandomAdaptor.nextFloat()" "org.apache.commons.math.random.RandomAdaptor.randomGenerator : RandomGenerator"
call "org.apache.commons.math.random.RandomAdaptor.nextFloat()" "org.apache.commons.math.random.RandomGenerator.nextFloat()"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.nextFloat()"
reference "org.apache.commons.math.random.RandomAdaptor.nextGaussian()" "org.apache.commons.math.random.RandomAdaptor.randomGenerator : RandomGenerator"
call "org.apache.commons.math.random.RandomAdaptor.nextGaussian()" "org.apache.commons.math.random.RandomGenerator.nextGaussian()"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.nextGaussian()"
reference "org.apache.commons.math.random.RandomAdaptor.nextInt()" "org.apache.commons.math.random.RandomAdaptor.randomGenerator : RandomGenerator"
call "org.apache.commons.math.random.RandomAdaptor.nextInt()" "org.apache.commons.math.random.RandomGenerator.nextInt()"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.nextInt()"
reference "org.apache.commons.math.random.RandomAdaptor.nextInt(int)" "org.apache.commons.math.random.RandomAdaptor.randomGenerator : RandomGenerator"
call "org.apache.commons.math.random.RandomAdaptor.nextInt(int)" "org.apache.commons.math.random.RandomGenerator.nextInt(int)"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.nextInt(int)"
reference "org.apache.commons.math.random.RandomAdaptor.nextLong()" "org.apache.commons.math.random.RandomAdaptor.randomGenerator : RandomGenerator"
call "org.apache.commons.math.random.RandomAdaptor.nextLong()" "org.apache.commons.math.random.RandomGenerator.nextLong()"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.nextLong()"
reference "org.apache.commons.math.random.RandomAdaptor.setSeed(long)" "org.apache.commons.math.random.RandomAdaptor.randomGenerator : RandomGenerator"
call "org.apache.commons.math.random.RandomAdaptor.setSeed(long)" "org.apache.commons.math.random.RandomGenerator.setSeed(long)"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.setSeed(long)"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.serialVersionUID : long"
reference "org.apache.commons.math.random.RandomAdaptor.randomGenerator : RandomGenerator" "org.apache.commons.math.random.RandomGenerator"
contain "org.apache.commons.math.random.RandomAdaptor" "org.apache.commons.math.random.RandomAdaptor.randomGenerator : RandomGenerator"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.EstimationException"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.linear.RealMatrixImpl"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.linear.InvalidMatrixException"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.Estimator"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.EstimationProblem"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.WeightedMeasurement"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.linear.RealMatrix"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)" "org.apache.commons.math.estimation.GaussNewtonEstimator.maxIterations : int"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)" "org.apache.commons.math.estimation.GaussNewtonEstimator.steadyStateThreshold : double"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)" "org.apache.commons.math.estimation.GaussNewtonEstimator.convergence : double"
contain "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.GaussNewtonEstimator.maxIterations : int"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.EstimationException.EstimationException(String,String[])"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.GaussNewtonEstimator.evaluateCriterion(EstimationProblem)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.GaussNewtonEstimator.steadyStateThreshold : double"
reference "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)" "org.apache.commons.math.estimation.GaussNewtonEstimator.convergence : double"
contain "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.estimation.EstimationProblem.getUnboundParameters()"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.estimation.EstimationProblem.getMeasurements()"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.linear.RealMatrixImpl.getDataRef()"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.estimation.WeightedMeasurement.isIgnored()"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.estimation.WeightedMeasurement.getWeight()"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.estimation.WeightedMeasurement.getResidual()"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.estimation.WeightedMeasurement.getPartial(EstimatedParameter)"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.linear.RealMatrix.add(RealMatrix)"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.linear.RealMatrix.solve(RealMatrix)"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.estimation.EstimatedParameter.setEstimate(double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)" "org.apache.commons.math.estimation.EstimationException.EstimationException(Throwable)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.GaussNewtonEstimator.linearEstimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.evaluateCriterion(EstimationProblem)" "org.apache.commons.math.estimation.EstimationProblem.getMeasurements()"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.evaluateCriterion(EstimationProblem)" "org.apache.commons.math.estimation.WeightedMeasurement.getResidual()"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.evaluateCriterion(EstimationProblem)" "org.apache.commons.math.estimation.WeightedMeasurement.getWeight()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.GaussNewtonEstimator.evaluateCriterion(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.getRMS(EstimationProblem)" "org.apache.commons.math.estimation.GaussNewtonEstimator.evaluateCriterion(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimator.getRMS(EstimationProblem)" "org.apache.commons.math.estimation.EstimationProblem.getMeasurements()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.GaussNewtonEstimator.getRMS(EstimationProblem)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.GaussNewtonEstimator.maxIterations : int"
contain "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.GaussNewtonEstimator.steadyStateThreshold : double"
contain "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.GaussNewtonEstimator.convergence : double"
contain "org.apache.commons.math.estimation.GaussNewtonEstimator" "org.apache.commons.math.estimation.GaussNewtonEstimator.serialVersionUID : long"
reference "org.apache.commons.math.ode.SwitchState.1" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.SwitchState.1" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.ode.SwitchState.1" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.ode.SwitchState.1" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.SwitchState.1" "org.apache.commons.math.ode.SwitchState"
reference "org.apache.commons.math.ode.SwitchState.1" "org.apache.commons.math.ode.SwitchingFunction"
reference "org.apache.commons.math.ode.SwitchState.1.{...}" "org.apache.commons.math.ode.SwitchState.1.this$0 : SwitchState"
reference "org.apache.commons.math.ode.SwitchState.1.{...}" "org.apache.commons.math.ode.SwitchState.1.val$interpolator : StepInterpolator"
contain "org.apache.commons.math.ode.SwitchState.1" "org.apache.commons.math.ode.SwitchState.1.{...}"
reference "org.apache.commons.math.ode.SwitchState.1.value(double)" "org.apache.commons.math.ode.SwitchState.1.val$interpolator : StepInterpolator"
call "org.apache.commons.math.ode.SwitchState.1.value(double)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
reference "org.apache.commons.math.ode.SwitchState.1.value(double)" "org.apache.commons.math.ode.SwitchState.1.this$0 : SwitchState"
call "org.apache.commons.math.ode.SwitchState.1.value(double)" "org.apache.commons.math.ode.SwitchState.access$000(SwitchState)"
call "org.apache.commons.math.ode.SwitchState.1.value(double)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
call "org.apache.commons.math.ode.SwitchState.1.value(double)" "org.apache.commons.math.ode.SwitchingFunction.g(double,double[])"
call "org.apache.commons.math.ode.SwitchState.1.value(double)" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,Throwable)"
contain "org.apache.commons.math.ode.SwitchState.1" "org.apache.commons.math.ode.SwitchState.1.value(double)"
reference "org.apache.commons.math.ode.SwitchState.1.val$interpolator : StepInterpolator" "org.apache.commons.math.ode.StepInterpolator"
contain "org.apache.commons.math.ode.SwitchState.1" "org.apache.commons.math.ode.SwitchState.1.val$interpolator : StepInterpolator"
reference "org.apache.commons.math.ode.SwitchState.1.this$0 : SwitchState" "org.apache.commons.math.ode.SwitchState"
contain "org.apache.commons.math.ode.SwitchState.1" "org.apache.commons.math.ode.SwitchState.1.this$0 : SwitchState"
reference "org.apache.commons.math.distribution.AbstractDistribution" "org.apache.commons.math.distribution.Distribution"
reference "org.apache.commons.math.distribution.AbstractDistribution" "org.apache.commons.math.MathException"
contain "org.apache.commons.math.distribution.AbstractDistribution" "org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution()"
call "org.apache.commons.math.distribution.AbstractDistribution.cumulativeProbability(double,double)" "org.apache.commons.math.distribution.AbstractDistribution.cumulativeProbability(double)"
contain "org.apache.commons.math.distribution.AbstractDistribution" "org.apache.commons.math.distribution.AbstractDistribution.cumulativeProbability(double,double)"
contain "org.apache.commons.math.distribution.AbstractDistribution" "org.apache.commons.math.distribution.AbstractDistribution.serialVersionUID : long"
reference "org.apache.commons.math.ode.DerivativeException" "org.apache.commons.math.MathException"
call "org.apache.commons.math.ode.DerivativeException.DerivativeException(String,String[])" "org.apache.commons.math.MathException.MathException(String,Object[])"
contain "org.apache.commons.math.ode.DerivativeException" "org.apache.commons.math.ode.DerivativeException.DerivativeException(String,String[])"
call "org.apache.commons.math.ode.DerivativeException.DerivativeException(Throwable)" "org.apache.commons.math.MathException.MathException(Throwable)"
contain "org.apache.commons.math.ode.DerivativeException" "org.apache.commons.math.ode.DerivativeException.DerivativeException(Throwable)"
contain "org.apache.commons.math.ode.DerivativeException" "org.apache.commons.math.ode.DerivativeException.serialVersionUID : long"
reference "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)" "org.apache.commons.math.estimation.EstimatedParameter.name : String"
reference "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)" "org.apache.commons.math.estimation.EstimatedParameter.estimate : double"
reference "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)" "org.apache.commons.math.estimation.EstimatedParameter.bound : boolean"
contain "org.apache.commons.math.estimation.EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
reference "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double,boolean)" "org.apache.commons.math.estimation.EstimatedParameter.name : String"
reference "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double,boolean)" "org.apache.commons.math.estimation.EstimatedParameter.estimate : double"
reference "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double,boolean)" "org.apache.commons.math.estimation.EstimatedParameter.bound : boolean"
contain "org.apache.commons.math.estimation.EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double,boolean)"
reference "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(EstimatedParameter)" "org.apache.commons.math.estimation.EstimatedParameter.name : String"
reference "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(EstimatedParameter)" "org.apache.commons.math.estimation.EstimatedParameter.estimate : double"
reference "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(EstimatedParameter)" "org.apache.commons.math.estimation.EstimatedParameter.bound : boolean"
contain "org.apache.commons.math.estimation.EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(EstimatedParameter)"
reference "org.apache.commons.math.estimation.EstimatedParameter.setEstimate(double)" "org.apache.commons.math.estimation.EstimatedParameter.estimate : double"
contain "org.apache.commons.math.estimation.EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter.setEstimate(double)"
reference "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()" "org.apache.commons.math.estimation.EstimatedParameter.estimate : double"
contain "org.apache.commons.math.estimation.EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.EstimatedParameter.getName()" "org.apache.commons.math.estimation.EstimatedParameter.name : String"
contain "org.apache.commons.math.estimation.EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter.getName()"
reference "org.apache.commons.math.estimation.EstimatedParameter.setBound(boolean)" "org.apache.commons.math.estimation.EstimatedParameter.bound : boolean"
contain "org.apache.commons.math.estimation.EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter.setBound(boolean)"
reference "org.apache.commons.math.estimation.EstimatedParameter.isBound()" "org.apache.commons.math.estimation.EstimatedParameter.bound : boolean"
contain "org.apache.commons.math.estimation.EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter.isBound()"
contain "org.apache.commons.math.estimation.EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter.name : String"
contain "org.apache.commons.math.estimation.EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter.estimate : double"
contain "org.apache.commons.math.estimation.EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter.bound : boolean"
contain "org.apache.commons.math.estimation.EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter.serialVersionUID : long"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.DuplicateSampleAbscissaException"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.UnivariateRealFunction"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.PolynomialFunctionLagrangeForm(double[],double[])" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.verifyInterpolationArray(double[],double[])"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.PolynomialFunctionLagrangeForm(double[],double[])" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.x : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.PolynomialFunctionLagrangeForm(double[],double[])" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.y : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.PolynomialFunctionLagrangeForm(double[],double[])" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.coefficientsComputed : boolean"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.PolynomialFunctionLagrangeForm(double[],double[])"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.value(double)" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.x : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.value(double)" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.y : double[]"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.value(double)" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.evaluate(double[],double[],double)"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.value(double)" "org.apache.commons.math.DuplicateSampleAbscissaException.getPattern()"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.value(double)" "org.apache.commons.math.DuplicateSampleAbscissaException.getArguments()"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.value(double)" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Object[],Throwable)"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.value(double)"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.degree()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.x : double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.degree()"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.getInterpolatingPoints()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.x : double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.getInterpolatingPoints()"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.getInterpolatingValues()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.y : double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.getInterpolatingValues()"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.getCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.coefficientsComputed : boolean"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.getCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.computeCoefficients()"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.getCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.coefficients : double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.getCoefficients()"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.evaluate(double[],double[],double)" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.verifyInterpolationArray(double[],double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.evaluate(double[],double[],double)" "org.apache.commons.math.DuplicateSampleAbscissaException.DuplicateSampleAbscissaException(double,int,int)"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.evaluate(double[],double[],double)"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.computeCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.degree()"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.computeCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.coefficients : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.computeCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.x : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.computeCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.y : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.computeCoefficients()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.coefficientsComputed : boolean"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.computeCoefficients()"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.verifyInterpolationArray(double[],double[])"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.serialVersionUID : long"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.coefficients : double[]" "double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.coefficients : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.x : double[]" "double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.x : double[]"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.y : double[]" "double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.y : double[]"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.coefficientsComputed : boolean"
reference "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.RealMatrixImpl"
reference "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.BigMatrixImpl"
reference "org.apache.commons.math.linear.MatrixUtils" "double[][]"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.MatrixUtils()"
call "org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][])" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][])"
call "org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(int)" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)"
call "org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(int)" "org.apache.commons.math.linear.RealMatrixImpl.getDataRef()"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(int)"
call "org.apache.commons.math.linear.MatrixUtils.createBigMatrix(double[][])" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createBigMatrix(double[][])"
call "org.apache.commons.math.linear.MatrixUtils.createBigMatrix(BigDecimal[][])" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createBigMatrix(BigDecimal[][])"
call "org.apache.commons.math.linear.MatrixUtils.createBigMatrix(String[][])" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createBigMatrix(String[][])"
call "org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(double[])" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(double[])"
call "org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(double[])" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(double[])"
call "org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(BigDecimal[])"
call "org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(String[])" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(String[])"
call "org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(double[])" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(double[])"
call "org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(double[])" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(double[])"
call "org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(BigDecimal[])"
call "org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(String[])" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(String[])"
call "org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(int)" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(int,int)"
call "org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(int)" "org.apache.commons.math.linear.BigMatrixImpl.getDataRef()"
reference "org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(int)" "org.apache.commons.math.linear.BigMatrixImpl.ONE : BigDecimal"
reference "org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(int)" "org.apache.commons.math.linear.BigMatrixImpl.ZERO : BigDecimal"
contain "org.apache.commons.math.linear.MatrixUtils" "org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(int)"
reference "org.apache.commons.math.analysis.NewtonSolver" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.analysis.NewtonSolver" "org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction"
reference "org.apache.commons.math.analysis.NewtonSolver" "org.apache.commons.math.analysis.UnivariateRealSolverImpl"
reference "org.apache.commons.math.analysis.NewtonSolver" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.NewtonSolver" "org.apache.commons.math.analysis.UnivariateRealSolverUtils"
reference "org.apache.commons.math.analysis.NewtonSolver" "org.apache.commons.math.analysis.UnivariateRealFunction"
call "org.apache.commons.math.analysis.NewtonSolver.NewtonSolver(DifferentiableUnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)"
call "org.apache.commons.math.analysis.NewtonSolver.NewtonSolver(DifferentiableUnivariateRealFunction)" "org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction.derivative()"
reference "org.apache.commons.math.analysis.NewtonSolver.NewtonSolver(DifferentiableUnivariateRealFunction)" "org.apache.commons.math.analysis.NewtonSolver.derivative : UnivariateRealFunction"
contain "org.apache.commons.math.analysis.NewtonSolver" "org.apache.commons.math.analysis.NewtonSolver.NewtonSolver(DifferentiableUnivariateRealFunction)"
call "org.apache.commons.math.analysis.NewtonSolver.solve(double,double)" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.midpoint(double,double)"
call "org.apache.commons.math.analysis.NewtonSolver.solve(double,double)" "org.apache.commons.math.analysis.NewtonSolver.solve(double,double,double)"
contain "org.apache.commons.math.analysis.NewtonSolver" "org.apache.commons.math.analysis.NewtonSolver.solve(double,double)"
call "org.apache.commons.math.analysis.NewtonSolver.solve(double,double,double)" "org.apache.commons.math.analysis.NewtonSolver.clearResult()"
call "org.apache.commons.math.analysis.NewtonSolver.solve(double,double,double)" "org.apache.commons.math.analysis.NewtonSolver.verifySequence(double,double,double)"
reference "org.apache.commons.math.analysis.NewtonSolver.solve(double,double,double)" "org.apache.commons.math.analysis.NewtonSolver.maximalIterationCount : int"
reference "org.apache.commons.math.analysis.NewtonSolver.solve(double,double,double)" "org.apache.commons.math.analysis.NewtonSolver.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.NewtonSolver.solve(double,double,double)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
reference "org.apache.commons.math.analysis.NewtonSolver.solve(double,double,double)" "org.apache.commons.math.analysis.NewtonSolver.derivative : UnivariateRealFunction"
reference "org.apache.commons.math.analysis.NewtonSolver.solve(double,double,double)" "org.apache.commons.math.analysis.NewtonSolver.absoluteAccuracy : double"
call "org.apache.commons.math.analysis.NewtonSolver.solve(double,double,double)" "org.apache.commons.math.analysis.NewtonSolver.setResult(double,int)"
call "org.apache.commons.math.analysis.NewtonSolver.solve(double,double,double)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
contain "org.apache.commons.math.analysis.NewtonSolver" "org.apache.commons.math.analysis.NewtonSolver.solve(double,double,double)"
reference "org.apache.commons.math.analysis.NewtonSolver.readObject(ObjectInputStream)" "org.apache.commons.math.analysis.NewtonSolver.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.NewtonSolver.readObject(ObjectInputStream)" "org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction.derivative()"
reference "org.apache.commons.math.analysis.NewtonSolver.readObject(ObjectInputStream)" "org.apache.commons.math.analysis.NewtonSolver.derivative : UnivariateRealFunction"
contain "org.apache.commons.math.analysis.NewtonSolver" "org.apache.commons.math.analysis.NewtonSolver.readObject(ObjectInputStream)"
contain "org.apache.commons.math.analysis.NewtonSolver" "org.apache.commons.math.analysis.NewtonSolver.serialVersionUID : long"
reference "org.apache.commons.math.analysis.NewtonSolver.derivative : UnivariateRealFunction" "org.apache.commons.math.analysis.UnivariateRealFunction"
contain "org.apache.commons.math.analysis.NewtonSolver" "org.apache.commons.math.analysis.NewtonSolver.derivative : UnivariateRealFunction"
reference "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.AbstractContinuousDistribution"
reference "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistribution"
call "org.apache.commons.math.distribution.WeibullDistributionImpl.WeibullDistributionImpl(double,double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution()"
call "org.apache.commons.math.distribution.WeibullDistributionImpl.WeibullDistributionImpl(double,double)" "org.apache.commons.math.distribution.WeibullDistributionImpl.setShape(double)"
call "org.apache.commons.math.distribution.WeibullDistributionImpl.WeibullDistributionImpl(double,double)" "org.apache.commons.math.distribution.WeibullDistributionImpl.setScale(double)"
contain "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistributionImpl.WeibullDistributionImpl(double,double)"
call "org.apache.commons.math.distribution.WeibullDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.WeibullDistributionImpl.getScale()"
call "org.apache.commons.math.distribution.WeibullDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.WeibullDistributionImpl.getShape()"
contain "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistributionImpl.cumulativeProbability(double)"
reference "org.apache.commons.math.distribution.WeibullDistributionImpl.getShape()" "org.apache.commons.math.distribution.WeibullDistributionImpl.alpha : double"
contain "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistributionImpl.getShape()"
reference "org.apache.commons.math.distribution.WeibullDistributionImpl.getScale()" "org.apache.commons.math.distribution.WeibullDistributionImpl.beta : double"
contain "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistributionImpl.getScale()"
call "org.apache.commons.math.distribution.WeibullDistributionImpl.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.WeibullDistributionImpl.getScale()"
call "org.apache.commons.math.distribution.WeibullDistributionImpl.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.WeibullDistributionImpl.getShape()"
contain "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistributionImpl.inverseCumulativeProbability(double)"
reference "org.apache.commons.math.distribution.WeibullDistributionImpl.setShape(double)" "org.apache.commons.math.distribution.WeibullDistributionImpl.alpha : double"
contain "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistributionImpl.setShape(double)"
reference "org.apache.commons.math.distribution.WeibullDistributionImpl.setScale(double)" "org.apache.commons.math.distribution.WeibullDistributionImpl.beta : double"
contain "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistributionImpl.setScale(double)"
contain "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistributionImpl.getDomainLowerBound(double)"
contain "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistributionImpl.getDomainUpperBound(double)"
call "org.apache.commons.math.distribution.WeibullDistributionImpl.getInitialDomain(double)" "org.apache.commons.math.distribution.WeibullDistributionImpl.getScale()"
call "org.apache.commons.math.distribution.WeibullDistributionImpl.getInitialDomain(double)" "org.apache.commons.math.distribution.WeibullDistributionImpl.getShape()"
contain "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistributionImpl.getInitialDomain(double)"
contain "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistributionImpl.serialVersionUID : long"
contain "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistributionImpl.alpha : double"
contain "org.apache.commons.math.distribution.WeibullDistributionImpl" "org.apache.commons.math.distribution.WeibullDistributionImpl.beta : double"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.SwitchingFunctionsHandler"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator" "double[]"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.DummyStepInterpolator"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.FirstOrderIntegrator"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.DummyStepHandler"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.FirstOrderDifferentialEquations"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.AbstractStepInterpolator"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)" "org.apache.commons.math.ode.RungeKuttaIntegrator.c : double[]"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)" "org.apache.commons.math.ode.RungeKuttaIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)" "org.apache.commons.math.ode.RungeKuttaIntegrator.b : double[]"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)" "org.apache.commons.math.ode.RungeKuttaIntegrator.prototype : RungeKuttaStepInterpolator"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)" "org.apache.commons.math.ode.RungeKuttaIntegrator.step : double"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)" "org.apache.commons.math.ode.DummyStepHandler.getInstance()"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)" "org.apache.commons.math.ode.RungeKuttaIntegrator.handler : StepHandler"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)" "org.apache.commons.math.ode.SwitchingFunctionsHandler.SwitchingFunctionsHandler()"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)" "org.apache.commons.math.ode.RungeKuttaIntegrator.switchesHandler : SwitchingFunctionsHandler"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)" "org.apache.commons.math.ode.RungeKuttaIntegrator.resetInternalState()"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.getName()"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.setStepHandler(StepHandler)" "org.apache.commons.math.ode.RungeKuttaIntegrator.handler : StepHandler"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.setStepHandler(StepHandler)"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.getStepHandler()" "org.apache.commons.math.ode.RungeKuttaIntegrator.handler : StepHandler"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.getStepHandler()"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.RungeKuttaIntegrator.switchesHandler : SwitchingFunctionsHandler"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchingFunctionsHandler.add(SwitchingFunction,double,double,int)"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.sanityChecks(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.FirstOrderDifferentialEquations.getDimension()"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.sanityChecks(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.IntegratorException.IntegratorException(String,String[])"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.sanityChecks(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaIntegrator.sanityChecks(FirstOrderDifferentialEquations,double,double[],double,double[])"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaIntegrator.c : double[]"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaIntegrator.handler : StepHandler"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.StepHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaIntegrator.switchesHandler : SwitchingFunctionsHandler"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.isEmpty()"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaIntegrator.prototype : RungeKuttaStepInterpolator"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.copy()"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(double[],boolean)"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.AbstractStepInterpolator.storeTime(double)"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaIntegrator.step : double"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaIntegrator.stepStart : double"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaIntegrator.stepSize : double"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.StepHandler.reset()"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.AbstractStepInterpolator.shift()"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.FirstOrderDifferentialEquations.computeDerivatives(double,double[],double[])"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaIntegrator.b : double[]"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.getEventTime()"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.stepAccepted(double,double[])"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.stop()"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.StepHandler.handleStep(StepInterpolator,boolean)"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.reset(double,double[])"
call "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaIntegrator.resetInternalState()"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.getCurrentStepStart()" "org.apache.commons.math.ode.RungeKuttaIntegrator.stepStart : double"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.getCurrentStepStart()"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.getCurrentSignedStepsize()" "org.apache.commons.math.ode.RungeKuttaIntegrator.stepSize : double"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.getCurrentSignedStepsize()"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.resetInternalState()" "org.apache.commons.math.ode.RungeKuttaIntegrator.stepStart : double"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.resetInternalState()" "org.apache.commons.math.ode.RungeKuttaIntegrator.stepSize : double"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.resetInternalState()"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.c : double[]" "double[]"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.c : double[]"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.a : double[][]" "double[][]"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.b : double[]" "double[]"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.b : double[]"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.prototype : RungeKuttaStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.prototype : RungeKuttaStepInterpolator"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.step : double"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.handler : StepHandler" "org.apache.commons.math.ode.StepHandler"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.handler : StepHandler"
reference "org.apache.commons.math.ode.RungeKuttaIntegrator.switchesHandler : SwitchingFunctionsHandler" "org.apache.commons.math.ode.SwitchingFunctionsHandler"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.switchesHandler : SwitchingFunctionsHandler"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.stepStart : double"
contain "org.apache.commons.math.ode.RungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator.stepSize : double"
reference "org.apache.commons.math.distribution.Distribution" "org.apache.commons.math.MathException"
contain "org.apache.commons.math.distribution.Distribution" "org.apache.commons.math.distribution.Distribution.cumulativeProbability(double)"
contain "org.apache.commons.math.distribution.Distribution" "org.apache.commons.math.distribution.Distribution.cumulativeProbability(double,double)"
reference "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactoryImpl"
reference "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.PascalDistributionImpl"
reference "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.CauchyDistributionImpl"
reference "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.WeibullDistributionImpl"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.DistributionFactory()"
call "org.apache.commons.math.distribution.DistributionFactory.newInstance()" "org.apache.commons.math.distribution.DistributionFactoryImpl.DistributionFactoryImpl()"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.newInstance()"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.createBinomialDistribution(int,double)"
call "org.apache.commons.math.distribution.DistributionFactory.createPascalDistribution(int,double)" "org.apache.commons.math.distribution.PascalDistributionImpl.PascalDistributionImpl(int,double)"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.createPascalDistribution(int,double)"
call "org.apache.commons.math.distribution.DistributionFactory.createCauchyDistribution(double,double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.CauchyDistributionImpl(double,double)"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.createCauchyDistribution(double,double)"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.createChiSquareDistribution(double)"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.createExponentialDistribution(double)"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.createFDistribution(double,double)"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.createGammaDistribution(double,double)"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.createTDistribution(double)"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.createHypergeometricDistribution(int,int,int)"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.createNormalDistribution(double,double)"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.createNormalDistribution()"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.createPoissonDistribution(double)"
call "org.apache.commons.math.distribution.DistributionFactory.createWeibullDistribution(double,double)" "org.apache.commons.math.distribution.WeibullDistributionImpl.WeibullDistributionImpl(double,double)"
contain "org.apache.commons.math.distribution.DistributionFactory" "org.apache.commons.math.distribution.DistributionFactory.createWeibullDistribution(double,double)"
reference "org.apache.commons.math.ode.AbstractStepInterpolator" "double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator()" "org.apache.commons.math.ode.AbstractStepInterpolator.previousTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator()" "org.apache.commons.math.ode.AbstractStepInterpolator.currentTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator()" "org.apache.commons.math.ode.AbstractStepInterpolator.h : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator()" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator()" "org.apache.commons.math.ode.AbstractStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator()" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator()" "org.apache.commons.math.ode.AbstractStepInterpolator.finalized : boolean"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator()" "org.apache.commons.math.ode.AbstractStepInterpolator.forward : boolean"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator()"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.previousTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.currentTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.h : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.finalized : boolean"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.forward : boolean"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(double[],boolean)"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(AbstractStepInterpolator)" "org.apache.commons.math.ode.AbstractStepInterpolator.previousTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(AbstractStepInterpolator)" "org.apache.commons.math.ode.AbstractStepInterpolator.currentTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(AbstractStepInterpolator)" "org.apache.commons.math.ode.AbstractStepInterpolator.h : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(AbstractStepInterpolator)" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(AbstractStepInterpolator)" "org.apache.commons.math.ode.AbstractStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(AbstractStepInterpolator)" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(AbstractStepInterpolator)" "org.apache.commons.math.ode.AbstractStepInterpolator.finalized : boolean"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(AbstractStepInterpolator)" "org.apache.commons.math.ode.AbstractStepInterpolator.forward : boolean"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(AbstractStepInterpolator)"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.reinitialize(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.previousTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.reinitialize(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.currentTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.reinitialize(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.h : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.reinitialize(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.reinitialize(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.reinitialize(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.reinitialize(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.finalized : boolean"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.reinitialize(double[],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.forward : boolean"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.reinitialize(double[],boolean)"
call "org.apache.commons.math.ode.AbstractStepInterpolator.copy()" "org.apache.commons.math.ode.AbstractStepInterpolator.finalizeStep()"
call "org.apache.commons.math.ode.AbstractStepInterpolator.copy()" "org.apache.commons.math.ode.AbstractStepInterpolator.doCopy()"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.copy()"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.doCopy()"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.shift()" "org.apache.commons.math.ode.AbstractStepInterpolator.currentTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.shift()" "org.apache.commons.math.ode.AbstractStepInterpolator.previousTime : double"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.shift()"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.storeTime(double)" "org.apache.commons.math.ode.AbstractStepInterpolator.currentTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.storeTime(double)" "org.apache.commons.math.ode.AbstractStepInterpolator.previousTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.storeTime(double)" "org.apache.commons.math.ode.AbstractStepInterpolator.h : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.storeTime(double)" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.storeTime(double)" "org.apache.commons.math.ode.AbstractStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.storeTime(double)" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.storeTime(double)" "org.apache.commons.math.ode.AbstractStepInterpolator.finalized : boolean"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.storeTime(double)"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.getPreviousTime()" "org.apache.commons.math.ode.AbstractStepInterpolator.previousTime : double"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.getPreviousTime()"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.getCurrentTime()" "org.apache.commons.math.ode.AbstractStepInterpolator.currentTime : double"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.getCurrentTime()"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.getInterpolatedTime()" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedTime : double"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.getInterpolatedTime()"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.setInterpolatedTime(double)" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.setInterpolatedTime(double)" "org.apache.commons.math.ode.AbstractStepInterpolator.currentTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.setInterpolatedTime(double)" "org.apache.commons.math.ode.AbstractStepInterpolator.h : double"
call "org.apache.commons.math.ode.AbstractStepInterpolator.setInterpolatedTime(double)" "org.apache.commons.math.ode.AbstractStepInterpolator.computeInterpolatedState(double,double)"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.setInterpolatedTime(double)"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.isForward()" "org.apache.commons.math.ode.AbstractStepInterpolator.forward : boolean"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.isForward()"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.computeInterpolatedState(double,double)"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.getInterpolatedState()" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedState : double[]"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.getInterpolatedState()"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.finalizeStep()" "org.apache.commons.math.ode.AbstractStepInterpolator.finalized : boolean"
call "org.apache.commons.math.ode.AbstractStepInterpolator.finalizeStep()" "org.apache.commons.math.ode.AbstractStepInterpolator.doFinalize()"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.finalizeStep()"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.doFinalize()"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.writeExternal(ObjectOutput)"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.readExternal(ObjectInput)"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.writeBaseExternal(ObjectOutput)" "org.apache.commons.math.ode.AbstractStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.writeBaseExternal(ObjectOutput)" "org.apache.commons.math.ode.AbstractStepInterpolator.previousTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.writeBaseExternal(ObjectOutput)" "org.apache.commons.math.ode.AbstractStepInterpolator.currentTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.writeBaseExternal(ObjectOutput)" "org.apache.commons.math.ode.AbstractStepInterpolator.h : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.writeBaseExternal(ObjectOutput)" "org.apache.commons.math.ode.AbstractStepInterpolator.forward : boolean"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.writeBaseExternal(ObjectOutput)" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedTime : double"
call "org.apache.commons.math.ode.AbstractStepInterpolator.writeBaseExternal(ObjectOutput)" "org.apache.commons.math.ode.AbstractStepInterpolator.finalizeStep()"
call "org.apache.commons.math.ode.AbstractStepInterpolator.writeBaseExternal(ObjectOutput)" "org.apache.commons.math.ode.DerivativeException.getMessage()"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.writeBaseExternal(ObjectOutput)"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.readBaseExternal(ObjectInput)" "org.apache.commons.math.ode.AbstractStepInterpolator.previousTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.readBaseExternal(ObjectInput)" "org.apache.commons.math.ode.AbstractStepInterpolator.currentTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.readBaseExternal(ObjectInput)" "org.apache.commons.math.ode.AbstractStepInterpolator.h : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.readBaseExternal(ObjectInput)" "org.apache.commons.math.ode.AbstractStepInterpolator.forward : boolean"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.readBaseExternal(ObjectInput)" "org.apache.commons.math.ode.AbstractStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.readBaseExternal(ObjectInput)" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.readBaseExternal(ObjectInput)" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.readBaseExternal(ObjectInput)" "org.apache.commons.math.ode.AbstractStepInterpolator.finalized : boolean"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.readBaseExternal(ObjectInput)"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.previousTime : double"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.currentTime : double"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.h : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.currentState : double[]" "double[]"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.currentState : double[]"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedTime : double"
reference "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedState : double[]" "double[]"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.interpolatedState : double[]"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.finalized : boolean"
contain "org.apache.commons.math.ode.AbstractStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator.forward : boolean"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl.DescriptiveStatisticsImpl()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl.DescriptiveStatisticsImpl()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl.DescriptiveStatisticsImpl(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl.DescriptiveStatisticsImpl(int)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl.clear()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.clear()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl.clear()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl.serialVersionUID : long"
reference "org.apache.commons.math.ode.StepHandler" "org.apache.commons.math.ode.DerivativeException"
contain "org.apache.commons.math.ode.StepHandler" "org.apache.commons.math.ode.StepHandler.requiresDenseOutput()"
contain "org.apache.commons.math.ode.StepHandler" "org.apache.commons.math.ode.StepHandler.reset()"
contain "org.apache.commons.math.ode.StepHandler" "org.apache.commons.math.ode.StepHandler.handleStep(StepInterpolator,boolean)"
reference "org.apache.commons.math.ode.DummyStepHandler" "org.apache.commons.math.ode.StepHandler"
contain "org.apache.commons.math.ode.DummyStepHandler" "org.apache.commons.math.ode.DummyStepHandler.DummyStepHandler()"
reference "org.apache.commons.math.ode.DummyStepHandler.getInstance()" "org.apache.commons.math.ode.DummyStepHandler.instance : DummyStepHandler"
call "org.apache.commons.math.ode.DummyStepHandler.getInstance()" "org.apache.commons.math.ode.DummyStepHandler.DummyStepHandler()"
contain "org.apache.commons.math.ode.DummyStepHandler" "org.apache.commons.math.ode.DummyStepHandler.getInstance()"
contain "org.apache.commons.math.ode.DummyStepHandler" "org.apache.commons.math.ode.DummyStepHandler.requiresDenseOutput()"
contain "org.apache.commons.math.ode.DummyStepHandler" "org.apache.commons.math.ode.DummyStepHandler.reset()"
contain "org.apache.commons.math.ode.DummyStepHandler" "org.apache.commons.math.ode.DummyStepHandler.handleStep(StepInterpolator,boolean)"
reference "org.apache.commons.math.ode.DummyStepHandler.static {...}" "org.apache.commons.math.ode.DummyStepHandler.instance : DummyStepHandler"
contain "org.apache.commons.math.ode.DummyStepHandler" "org.apache.commons.math.ode.DummyStepHandler.static {...}"
reference "org.apache.commons.math.ode.DummyStepHandler.instance : DummyStepHandler" "org.apache.commons.math.ode.DummyStepHandler"
contain "org.apache.commons.math.ode.DummyStepHandler" "org.apache.commons.math.ode.DummyStepHandler.instance : DummyStepHandler"
contain "org.apache.commons.math.ode.DummyStepHandler" "org.apache.commons.math.ode.DummyStepHandler.serialVersionUID : long"
reference "org.apache.commons.math.distribution.NormalDistribution" "org.apache.commons.math.distribution.ContinuousDistribution"
contain "org.apache.commons.math.distribution.NormalDistribution" "org.apache.commons.math.distribution.NormalDistribution.getMean()"
contain "org.apache.commons.math.distribution.NormalDistribution" "org.apache.commons.math.distribution.NormalDistribution.setMean(double)"
contain "org.apache.commons.math.distribution.NormalDistribution" "org.apache.commons.math.distribution.NormalDistribution.getStandardDeviation()"
contain "org.apache.commons.math.distribution.NormalDistribution" "org.apache.commons.math.distribution.NormalDistribution.setStandardDeviation(double)"
reference "org.apache.commons.math.DuplicateSampleAbscissaException" "org.apache.commons.math.MathException"
call "org.apache.commons.math.DuplicateSampleAbscissaException.DuplicateSampleAbscissaException(double,int,int)" "org.apache.commons.math.MathException.MathException(String,Object[])"
contain "org.apache.commons.math.DuplicateSampleAbscissaException" "org.apache.commons.math.DuplicateSampleAbscissaException.DuplicateSampleAbscissaException(double,int,int)"
call "org.apache.commons.math.DuplicateSampleAbscissaException.getDuplicateAbscissa()" "org.apache.commons.math.DuplicateSampleAbscissaException.getArguments()"
contain "org.apache.commons.math.DuplicateSampleAbscissaException" "org.apache.commons.math.DuplicateSampleAbscissaException.getDuplicateAbscissa()"
contain "org.apache.commons.math.DuplicateSampleAbscissaException" "org.apache.commons.math.DuplicateSampleAbscissaException.serialVersionUID : long"
reference "org.apache.commons.math.complex.Complex" "org.apache.commons.math.util.MathUtils"
reference "org.apache.commons.math.complex.Complex.Complex(double,double)" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.Complex(double,double)" "org.apache.commons.math.complex.Complex.imaginary : double"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.Complex.abs()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.Complex.abs()" "org.apache.commons.math.complex.Complex.isInfinite()"
reference "org.apache.commons.math.complex.Complex.abs()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.abs()" "org.apache.commons.math.complex.Complex.imaginary : double"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.abs()"
reference "org.apache.commons.math.complex.Complex.add(Complex)" "org.apache.commons.math.complex.Complex.real : double"
call "org.apache.commons.math.complex.Complex.add(Complex)" "org.apache.commons.math.complex.Complex.getReal()"
reference "org.apache.commons.math.complex.Complex.add(Complex)" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.add(Complex)" "org.apache.commons.math.complex.Complex.getImaginary()"
call "org.apache.commons.math.complex.Complex.add(Complex)" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.add(Complex)"
call "org.apache.commons.math.complex.Complex.conjugate()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.conjugate()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.conjugate()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.conjugate()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.conjugate()" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.conjugate()"
call "org.apache.commons.math.complex.Complex.divide(Complex)" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.divide(Complex)" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.Complex.divide(Complex)" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.complex.Complex.divide(Complex)" "org.apache.commons.math.complex.Complex.getImaginary()"
call "org.apache.commons.math.complex.Complex.divide(Complex)" "org.apache.commons.math.complex.Complex.isInfinite()"
reference "org.apache.commons.math.complex.Complex.divide(Complex)" "org.apache.commons.math.complex.Complex.ZERO : Complex"
reference "org.apache.commons.math.complex.Complex.divide(Complex)" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.divide(Complex)" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.divide(Complex)" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.divide(Complex)"
call "org.apache.commons.math.complex.Complex.equals(Object)" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.equals(Object)" "org.apache.commons.math.complex.Complex.real : double"
call "org.apache.commons.math.complex.Complex.equals(Object)" "org.apache.commons.math.complex.Complex.getReal()"
reference "org.apache.commons.math.complex.Complex.equals(Object)" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.equals(Object)" "org.apache.commons.math.complex.Complex.getImaginary()"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.equals(Object)"
call "org.apache.commons.math.complex.Complex.hashCode()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.hashCode()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.hashCode()" "org.apache.commons.math.util.MathUtils.hash(double)"
reference "org.apache.commons.math.complex.Complex.hashCode()" "org.apache.commons.math.complex.Complex.real : double"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.hashCode()"
reference "org.apache.commons.math.complex.Complex.getImaginary()" "org.apache.commons.math.complex.Complex.imaginary : double"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.getImaginary()"
reference "org.apache.commons.math.complex.Complex.getReal()" "org.apache.commons.math.complex.Complex.real : double"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.getReal()"
reference "org.apache.commons.math.complex.Complex.isNaN()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.isNaN()" "org.apache.commons.math.complex.Complex.imaginary : double"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.Complex.isInfinite()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.isInfinite()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.isInfinite()" "org.apache.commons.math.complex.Complex.imaginary : double"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.isInfinite()"
call "org.apache.commons.math.complex.Complex.multiply(Complex)" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.multiply(Complex)" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.multiply(Complex)" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.multiply(Complex)" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.multiply(Complex)" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.multiply(Complex)"
call "org.apache.commons.math.complex.Complex.negate()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.negate()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.negate()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.negate()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.negate()" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.negate()"
call "org.apache.commons.math.complex.Complex.subtract(Complex)" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.subtract(Complex)" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.subtract(Complex)" "org.apache.commons.math.complex.Complex.real : double"
call "org.apache.commons.math.complex.Complex.subtract(Complex)" "org.apache.commons.math.complex.Complex.getReal()"
reference "org.apache.commons.math.complex.Complex.subtract(Complex)" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.subtract(Complex)" "org.apache.commons.math.complex.Complex.getImaginary()"
call "org.apache.commons.math.complex.Complex.subtract(Complex)" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.subtract(Complex)"
call "org.apache.commons.math.complex.Complex.acos()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.acos()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.Complex.acos()" "org.apache.commons.math.complex.Complex.sqrt1z()"
reference "org.apache.commons.math.complex.Complex.acos()" "org.apache.commons.math.complex.Complex.I : Complex"
call "org.apache.commons.math.complex.Complex.acos()" "org.apache.commons.math.complex.Complex.multiply(Complex)"
call "org.apache.commons.math.complex.Complex.acos()" "org.apache.commons.math.complex.Complex.add(Complex)"
call "org.apache.commons.math.complex.Complex.acos()" "org.apache.commons.math.complex.Complex.log()"
call "org.apache.commons.math.complex.Complex.acos()" "org.apache.commons.math.complex.Complex.negate()"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.acos()"
call "org.apache.commons.math.complex.Complex.asin()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.asin()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.Complex.asin()" "org.apache.commons.math.complex.Complex.sqrt1z()"
reference "org.apache.commons.math.complex.Complex.asin()" "org.apache.commons.math.complex.Complex.I : Complex"
call "org.apache.commons.math.complex.Complex.asin()" "org.apache.commons.math.complex.Complex.multiply(Complex)"
call "org.apache.commons.math.complex.Complex.asin()" "org.apache.commons.math.complex.Complex.add(Complex)"
call "org.apache.commons.math.complex.Complex.asin()" "org.apache.commons.math.complex.Complex.log()"
call "org.apache.commons.math.complex.Complex.asin()" "org.apache.commons.math.complex.Complex.negate()"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.asin()"
call "org.apache.commons.math.complex.Complex.atan()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.atan()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.atan()" "org.apache.commons.math.complex.Complex.I : Complex"
call "org.apache.commons.math.complex.Complex.atan()" "org.apache.commons.math.complex.Complex.add(Complex)"
call "org.apache.commons.math.complex.Complex.atan()" "org.apache.commons.math.complex.Complex.subtract(Complex)"
call "org.apache.commons.math.complex.Complex.atan()" "org.apache.commons.math.complex.Complex.divide(Complex)"
call "org.apache.commons.math.complex.Complex.atan()" "org.apache.commons.math.complex.Complex.log()"
call "org.apache.commons.math.complex.Complex.atan()" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
call "org.apache.commons.math.complex.Complex.atan()" "org.apache.commons.math.complex.Complex.multiply(Complex)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.atan()"
call "org.apache.commons.math.complex.Complex.cos()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.cos()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.cos()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.cos()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.cos()" "org.apache.commons.math.util.MathUtils.cosh(double)"
call "org.apache.commons.math.complex.Complex.cos()" "org.apache.commons.math.util.MathUtils.sinh(double)"
call "org.apache.commons.math.complex.Complex.cos()" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.cos()"
call "org.apache.commons.math.complex.Complex.cosh()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.cosh()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.cosh()" "org.apache.commons.math.complex.Complex.real : double"
call "org.apache.commons.math.complex.Complex.cosh()" "org.apache.commons.math.util.MathUtils.cosh(double)"
reference "org.apache.commons.math.complex.Complex.cosh()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.cosh()" "org.apache.commons.math.util.MathUtils.sinh(double)"
call "org.apache.commons.math.complex.Complex.cosh()" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.cosh()"
call "org.apache.commons.math.complex.Complex.exp()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.exp()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.exp()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.exp()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.exp()" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.exp()"
call "org.apache.commons.math.complex.Complex.log()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.log()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.Complex.log()" "org.apache.commons.math.complex.Complex.abs()"
reference "org.apache.commons.math.complex.Complex.log()" "org.apache.commons.math.complex.Complex.imaginary : double"
reference "org.apache.commons.math.complex.Complex.log()" "org.apache.commons.math.complex.Complex.real : double"
call "org.apache.commons.math.complex.Complex.log()" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.log()"
call "org.apache.commons.math.complex.Complex.pow(Complex)" "org.apache.commons.math.complex.Complex.log()"
call "org.apache.commons.math.complex.Complex.pow(Complex)" "org.apache.commons.math.complex.Complex.multiply(Complex)"
call "org.apache.commons.math.complex.Complex.pow(Complex)" "org.apache.commons.math.complex.Complex.exp()"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.pow(Complex)"
call "org.apache.commons.math.complex.Complex.sin()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.sin()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.sin()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.sin()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.sin()" "org.apache.commons.math.util.MathUtils.cosh(double)"
call "org.apache.commons.math.complex.Complex.sin()" "org.apache.commons.math.util.MathUtils.sinh(double)"
call "org.apache.commons.math.complex.Complex.sin()" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.sin()"
call "org.apache.commons.math.complex.Complex.sinh()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.sinh()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.sinh()" "org.apache.commons.math.complex.Complex.real : double"
call "org.apache.commons.math.complex.Complex.sinh()" "org.apache.commons.math.util.MathUtils.sinh(double)"
reference "org.apache.commons.math.complex.Complex.sinh()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.sinh()" "org.apache.commons.math.util.MathUtils.cosh(double)"
call "org.apache.commons.math.complex.Complex.sinh()" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.sinh()"
call "org.apache.commons.math.complex.Complex.sqrt()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.sqrt()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.sqrt()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.sqrt()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.sqrt()" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
call "org.apache.commons.math.complex.Complex.sqrt()" "org.apache.commons.math.complex.Complex.abs()"
call "org.apache.commons.math.complex.Complex.sqrt()" "org.apache.commons.math.util.MathUtils.indicator(double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.sqrt()"
call "org.apache.commons.math.complex.Complex.sqrt1z()" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
call "org.apache.commons.math.complex.Complex.sqrt1z()" "org.apache.commons.math.complex.Complex.multiply(Complex)"
call "org.apache.commons.math.complex.Complex.sqrt1z()" "org.apache.commons.math.complex.Complex.subtract(Complex)"
call "org.apache.commons.math.complex.Complex.sqrt1z()" "org.apache.commons.math.complex.Complex.sqrt()"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.sqrt1z()"
call "org.apache.commons.math.complex.Complex.tan()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.tan()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.tan()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.tan()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.tan()" "org.apache.commons.math.util.MathUtils.cosh(double)"
call "org.apache.commons.math.complex.Complex.tan()" "org.apache.commons.math.util.MathUtils.sinh(double)"
call "org.apache.commons.math.complex.Complex.tan()" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.tan()"
call "org.apache.commons.math.complex.Complex.tanh()" "org.apache.commons.math.complex.Complex.isNaN()"
reference "org.apache.commons.math.complex.Complex.tanh()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.tanh()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.Complex.tanh()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.Complex.tanh()" "org.apache.commons.math.util.MathUtils.cosh(double)"
call "org.apache.commons.math.complex.Complex.tanh()" "org.apache.commons.math.util.MathUtils.sinh(double)"
call "org.apache.commons.math.complex.Complex.tanh()" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.tanh()"
call "org.apache.commons.math.complex.Complex.createComplex(double,double)" "org.apache.commons.math.complex.Complex.Complex(double,double)"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.createComplex(double,double)"
call "org.apache.commons.math.complex.Complex.static {...}" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.Complex.static {...}" "org.apache.commons.math.complex.Complex.I : Complex"
reference "org.apache.commons.math.complex.Complex.static {...}" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.static {...}" "org.apache.commons.math.complex.Complex.ONE : Complex"
reference "org.apache.commons.math.complex.Complex.static {...}" "org.apache.commons.math.complex.Complex.ZERO : Complex"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.static {...}"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.serialVersionUID : long"
reference "org.apache.commons.math.complex.Complex.I : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.I : Complex"
reference "org.apache.commons.math.complex.Complex.NaN : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.Complex.ONE : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.ONE : Complex"
reference "org.apache.commons.math.complex.Complex.ZERO : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.ZERO : Complex"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.imaginary : double"
contain "org.apache.commons.math.complex.Complex" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.optimization.PointCostPair" "double[]"
reference "org.apache.commons.math.optimization.PointCostPair.PointCostPair(double[],double)" "org.apache.commons.math.optimization.PointCostPair.point : double[]"
reference "org.apache.commons.math.optimization.PointCostPair.PointCostPair(double[],double)" "org.apache.commons.math.optimization.PointCostPair.cost : double"
contain "org.apache.commons.math.optimization.PointCostPair" "org.apache.commons.math.optimization.PointCostPair.PointCostPair(double[],double)"
reference "org.apache.commons.math.optimization.PointCostPair.point : double[]" "double[]"
contain "org.apache.commons.math.optimization.PointCostPair" "org.apache.commons.math.optimization.PointCostPair.point : double[]"
contain "org.apache.commons.math.optimization.PointCostPair" "org.apache.commons.math.optimization.PointCostPair.cost : double"
reference "org.apache.commons.math.analysis.NevilleInterpolator" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm"
reference "org.apache.commons.math.analysis.NevilleInterpolator" "org.apache.commons.math.analysis.UnivariateRealInterpolator"
reference "org.apache.commons.math.analysis.NevilleInterpolator" "org.apache.commons.math.MathException"
contain "org.apache.commons.math.analysis.NevilleInterpolator" "org.apache.commons.math.analysis.NevilleInterpolator.NevilleInterpolator()"
call "org.apache.commons.math.analysis.NevilleInterpolator.interpolate(double[],double[])" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.PolynomialFunctionLagrangeForm(double[],double[])"
contain "org.apache.commons.math.analysis.NevilleInterpolator" "org.apache.commons.math.analysis.NevilleInterpolator.interpolate(double[],double[])"
contain "org.apache.commons.math.analysis.NevilleInterpolator" "org.apache.commons.math.analysis.NevilleInterpolator.serialVersionUID : long"
reference "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.NaturalComparator"
reference "org.apache.commons.math.stat.Frequency.Frequency()" "org.apache.commons.math.stat.Frequency.freqTable : TreeMap"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.Frequency()"
reference "org.apache.commons.math.stat.Frequency.Frequency(Comparator)" "org.apache.commons.math.stat.Frequency.freqTable : TreeMap"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.Frequency(Comparator)"
reference "org.apache.commons.math.stat.Frequency.toString()" "org.apache.commons.math.stat.Frequency.freqTable : TreeMap"
call "org.apache.commons.math.stat.Frequency.toString()" "org.apache.commons.math.stat.Frequency.getCount(Object)"
call "org.apache.commons.math.stat.Frequency.toString()" "org.apache.commons.math.stat.Frequency.getPct(Object)"
call "org.apache.commons.math.stat.Frequency.toString()" "org.apache.commons.math.stat.Frequency.getCumPct(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.toString()"
reference "org.apache.commons.math.stat.Frequency.addValue(Object)" "org.apache.commons.math.stat.Frequency.freqTable : TreeMap"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.addValue(Object)"
call "org.apache.commons.math.stat.Frequency.addValue(int)" "org.apache.commons.math.stat.Frequency.addValue(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.addValue(int)"
call "org.apache.commons.math.stat.Frequency.addValue(Integer)" "org.apache.commons.math.stat.Frequency.addValue(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.addValue(Integer)"
call "org.apache.commons.math.stat.Frequency.addValue(long)" "org.apache.commons.math.stat.Frequency.addValue(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.addValue(long)"
call "org.apache.commons.math.stat.Frequency.addValue(char)" "org.apache.commons.math.stat.Frequency.addValue(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.addValue(char)"
reference "org.apache.commons.math.stat.Frequency.clear()" "org.apache.commons.math.stat.Frequency.freqTable : TreeMap"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.clear()"
reference "org.apache.commons.math.stat.Frequency.valuesIterator()" "org.apache.commons.math.stat.Frequency.freqTable : TreeMap"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.valuesIterator()"
reference "org.apache.commons.math.stat.Frequency.getSumFreq()" "org.apache.commons.math.stat.Frequency.freqTable : TreeMap"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getSumFreq()"
call "org.apache.commons.math.stat.Frequency.getCount(Object)" "org.apache.commons.math.stat.Frequency.getCount(long)"
reference "org.apache.commons.math.stat.Frequency.getCount(Object)" "org.apache.commons.math.stat.Frequency.freqTable : TreeMap"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getCount(Object)"
call "org.apache.commons.math.stat.Frequency.getCount(int)" "org.apache.commons.math.stat.Frequency.getCount(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getCount(int)"
call "org.apache.commons.math.stat.Frequency.getCount(long)" "org.apache.commons.math.stat.Frequency.getCount(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getCount(long)"
call "org.apache.commons.math.stat.Frequency.getCount(char)" "org.apache.commons.math.stat.Frequency.getCount(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getCount(char)"
call "org.apache.commons.math.stat.Frequency.getPct(Object)" "org.apache.commons.math.stat.Frequency.getSumFreq()"
call "org.apache.commons.math.stat.Frequency.getPct(Object)" "org.apache.commons.math.stat.Frequency.getCount(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getPct(Object)"
call "org.apache.commons.math.stat.Frequency.getPct(int)" "org.apache.commons.math.stat.Frequency.getPct(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getPct(int)"
call "org.apache.commons.math.stat.Frequency.getPct(long)" "org.apache.commons.math.stat.Frequency.getPct(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getPct(long)"
call "org.apache.commons.math.stat.Frequency.getPct(char)" "org.apache.commons.math.stat.Frequency.getPct(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getPct(char)"
call "org.apache.commons.math.stat.Frequency.getCumFreq(Object)" "org.apache.commons.math.stat.Frequency.getSumFreq()"
call "org.apache.commons.math.stat.Frequency.getCumFreq(Object)" "org.apache.commons.math.stat.Frequency.getCumFreq(long)"
reference "org.apache.commons.math.stat.Frequency.getCumFreq(Object)" "org.apache.commons.math.stat.Frequency.freqTable : TreeMap"
call "org.apache.commons.math.stat.Frequency.getCumFreq(Object)" "org.apache.commons.math.stat.Frequency.NaturalComparator.NaturalComparator(Frequency.1)"
call "org.apache.commons.math.stat.Frequency.getCumFreq(Object)" "org.apache.commons.math.stat.Frequency.valuesIterator()"
call "org.apache.commons.math.stat.Frequency.getCumFreq(Object)" "org.apache.commons.math.stat.Frequency.getCount(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getCumFreq(Object)"
call "org.apache.commons.math.stat.Frequency.getCumFreq(int)" "org.apache.commons.math.stat.Frequency.getCumFreq(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getCumFreq(int)"
call "org.apache.commons.math.stat.Frequency.getCumFreq(long)" "org.apache.commons.math.stat.Frequency.getCumFreq(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getCumFreq(long)"
call "org.apache.commons.math.stat.Frequency.getCumFreq(char)" "org.apache.commons.math.stat.Frequency.getCumFreq(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getCumFreq(char)"
call "org.apache.commons.math.stat.Frequency.getCumPct(Object)" "org.apache.commons.math.stat.Frequency.getSumFreq()"
call "org.apache.commons.math.stat.Frequency.getCumPct(Object)" "org.apache.commons.math.stat.Frequency.getCumFreq(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getCumPct(Object)"
call "org.apache.commons.math.stat.Frequency.getCumPct(int)" "org.apache.commons.math.stat.Frequency.getCumPct(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getCumPct(int)"
call "org.apache.commons.math.stat.Frequency.getCumPct(long)" "org.apache.commons.math.stat.Frequency.getCumPct(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getCumPct(long)"
call "org.apache.commons.math.stat.Frequency.getCumPct(char)" "org.apache.commons.math.stat.Frequency.getCumPct(Object)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.getCumPct(char)"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.serialVersionUID : long"
contain "org.apache.commons.math.stat.Frequency" "org.apache.commons.math.stat.Frequency.freqTable : TreeMap"
reference "org.apache.commons.math.distribution.BinomialDistribution" "org.apache.commons.math.distribution.IntegerDistribution"
contain "org.apache.commons.math.distribution.BinomialDistribution" "org.apache.commons.math.distribution.BinomialDistribution.getNumberOfTrials()"
contain "org.apache.commons.math.distribution.BinomialDistribution" "org.apache.commons.math.distribution.BinomialDistribution.getProbabilityOfSuccess()"
contain "org.apache.commons.math.distribution.BinomialDistribution" "org.apache.commons.math.distribution.BinomialDistribution.setNumberOfTrials(int)"
contain "org.apache.commons.math.distribution.BinomialDistribution" "org.apache.commons.math.distribution.BinomialDistribution.setProbabilityOfSuccess(double)"
reference "org.apache.commons.math.random.UniformRandomGenerator" "org.apache.commons.math.random.NormalizedRandomGenerator"
reference "org.apache.commons.math.random.UniformRandomGenerator" "org.apache.commons.math.random.RandomGenerator"
reference "org.apache.commons.math.random.UniformRandomGenerator.UniformRandomGenerator(RandomGenerator)" "org.apache.commons.math.random.UniformRandomGenerator.generator : RandomGenerator"
contain "org.apache.commons.math.random.UniformRandomGenerator" "org.apache.commons.math.random.UniformRandomGenerator.UniformRandomGenerator(RandomGenerator)"
reference "org.apache.commons.math.random.UniformRandomGenerator.nextNormalizedDouble()" "org.apache.commons.math.random.UniformRandomGenerator.SQRT3 : double"
reference "org.apache.commons.math.random.UniformRandomGenerator.nextNormalizedDouble()" "org.apache.commons.math.random.UniformRandomGenerator.generator : RandomGenerator"
call "org.apache.commons.math.random.UniformRandomGenerator.nextNormalizedDouble()" "org.apache.commons.math.random.RandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.UniformRandomGenerator" "org.apache.commons.math.random.UniformRandomGenerator.nextNormalizedDouble()"
reference "org.apache.commons.math.random.UniformRandomGenerator.static {...}" "org.apache.commons.math.random.UniformRandomGenerator.SQRT3 : double"
contain "org.apache.commons.math.random.UniformRandomGenerator" "org.apache.commons.math.random.UniformRandomGenerator.static {...}"
reference "org.apache.commons.math.random.UniformRandomGenerator.generator : RandomGenerator" "org.apache.commons.math.random.RandomGenerator"
contain "org.apache.commons.math.random.UniformRandomGenerator" "org.apache.commons.math.random.UniformRandomGenerator.generator : RandomGenerator"
contain "org.apache.commons.math.random.UniformRandomGenerator" "org.apache.commons.math.random.UniformRandomGenerator.SQRT3 : double"
reference "org.apache.commons.math.fraction.FractionConversionException" "org.apache.commons.math.MaxIterationsExceededException"
call "org.apache.commons.math.fraction.FractionConversionException.FractionConversionException(double,int)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int,String,Object[])"
contain "org.apache.commons.math.fraction.FractionConversionException" "org.apache.commons.math.fraction.FractionConversionException.FractionConversionException(double,int)"
contain "org.apache.commons.math.fraction.FractionConversionException" "org.apache.commons.math.fraction.FractionConversionException.serialVersionUID : long"
reference "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.AbstractContinuousDistribution"
reference "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistribution"
reference "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.special.Erf"
call "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution()"
reference "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double)" "org.apache.commons.math.distribution.NormalDistributionImpl.mean : double"
reference "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double)" "org.apache.commons.math.distribution.NormalDistributionImpl.standardDeviation : double"
call "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double)" "org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double)"
call "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double)" "org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double)"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double)"
call "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl()" "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double)"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl()"
reference "org.apache.commons.math.distribution.NormalDistributionImpl.getMean()" "org.apache.commons.math.distribution.NormalDistributionImpl.mean : double"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.getMean()"
reference "org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double)" "org.apache.commons.math.distribution.NormalDistributionImpl.mean : double"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double)"
reference "org.apache.commons.math.distribution.NormalDistributionImpl.getStandardDeviation()" "org.apache.commons.math.distribution.NormalDistributionImpl.standardDeviation : double"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.getStandardDeviation()"
reference "org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double)" "org.apache.commons.math.distribution.NormalDistributionImpl.standardDeviation : double"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double)"
reference "org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.NormalDistributionImpl.mean : double"
reference "org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.NormalDistributionImpl.standardDeviation : double"
call "org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.special.Erf.erf(double)"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double)"
call "org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(double)"
call "org.apache.commons.math.distribution.NormalDistributionImpl.getDomainLowerBound(double)" "org.apache.commons.math.distribution.NormalDistributionImpl.getMean()"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.getDomainLowerBound(double)"
call "org.apache.commons.math.distribution.NormalDistributionImpl.getDomainUpperBound(double)" "org.apache.commons.math.distribution.NormalDistributionImpl.getMean()"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.getDomainUpperBound(double)"
call "org.apache.commons.math.distribution.NormalDistributionImpl.getInitialDomain(double)" "org.apache.commons.math.distribution.NormalDistributionImpl.getMean()"
call "org.apache.commons.math.distribution.NormalDistributionImpl.getInitialDomain(double)" "org.apache.commons.math.distribution.NormalDistributionImpl.getStandardDeviation()"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.getInitialDomain(double)"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.serialVersionUID : long"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.mean : double"
contain "org.apache.commons.math.distribution.NormalDistributionImpl" "org.apache.commons.math.distribution.NormalDistributionImpl.standardDeviation : double"
contain "org.apache.commons.math.ode.FixedStepHandler" "org.apache.commons.math.ode.FixedStepHandler.handleStep(double,double[],boolean)"
reference "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.distribution.TDistributionImpl"
reference "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTest"
reference "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.StatUtils"
reference "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.descriptive.StatisticalSummary"
reference "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.distribution.DistributionFactory"
reference "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.distribution.TDistribution"
call "org.apache.commons.math.stat.inference.TTestImpl.TTestImpl()" "org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double)"
call "org.apache.commons.math.stat.inference.TTestImpl.TTestImpl()" "org.apache.commons.math.stat.inference.TTestImpl.TTestImpl(TDistribution)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.TTestImpl()"
call "org.apache.commons.math.stat.inference.TTestImpl.TTestImpl(TDistribution)" "org.apache.commons.math.stat.inference.TTestImpl.setDistribution(TDistribution)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.TTestImpl(TDistribution)"
call "org.apache.commons.math.stat.inference.TTestImpl.pairedT(double[],double[])" "org.apache.commons.math.stat.StatUtils.meanDifference(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.pairedT(double[],double[])" "org.apache.commons.math.stat.StatUtils.varianceDifference(double[],double[],double)"
call "org.apache.commons.math.stat.inference.TTestImpl.pairedT(double[],double[])" "org.apache.commons.math.stat.inference.TTestImpl.t(double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.pairedT(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.pairedTTest(double[],double[])" "org.apache.commons.math.stat.StatUtils.meanDifference(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.pairedTTest(double[],double[])" "org.apache.commons.math.stat.StatUtils.varianceDifference(double[],double[],double)"
call "org.apache.commons.math.stat.inference.TTestImpl.pairedTTest(double[],double[])" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.pairedTTest(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.pairedTTest(double[],double[],double)" "org.apache.commons.math.stat.inference.TTestImpl.pairedTTest(double[],double[])"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.pairedTTest(double[],double[],double)"
call "org.apache.commons.math.stat.inference.TTestImpl.t(double,double[])" "org.apache.commons.math.stat.StatUtils.mean(double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.t(double,double[])" "org.apache.commons.math.stat.StatUtils.variance(double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.t(double,double[])" "org.apache.commons.math.stat.inference.TTestImpl.t(double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.t(double,double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.t(double,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getN()"
call "org.apache.commons.math.stat.inference.TTestImpl.t(double,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMean()"
call "org.apache.commons.math.stat.inference.TTestImpl.t(double,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getVariance()"
call "org.apache.commons.math.stat.inference.TTestImpl.t(double,StatisticalSummary)" "org.apache.commons.math.stat.inference.TTestImpl.t(double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.t(double,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticT(double[],double[])" "org.apache.commons.math.stat.StatUtils.mean(double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticT(double[],double[])" "org.apache.commons.math.stat.StatUtils.variance(double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticT(double[],double[])" "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticT(double,double,double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticT(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.t(double[],double[])" "org.apache.commons.math.stat.StatUtils.mean(double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.t(double[],double[])" "org.apache.commons.math.stat.StatUtils.variance(double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.t(double[],double[])" "org.apache.commons.math.stat.inference.TTestImpl.t(double,double,double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.t(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.t(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getN()"
call "org.apache.commons.math.stat.inference.TTestImpl.t(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMean()"
call "org.apache.commons.math.stat.inference.TTestImpl.t(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getVariance()"
call "org.apache.commons.math.stat.inference.TTestImpl.t(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.inference.TTestImpl.t(double,double,double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.t(StatisticalSummary,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticT(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getN()"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticT(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMean()"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticT(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getVariance()"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticT(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticT(double,double,double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticT(StatisticalSummary,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double[])" "org.apache.commons.math.stat.StatUtils.mean(double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double[])" "org.apache.commons.math.stat.StatUtils.variance(double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double[])" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double[],double)" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double[])"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double[],double)"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getN()"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMean()"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getVariance()"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,StatisticalSummary)" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,StatisticalSummary,double)" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,StatisticalSummary,double)"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double[],double[])" "org.apache.commons.math.stat.StatUtils.mean(double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double[],double[])" "org.apache.commons.math.stat.StatUtils.variance(double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double[],double[])" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double[],double[])" "org.apache.commons.math.stat.StatUtils.mean(double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double[],double[])" "org.apache.commons.math.stat.StatUtils.variance(double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double[],double[])" "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double,double,double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double[],double[],double)" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double[],double[])"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double[],double[],double)"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double[],double[],double)" "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double[],double[])"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double[],double[],double)"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getN()"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMean()"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getVariance()"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.tTest(StatisticalSummary,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getN()"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMean()"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getVariance()"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double,double,double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(StatisticalSummary,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(StatisticalSummary,StatisticalSummary,double)" "org.apache.commons.math.stat.inference.TTestImpl.tTest(StatisticalSummary,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.tTest(StatisticalSummary,StatisticalSummary,double)"
call "org.apache.commons.math.stat.inference.TTestImpl.getDistributionFactory()" "org.apache.commons.math.distribution.DistributionFactory.newInstance()"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.getDistributionFactory()"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.df(double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.t(double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.t(double,double,double,double,double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticT(double,double,double,double,double,double)"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double)" "org.apache.commons.math.stat.inference.TTestImpl.t(double,double,double,double)"
reference "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double)" "org.apache.commons.math.stat.inference.TTestImpl.distribution : TDistribution"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double)" "org.apache.commons.math.distribution.TDistribution.setDegreesOfFreedom(double)"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double)" "org.apache.commons.math.distribution.TDistribution.cumulativeProbability(double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double)"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double,double,double)" "org.apache.commons.math.stat.inference.TTestImpl.t(double,double,double,double,double,double)"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double,double,double)" "org.apache.commons.math.stat.inference.TTestImpl.df(double,double,double,double)"
reference "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double,double,double)" "org.apache.commons.math.stat.inference.TTestImpl.distribution : TDistribution"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double,double,double)" "org.apache.commons.math.distribution.TDistribution.setDegreesOfFreedom(double)"
call "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double,double,double)" "org.apache.commons.math.distribution.TDistribution.cumulativeProbability(double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.tTest(double,double,double,double,double,double)"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double,double,double,double,double,double)" "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticT(double,double,double,double,double,double)"
reference "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double,double,double,double,double,double)" "org.apache.commons.math.stat.inference.TTestImpl.distribution : TDistribution"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double,double,double,double,double,double)" "org.apache.commons.math.distribution.TDistribution.setDegreesOfFreedom(double)"
call "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double,double,double,double,double,double)" "org.apache.commons.math.distribution.TDistribution.cumulativeProbability(double,double)"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.homoscedasticTTest(double,double,double,double,double,double)"
reference "org.apache.commons.math.stat.inference.TTestImpl.setDistribution(TDistribution)" "org.apache.commons.math.stat.inference.TTestImpl.distribution : TDistribution"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.setDistribution(TDistribution)"
reference "org.apache.commons.math.stat.inference.TTestImpl.distribution : TDistribution" "org.apache.commons.math.distribution.TDistribution"
contain "org.apache.commons.math.stat.inference.TTestImpl" "org.apache.commons.math.stat.inference.TTestImpl.distribution : TDistribution"
reference "org.apache.commons.math.ode.FirstOrderIntegrator" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.FirstOrderIntegrator" "org.apache.commons.math.ode.IntegratorException"
contain "org.apache.commons.math.ode.FirstOrderIntegrator" "org.apache.commons.math.ode.FirstOrderIntegrator.getName()"
contain "org.apache.commons.math.ode.FirstOrderIntegrator" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
contain "org.apache.commons.math.ode.FirstOrderIntegrator" "org.apache.commons.math.ode.FirstOrderIntegrator.getStepHandler()"
contain "org.apache.commons.math.ode.FirstOrderIntegrator" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
contain "org.apache.commons.math.ode.FirstOrderIntegrator" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
contain "org.apache.commons.math.ode.FirstOrderIntegrator" "org.apache.commons.math.ode.FirstOrderIntegrator.getCurrentStepStart()"
contain "org.apache.commons.math.ode.FirstOrderIntegrator" "org.apache.commons.math.ode.FirstOrderIntegrator.getCurrentSignedStepsize()"
reference "org.apache.commons.math.special.Erf" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.special.Erf" "org.apache.commons.math.special.Gamma"
contain "org.apache.commons.math.special.Erf" "org.apache.commons.math.special.Erf.Erf()"
call "org.apache.commons.math.special.Erf.erf(double)" "org.apache.commons.math.special.Gamma.regularizedGammaP(double,double,double,int)"
contain "org.apache.commons.math.special.Erf" "org.apache.commons.math.special.Erf.erf(double)"
contain "org.apache.commons.math.special.Erf" "org.apache.commons.math.special.Erf.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.moment.FourthMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.moment.Variance"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.moment.SecondMoment"
call "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis()" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.incMoment : boolean"
call "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis()" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.FourthMoment()"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis()" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.moment : FourthMoment"
contain "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis()"
call "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis(FourthMoment)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis(FourthMoment)" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.incMoment : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis(FourthMoment)" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.moment : FourthMoment"
contain "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis(FourthMoment)"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.increment(double)" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.incMoment : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.increment(double)" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.moment : FourthMoment"
call "org.apache.commons.math.stat.descriptive.moment.Kurtosis.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.increment(double)"
contain "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.increment(double)"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.getResult()" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.moment : FourthMoment"
call "org.apache.commons.math.stat.descriptive.moment.Kurtosis.getResult()" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.getN()"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.getResult()" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.m2 : double"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.getResult()" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.n : long"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.getResult()" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.m4 : double"
contain "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.getResult()"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.clear()" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.incMoment : boolean"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.clear()" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.moment : FourthMoment"
call "org.apache.commons.math.stat.descriptive.moment.Kurtosis.clear()" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.clear()"
contain "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.clear()"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.getN()" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.moment : FourthMoment"
call "org.apache.commons.math.stat.descriptive.moment.Kurtosis.getN()" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.getN()"
contain "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.getN()"
call "org.apache.commons.math.stat.descriptive.moment.Kurtosis.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.test(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.moment.Kurtosis.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()"
call "org.apache.commons.math.stat.descriptive.moment.Kurtosis.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Variance.incrementAll(double[],int,int)"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Variance.moment : SecondMoment"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.m1 : double"
call "org.apache.commons.math.stat.descriptive.moment.Kurtosis.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Variance.getResult()"
contain "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.moment.Kurtosis.moment : FourthMoment" "org.apache.commons.math.stat.descriptive.moment.FourthMoment"
contain "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.moment : FourthMoment"
contain "org.apache.commons.math.stat.descriptive.moment.Kurtosis" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.incMoment : boolean"
reference "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54StepInterpolator"
reference "org.apache.commons.math.ode.DormandPrince54Integrator" "double[]"
reference "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)" "org.apache.commons.math.ode.DormandPrince54Integrator.staticC : double[]"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)" "org.apache.commons.math.ode.DormandPrince54Integrator.staticA : double[][]"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)" "org.apache.commons.math.ode.DormandPrince54Integrator.staticB : double[]"
call "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator()"
call "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.DormandPrince54Integrator.staticC : double[]"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.DormandPrince54Integrator.staticA : double[][]"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.DormandPrince54Integrator.staticB : double[]"
call "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator()"
call "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double[],double[])"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.getName()"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.getOrder()"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.estimateError(double[][],double[],double[],double)" "org.apache.commons.math.ode.DormandPrince54Integrator.vecAbsoluteTolerance : double[]"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.estimateError(double[][],double[],double[],double)" "org.apache.commons.math.ode.DormandPrince54Integrator.scalAbsoluteTolerance : double"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.estimateError(double[][],double[],double[],double)" "org.apache.commons.math.ode.DormandPrince54Integrator.scalRelativeTolerance : double"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.estimateError(double[][],double[],double[],double)" "org.apache.commons.math.ode.DormandPrince54Integrator.vecRelativeTolerance : double[]"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.estimateError(double[][],double[],double[],double)"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.static {...}" "org.apache.commons.math.ode.DormandPrince54Integrator.staticC : double[]"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.static {...}" "org.apache.commons.math.ode.DormandPrince54Integrator.staticA : double[][]"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.static {...}" "org.apache.commons.math.ode.DormandPrince54Integrator.staticB : double[]"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.static {...}"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.methodName : String"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.staticC : double[]" "double[]"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.staticC : double[]"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.staticA : double[][]" "double[][]"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.staticA : double[][]"
reference "org.apache.commons.math.ode.DormandPrince54Integrator.staticB : double[]" "double[]"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.staticB : double[]"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.e1 : double"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.e3 : double"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.e4 : double"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.e5 : double"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.e6 : double"
contain "org.apache.commons.math.ode.DormandPrince54Integrator" "org.apache.commons.math.ode.DormandPrince54Integrator.e7 : double"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfSquares" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.SumOfSquares()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.SumOfSquares()" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.n : long"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.SumOfSquares()" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.value : double"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfSquares" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.SumOfSquares()"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.increment(double)" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.n : long"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.increment(double)" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.value : double"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfSquares" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.increment(double)"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.getResult()" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.value : double"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfSquares" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.getResult()"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.getN()" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.n : long"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfSquares" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.getN()"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.clear()" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.value : double"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.clear()" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.n : long"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfSquares" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.clear()"
call "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.test(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfSquares" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfSquares" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfSquares" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.n : long"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfSquares" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.value : double"
reference "org.apache.commons.math.stat.descriptive.moment.SecondMoment" "org.apache.commons.math.stat.descriptive.moment.FirstMoment"
call "org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.FirstMoment()"
reference "org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.m2 : double"
contain "org.apache.commons.math.stat.descriptive.moment.SecondMoment" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment()"
reference "org.apache.commons.math.stat.descriptive.moment.SecondMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.n : long"
reference "org.apache.commons.math.stat.descriptive.moment.SecondMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.m2 : double"
reference "org.apache.commons.math.stat.descriptive.moment.SecondMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.m1 : double"
call "org.apache.commons.math.stat.descriptive.moment.SecondMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.increment(double)"
reference "org.apache.commons.math.stat.descriptive.moment.SecondMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.dev : double"
reference "org.apache.commons.math.stat.descriptive.moment.SecondMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.nDev : double"
contain "org.apache.commons.math.stat.descriptive.moment.SecondMoment" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.increment(double)"
call "org.apache.commons.math.stat.descriptive.moment.SecondMoment.clear()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.clear()"
reference "org.apache.commons.math.stat.descriptive.moment.SecondMoment.clear()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.m2 : double"
contain "org.apache.commons.math.stat.descriptive.moment.SecondMoment" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.clear()"
reference "org.apache.commons.math.stat.descriptive.moment.SecondMoment.getResult()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.m2 : double"
contain "org.apache.commons.math.stat.descriptive.moment.SecondMoment" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.getResult()"
contain "org.apache.commons.math.stat.descriptive.moment.SecondMoment" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.moment.SecondMoment" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.m2 : double"
reference "org.apache.commons.math.geometry.CardanEulerSingularityException" "org.apache.commons.math.MathException"
call "org.apache.commons.math.geometry.CardanEulerSingularityException.CardanEulerSingularityException(boolean)" "org.apache.commons.math.MathException.MathException(String,Object[])"
contain "org.apache.commons.math.geometry.CardanEulerSingularityException" "org.apache.commons.math.geometry.CardanEulerSingularityException.CardanEulerSingularityException(boolean)"
contain "org.apache.commons.math.geometry.CardanEulerSingularityException" "org.apache.commons.math.geometry.CardanEulerSingularityException.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.rank.Median" "org.apache.commons.math.stat.descriptive.rank.Percentile"
call "org.apache.commons.math.stat.descriptive.rank.Median.Median()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)"
contain "org.apache.commons.math.stat.descriptive.rank.Median" "org.apache.commons.math.stat.descriptive.rank.Median.Median()"
contain "org.apache.commons.math.stat.descriptive.rank.Median" "org.apache.commons.math.stat.descriptive.rank.Median.serialVersionUID : long"
reference "org.apache.commons.math.geometry.NotARotationMatrixException" "org.apache.commons.math.MathException"
call "org.apache.commons.math.geometry.NotARotationMatrixException.NotARotationMatrixException(String,String[])" "org.apache.commons.math.MathException.MathException(String,Object[])"
contain "org.apache.commons.math.geometry.NotARotationMatrixException" "org.apache.commons.math.geometry.NotARotationMatrixException.NotARotationMatrixException(String,String[])"
contain "org.apache.commons.math.geometry.NotARotationMatrixException" "org.apache.commons.math.geometry.NotARotationMatrixException.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.util.MathUtils"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.AbstractUnivariateStatistic()"
contain "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.evaluate(double[])" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.test(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.clear()"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.incrementAll(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.getResult()"
contain "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.clear()"
contain "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.getResult()"
contain "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.increment(double)"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.incrementAll(double[])" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.incrementAll(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.incrementAll(double[])"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.incrementAll(double[],int,int)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.test(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.incrementAll(double[],int,int)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.increment(double)"
contain "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.incrementAll(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.equals(Object)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.getResult()"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.equals(Object)" "org.apache.commons.math.util.MathUtils.equals(double,double)"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.equals(Object)" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.getN()"
contain "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.equals(Object)"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.hashCode()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.getResult()"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.hashCode()" "org.apache.commons.math.util.MathUtils.hash(double)"
call "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.hashCode()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.getN()"
contain "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.hashCode()"
contain "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.serialVersionUID : long"
reference "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.RandomDataImpl"
reference "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.EmpiricalDistributionImpl"
reference "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.EmpiricalDistribution"
reference "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.stat.descriptive.StatisticalSummary"
reference "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.RandomData"
reference "org.apache.commons.math.random.ValueServer.ValueServer()" "org.apache.commons.math.random.ValueServer.mode : int"
reference "org.apache.commons.math.random.ValueServer.ValueServer()" "org.apache.commons.math.random.ValueServer.valuesFileURL : URL"
reference "org.apache.commons.math.random.ValueServer.ValueServer()" "org.apache.commons.math.random.ValueServer.mu : double"
reference "org.apache.commons.math.random.ValueServer.ValueServer()" "org.apache.commons.math.random.ValueServer.sigma : double"
reference "org.apache.commons.math.random.ValueServer.ValueServer()" "org.apache.commons.math.random.ValueServer.empiricalDistribution : EmpiricalDistribution"
reference "org.apache.commons.math.random.ValueServer.ValueServer()" "org.apache.commons.math.random.ValueServer.filePointer : BufferedReader"
call "org.apache.commons.math.random.ValueServer.ValueServer()" "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl()"
reference "org.apache.commons.math.random.ValueServer.ValueServer()" "org.apache.commons.math.random.ValueServer.randomData : RandomData"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.ValueServer()"
reference "org.apache.commons.math.random.ValueServer.getNext()" "org.apache.commons.math.random.ValueServer.mode : int"
call "org.apache.commons.math.random.ValueServer.getNext()" "org.apache.commons.math.random.ValueServer.getNextDigest()"
call "org.apache.commons.math.random.ValueServer.getNext()" "org.apache.commons.math.random.ValueServer.getNextReplay()"
call "org.apache.commons.math.random.ValueServer.getNext()" "org.apache.commons.math.random.ValueServer.getNextUniform()"
call "org.apache.commons.math.random.ValueServer.getNext()" "org.apache.commons.math.random.ValueServer.getNextExponential()"
call "org.apache.commons.math.random.ValueServer.getNext()" "org.apache.commons.math.random.ValueServer.getNextGaussian()"
reference "org.apache.commons.math.random.ValueServer.getNext()" "org.apache.commons.math.random.ValueServer.mu : double"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.getNext()"
call "org.apache.commons.math.random.ValueServer.fill(double[])" "org.apache.commons.math.random.ValueServer.getNext()"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.fill(double[])"
call "org.apache.commons.math.random.ValueServer.fill(int)" "org.apache.commons.math.random.ValueServer.getNext()"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.fill(int)"
call "org.apache.commons.math.random.ValueServer.computeDistribution()" "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl()"
reference "org.apache.commons.math.random.ValueServer.computeDistribution()" "org.apache.commons.math.random.ValueServer.empiricalDistribution : EmpiricalDistribution"
reference "org.apache.commons.math.random.ValueServer.computeDistribution()" "org.apache.commons.math.random.ValueServer.valuesFileURL : URL"
call "org.apache.commons.math.random.ValueServer.computeDistribution()" "org.apache.commons.math.random.EmpiricalDistribution.load(URL)"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.computeDistribution()"
call "org.apache.commons.math.random.ValueServer.computeDistribution(int)" "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl(int)"
reference "org.apache.commons.math.random.ValueServer.computeDistribution(int)" "org.apache.commons.math.random.ValueServer.empiricalDistribution : EmpiricalDistribution"
reference "org.apache.commons.math.random.ValueServer.computeDistribution(int)" "org.apache.commons.math.random.ValueServer.valuesFileURL : URL"
call "org.apache.commons.math.random.ValueServer.computeDistribution(int)" "org.apache.commons.math.random.EmpiricalDistribution.load(URL)"
call "org.apache.commons.math.random.ValueServer.computeDistribution(int)" "org.apache.commons.math.random.EmpiricalDistribution.getSampleStats()"
call "org.apache.commons.math.random.ValueServer.computeDistribution(int)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMean()"
reference "org.apache.commons.math.random.ValueServer.computeDistribution(int)" "org.apache.commons.math.random.ValueServer.mu : double"
call "org.apache.commons.math.random.ValueServer.computeDistribution(int)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getStandardDeviation()"
reference "org.apache.commons.math.random.ValueServer.computeDistribution(int)" "org.apache.commons.math.random.ValueServer.sigma : double"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.computeDistribution(int)"
reference "org.apache.commons.math.random.ValueServer.getMode()" "org.apache.commons.math.random.ValueServer.mode : int"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.getMode()"
reference "org.apache.commons.math.random.ValueServer.setMode(int)" "org.apache.commons.math.random.ValueServer.mode : int"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.setMode(int)"
reference "org.apache.commons.math.random.ValueServer.getValuesFileURL()" "org.apache.commons.math.random.ValueServer.valuesFileURL : URL"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.getValuesFileURL()"
reference "org.apache.commons.math.random.ValueServer.setValuesFileURL(String)" "org.apache.commons.math.random.ValueServer.valuesFileURL : URL"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.setValuesFileURL(String)"
reference "org.apache.commons.math.random.ValueServer.setValuesFileURL(URL)" "org.apache.commons.math.random.ValueServer.valuesFileURL : URL"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.setValuesFileURL(URL)"
reference "org.apache.commons.math.random.ValueServer.getEmpiricalDistribution()" "org.apache.commons.math.random.ValueServer.empiricalDistribution : EmpiricalDistribution"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.getEmpiricalDistribution()"
reference "org.apache.commons.math.random.ValueServer.resetReplayFile()" "org.apache.commons.math.random.ValueServer.filePointer : BufferedReader"
reference "org.apache.commons.math.random.ValueServer.resetReplayFile()" "org.apache.commons.math.random.ValueServer.valuesFileURL : URL"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.resetReplayFile()"
reference "org.apache.commons.math.random.ValueServer.closeReplayFile()" "org.apache.commons.math.random.ValueServer.filePointer : BufferedReader"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.closeReplayFile()"
reference "org.apache.commons.math.random.ValueServer.getMu()" "org.apache.commons.math.random.ValueServer.mu : double"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.getMu()"
reference "org.apache.commons.math.random.ValueServer.setMu(double)" "org.apache.commons.math.random.ValueServer.mu : double"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.setMu(double)"
reference "org.apache.commons.math.random.ValueServer.getSigma()" "org.apache.commons.math.random.ValueServer.sigma : double"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.getSigma()"
reference "org.apache.commons.math.random.ValueServer.setSigma(double)" "org.apache.commons.math.random.ValueServer.sigma : double"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.setSigma(double)"
reference "org.apache.commons.math.random.ValueServer.getNextDigest()" "org.apache.commons.math.random.ValueServer.empiricalDistribution : EmpiricalDistribution"
call "org.apache.commons.math.random.ValueServer.getNextDigest()" "org.apache.commons.math.random.EmpiricalDistribution.getBinStats()"
call "org.apache.commons.math.random.ValueServer.getNextDigest()" "org.apache.commons.math.random.EmpiricalDistribution.getNextValue()"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.getNextDigest()"
reference "org.apache.commons.math.random.ValueServer.getNextReplay()" "org.apache.commons.math.random.ValueServer.filePointer : BufferedReader"
call "org.apache.commons.math.random.ValueServer.getNextReplay()" "org.apache.commons.math.random.ValueServer.resetReplayFile()"
call "org.apache.commons.math.random.ValueServer.getNextReplay()" "org.apache.commons.math.random.ValueServer.closeReplayFile()"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.getNextReplay()"
reference "org.apache.commons.math.random.ValueServer.getNextUniform()" "org.apache.commons.math.random.ValueServer.randomData : RandomData"
reference "org.apache.commons.math.random.ValueServer.getNextUniform()" "org.apache.commons.math.random.ValueServer.mu : double"
call "org.apache.commons.math.random.ValueServer.getNextUniform()" "org.apache.commons.math.random.RandomData.nextUniform(double,double)"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.getNextUniform()"
reference "org.apache.commons.math.random.ValueServer.getNextExponential()" "org.apache.commons.math.random.ValueServer.randomData : RandomData"
reference "org.apache.commons.math.random.ValueServer.getNextExponential()" "org.apache.commons.math.random.ValueServer.mu : double"
call "org.apache.commons.math.random.ValueServer.getNextExponential()" "org.apache.commons.math.random.RandomData.nextExponential(double)"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.getNextExponential()"
reference "org.apache.commons.math.random.ValueServer.getNextGaussian()" "org.apache.commons.math.random.ValueServer.randomData : RandomData"
reference "org.apache.commons.math.random.ValueServer.getNextGaussian()" "org.apache.commons.math.random.ValueServer.mu : double"
reference "org.apache.commons.math.random.ValueServer.getNextGaussian()" "org.apache.commons.math.random.ValueServer.sigma : double"
call "org.apache.commons.math.random.ValueServer.getNextGaussian()" "org.apache.commons.math.random.RandomData.nextGaussian(double,double)"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.getNextGaussian()"
reference "org.apache.commons.math.random.ValueServer.ValueServer(RandomData)" "org.apache.commons.math.random.ValueServer.mode : int"
reference "org.apache.commons.math.random.ValueServer.ValueServer(RandomData)" "org.apache.commons.math.random.ValueServer.valuesFileURL : URL"
reference "org.apache.commons.math.random.ValueServer.ValueServer(RandomData)" "org.apache.commons.math.random.ValueServer.mu : double"
reference "org.apache.commons.math.random.ValueServer.ValueServer(RandomData)" "org.apache.commons.math.random.ValueServer.sigma : double"
reference "org.apache.commons.math.random.ValueServer.ValueServer(RandomData)" "org.apache.commons.math.random.ValueServer.empiricalDistribution : EmpiricalDistribution"
reference "org.apache.commons.math.random.ValueServer.ValueServer(RandomData)" "org.apache.commons.math.random.ValueServer.filePointer : BufferedReader"
call "org.apache.commons.math.random.ValueServer.ValueServer(RandomData)" "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl()"
reference "org.apache.commons.math.random.ValueServer.ValueServer(RandomData)" "org.apache.commons.math.random.ValueServer.randomData : RandomData"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.ValueServer(RandomData)"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.mode : int"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.valuesFileURL : URL"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.mu : double"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.sigma : double"
reference "org.apache.commons.math.random.ValueServer.empiricalDistribution : EmpiricalDistribution" "org.apache.commons.math.random.EmpiricalDistribution"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.empiricalDistribution : EmpiricalDistribution"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.filePointer : BufferedReader"
reference "org.apache.commons.math.random.ValueServer.randomData : RandomData" "org.apache.commons.math.random.RandomData"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.randomData : RandomData"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.DIGEST_MODE : int"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.REPLAY_MODE : int"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.UNIFORM_MODE : int"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.EXPONENTIAL_MODE : int"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.GAUSSIAN_MODE : int"
contain "org.apache.commons.math.random.ValueServer" "org.apache.commons.math.random.ValueServer.CONSTANT_MODE : int"
reference "org.apache.commons.math.analysis.TrapezoidIntegrator" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.analysis.TrapezoidIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl"
reference "org.apache.commons.math.analysis.TrapezoidIntegrator" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.TrapezoidIntegrator" "org.apache.commons.math.analysis.UnivariateRealFunction"
call "org.apache.commons.math.analysis.TrapezoidIntegrator.TrapezoidIntegrator(UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.UnivariateRealIntegratorImpl(UnivariateRealFunction,int)"
contain "org.apache.commons.math.analysis.TrapezoidIntegrator" "org.apache.commons.math.analysis.TrapezoidIntegrator.TrapezoidIntegrator(UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.TrapezoidIntegrator.stage(double,double,int)" "org.apache.commons.math.analysis.TrapezoidIntegrator.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.TrapezoidIntegrator.stage(double,double,int)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
reference "org.apache.commons.math.analysis.TrapezoidIntegrator.stage(double,double,int)" "org.apache.commons.math.analysis.TrapezoidIntegrator.s : double"
contain "org.apache.commons.math.analysis.TrapezoidIntegrator" "org.apache.commons.math.analysis.TrapezoidIntegrator.stage(double,double,int)"
call "org.apache.commons.math.analysis.TrapezoidIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.TrapezoidIntegrator.clearResult()"
call "org.apache.commons.math.analysis.TrapezoidIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.TrapezoidIntegrator.verifyInterval(double,double)"
call "org.apache.commons.math.analysis.TrapezoidIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.TrapezoidIntegrator.verifyIterationCount()"
call "org.apache.commons.math.analysis.TrapezoidIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.TrapezoidIntegrator.stage(double,double,int)"
reference "org.apache.commons.math.analysis.TrapezoidIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.TrapezoidIntegrator.maximalIterationCount : int"
reference "org.apache.commons.math.analysis.TrapezoidIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.TrapezoidIntegrator.minimalIterationCount : int"
reference "org.apache.commons.math.analysis.TrapezoidIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.TrapezoidIntegrator.relativeAccuracy : double"
call "org.apache.commons.math.analysis.TrapezoidIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.TrapezoidIntegrator.setResult(double,int)"
reference "org.apache.commons.math.analysis.TrapezoidIntegrator.integrate(double,double)" "org.apache.commons.math.analysis.TrapezoidIntegrator.result : double"
call "org.apache.commons.math.analysis.TrapezoidIntegrator.integrate(double,double)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
contain "org.apache.commons.math.analysis.TrapezoidIntegrator" "org.apache.commons.math.analysis.TrapezoidIntegrator.integrate(double,double)"
call "org.apache.commons.math.analysis.TrapezoidIntegrator.verifyIterationCount()" "org.apache.commons.math.analysis.UnivariateRealIntegratorImpl.verifyIterationCount()"
reference "org.apache.commons.math.analysis.TrapezoidIntegrator.verifyIterationCount()" "org.apache.commons.math.analysis.TrapezoidIntegrator.maximalIterationCount : int"
contain "org.apache.commons.math.analysis.TrapezoidIntegrator" "org.apache.commons.math.analysis.TrapezoidIntegrator.verifyIterationCount()"
contain "org.apache.commons.math.analysis.TrapezoidIntegrator" "org.apache.commons.math.analysis.TrapezoidIntegrator.serialVersionUID : long"
contain "org.apache.commons.math.analysis.TrapezoidIntegrator" "org.apache.commons.math.analysis.TrapezoidIntegrator.s : double"
reference "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.AbstractContinuousDistribution"
reference "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistribution"
call "org.apache.commons.math.distribution.CauchyDistributionImpl.CauchyDistributionImpl()" "org.apache.commons.math.distribution.CauchyDistributionImpl.CauchyDistributionImpl(double,double)"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.CauchyDistributionImpl()"
call "org.apache.commons.math.distribution.CauchyDistributionImpl.CauchyDistributionImpl(double,double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution()"
reference "org.apache.commons.math.distribution.CauchyDistributionImpl.CauchyDistributionImpl(double,double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.median : double"
reference "org.apache.commons.math.distribution.CauchyDistributionImpl.CauchyDistributionImpl(double,double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.scale : double"
call "org.apache.commons.math.distribution.CauchyDistributionImpl.CauchyDistributionImpl(double,double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.setMedian(double)"
call "org.apache.commons.math.distribution.CauchyDistributionImpl.CauchyDistributionImpl(double,double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.setScale(double)"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.CauchyDistributionImpl(double,double)"
reference "org.apache.commons.math.distribution.CauchyDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.median : double"
reference "org.apache.commons.math.distribution.CauchyDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.scale : double"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.cumulativeProbability(double)"
reference "org.apache.commons.math.distribution.CauchyDistributionImpl.getMedian()" "org.apache.commons.math.distribution.CauchyDistributionImpl.median : double"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.getMedian()"
reference "org.apache.commons.math.distribution.CauchyDistributionImpl.getScale()" "org.apache.commons.math.distribution.CauchyDistributionImpl.scale : double"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.getScale()"
reference "org.apache.commons.math.distribution.CauchyDistributionImpl.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.median : double"
reference "org.apache.commons.math.distribution.CauchyDistributionImpl.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.scale : double"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.inverseCumulativeProbability(double)"
reference "org.apache.commons.math.distribution.CauchyDistributionImpl.setMedian(double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.median : double"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.setMedian(double)"
reference "org.apache.commons.math.distribution.CauchyDistributionImpl.setScale(double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.scale : double"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.setScale(double)"
call "org.apache.commons.math.distribution.CauchyDistributionImpl.getDomainLowerBound(double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.getMedian()"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.getDomainLowerBound(double)"
call "org.apache.commons.math.distribution.CauchyDistributionImpl.getDomainUpperBound(double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.getMedian()"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.getDomainUpperBound(double)"
call "org.apache.commons.math.distribution.CauchyDistributionImpl.getInitialDomain(double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.getMedian()"
call "org.apache.commons.math.distribution.CauchyDistributionImpl.getInitialDomain(double)" "org.apache.commons.math.distribution.CauchyDistributionImpl.getScale()"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.getInitialDomain(double)"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.serialVersionUID : long"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.median : double"
contain "org.apache.commons.math.distribution.CauchyDistributionImpl" "org.apache.commons.math.distribution.CauchyDistributionImpl.scale : double"
reference "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.analysis.PolynomialFunction"
reference "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.complex.Complex"
reference "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.analysis.UnivariateRealSolverImpl"
reference "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.complex.ComplexUtils"
call "org.apache.commons.math.analysis.LaguerreSolver.LaguerreSolver(UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)"
reference "org.apache.commons.math.analysis.LaguerreSolver.LaguerreSolver(UnivariateRealFunction)" "org.apache.commons.math.analysis.LaguerreSolver.p : PolynomialFunction"
contain "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.analysis.LaguerreSolver.LaguerreSolver(UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.LaguerreSolver.getPolynomialFunction()" "org.apache.commons.math.analysis.LaguerreSolver.p : PolynomialFunction"
call "org.apache.commons.math.analysis.LaguerreSolver.getPolynomialFunction()" "org.apache.commons.math.analysis.PolynomialFunction.getCoefficients()"
call "org.apache.commons.math.analysis.LaguerreSolver.getPolynomialFunction()" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
contain "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.analysis.LaguerreSolver.getPolynomialFunction()"
reference "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double,double)" "org.apache.commons.math.analysis.LaguerreSolver.p : PolynomialFunction"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double,double)" "org.apache.commons.math.analysis.PolynomialFunction.value(double)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double,double)" "org.apache.commons.math.analysis.LaguerreSolver.verifyBracketing(double,double,UnivariateRealFunction)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double,double)" "org.apache.commons.math.analysis.LaguerreSolver.verifySequence(double,double,double)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double,double)" "org.apache.commons.math.analysis.LaguerreSolver.isBracketing(double,double,UnivariateRealFunction)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double,double)" "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)"
contain "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double,double)"
reference "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)" "org.apache.commons.math.analysis.LaguerreSolver.p : PolynomialFunction"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)" "org.apache.commons.math.analysis.PolynomialFunction.value(double)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)" "org.apache.commons.math.analysis.LaguerreSolver.verifyBracketing(double,double,UnivariateRealFunction)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)" "org.apache.commons.math.analysis.PolynomialFunction.getCoefficients()"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)" "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)" "org.apache.commons.math.analysis.LaguerreSolver.isRootOK(double,double,Complex)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)" "org.apache.commons.math.complex.Complex.getReal()"
reference "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)" "org.apache.commons.math.analysis.LaguerreSolver.iterationCount : int"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)" "org.apache.commons.math.analysis.LaguerreSolver.setResult(double,int)"
reference "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)" "org.apache.commons.math.analysis.LaguerreSolver.result : double"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)" "org.apache.commons.math.analysis.LaguerreSolver.solveAll(Complex[],Complex)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)" "org.apache.commons.math.ConvergenceException.ConvergenceException()"
contain "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.analysis.LaguerreSolver.solve(double,double)"
reference "org.apache.commons.math.analysis.LaguerreSolver.isRootOK(double,double,Complex)" "org.apache.commons.math.analysis.LaguerreSolver.relativeAccuracy : double"
call "org.apache.commons.math.analysis.LaguerreSolver.isRootOK(double,double,Complex)" "org.apache.commons.math.complex.Complex.abs()"
reference "org.apache.commons.math.analysis.LaguerreSolver.isRootOK(double,double,Complex)" "org.apache.commons.math.analysis.LaguerreSolver.absoluteAccuracy : double"
call "org.apache.commons.math.analysis.LaguerreSolver.isRootOK(double,double,Complex)" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.analysis.LaguerreSolver.isRootOK(double,double,Complex)" "org.apache.commons.math.analysis.LaguerreSolver.isSequence(double,double,double)"
call "org.apache.commons.math.analysis.LaguerreSolver.isRootOK(double,double,Complex)" "org.apache.commons.math.complex.Complex.getImaginary()"
reference "org.apache.commons.math.analysis.LaguerreSolver.isRootOK(double,double,Complex)" "org.apache.commons.math.analysis.LaguerreSolver.functionValueAccuracy : double"
contain "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.analysis.LaguerreSolver.isRootOK(double,double,Complex)"
call "org.apache.commons.math.analysis.LaguerreSolver.solveAll(double[],double)" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.analysis.LaguerreSolver.solveAll(double[],double)" "org.apache.commons.math.analysis.LaguerreSolver.solveAll(Complex[],Complex)"
contain "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.analysis.LaguerreSolver.solveAll(double[],double)"
call "org.apache.commons.math.analysis.LaguerreSolver.solveAll(Complex[],Complex)" "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)"
call "org.apache.commons.math.analysis.LaguerreSolver.solveAll(Complex[],Complex)" "org.apache.commons.math.complex.Complex.multiply(Complex)"
call "org.apache.commons.math.analysis.LaguerreSolver.solveAll(Complex[],Complex)" "org.apache.commons.math.complex.Complex.add(Complex)"
reference "org.apache.commons.math.analysis.LaguerreSolver.solveAll(Complex[],Complex)" "org.apache.commons.math.analysis.LaguerreSolver.iterationCount : int"
reference "org.apache.commons.math.analysis.LaguerreSolver.solveAll(Complex[],Complex)" "org.apache.commons.math.analysis.LaguerreSolver.resultComputed : boolean"
contain "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.analysis.LaguerreSolver.solveAll(Complex[],Complex)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.analysis.LaguerreSolver.maximalIterationCount : int"
reference "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.complex.Complex.ZERO : Complex"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.complex.Complex.multiply(Complex)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.complex.Complex.add(Complex)"
reference "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.analysis.LaguerreSolver.relativeAccuracy : double"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.complex.Complex.abs()"
reference "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.analysis.LaguerreSolver.absoluteAccuracy : double"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.complex.Complex.subtract(Complex)"
reference "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.analysis.LaguerreSolver.resultComputed : boolean"
reference "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.analysis.LaguerreSolver.iterationCount : int"
reference "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.analysis.LaguerreSolver.functionValueAccuracy : double"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.complex.Complex.divide(Complex)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.complex.ComplexUtils.sqrt(Complex)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.complex.Complex.equals(Object)"
call "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
contain "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.analysis.LaguerreSolver.solve(Complex[],Complex)"
contain "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.analysis.LaguerreSolver.serialVersionUID : long"
reference "org.apache.commons.math.analysis.LaguerreSolver.p : PolynomialFunction" "org.apache.commons.math.analysis.PolynomialFunction"
contain "org.apache.commons.math.analysis.LaguerreSolver" "org.apache.commons.math.analysis.LaguerreSolver.p : PolynomialFunction"
reference "org.apache.commons.math.distribution.FDistribution" "org.apache.commons.math.distribution.ContinuousDistribution"
contain "org.apache.commons.math.distribution.FDistribution" "org.apache.commons.math.distribution.FDistribution.setNumeratorDegreesOfFreedom(double)"
contain "org.apache.commons.math.distribution.FDistribution" "org.apache.commons.math.distribution.FDistribution.getNumeratorDegreesOfFreedom()"
contain "org.apache.commons.math.distribution.FDistribution" "org.apache.commons.math.distribution.FDistribution.setDenominatorDegreesOfFreedom(double)"
contain "org.apache.commons.math.distribution.FDistribution" "org.apache.commons.math.distribution.FDistribution.getDenominatorDegreesOfFreedom()"
reference "org.apache.commons.math.ode.FirstOrderConverter" "org.apache.commons.math.ode.FirstOrderDifferentialEquations"
reference "org.apache.commons.math.ode.FirstOrderConverter" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.FirstOrderConverter" "org.apache.commons.math.ode.SecondOrderDifferentialEquations"
reference "org.apache.commons.math.ode.FirstOrderConverter.FirstOrderConverter(SecondOrderDifferentialEquations)" "org.apache.commons.math.ode.FirstOrderConverter.equations : SecondOrderDifferentialEquations"
call "org.apache.commons.math.ode.FirstOrderConverter.FirstOrderConverter(SecondOrderDifferentialEquations)" "org.apache.commons.math.ode.SecondOrderDifferentialEquations.getDimension()"
reference "org.apache.commons.math.ode.FirstOrderConverter.FirstOrderConverter(SecondOrderDifferentialEquations)" "org.apache.commons.math.ode.FirstOrderConverter.dimension : int"
reference "org.apache.commons.math.ode.FirstOrderConverter.FirstOrderConverter(SecondOrderDifferentialEquations)" "org.apache.commons.math.ode.FirstOrderConverter.z : double[]"
reference "org.apache.commons.math.ode.FirstOrderConverter.FirstOrderConverter(SecondOrderDifferentialEquations)" "org.apache.commons.math.ode.FirstOrderConverter.zDot : double[]"
reference "org.apache.commons.math.ode.FirstOrderConverter.FirstOrderConverter(SecondOrderDifferentialEquations)" "org.apache.commons.math.ode.FirstOrderConverter.zDDot : double[]"
contain "org.apache.commons.math.ode.FirstOrderConverter" "org.apache.commons.math.ode.FirstOrderConverter.FirstOrderConverter(SecondOrderDifferentialEquations)"
reference "org.apache.commons.math.ode.FirstOrderConverter.getDimension()" "org.apache.commons.math.ode.FirstOrderConverter.dimension : int"
contain "org.apache.commons.math.ode.FirstOrderConverter" "org.apache.commons.math.ode.FirstOrderConverter.getDimension()"
reference "org.apache.commons.math.ode.FirstOrderConverter.computeDerivatives(double,double[],double[])" "org.apache.commons.math.ode.FirstOrderConverter.z : double[]"
reference "org.apache.commons.math.ode.FirstOrderConverter.computeDerivatives(double,double[],double[])" "org.apache.commons.math.ode.FirstOrderConverter.dimension : int"
reference "org.apache.commons.math.ode.FirstOrderConverter.computeDerivatives(double,double[],double[])" "org.apache.commons.math.ode.FirstOrderConverter.zDot : double[]"
reference "org.apache.commons.math.ode.FirstOrderConverter.computeDerivatives(double,double[],double[])" "org.apache.commons.math.ode.FirstOrderConverter.equations : SecondOrderDifferentialEquations"
reference "org.apache.commons.math.ode.FirstOrderConverter.computeDerivatives(double,double[],double[])" "org.apache.commons.math.ode.FirstOrderConverter.zDDot : double[]"
call "org.apache.commons.math.ode.FirstOrderConverter.computeDerivatives(double,double[],double[])" "org.apache.commons.math.ode.SecondOrderDifferentialEquations.computeSecondDerivatives(double,double[],double[],double[])"
contain "org.apache.commons.math.ode.FirstOrderConverter" "org.apache.commons.math.ode.FirstOrderConverter.computeDerivatives(double,double[],double[])"
reference "org.apache.commons.math.ode.FirstOrderConverter.equations : SecondOrderDifferentialEquations" "org.apache.commons.math.ode.SecondOrderDifferentialEquations"
contain "org.apache.commons.math.ode.FirstOrderConverter" "org.apache.commons.math.ode.FirstOrderConverter.equations : SecondOrderDifferentialEquations"
contain "org.apache.commons.math.ode.FirstOrderConverter" "org.apache.commons.math.ode.FirstOrderConverter.dimension : int"
reference "org.apache.commons.math.ode.FirstOrderConverter.z : double[]" "double[]"
contain "org.apache.commons.math.ode.FirstOrderConverter" "org.apache.commons.math.ode.FirstOrderConverter.z : double[]"
reference "org.apache.commons.math.ode.FirstOrderConverter.zDot : double[]" "double[]"
contain "org.apache.commons.math.ode.FirstOrderConverter" "org.apache.commons.math.ode.FirstOrderConverter.zDot : double[]"
reference "org.apache.commons.math.ode.FirstOrderConverter.zDDot : double[]" "double[]"
contain "org.apache.commons.math.ode.FirstOrderConverter" "org.apache.commons.math.ode.FirstOrderConverter.zDDot : double[]"
reference "org.apache.commons.math.FunctionEvaluationException" "org.apache.commons.math.MathException"
call "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double)" "org.apache.commons.math.MathException.MathException(String,Object[])"
reference "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double)" "org.apache.commons.math.FunctionEvaluationException.argument : double"
contain "org.apache.commons.math.FunctionEvaluationException" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double)"
call "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String)" "org.apache.commons.math.MathException.MathException(String)"
reference "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String)" "org.apache.commons.math.FunctionEvaluationException.argument : double"
contain "org.apache.commons.math.FunctionEvaluationException" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String)"
call "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Object[])" "org.apache.commons.math.MathException.MathException(String,Object[])"
reference "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Object[])" "org.apache.commons.math.FunctionEvaluationException.argument : double"
contain "org.apache.commons.math.FunctionEvaluationException" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Object[])"
call "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Throwable)" "org.apache.commons.math.MathException.MathException(String,Throwable)"
reference "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Throwable)" "org.apache.commons.math.FunctionEvaluationException.argument : double"
contain "org.apache.commons.math.FunctionEvaluationException" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Throwable)"
call "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,Throwable)" "org.apache.commons.math.MathException.MathException(Throwable)"
reference "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,Throwable)" "org.apache.commons.math.FunctionEvaluationException.argument : double"
contain "org.apache.commons.math.FunctionEvaluationException" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,Throwable)"
call "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Object[],Throwable)" "org.apache.commons.math.MathException.MathException(String,Object[],Throwable)"
reference "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Object[],Throwable)" "org.apache.commons.math.FunctionEvaluationException.argument : double"
contain "org.apache.commons.math.FunctionEvaluationException" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Object[],Throwable)"
reference "org.apache.commons.math.FunctionEvaluationException.getArgument()" "org.apache.commons.math.FunctionEvaluationException.argument : double"
contain "org.apache.commons.math.FunctionEvaluationException" "org.apache.commons.math.FunctionEvaluationException.getArgument()"
contain "org.apache.commons.math.FunctionEvaluationException" "org.apache.commons.math.FunctionEvaluationException.serialVersionUID : long"
contain "org.apache.commons.math.FunctionEvaluationException" "org.apache.commons.math.FunctionEvaluationException.argument : double"
reference "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.SynchronizedDescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.SynchronizedDescriptiveStatistics(int)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.SynchronizedDescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.SynchronizedDescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.SynchronizedDescriptiveStatistics(int)"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.apply(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.apply(UnivariateStatistic)"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.clear()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.clear()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.clear()"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.getElement(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getElement(int)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.getElement(int)"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.getN()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getN()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.getN()"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.getStandardDeviation()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.getStandardDeviation()"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.getValues()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getValues()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.getValues()"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.getWindowSize()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getWindowSize()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.getWindowSize()"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.setWindowSize(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setWindowSize(int)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.setWindowSize(int)"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.toString()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.toString()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.toString()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.serialVersionUID : long"
call "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException()" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
contain "org.apache.commons.math.linear.MatrixIndexException" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException()"
contain "org.apache.commons.math.linear.MatrixIndexException" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
contain "org.apache.commons.math.linear.MatrixIndexException" "org.apache.commons.math.linear.MatrixIndexException.serialVersionUID : long"
reference "org.apache.commons.math.distribution.TDistribution" "org.apache.commons.math.distribution.ContinuousDistribution"
contain "org.apache.commons.math.distribution.TDistribution" "org.apache.commons.math.distribution.TDistribution.setDegreesOfFreedom(double)"
contain "org.apache.commons.math.distribution.TDistribution" "org.apache.commons.math.distribution.TDistribution.getDegreesOfFreedom()"
contain "org.apache.commons.math.random.RandomVectorGenerator" "org.apache.commons.math.random.RandomVectorGenerator.nextVector()"
reference "org.apache.commons.math.stat.descriptive.summary.Sum" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.summary.Sum.Sum()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.summary.Sum.Sum()" "org.apache.commons.math.stat.descriptive.summary.Sum.n : long"
reference "org.apache.commons.math.stat.descriptive.summary.Sum.Sum()" "org.apache.commons.math.stat.descriptive.summary.Sum.value : double"
contain "org.apache.commons.math.stat.descriptive.summary.Sum" "org.apache.commons.math.stat.descriptive.summary.Sum.Sum()"
reference "org.apache.commons.math.stat.descriptive.summary.Sum.increment(double)" "org.apache.commons.math.stat.descriptive.summary.Sum.n : long"
reference "org.apache.commons.math.stat.descriptive.summary.Sum.increment(double)" "org.apache.commons.math.stat.descriptive.summary.Sum.value : double"
contain "org.apache.commons.math.stat.descriptive.summary.Sum" "org.apache.commons.math.stat.descriptive.summary.Sum.increment(double)"
reference "org.apache.commons.math.stat.descriptive.summary.Sum.getResult()" "org.apache.commons.math.stat.descriptive.summary.Sum.value : double"
contain "org.apache.commons.math.stat.descriptive.summary.Sum" "org.apache.commons.math.stat.descriptive.summary.Sum.getResult()"
reference "org.apache.commons.math.stat.descriptive.summary.Sum.getN()" "org.apache.commons.math.stat.descriptive.summary.Sum.n : long"
contain "org.apache.commons.math.stat.descriptive.summary.Sum" "org.apache.commons.math.stat.descriptive.summary.Sum.getN()"
reference "org.apache.commons.math.stat.descriptive.summary.Sum.clear()" "org.apache.commons.math.stat.descriptive.summary.Sum.value : double"
reference "org.apache.commons.math.stat.descriptive.summary.Sum.clear()" "org.apache.commons.math.stat.descriptive.summary.Sum.n : long"
contain "org.apache.commons.math.stat.descriptive.summary.Sum" "org.apache.commons.math.stat.descriptive.summary.Sum.clear()"
call "org.apache.commons.math.stat.descriptive.summary.Sum.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.summary.Sum.test(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.summary.Sum" "org.apache.commons.math.stat.descriptive.summary.Sum.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.summary.Sum" "org.apache.commons.math.stat.descriptive.summary.Sum.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.summary.Sum" "org.apache.commons.math.stat.descriptive.summary.Sum.n : long"
contain "org.apache.commons.math.stat.descriptive.summary.Sum" "org.apache.commons.math.stat.descriptive.summary.Sum.value : double"
reference "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.increment(double)"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.incrementAll(double[])"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.incrementAll(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.getResult()"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.getN()"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.clear()"
reference "org.apache.commons.math.stat.descriptive.rank.Min" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.rank.Min.Min()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.rank.Min.Min()" "org.apache.commons.math.stat.descriptive.rank.Min.n : long"
reference "org.apache.commons.math.stat.descriptive.rank.Min.Min()" "org.apache.commons.math.stat.descriptive.rank.Min.value : double"
contain "org.apache.commons.math.stat.descriptive.rank.Min" "org.apache.commons.math.stat.descriptive.rank.Min.Min()"
reference "org.apache.commons.math.stat.descriptive.rank.Min.increment(double)" "org.apache.commons.math.stat.descriptive.rank.Min.value : double"
reference "org.apache.commons.math.stat.descriptive.rank.Min.increment(double)" "org.apache.commons.math.stat.descriptive.rank.Min.n : long"
contain "org.apache.commons.math.stat.descriptive.rank.Min" "org.apache.commons.math.stat.descriptive.rank.Min.increment(double)"
reference "org.apache.commons.math.stat.descriptive.rank.Min.clear()" "org.apache.commons.math.stat.descriptive.rank.Min.value : double"
reference "org.apache.commons.math.stat.descriptive.rank.Min.clear()" "org.apache.commons.math.stat.descriptive.rank.Min.n : long"
contain "org.apache.commons.math.stat.descriptive.rank.Min" "org.apache.commons.math.stat.descriptive.rank.Min.clear()"
reference "org.apache.commons.math.stat.descriptive.rank.Min.getResult()" "org.apache.commons.math.stat.descriptive.rank.Min.value : double"
contain "org.apache.commons.math.stat.descriptive.rank.Min" "org.apache.commons.math.stat.descriptive.rank.Min.getResult()"
reference "org.apache.commons.math.stat.descriptive.rank.Min.getN()" "org.apache.commons.math.stat.descriptive.rank.Min.n : long"
contain "org.apache.commons.math.stat.descriptive.rank.Min" "org.apache.commons.math.stat.descriptive.rank.Min.getN()"
call "org.apache.commons.math.stat.descriptive.rank.Min.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.rank.Min.test(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.rank.Min" "org.apache.commons.math.stat.descriptive.rank.Min.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.rank.Min" "org.apache.commons.math.stat.descriptive.rank.Min.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.rank.Min" "org.apache.commons.math.stat.descriptive.rank.Min.n : long"
contain "org.apache.commons.math.stat.descriptive.rank.Min" "org.apache.commons.math.stat.descriptive.rank.Min.value : double"
contain "org.apache.commons.math.random.NormalizedRandomGenerator" "org.apache.commons.math.random.NormalizedRandomGenerator.nextNormalizedDouble()"
reference "org.apache.commons.math.distribution.ExponentialDistributionImpl" "org.apache.commons.math.distribution.AbstractContinuousDistribution"
reference "org.apache.commons.math.distribution.ExponentialDistributionImpl" "org.apache.commons.math.distribution.ExponentialDistribution"
reference "org.apache.commons.math.distribution.ExponentialDistributionImpl" "org.apache.commons.math.MathException"
call "org.apache.commons.math.distribution.ExponentialDistributionImpl.ExponentialDistributionImpl(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution()"
call "org.apache.commons.math.distribution.ExponentialDistributionImpl.ExponentialDistributionImpl(double)" "org.apache.commons.math.distribution.ExponentialDistributionImpl.setMean(double)"
contain "org.apache.commons.math.distribution.ExponentialDistributionImpl" "org.apache.commons.math.distribution.ExponentialDistributionImpl.ExponentialDistributionImpl(double)"
reference "org.apache.commons.math.distribution.ExponentialDistributionImpl.setMean(double)" "org.apache.commons.math.distribution.ExponentialDistributionImpl.mean : double"
contain "org.apache.commons.math.distribution.ExponentialDistributionImpl" "org.apache.commons.math.distribution.ExponentialDistributionImpl.setMean(double)"
reference "org.apache.commons.math.distribution.ExponentialDistributionImpl.getMean()" "org.apache.commons.math.distribution.ExponentialDistributionImpl.mean : double"
contain "org.apache.commons.math.distribution.ExponentialDistributionImpl" "org.apache.commons.math.distribution.ExponentialDistributionImpl.getMean()"
call "org.apache.commons.math.distribution.ExponentialDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.ExponentialDistributionImpl.getMean()"
contain "org.apache.commons.math.distribution.ExponentialDistributionImpl" "org.apache.commons.math.distribution.ExponentialDistributionImpl.cumulativeProbability(double)"
call "org.apache.commons.math.distribution.ExponentialDistributionImpl.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.ExponentialDistributionImpl.getMean()"
contain "org.apache.commons.math.distribution.ExponentialDistributionImpl" "org.apache.commons.math.distribution.ExponentialDistributionImpl.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.ExponentialDistributionImpl" "org.apache.commons.math.distribution.ExponentialDistributionImpl.getDomainLowerBound(double)"
call "org.apache.commons.math.distribution.ExponentialDistributionImpl.getDomainUpperBound(double)" "org.apache.commons.math.distribution.ExponentialDistributionImpl.getMean()"
contain "org.apache.commons.math.distribution.ExponentialDistributionImpl" "org.apache.commons.math.distribution.ExponentialDistributionImpl.getDomainUpperBound(double)"
call "org.apache.commons.math.distribution.ExponentialDistributionImpl.getInitialDomain(double)" "org.apache.commons.math.distribution.ExponentialDistributionImpl.getMean()"
contain "org.apache.commons.math.distribution.ExponentialDistributionImpl" "org.apache.commons.math.distribution.ExponentialDistributionImpl.getInitialDomain(double)"
contain "org.apache.commons.math.distribution.ExponentialDistributionImpl" "org.apache.commons.math.distribution.ExponentialDistributionImpl.serialVersionUID : long"
contain "org.apache.commons.math.distribution.ExponentialDistributionImpl" "org.apache.commons.math.distribution.ExponentialDistributionImpl.mean : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D()" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D()" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D()" "org.apache.commons.math.geometry.Vector3D.z : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.Vector3D()"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)" "org.apache.commons.math.geometry.Vector3D.z : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double)" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double)" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double)" "org.apache.commons.math.geometry.Vector3D.z : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double)"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.z : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D)"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.z : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D)"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D,double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D,double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D,double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.z : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D,double,Vector3D)"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D,double,Vector3D,double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D,double,Vector3D,double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D,double,Vector3D,double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.z : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D,double,Vector3D,double,Vector3D)"
reference "org.apache.commons.math.geometry.Vector3D.getX()" "org.apache.commons.math.geometry.Vector3D.x : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.getX()"
reference "org.apache.commons.math.geometry.Vector3D.getY()" "org.apache.commons.math.geometry.Vector3D.y : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.getY()"
reference "org.apache.commons.math.geometry.Vector3D.getZ()" "org.apache.commons.math.geometry.Vector3D.z : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.getZ()"
reference "org.apache.commons.math.geometry.Vector3D.getNorm()" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.getNorm()" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.getNorm()" "org.apache.commons.math.geometry.Vector3D.z : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.getNorm()"
reference "org.apache.commons.math.geometry.Vector3D.getAlpha()" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.getAlpha()" "org.apache.commons.math.geometry.Vector3D.x : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.getAlpha()"
reference "org.apache.commons.math.geometry.Vector3D.getDelta()" "org.apache.commons.math.geometry.Vector3D.z : double"
call "org.apache.commons.math.geometry.Vector3D.getDelta()" "org.apache.commons.math.geometry.Vector3D.getNorm()"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.getDelta()"
reference "org.apache.commons.math.geometry.Vector3D.add(Vector3D)" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.add(Vector3D)" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.add(Vector3D)" "org.apache.commons.math.geometry.Vector3D.z : double"
call "org.apache.commons.math.geometry.Vector3D.add(Vector3D)" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.add(Vector3D)"
reference "org.apache.commons.math.geometry.Vector3D.add(double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.add(double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.add(double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.z : double"
call "org.apache.commons.math.geometry.Vector3D.add(double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.add(double,Vector3D)"
reference "org.apache.commons.math.geometry.Vector3D.subtract(Vector3D)" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.subtract(Vector3D)" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.subtract(Vector3D)" "org.apache.commons.math.geometry.Vector3D.z : double"
call "org.apache.commons.math.geometry.Vector3D.subtract(Vector3D)" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.subtract(Vector3D)"
reference "org.apache.commons.math.geometry.Vector3D.subtract(double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.subtract(double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.subtract(double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.z : double"
call "org.apache.commons.math.geometry.Vector3D.subtract(double,Vector3D)" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.subtract(double,Vector3D)"
call "org.apache.commons.math.geometry.Vector3D.normalize()" "org.apache.commons.math.geometry.Vector3D.getNorm()"
call "org.apache.commons.math.geometry.Vector3D.normalize()" "org.apache.commons.math.geometry.Vector3D.multiply(double)"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.normalize()"
call "org.apache.commons.math.geometry.Vector3D.orthogonal()" "org.apache.commons.math.geometry.Vector3D.getNorm()"
reference "org.apache.commons.math.geometry.Vector3D.orthogonal()" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.orthogonal()" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.orthogonal()" "org.apache.commons.math.geometry.Vector3D.z : double"
call "org.apache.commons.math.geometry.Vector3D.orthogonal()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.orthogonal()"
call "org.apache.commons.math.geometry.Vector3D.angle(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.getNorm()"
call "org.apache.commons.math.geometry.Vector3D.angle(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.dotProduct(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.Vector3D.angle(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.crossProduct(Vector3D,Vector3D)"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.angle(Vector3D,Vector3D)"
reference "org.apache.commons.math.geometry.Vector3D.negate()" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.negate()" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.negate()" "org.apache.commons.math.geometry.Vector3D.z : double"
call "org.apache.commons.math.geometry.Vector3D.negate()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.negate()"
reference "org.apache.commons.math.geometry.Vector3D.multiply(double)" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.multiply(double)" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.multiply(double)" "org.apache.commons.math.geometry.Vector3D.z : double"
call "org.apache.commons.math.geometry.Vector3D.multiply(double)" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.multiply(double)"
reference "org.apache.commons.math.geometry.Vector3D.dotProduct(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.x : double"
reference "org.apache.commons.math.geometry.Vector3D.dotProduct(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.dotProduct(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.z : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.dotProduct(Vector3D,Vector3D)"
reference "org.apache.commons.math.geometry.Vector3D.crossProduct(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.y : double"
reference "org.apache.commons.math.geometry.Vector3D.crossProduct(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.z : double"
reference "org.apache.commons.math.geometry.Vector3D.crossProduct(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.x : double"
call "org.apache.commons.math.geometry.Vector3D.crossProduct(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.crossProduct(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.Vector3D.static {...}" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
reference "org.apache.commons.math.geometry.Vector3D.static {...}" "org.apache.commons.math.geometry.Vector3D.plusI : Vector3D"
reference "org.apache.commons.math.geometry.Vector3D.static {...}" "org.apache.commons.math.geometry.Vector3D.minusI : Vector3D"
reference "org.apache.commons.math.geometry.Vector3D.static {...}" "org.apache.commons.math.geometry.Vector3D.plusJ : Vector3D"
reference "org.apache.commons.math.geometry.Vector3D.static {...}" "org.apache.commons.math.geometry.Vector3D.minusJ : Vector3D"
reference "org.apache.commons.math.geometry.Vector3D.static {...}" "org.apache.commons.math.geometry.Vector3D.plusK : Vector3D"
reference "org.apache.commons.math.geometry.Vector3D.static {...}" "org.apache.commons.math.geometry.Vector3D.minusK : Vector3D"
reference "org.apache.commons.math.geometry.Vector3D.static {...}" "org.apache.commons.math.geometry.Vector3D.zero : Vector3D"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.static {...}"
reference "org.apache.commons.math.geometry.Vector3D.plusI : Vector3D" "org.apache.commons.math.geometry.Vector3D"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.plusI : Vector3D"
reference "org.apache.commons.math.geometry.Vector3D.minusI : Vector3D" "org.apache.commons.math.geometry.Vector3D"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.minusI : Vector3D"
reference "org.apache.commons.math.geometry.Vector3D.plusJ : Vector3D" "org.apache.commons.math.geometry.Vector3D"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.plusJ : Vector3D"
reference "org.apache.commons.math.geometry.Vector3D.minusJ : Vector3D" "org.apache.commons.math.geometry.Vector3D"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.minusJ : Vector3D"
reference "org.apache.commons.math.geometry.Vector3D.plusK : Vector3D" "org.apache.commons.math.geometry.Vector3D"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.plusK : Vector3D"
reference "org.apache.commons.math.geometry.Vector3D.minusK : Vector3D" "org.apache.commons.math.geometry.Vector3D"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.minusK : Vector3D"
reference "org.apache.commons.math.geometry.Vector3D.zero : Vector3D" "org.apache.commons.math.geometry.Vector3D"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.zero : Vector3D"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.x : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.y : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.z : double"
contain "org.apache.commons.math.geometry.Vector3D" "org.apache.commons.math.geometry.Vector3D.serialVersionUID : long"
reference "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.AbstractIntegerDistribution"
reference "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistribution"
reference "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.special.Beta"
reference "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.util.MathUtils"
call "org.apache.commons.math.distribution.BinomialDistributionImpl.BinomialDistributionImpl(int,double)" "org.apache.commons.math.distribution.AbstractIntegerDistribution.AbstractIntegerDistribution()"
call "org.apache.commons.math.distribution.BinomialDistributionImpl.BinomialDistributionImpl(int,double)" "org.apache.commons.math.distribution.BinomialDistributionImpl.setNumberOfTrials(int)"
call "org.apache.commons.math.distribution.BinomialDistributionImpl.BinomialDistributionImpl(int,double)" "org.apache.commons.math.distribution.BinomialDistributionImpl.setProbabilityOfSuccess(double)"
contain "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl.BinomialDistributionImpl(int,double)"
reference "org.apache.commons.math.distribution.BinomialDistributionImpl.getNumberOfTrials()" "org.apache.commons.math.distribution.BinomialDistributionImpl.numberOfTrials : int"
contain "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl.getNumberOfTrials()"
reference "org.apache.commons.math.distribution.BinomialDistributionImpl.getProbabilityOfSuccess()" "org.apache.commons.math.distribution.BinomialDistributionImpl.probabilityOfSuccess : double"
contain "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl.getProbabilityOfSuccess()"
reference "org.apache.commons.math.distribution.BinomialDistributionImpl.setNumberOfTrials(int)" "org.apache.commons.math.distribution.BinomialDistributionImpl.numberOfTrials : int"
contain "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl.setNumberOfTrials(int)"
reference "org.apache.commons.math.distribution.BinomialDistributionImpl.setProbabilityOfSuccess(double)" "org.apache.commons.math.distribution.BinomialDistributionImpl.probabilityOfSuccess : double"
contain "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl.setProbabilityOfSuccess(double)"
contain "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl.getDomainLowerBound(double)"
call "org.apache.commons.math.distribution.BinomialDistributionImpl.getDomainUpperBound(double)" "org.apache.commons.math.distribution.BinomialDistributionImpl.getNumberOfTrials()"
contain "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl.getDomainUpperBound(double)"
call "org.apache.commons.math.distribution.BinomialDistributionImpl.cumulativeProbability(int)" "org.apache.commons.math.distribution.BinomialDistributionImpl.getNumberOfTrials()"
call "org.apache.commons.math.distribution.BinomialDistributionImpl.cumulativeProbability(int)" "org.apache.commons.math.distribution.BinomialDistributionImpl.getProbabilityOfSuccess()"
call "org.apache.commons.math.distribution.BinomialDistributionImpl.cumulativeProbability(int)" "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double)"
contain "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl.cumulativeProbability(int)"
call "org.apache.commons.math.distribution.BinomialDistributionImpl.probability(int)" "org.apache.commons.math.distribution.BinomialDistributionImpl.getNumberOfTrials()"
call "org.apache.commons.math.distribution.BinomialDistributionImpl.probability(int)" "org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(int,int)"
call "org.apache.commons.math.distribution.BinomialDistributionImpl.probability(int)" "org.apache.commons.math.distribution.BinomialDistributionImpl.getProbabilityOfSuccess()"
contain "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl.probability(int)"
call "org.apache.commons.math.distribution.BinomialDistributionImpl.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractIntegerDistribution.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl.serialVersionUID : long"
contain "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl.numberOfTrials : int"
contain "org.apache.commons.math.distribution.BinomialDistributionImpl" "org.apache.commons.math.distribution.BinomialDistributionImpl.probabilityOfSuccess : double"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMoment" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment"
call "org.apache.commons.math.stat.descriptive.moment.FourthMoment.FourthMoment()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.ThirdMoment()"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMoment.FourthMoment()" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.m4 : double"
contain "org.apache.commons.math.stat.descriptive.moment.FourthMoment" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.FourthMoment()"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.n : long"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.m4 : double"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.m3 : double"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.m2 : double"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.m1 : double"
call "org.apache.commons.math.stat.descriptive.moment.FourthMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.increment(double)"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.nDev : double"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMoment.increment(double)" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.nDevSq : double"
contain "org.apache.commons.math.stat.descriptive.moment.FourthMoment" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.increment(double)"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMoment.getResult()" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.m4 : double"
contain "org.apache.commons.math.stat.descriptive.moment.FourthMoment" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.FourthMoment.clear()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.clear()"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMoment.clear()" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.m4 : double"
contain "org.apache.commons.math.stat.descriptive.moment.FourthMoment" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.clear()"
contain "org.apache.commons.math.stat.descriptive.moment.FourthMoment" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.moment.FourthMoment" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.m4 : double"
reference "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.distribution.AbstractContinuousDistribution"
reference "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.distribution.TDistribution"
reference "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.special.Beta"
call "org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution()"
call "org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double)" "org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double)"
contain "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double)"
reference "org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double)" "org.apache.commons.math.distribution.TDistributionImpl.degreesOfFreedom : double"
contain "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double)"
reference "org.apache.commons.math.distribution.TDistributionImpl.getDegreesOfFreedom()" "org.apache.commons.math.distribution.TDistributionImpl.degreesOfFreedom : double"
contain "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.distribution.TDistributionImpl.getDegreesOfFreedom()"
call "org.apache.commons.math.distribution.TDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.TDistributionImpl.getDegreesOfFreedom()"
call "org.apache.commons.math.distribution.TDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double)"
contain "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.distribution.TDistributionImpl.cumulativeProbability(double)"
call "org.apache.commons.math.distribution.TDistributionImpl.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.distribution.TDistributionImpl.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.distribution.TDistributionImpl.getDomainLowerBound(double)"
contain "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.distribution.TDistributionImpl.getDomainUpperBound(double)"
contain "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.distribution.TDistributionImpl.getInitialDomain(double)"
contain "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.distribution.TDistributionImpl.serialVersionUID : long"
contain "org.apache.commons.math.distribution.TDistributionImpl" "org.apache.commons.math.distribution.TDistributionImpl.degreesOfFreedom : double"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution" "org.apache.commons.math.distribution.AbstractDistribution"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution" "org.apache.commons.math.distribution.ContinuousDistribution"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution" "org.apache.commons.math.analysis.UnivariateRealSolverUtils"
reference "org.apache.commons.math.distribution.AbstractContinuousDistribution" "org.apache.commons.math.analysis.UnivariateRealFunction"
call "org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution()" "org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution()"
contain "org.apache.commons.math.distribution.AbstractContinuousDistribution" "org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution()"
call "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.1.{...}"
call "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.getDomainLowerBound(double)"
call "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.getDomainUpperBound(double)"
call "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.getInitialDomain(double)"
call "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealFunction,double,double,double)"
call "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)" "org.apache.commons.math.MathException.MathException(Throwable)"
call "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double)"
contain "org.apache.commons.math.distribution.AbstractContinuousDistribution" "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.AbstractContinuousDistribution" "org.apache.commons.math.distribution.AbstractContinuousDistribution.getInitialDomain(double)"
contain "org.apache.commons.math.distribution.AbstractContinuousDistribution" "org.apache.commons.math.distribution.AbstractContinuousDistribution.getDomainLowerBound(double)"
contain "org.apache.commons.math.distribution.AbstractContinuousDistribution" "org.apache.commons.math.distribution.AbstractContinuousDistribution.getDomainUpperBound(double)"
contain "org.apache.commons.math.distribution.AbstractContinuousDistribution" "org.apache.commons.math.distribution.AbstractContinuousDistribution.serialVersionUID : long"
reference "org.apache.commons.math.random.GaussianRandomGenerator" "org.apache.commons.math.random.NormalizedRandomGenerator"
reference "org.apache.commons.math.random.GaussianRandomGenerator" "org.apache.commons.math.random.RandomGenerator"
reference "org.apache.commons.math.random.GaussianRandomGenerator.GaussianRandomGenerator(RandomGenerator)" "org.apache.commons.math.random.GaussianRandomGenerator.generator : RandomGenerator"
contain "org.apache.commons.math.random.GaussianRandomGenerator" "org.apache.commons.math.random.GaussianRandomGenerator.GaussianRandomGenerator(RandomGenerator)"
reference "org.apache.commons.math.random.GaussianRandomGenerator.nextNormalizedDouble()" "org.apache.commons.math.random.GaussianRandomGenerator.generator : RandomGenerator"
call "org.apache.commons.math.random.GaussianRandomGenerator.nextNormalizedDouble()" "org.apache.commons.math.random.RandomGenerator.nextGaussian()"
contain "org.apache.commons.math.random.GaussianRandomGenerator" "org.apache.commons.math.random.GaussianRandomGenerator.nextNormalizedDouble()"
reference "org.apache.commons.math.random.GaussianRandomGenerator.generator : RandomGenerator" "org.apache.commons.math.random.RandomGenerator"
contain "org.apache.commons.math.random.GaussianRandomGenerator" "org.apache.commons.math.random.GaussianRandomGenerator.generator : RandomGenerator"
reference "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853StepInterpolator"
reference "org.apache.commons.math.ode.DormandPrince853Integrator" "double[]"
reference "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)" "org.apache.commons.math.ode.DormandPrince853Integrator.staticC : double[]"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)" "org.apache.commons.math.ode.DormandPrince853Integrator.staticA : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)" "org.apache.commons.math.ode.DormandPrince853Integrator.staticB : double[]"
call "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator()"
call "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.DormandPrince853Integrator.staticC : double[]"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.DormandPrince853Integrator.staticA : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.DormandPrince853Integrator.staticB : double[]"
call "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator()"
call "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double[],double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double[],double[])"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.getName()"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.getOrder()"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.estimateError(double[][],double[],double[],double)" "org.apache.commons.math.ode.DormandPrince853Integrator.vecAbsoluteTolerance : double[]"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.estimateError(double[][],double[],double[],double)" "org.apache.commons.math.ode.DormandPrince853Integrator.scalAbsoluteTolerance : double"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.estimateError(double[][],double[],double[],double)" "org.apache.commons.math.ode.DormandPrince853Integrator.scalRelativeTolerance : double"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.estimateError(double[][],double[],double[],double)" "org.apache.commons.math.ode.DormandPrince853Integrator.vecRelativeTolerance : double[]"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.estimateError(double[][],double[],double[],double)"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.static {...}" "org.apache.commons.math.ode.DormandPrince853Integrator.sqrt6 : double"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.static {...}" "org.apache.commons.math.ode.DormandPrince853Integrator.staticC : double[]"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.static {...}" "org.apache.commons.math.ode.DormandPrince853Integrator.staticA : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.static {...}" "org.apache.commons.math.ode.DormandPrince853Integrator.staticB : double[]"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.static {...}"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.methodName : String"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.sqrt6 : double"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.staticC : double[]" "double[]"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.staticC : double[]"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.staticA : double[][]" "double[][]"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.staticA : double[][]"
reference "org.apache.commons.math.ode.DormandPrince853Integrator.staticB : double[]" "double[]"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.staticB : double[]"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e1_01 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e1_06 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e1_07 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e1_08 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e1_09 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e1_10 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e1_11 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e1_12 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e2_01 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e2_06 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e2_07 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e2_08 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e2_09 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e2_10 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e2_11 : double"
contain "org.apache.commons.math.ode.DormandPrince853Integrator" "org.apache.commons.math.ode.DormandPrince853Integrator.e2_12 : double"
call "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException()" "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(String)"
contain "org.apache.commons.math.linear.InvalidMatrixException" "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException()"
contain "org.apache.commons.math.linear.InvalidMatrixException" "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(String)"
contain "org.apache.commons.math.linear.InvalidMatrixException" "org.apache.commons.math.linear.InvalidMatrixException.serialVersionUID : long"
reference "org.apache.commons.math.linear.BigMatrixImpl" "double[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.MatrixIndexException"
reference "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.InvalidMatrixException"
reference "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrix"
reference "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.MatrixUtils"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl()" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl()" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl()" "org.apache.commons.math.linear.BigMatrixImpl.permutation : int[]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl()" "org.apache.commons.math.linear.BigMatrixImpl.parity : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl()" "org.apache.commons.math.linear.BigMatrixImpl.roundingMode : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl()" "org.apache.commons.math.linear.BigMatrixImpl.scale : int"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl()"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(int,int)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(int,int)" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(int,int)" "org.apache.commons.math.linear.BigMatrixImpl.permutation : int[]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(int,int)" "org.apache.commons.math.linear.BigMatrixImpl.parity : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(int,int)" "org.apache.commons.math.linear.BigMatrixImpl.roundingMode : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(int,int)" "org.apache.commons.math.linear.BigMatrixImpl.scale : int"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(int,int)"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])" "org.apache.commons.math.linear.BigMatrixImpl.permutation : int[]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])" "org.apache.commons.math.linear.BigMatrixImpl.parity : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])" "org.apache.commons.math.linear.BigMatrixImpl.roundingMode : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])" "org.apache.commons.math.linear.BigMatrixImpl.scale : int"
call "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])" "org.apache.commons.math.linear.BigMatrixImpl.copyIn(BigDecimal[][])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])" "org.apache.commons.math.linear.BigMatrixImpl.permutation : int[]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])" "org.apache.commons.math.linear.BigMatrixImpl.parity : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])" "org.apache.commons.math.linear.BigMatrixImpl.roundingMode : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])" "org.apache.commons.math.linear.BigMatrixImpl.scale : int"
call "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])" "org.apache.commons.math.linear.BigMatrixImpl.copyIn(double[][])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])" "org.apache.commons.math.linear.BigMatrixImpl.permutation : int[]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])" "org.apache.commons.math.linear.BigMatrixImpl.parity : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])" "org.apache.commons.math.linear.BigMatrixImpl.roundingMode : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])" "org.apache.commons.math.linear.BigMatrixImpl.scale : int"
call "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])" "org.apache.commons.math.linear.BigMatrixImpl.copyIn(String[][])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.permutation : int[]"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.parity : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.roundingMode : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.scale : int"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[])"
call "org.apache.commons.math.linear.BigMatrixImpl.copy()" "org.apache.commons.math.linear.BigMatrixImpl.copyOut()"
call "org.apache.commons.math.linear.BigMatrixImpl.copy()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.copy()"
call "org.apache.commons.math.linear.BigMatrixImpl.add(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.add(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.add(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.add(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getRowDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.add(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
call "org.apache.commons.math.linear.BigMatrixImpl.add(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getEntry(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.add(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.add(BigMatrix)"
call "org.apache.commons.math.linear.BigMatrixImpl.subtract(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.subtract(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.subtract(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.subtract(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getRowDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.subtract(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
call "org.apache.commons.math.linear.BigMatrixImpl.subtract(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getEntry(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.subtract(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.subtract(BigMatrix)"
call "org.apache.commons.math.linear.BigMatrixImpl.scalarAdd(BigDecimal)" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.scalarAdd(BigDecimal)" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.scalarAdd(BigDecimal)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
call "org.apache.commons.math.linear.BigMatrixImpl.scalarAdd(BigDecimal)" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.scalarAdd(BigDecimal)"
call "org.apache.commons.math.linear.BigMatrixImpl.scalarMultiply(BigDecimal)" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.scalarMultiply(BigDecimal)" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.scalarMultiply(BigDecimal)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
call "org.apache.commons.math.linear.BigMatrixImpl.scalarMultiply(BigDecimal)" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.scalarMultiply(BigDecimal)"
call "org.apache.commons.math.linear.BigMatrixImpl.multiply(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.multiply(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.multiply(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.multiply(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getColumnDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.multiply(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.ZERO : BigDecimal"
reference "org.apache.commons.math.linear.BigMatrixImpl.multiply(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
call "org.apache.commons.math.linear.BigMatrixImpl.multiply(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getEntry(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.multiply(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.multiply(BigMatrix)"
call "org.apache.commons.math.linear.BigMatrixImpl.preMultiply(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.multiply(BigMatrix)"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.preMultiply(BigMatrix)"
call "org.apache.commons.math.linear.BigMatrixImpl.getData()" "org.apache.commons.math.linear.BigMatrixImpl.copyOut()"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getData()"
call "org.apache.commons.math.linear.BigMatrixImpl.getDataAsDoubleArray()" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.getDataAsDoubleArray()" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getDataAsDoubleArray()" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getDataAsDoubleArray()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getDataRef()" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getDataRef()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getRoundingMode()" "org.apache.commons.math.linear.BigMatrixImpl.roundingMode : int"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getRoundingMode()"
reference "org.apache.commons.math.linear.BigMatrixImpl.setRoundingMode(int)" "org.apache.commons.math.linear.BigMatrixImpl.roundingMode : int"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.setRoundingMode(int)"
reference "org.apache.commons.math.linear.BigMatrixImpl.getScale()" "org.apache.commons.math.linear.BigMatrixImpl.scale : int"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getScale()"
reference "org.apache.commons.math.linear.BigMatrixImpl.setScale(int)" "org.apache.commons.math.linear.BigMatrixImpl.scale : int"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.setScale(int)"
reference "org.apache.commons.math.linear.BigMatrixImpl.getNorm()" "org.apache.commons.math.linear.BigMatrixImpl.ZERO : BigDecimal"
call "org.apache.commons.math.linear.BigMatrixImpl.getNorm()" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.getNorm()" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getNorm()" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getNorm()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getSubMatrix(int,int,int,int)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
call "org.apache.commons.math.linear.BigMatrixImpl.getSubMatrix(int,int,int,int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.BigMatrixImpl.getSubMatrix(int,int,int,int)" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getSubMatrix(int,int,int,int)" "org.apache.commons.math.linear.BigMatrixImpl.getDataRef()"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getSubMatrix(int,int,int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getSubMatrix(int[],int[])" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.BigMatrixImpl.getSubMatrix(int[],int[])" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getSubMatrix(int[],int[])" "org.apache.commons.math.linear.BigMatrixImpl.getDataRef()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getSubMatrix(int[],int[])" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getSubMatrix(int[],int[])"
call "org.apache.commons.math.linear.BigMatrixImpl.setSubMatrix(BigDecimal[][],int,int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
reference "org.apache.commons.math.linear.BigMatrixImpl.setSubMatrix(BigDecimal[][],int,int)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
call "org.apache.commons.math.linear.BigMatrixImpl.setSubMatrix(BigDecimal[][],int,int)" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.setSubMatrix(BigDecimal[][],int,int)" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.setSubMatrix(BigDecimal[][],int,int)" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.setSubMatrix(BigDecimal[][],int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getRowMatrix(int)" "org.apache.commons.math.linear.BigMatrixImpl.isValidCoordinate(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getRowMatrix(int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.BigMatrixImpl.getRowMatrix(int)" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getRowMatrix(int)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
call "org.apache.commons.math.linear.BigMatrixImpl.getRowMatrix(int)" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getRowMatrix(int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getColumnMatrix(int)" "org.apache.commons.math.linear.BigMatrixImpl.isValidCoordinate(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getColumnMatrix(int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.BigMatrixImpl.getColumnMatrix(int)" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getColumnMatrix(int)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
call "org.apache.commons.math.linear.BigMatrixImpl.getColumnMatrix(int)" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getColumnMatrix(int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getRow(int)" "org.apache.commons.math.linear.BigMatrixImpl.isValidCoordinate(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getRow(int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.BigMatrixImpl.getRow(int)" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getRow(int)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getRow(int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getRowAsDoubleArray(int)" "org.apache.commons.math.linear.BigMatrixImpl.isValidCoordinate(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getRowAsDoubleArray(int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.BigMatrixImpl.getRowAsDoubleArray(int)" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getRowAsDoubleArray(int)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getRowAsDoubleArray(int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getColumn(int)" "org.apache.commons.math.linear.BigMatrixImpl.isValidCoordinate(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getColumn(int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.BigMatrixImpl.getColumn(int)" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getColumn(int)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getColumn(int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getColumnAsDoubleArray(int)" "org.apache.commons.math.linear.BigMatrixImpl.isValidCoordinate(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getColumnAsDoubleArray(int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.BigMatrixImpl.getColumnAsDoubleArray(int)" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getColumnAsDoubleArray(int)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getColumnAsDoubleArray(int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getEntry(int,int)" "org.apache.commons.math.linear.BigMatrixImpl.isValidCoordinate(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getEntry(int,int)" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
reference "org.apache.commons.math.linear.BigMatrixImpl.getEntry(int,int)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getEntry(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.getEntryAsDouble(int,int)" "org.apache.commons.math.linear.BigMatrixImpl.getEntry(int,int)"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getEntryAsDouble(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.transpose()" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.transpose()" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.transpose()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(int,int)"
call "org.apache.commons.math.linear.BigMatrixImpl.transpose()" "org.apache.commons.math.linear.BigMatrixImpl.getDataRef()"
reference "org.apache.commons.math.linear.BigMatrixImpl.transpose()" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.transpose()"
call "org.apache.commons.math.linear.BigMatrixImpl.inverse()" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.inverse()" "org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(int)"
call "org.apache.commons.math.linear.BigMatrixImpl.inverse()" "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.inverse()"
call "org.apache.commons.math.linear.BigMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.BigMatrixImpl.isSquare()"
call "org.apache.commons.math.linear.BigMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(String)"
call "org.apache.commons.math.linear.BigMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.BigMatrixImpl.isSingular()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.BigMatrixImpl.ZERO : BigDecimal"
reference "org.apache.commons.math.linear.BigMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.BigMatrixImpl.parity : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.BigMatrixImpl.ONE : BigDecimal"
call "org.apache.commons.math.linear.BigMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getDeterminant()" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getDeterminant()"
call "org.apache.commons.math.linear.BigMatrixImpl.isSquare()" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.isSquare()" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.isSquare()"
reference "org.apache.commons.math.linear.BigMatrixImpl.isSingular()" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
call "org.apache.commons.math.linear.BigMatrixImpl.isSingular()" "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.isSingular()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.getTrace()" "org.apache.commons.math.linear.BigMatrixImpl.isSquare()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getTrace()" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
call "org.apache.commons.math.linear.BigMatrixImpl.getTrace()" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getTrace()"
call "org.apache.commons.math.linear.BigMatrixImpl.operate(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.operate(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.operate(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.ZERO : BigDecimal"
reference "org.apache.commons.math.linear.BigMatrixImpl.operate(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.operate(BigDecimal[])"
call "org.apache.commons.math.linear.BigMatrixImpl.operate(double[])" "org.apache.commons.math.linear.BigMatrixImpl.operate(BigDecimal[])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.operate(double[])"
call "org.apache.commons.math.linear.BigMatrixImpl.preMultiply(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.preMultiply(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.preMultiply(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.ZERO : BigDecimal"
reference "org.apache.commons.math.linear.BigMatrixImpl.preMultiply(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.preMultiply(BigDecimal[])"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[])"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(BigDecimal[])" "org.apache.commons.math.linear.BigMatrixImpl.getDataRef()"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.solve(BigDecimal[])"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(double[])" "org.apache.commons.math.linear.BigMatrixImpl.solve(BigDecimal[])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.solve(double[])"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.isSquare()"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)" "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(String)"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.isSingular()"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getColumnDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.permutation : int[]"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getEntry(int,int)"
reference "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.scale : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.roundingMode : int"
call "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)"
call "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()" "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(String)"
call "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()" "org.apache.commons.math.linear.BigMatrixImpl.getData()"
reference "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()" "org.apache.commons.math.linear.BigMatrixImpl.permutation : int[]"
reference "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()" "org.apache.commons.math.linear.BigMatrixImpl.parity : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()" "org.apache.commons.math.linear.BigMatrixImpl.ZERO : BigDecimal"
reference "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()" "org.apache.commons.math.linear.BigMatrixImpl.TOO_SMALL : BigDecimal"
reference "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()" "org.apache.commons.math.linear.BigMatrixImpl.scale : int"
reference "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()" "org.apache.commons.math.linear.BigMatrixImpl.roundingMode : int"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()"
reference "org.apache.commons.math.linear.BigMatrixImpl.toString()" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.toString()"
call "org.apache.commons.math.linear.BigMatrixImpl.equals(Object)" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.equals(Object)" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.equals(Object)" "org.apache.commons.math.linear.BigMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.equals(Object)" "org.apache.commons.math.linear.BigMatrix.getRowDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.equals(Object)" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
call "org.apache.commons.math.linear.BigMatrixImpl.equals(Object)" "org.apache.commons.math.linear.BigMatrix.getEntry(int,int)"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.equals(Object)"
call "org.apache.commons.math.linear.BigMatrixImpl.hashCode()" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.hashCode()" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.hashCode()" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.hashCode()"
call "org.apache.commons.math.linear.BigMatrixImpl.getIdentity(int)" "org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(int)"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getIdentity(int)"
reference "org.apache.commons.math.linear.BigMatrixImpl.getLUMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
call "org.apache.commons.math.linear.BigMatrixImpl.getLUMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()"
call "org.apache.commons.math.linear.BigMatrixImpl.getLUMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getLUMatrix()"
reference "org.apache.commons.math.linear.BigMatrixImpl.getPermutation()" "org.apache.commons.math.linear.BigMatrixImpl.permutation : int[]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.getPermutation()"
call "org.apache.commons.math.linear.BigMatrixImpl.copyOut()" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.copyOut()" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.BigMatrixImpl.copyOut()" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.copyOut()"
call "org.apache.commons.math.linear.BigMatrixImpl.copyIn(BigDecimal[][])" "org.apache.commons.math.linear.BigMatrixImpl.setSubMatrix(BigDecimal[][],int,int)"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.copyIn(BigDecimal[][])"
reference "org.apache.commons.math.linear.BigMatrixImpl.copyIn(double[][])" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.copyIn(double[][])" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.copyIn(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImpl.copyIn(String[][])" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.copyIn(String[][])" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.copyIn(String[][])"
call "org.apache.commons.math.linear.BigMatrixImpl.isValidCoordinate(int,int)" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImpl.isValidCoordinate(int,int)" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.isValidCoordinate(int,int)"
reference "org.apache.commons.math.linear.BigMatrixImpl.static {...}" "org.apache.commons.math.linear.BigMatrixImpl.TOO_SMALL : BigDecimal"
reference "org.apache.commons.math.linear.BigMatrixImpl.static {...}" "org.apache.commons.math.linear.BigMatrixImpl.ZERO : BigDecimal"
reference "org.apache.commons.math.linear.BigMatrixImpl.static {...}" "org.apache.commons.math.linear.BigMatrixImpl.ONE : BigDecimal"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.static {...}"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.serialVersionUID : long"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.data : BigDecimal[][]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.lu : BigDecimal[][]"
reference "org.apache.commons.math.linear.BigMatrixImpl.permutation : int[]" "int[]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.permutation : int[]"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.parity : int"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.roundingMode : int"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.scale : int"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.TOO_SMALL : BigDecimal"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.ZERO : BigDecimal"
contain "org.apache.commons.math.linear.BigMatrixImpl" "org.apache.commons.math.linear.BigMatrixImpl.ONE : BigDecimal"
reference "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.FractionConversionException"
reference "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.util.MathUtils"
call "org.apache.commons.math.fraction.Fraction.Fraction(double)" "org.apache.commons.math.fraction.Fraction.Fraction(double,double,int)"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.Fraction(double)"
reference "org.apache.commons.math.fraction.Fraction.Fraction(double,double,int)" "org.apache.commons.math.fraction.Fraction.numerator : int"
reference "org.apache.commons.math.fraction.Fraction.Fraction(double,double,int)" "org.apache.commons.math.fraction.Fraction.denominator : int"
call "org.apache.commons.math.fraction.Fraction.Fraction(double,double,int)" "org.apache.commons.math.fraction.FractionConversionException.FractionConversionException(double,int)"
call "org.apache.commons.math.fraction.Fraction.Fraction(double,double,int)" "org.apache.commons.math.fraction.Fraction.reduce()"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.Fraction(double,double,int)"
reference "org.apache.commons.math.fraction.Fraction.Fraction(int,int)" "org.apache.commons.math.fraction.Fraction.numerator : int"
reference "org.apache.commons.math.fraction.Fraction.Fraction(int,int)" "org.apache.commons.math.fraction.Fraction.denominator : int"
call "org.apache.commons.math.fraction.Fraction.Fraction(int,int)" "org.apache.commons.math.fraction.Fraction.reduce()"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
reference "org.apache.commons.math.fraction.Fraction.abs()" "org.apache.commons.math.fraction.Fraction.numerator : int"
call "org.apache.commons.math.fraction.Fraction.abs()" "org.apache.commons.math.fraction.Fraction.negate()"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.abs()"
call "org.apache.commons.math.fraction.Fraction.compareTo(Object)" "org.apache.commons.math.fraction.Fraction.doubleValue()"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.compareTo(Object)"
reference "org.apache.commons.math.fraction.Fraction.doubleValue()" "org.apache.commons.math.fraction.Fraction.numerator : int"
reference "org.apache.commons.math.fraction.Fraction.doubleValue()" "org.apache.commons.math.fraction.Fraction.denominator : int"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.doubleValue()"
reference "org.apache.commons.math.fraction.Fraction.equals(Object)" "org.apache.commons.math.fraction.Fraction.numerator : int"
reference "org.apache.commons.math.fraction.Fraction.equals(Object)" "org.apache.commons.math.fraction.Fraction.denominator : int"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.equals(Object)"
call "org.apache.commons.math.fraction.Fraction.floatValue()" "org.apache.commons.math.fraction.Fraction.doubleValue()"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.floatValue()"
reference "org.apache.commons.math.fraction.Fraction.getDenominator()" "org.apache.commons.math.fraction.Fraction.denominator : int"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.getDenominator()"
reference "org.apache.commons.math.fraction.Fraction.getNumerator()" "org.apache.commons.math.fraction.Fraction.numerator : int"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.Fraction.hashCode()" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.Fraction.hashCode()" "org.apache.commons.math.fraction.Fraction.getDenominator()"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.hashCode()"
call "org.apache.commons.math.fraction.Fraction.intValue()" "org.apache.commons.math.fraction.Fraction.doubleValue()"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.intValue()"
call "org.apache.commons.math.fraction.Fraction.longValue()" "org.apache.commons.math.fraction.Fraction.doubleValue()"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.longValue()"
reference "org.apache.commons.math.fraction.Fraction.negate()" "org.apache.commons.math.fraction.Fraction.numerator : int"
reference "org.apache.commons.math.fraction.Fraction.negate()" "org.apache.commons.math.fraction.Fraction.denominator : int"
call "org.apache.commons.math.fraction.Fraction.negate()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.negate()"
reference "org.apache.commons.math.fraction.Fraction.reciprocal()" "org.apache.commons.math.fraction.Fraction.denominator : int"
reference "org.apache.commons.math.fraction.Fraction.reciprocal()" "org.apache.commons.math.fraction.Fraction.numerator : int"
call "org.apache.commons.math.fraction.Fraction.reciprocal()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.reciprocal()"
call "org.apache.commons.math.fraction.Fraction.add(Fraction)" "org.apache.commons.math.fraction.Fraction.addSub(Fraction,boolean)"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.add(Fraction)"
call "org.apache.commons.math.fraction.Fraction.subtract(Fraction)" "org.apache.commons.math.fraction.Fraction.addSub(Fraction,boolean)"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.subtract(Fraction)"
reference "org.apache.commons.math.fraction.Fraction.addSub(Fraction,boolean)" "org.apache.commons.math.fraction.Fraction.numerator : int"
call "org.apache.commons.math.fraction.Fraction.addSub(Fraction,boolean)" "org.apache.commons.math.fraction.Fraction.negate()"
reference "org.apache.commons.math.fraction.Fraction.addSub(Fraction,boolean)" "org.apache.commons.math.fraction.Fraction.denominator : int"
call "org.apache.commons.math.fraction.Fraction.addSub(Fraction,boolean)" "org.apache.commons.math.util.MathUtils.gcd(int,int)"
call "org.apache.commons.math.fraction.Fraction.addSub(Fraction,boolean)" "org.apache.commons.math.util.MathUtils.mulAndCheck(int,int)"
call "org.apache.commons.math.fraction.Fraction.addSub(Fraction,boolean)" "org.apache.commons.math.util.MathUtils.addAndCheck(int,int)"
call "org.apache.commons.math.fraction.Fraction.addSub(Fraction,boolean)" "org.apache.commons.math.util.MathUtils.subAndCheck(int,int)"
call "org.apache.commons.math.fraction.Fraction.addSub(Fraction,boolean)" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.addSub(Fraction,boolean)"
reference "org.apache.commons.math.fraction.Fraction.multiply(Fraction)" "org.apache.commons.math.fraction.Fraction.numerator : int"
reference "org.apache.commons.math.fraction.Fraction.multiply(Fraction)" "org.apache.commons.math.fraction.Fraction.ZERO : Fraction"
reference "org.apache.commons.math.fraction.Fraction.multiply(Fraction)" "org.apache.commons.math.fraction.Fraction.denominator : int"
call "org.apache.commons.math.fraction.Fraction.multiply(Fraction)" "org.apache.commons.math.util.MathUtils.gcd(int,int)"
call "org.apache.commons.math.fraction.Fraction.multiply(Fraction)" "org.apache.commons.math.util.MathUtils.mulAndCheck(int,int)"
call "org.apache.commons.math.fraction.Fraction.multiply(Fraction)" "org.apache.commons.math.fraction.Fraction.getReducedFraction(int,int)"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.multiply(Fraction)"
reference "org.apache.commons.math.fraction.Fraction.divide(Fraction)" "org.apache.commons.math.fraction.Fraction.numerator : int"
call "org.apache.commons.math.fraction.Fraction.divide(Fraction)" "org.apache.commons.math.fraction.Fraction.reciprocal()"
call "org.apache.commons.math.fraction.Fraction.divide(Fraction)" "org.apache.commons.math.fraction.Fraction.multiply(Fraction)"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.divide(Fraction)"
reference "org.apache.commons.math.fraction.Fraction.getReducedFraction(int,int)" "org.apache.commons.math.fraction.Fraction.ZERO : Fraction"
call "org.apache.commons.math.fraction.Fraction.getReducedFraction(int,int)" "org.apache.commons.math.util.MathUtils.gcd(int,int)"
call "org.apache.commons.math.fraction.Fraction.getReducedFraction(int,int)" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.getReducedFraction(int,int)"
reference "org.apache.commons.math.fraction.Fraction.reduce()" "org.apache.commons.math.fraction.Fraction.numerator : int"
reference "org.apache.commons.math.fraction.Fraction.reduce()" "org.apache.commons.math.fraction.Fraction.denominator : int"
call "org.apache.commons.math.fraction.Fraction.reduce()" "org.apache.commons.math.util.MathUtils.gcd(int,int)"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.reduce()"
call "org.apache.commons.math.fraction.Fraction.static {...}" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
reference "org.apache.commons.math.fraction.Fraction.static {...}" "org.apache.commons.math.fraction.Fraction.ONE : Fraction"
reference "org.apache.commons.math.fraction.Fraction.static {...}" "org.apache.commons.math.fraction.Fraction.ZERO : Fraction"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.static {...}"
reference "org.apache.commons.math.fraction.Fraction.ONE : Fraction" "org.apache.commons.math.fraction.Fraction"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.ONE : Fraction"
reference "org.apache.commons.math.fraction.Fraction.ZERO : Fraction" "org.apache.commons.math.fraction.Fraction"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.ZERO : Fraction"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.serialVersionUID : long"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.denominator : int"
contain "org.apache.commons.math.fraction.Fraction" "org.apache.commons.math.fraction.Fraction.numerator : int"
reference "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.distribution.TDistributionImpl"
reference "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.distribution.TDistribution"
call "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression()" "org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double)"
call "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression()" "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(TDistribution)"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression()"
reference "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(TDistribution)" "org.apache.commons.math.stat.regression.SimpleRegression.sumX : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(TDistribution)" "org.apache.commons.math.stat.regression.SimpleRegression.sumXX : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(TDistribution)" "org.apache.commons.math.stat.regression.SimpleRegression.sumY : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(TDistribution)" "org.apache.commons.math.stat.regression.SimpleRegression.sumYY : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(TDistribution)" "org.apache.commons.math.stat.regression.SimpleRegression.sumXY : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(TDistribution)" "org.apache.commons.math.stat.regression.SimpleRegression.n : long"
reference "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(TDistribution)" "org.apache.commons.math.stat.regression.SimpleRegression.xbar : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(TDistribution)" "org.apache.commons.math.stat.regression.SimpleRegression.ybar : double"
call "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(TDistribution)" "org.apache.commons.math.stat.regression.SimpleRegression.setDistribution(TDistribution)"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(TDistribution)"
reference "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)" "org.apache.commons.math.stat.regression.SimpleRegression.n : long"
reference "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)" "org.apache.commons.math.stat.regression.SimpleRegression.xbar : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)" "org.apache.commons.math.stat.regression.SimpleRegression.ybar : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)" "org.apache.commons.math.stat.regression.SimpleRegression.sumXX : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)" "org.apache.commons.math.stat.regression.SimpleRegression.sumYY : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)" "org.apache.commons.math.stat.regression.SimpleRegression.sumXY : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)" "org.apache.commons.math.stat.regression.SimpleRegression.sumX : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)" "org.apache.commons.math.stat.regression.SimpleRegression.sumY : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)" "org.apache.commons.math.stat.regression.SimpleRegression.distribution : TDistribution"
call "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)" "org.apache.commons.math.distribution.TDistribution.setDegreesOfFreedom(double)"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)"
call "org.apache.commons.math.stat.regression.SimpleRegression.addData(double[][])" "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.addData(double[][])"
reference "org.apache.commons.math.stat.regression.SimpleRegression.clear()" "org.apache.commons.math.stat.regression.SimpleRegression.sumX : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.clear()" "org.apache.commons.math.stat.regression.SimpleRegression.sumXX : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.clear()" "org.apache.commons.math.stat.regression.SimpleRegression.sumY : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.clear()" "org.apache.commons.math.stat.regression.SimpleRegression.sumYY : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.clear()" "org.apache.commons.math.stat.regression.SimpleRegression.sumXY : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.clear()" "org.apache.commons.math.stat.regression.SimpleRegression.n : long"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.clear()"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getN()" "org.apache.commons.math.stat.regression.SimpleRegression.n : long"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getN()"
call "org.apache.commons.math.stat.regression.SimpleRegression.predict(double)" "org.apache.commons.math.stat.regression.SimpleRegression.getSlope()"
call "org.apache.commons.math.stat.regression.SimpleRegression.predict(double)" "org.apache.commons.math.stat.regression.SimpleRegression.getIntercept(double)"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.predict(double)"
call "org.apache.commons.math.stat.regression.SimpleRegression.getIntercept()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlope()"
call "org.apache.commons.math.stat.regression.SimpleRegression.getIntercept()" "org.apache.commons.math.stat.regression.SimpleRegression.getIntercept(double)"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getIntercept()"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getSlope()" "org.apache.commons.math.stat.regression.SimpleRegression.n : long"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getSlope()" "org.apache.commons.math.stat.regression.SimpleRegression.sumXX : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getSlope()" "org.apache.commons.math.stat.regression.SimpleRegression.sumXY : double"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getSlope()"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors()" "org.apache.commons.math.stat.regression.SimpleRegression.sumYY : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors()" "org.apache.commons.math.stat.regression.SimpleRegression.sumXY : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors()" "org.apache.commons.math.stat.regression.SimpleRegression.sumXX : double"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors()"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getTotalSumSquares()" "org.apache.commons.math.stat.regression.SimpleRegression.n : long"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getTotalSumSquares()" "org.apache.commons.math.stat.regression.SimpleRegression.sumYY : double"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getTotalSumSquares()"
call "org.apache.commons.math.stat.regression.SimpleRegression.getRegressionSumSquares()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlope()"
call "org.apache.commons.math.stat.regression.SimpleRegression.getRegressionSumSquares()" "org.apache.commons.math.stat.regression.SimpleRegression.getRegressionSumSquares(double)"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getRegressionSumSquares()"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getMeanSquareError()" "org.apache.commons.math.stat.regression.SimpleRegression.n : long"
call "org.apache.commons.math.stat.regression.SimpleRegression.getMeanSquareError()" "org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors()"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getMeanSquareError()"
call "org.apache.commons.math.stat.regression.SimpleRegression.getR()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlope()"
call "org.apache.commons.math.stat.regression.SimpleRegression.getR()" "org.apache.commons.math.stat.regression.SimpleRegression.getRSquare()"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getR()"
call "org.apache.commons.math.stat.regression.SimpleRegression.getRSquare()" "org.apache.commons.math.stat.regression.SimpleRegression.getTotalSumSquares()"
call "org.apache.commons.math.stat.regression.SimpleRegression.getRSquare()" "org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors()"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getRSquare()"
call "org.apache.commons.math.stat.regression.SimpleRegression.getInterceptStdErr()" "org.apache.commons.math.stat.regression.SimpleRegression.getMeanSquareError()"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getInterceptStdErr()" "org.apache.commons.math.stat.regression.SimpleRegression.n : long"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getInterceptStdErr()" "org.apache.commons.math.stat.regression.SimpleRegression.xbar : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getInterceptStdErr()" "org.apache.commons.math.stat.regression.SimpleRegression.sumXX : double"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getInterceptStdErr()"
call "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeStdErr()" "org.apache.commons.math.stat.regression.SimpleRegression.getMeanSquareError()"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeStdErr()" "org.apache.commons.math.stat.regression.SimpleRegression.sumXX : double"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeStdErr()"
call "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval(double)"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval()"
call "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval(double)" "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeStdErr()"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval(double)" "org.apache.commons.math.stat.regression.SimpleRegression.distribution : TDistribution"
call "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval(double)" "org.apache.commons.math.distribution.TDistribution.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval(double)"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getSignificance()" "org.apache.commons.math.stat.regression.SimpleRegression.distribution : TDistribution"
call "org.apache.commons.math.stat.regression.SimpleRegression.getSignificance()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlope()"
call "org.apache.commons.math.stat.regression.SimpleRegression.getSignificance()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeStdErr()"
call "org.apache.commons.math.stat.regression.SimpleRegression.getSignificance()" "org.apache.commons.math.distribution.TDistribution.cumulativeProbability(double)"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getSignificance()"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getIntercept(double)" "org.apache.commons.math.stat.regression.SimpleRegression.sumY : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getIntercept(double)" "org.apache.commons.math.stat.regression.SimpleRegression.sumX : double"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getIntercept(double)" "org.apache.commons.math.stat.regression.SimpleRegression.n : long"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getIntercept(double)"
reference "org.apache.commons.math.stat.regression.SimpleRegression.getRegressionSumSquares(double)" "org.apache.commons.math.stat.regression.SimpleRegression.sumXX : double"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.getRegressionSumSquares(double)"
reference "org.apache.commons.math.stat.regression.SimpleRegression.setDistribution(TDistribution)" "org.apache.commons.math.stat.regression.SimpleRegression.distribution : TDistribution"
reference "org.apache.commons.math.stat.regression.SimpleRegression.setDistribution(TDistribution)" "org.apache.commons.math.stat.regression.SimpleRegression.n : long"
call "org.apache.commons.math.stat.regression.SimpleRegression.setDistribution(TDistribution)" "org.apache.commons.math.distribution.TDistribution.setDegreesOfFreedom(double)"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.setDistribution(TDistribution)"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.serialVersionUID : long"
reference "org.apache.commons.math.stat.regression.SimpleRegression.distribution : TDistribution" "org.apache.commons.math.distribution.TDistribution"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.distribution : TDistribution"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.sumX : double"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.sumXX : double"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.sumY : double"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.sumYY : double"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.sumXY : double"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.n : long"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.xbar : double"
contain "org.apache.commons.math.stat.regression.SimpleRegression" "org.apache.commons.math.stat.regression.SimpleRegression.ybar : double"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactory" "org.apache.commons.discovery.tools.DiscoverClass"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactory" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactory" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.UnivariateRealSolverFactory()"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newInstance()" "org.apache.commons.discovery.tools.DiscoverClass.DiscoverClass()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newInstance()" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.class$org$apache$commons$math$analysis$UnivariateRealSolverFactory : Class"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newInstance()" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.class$(String)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newInstance()" "org.apache.commons.discovery.tools.DiscoverClass.newInstance(Class,String)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newInstance()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.UnivariateRealSolverFactoryImpl()"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactory" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newInstance()"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactory" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newDefaultSolver(UnivariateRealFunction)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactory" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newBisectionSolver(UnivariateRealFunction)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactory" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newBrentSolver(UnivariateRealFunction)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactory" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newNewtonSolver(DifferentiableUnivariateRealFunction)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactory" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newSecantSolver(UnivariateRealFunction)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactory" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.class$(String)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactory" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.class$org$apache$commons$math$analysis$UnivariateRealSolverFactory : Class"
reference "org.apache.commons.math.ode.ThreeEighthesIntegrator" "org.apache.commons.math.ode.ThreeEighthesStepInterpolator"
reference "org.apache.commons.math.ode.ThreeEighthesIntegrator" "double[]"
reference "org.apache.commons.math.ode.ThreeEighthesIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator"
reference "org.apache.commons.math.ode.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double)" "org.apache.commons.math.ode.ThreeEighthesIntegrator.c : double[]"
reference "org.apache.commons.math.ode.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double)" "org.apache.commons.math.ode.ThreeEighthesIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double)" "org.apache.commons.math.ode.ThreeEighthesIntegrator.b : double[]"
call "org.apache.commons.math.ode.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double)" "org.apache.commons.math.ode.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator()"
call "org.apache.commons.math.ode.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double)" "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)"
contain "org.apache.commons.math.ode.ThreeEighthesIntegrator" "org.apache.commons.math.ode.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double)"
contain "org.apache.commons.math.ode.ThreeEighthesIntegrator" "org.apache.commons.math.ode.ThreeEighthesIntegrator.getName()"
reference "org.apache.commons.math.ode.ThreeEighthesIntegrator.static {...}" "org.apache.commons.math.ode.ThreeEighthesIntegrator.c : double[]"
reference "org.apache.commons.math.ode.ThreeEighthesIntegrator.static {...}" "org.apache.commons.math.ode.ThreeEighthesIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.ThreeEighthesIntegrator.static {...}" "org.apache.commons.math.ode.ThreeEighthesIntegrator.b : double[]"
contain "org.apache.commons.math.ode.ThreeEighthesIntegrator" "org.apache.commons.math.ode.ThreeEighthesIntegrator.static {...}"
contain "org.apache.commons.math.ode.ThreeEighthesIntegrator" "org.apache.commons.math.ode.ThreeEighthesIntegrator.methodName : String"
reference "org.apache.commons.math.ode.ThreeEighthesIntegrator.c : double[]" "double[]"
contain "org.apache.commons.math.ode.ThreeEighthesIntegrator" "org.apache.commons.math.ode.ThreeEighthesIntegrator.c : double[]"
reference "org.apache.commons.math.ode.ThreeEighthesIntegrator.a : double[][]" "double[][]"
contain "org.apache.commons.math.ode.ThreeEighthesIntegrator" "org.apache.commons.math.ode.ThreeEighthesIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.ThreeEighthesIntegrator.b : double[]" "double[]"
contain "org.apache.commons.math.ode.ThreeEighthesIntegrator" "org.apache.commons.math.ode.ThreeEighthesIntegrator.b : double[]"
reference "org.apache.commons.math.util.DefaultTransformer" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.util.DefaultTransformer" "org.apache.commons.math.util.NumberTransformer"
contain "org.apache.commons.math.util.DefaultTransformer" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.DefaultTransformer.transform(Object)" "org.apache.commons.math.MathException.MathException(String,Object[])"
call "org.apache.commons.math.util.DefaultTransformer.transform(Object)" "org.apache.commons.math.MathException.MathException(String,Object[],Throwable)"
contain "org.apache.commons.math.util.DefaultTransformer" "org.apache.commons.math.util.DefaultTransformer.transform(Object)"
contain "org.apache.commons.math.util.DefaultTransformer" "org.apache.commons.math.util.DefaultTransformer.serialVersionUID : long"
reference "org.apache.commons.math.analysis.MullerSolver" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.analysis.MullerSolver" "org.apache.commons.math.analysis.UnivariateRealSolverImpl"
reference "org.apache.commons.math.analysis.MullerSolver" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.MullerSolver" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.analysis.MullerSolver" "org.apache.commons.math.util.MathUtils"
call "org.apache.commons.math.analysis.MullerSolver.MullerSolver(UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)"
contain "org.apache.commons.math.analysis.MullerSolver" "org.apache.commons.math.analysis.MullerSolver.MullerSolver(UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.MullerSolver.solve(double,double,double)" "org.apache.commons.math.analysis.MullerSolver.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.MullerSolver.solve(double,double,double)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.MullerSolver.solve(double,double,double)" "org.apache.commons.math.analysis.MullerSolver.verifyBracketing(double,double,UnivariateRealFunction)"
call "org.apache.commons.math.analysis.MullerSolver.solve(double,double,double)" "org.apache.commons.math.analysis.MullerSolver.verifySequence(double,double,double)"
call "org.apache.commons.math.analysis.MullerSolver.solve(double,double,double)" "org.apache.commons.math.analysis.MullerSolver.isBracketing(double,double,UnivariateRealFunction)"
call "org.apache.commons.math.analysis.MullerSolver.solve(double,double,double)" "org.apache.commons.math.analysis.MullerSolver.solve(double,double)"
contain "org.apache.commons.math.analysis.MullerSolver" "org.apache.commons.math.analysis.MullerSolver.solve(double,double,double)"
reference "org.apache.commons.math.analysis.MullerSolver.solve(double,double)" "org.apache.commons.math.analysis.MullerSolver.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.MullerSolver.solve(double,double)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.MullerSolver.solve(double,double)" "org.apache.commons.math.analysis.MullerSolver.verifyBracketing(double,double,UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.MullerSolver.solve(double,double)" "org.apache.commons.math.analysis.MullerSolver.maximalIterationCount : int"
call "org.apache.commons.math.analysis.MullerSolver.solve(double,double)" "org.apache.commons.math.analysis.MullerSolver.isSequence(double,double,double)"
reference "org.apache.commons.math.analysis.MullerSolver.solve(double,double)" "org.apache.commons.math.analysis.MullerSolver.relativeAccuracy : double"
reference "org.apache.commons.math.analysis.MullerSolver.solve(double,double)" "org.apache.commons.math.analysis.MullerSolver.absoluteAccuracy : double"
call "org.apache.commons.math.analysis.MullerSolver.solve(double,double)" "org.apache.commons.math.analysis.MullerSolver.setResult(double,int)"
reference "org.apache.commons.math.analysis.MullerSolver.solve(double,double)" "org.apache.commons.math.analysis.MullerSolver.result : double"
reference "org.apache.commons.math.analysis.MullerSolver.solve(double,double)" "org.apache.commons.math.analysis.MullerSolver.functionValueAccuracy : double"
call "org.apache.commons.math.analysis.MullerSolver.solve(double,double)" "org.apache.commons.math.util.MathUtils.sign(double)"
call "org.apache.commons.math.analysis.MullerSolver.solve(double,double)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
contain "org.apache.commons.math.analysis.MullerSolver" "org.apache.commons.math.analysis.MullerSolver.solve(double,double)"
reference "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)" "org.apache.commons.math.analysis.MullerSolver.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)" "org.apache.commons.math.analysis.MullerSolver.verifyBracketing(double,double,UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)" "org.apache.commons.math.analysis.MullerSolver.maximalIterationCount : int"
reference "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)" "org.apache.commons.math.analysis.MullerSolver.absoluteAccuracy : double"
reference "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)" "org.apache.commons.math.analysis.MullerSolver.relativeAccuracy : double"
call "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)" "org.apache.commons.math.analysis.MullerSolver.setResult(double,int)"
reference "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)" "org.apache.commons.math.analysis.MullerSolver.result : double"
reference "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)" "org.apache.commons.math.analysis.MullerSolver.functionValueAccuracy : double"
call "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
contain "org.apache.commons.math.analysis.MullerSolver" "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)"
contain "org.apache.commons.math.analysis.MullerSolver" "org.apache.commons.math.analysis.MullerSolver.serialVersionUID : long"
reference "org.apache.commons.math.distribution.IntegerDistribution" "org.apache.commons.math.distribution.DiscreteDistribution"
reference "org.apache.commons.math.distribution.IntegerDistribution" "org.apache.commons.math.MathException"
contain "org.apache.commons.math.distribution.IntegerDistribution" "org.apache.commons.math.distribution.IntegerDistribution.probability(int)"
contain "org.apache.commons.math.distribution.IntegerDistribution" "org.apache.commons.math.distribution.IntegerDistribution.cumulativeProbability(int)"
contain "org.apache.commons.math.distribution.IntegerDistribution" "org.apache.commons.math.distribution.IntegerDistribution.cumulativeProbability(int,int)"
contain "org.apache.commons.math.distribution.IntegerDistribution" "org.apache.commons.math.distribution.IntegerDistribution.inverseCumulativeProbability(double)"
reference "org.apache.commons.math.ConvergenceException" "org.apache.commons.math.MathException"
call "org.apache.commons.math.ConvergenceException.ConvergenceException()" "org.apache.commons.math.MathException.MathException(String,Object[])"
contain "org.apache.commons.math.ConvergenceException" "org.apache.commons.math.ConvergenceException.ConvergenceException()"
call "org.apache.commons.math.ConvergenceException.ConvergenceException(String,Object[])" "org.apache.commons.math.MathException.MathException(String,Object[])"
contain "org.apache.commons.math.ConvergenceException" "org.apache.commons.math.ConvergenceException.ConvergenceException(String,Object[])"
call "org.apache.commons.math.ConvergenceException.ConvergenceException(Throwable)" "org.apache.commons.math.MathException.MathException(Throwable)"
contain "org.apache.commons.math.ConvergenceException" "org.apache.commons.math.ConvergenceException.ConvergenceException(Throwable)"
call "org.apache.commons.math.ConvergenceException.ConvergenceException(String,Object[],Throwable)" "org.apache.commons.math.MathException.MathException(String,Object[],Throwable)"
contain "org.apache.commons.math.ConvergenceException" "org.apache.commons.math.ConvergenceException.ConvergenceException(String,Object[],Throwable)"
call "org.apache.commons.math.ConvergenceException.ConvergenceException(String,Throwable)" "org.apache.commons.math.MathException.MathException(String,Throwable)"
contain "org.apache.commons.math.ConvergenceException" "org.apache.commons.math.ConvergenceException.ConvergenceException(String,Throwable)"
call "org.apache.commons.math.ConvergenceException.ConvergenceException(String)" "org.apache.commons.math.MathException.MathException(String)"
contain "org.apache.commons.math.ConvergenceException" "org.apache.commons.math.ConvergenceException.ConvergenceException(String)"
contain "org.apache.commons.math.ConvergenceException" "org.apache.commons.math.ConvergenceException.serialVersionUID : long"
reference "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.descriptive.summary.Sum"
reference "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares"
reference "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.descriptive.summary.Product"
reference "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs"
reference "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.descriptive.rank.Min"
reference "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.descriptive.rank.Max"
reference "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.descriptive.moment.Mean"
reference "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.descriptive.moment.Variance"
reference "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.descriptive.rank.Percentile"
reference "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.descriptive.moment.GeometricMean"
reference "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.StatUtils()"
reference "org.apache.commons.math.stat.StatUtils.sum(double[])" "org.apache.commons.math.stat.StatUtils.sum : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.sum(double[])" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[])"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.sum(double[])"
reference "org.apache.commons.math.stat.StatUtils.sum(double[],int,int)" "org.apache.commons.math.stat.StatUtils.sum : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.sum(double[],int,int)" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.sum(double[],int,int)"
reference "org.apache.commons.math.stat.StatUtils.sumSq(double[])" "org.apache.commons.math.stat.StatUtils.sumSq : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.sumSq(double[])" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[])"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.sumSq(double[])"
reference "org.apache.commons.math.stat.StatUtils.sumSq(double[],int,int)" "org.apache.commons.math.stat.StatUtils.sumSq : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.sumSq(double[],int,int)" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.sumSq(double[],int,int)"
reference "org.apache.commons.math.stat.StatUtils.product(double[])" "org.apache.commons.math.stat.StatUtils.prod : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.product(double[])" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[])"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.product(double[])"
reference "org.apache.commons.math.stat.StatUtils.product(double[],int,int)" "org.apache.commons.math.stat.StatUtils.prod : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.product(double[],int,int)" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.product(double[],int,int)"
reference "org.apache.commons.math.stat.StatUtils.sumLog(double[])" "org.apache.commons.math.stat.StatUtils.sumLog : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.sumLog(double[])" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[])"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.sumLog(double[])"
reference "org.apache.commons.math.stat.StatUtils.sumLog(double[],int,int)" "org.apache.commons.math.stat.StatUtils.sumLog : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.sumLog(double[],int,int)" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.sumLog(double[],int,int)"
reference "org.apache.commons.math.stat.StatUtils.mean(double[])" "org.apache.commons.math.stat.StatUtils.mean : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.mean(double[])" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[])"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.mean(double[])"
reference "org.apache.commons.math.stat.StatUtils.mean(double[],int,int)" "org.apache.commons.math.stat.StatUtils.mean : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.mean(double[],int,int)" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.mean(double[],int,int)"
reference "org.apache.commons.math.stat.StatUtils.geometricMean(double[])" "org.apache.commons.math.stat.StatUtils.geometricMean : GeometricMean"
call "org.apache.commons.math.stat.StatUtils.geometricMean(double[])" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.evaluate(double[])"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.geometricMean(double[])"
reference "org.apache.commons.math.stat.StatUtils.geometricMean(double[],int,int)" "org.apache.commons.math.stat.StatUtils.geometricMean : GeometricMean"
call "org.apache.commons.math.stat.StatUtils.geometricMean(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.geometricMean(double[],int,int)"
reference "org.apache.commons.math.stat.StatUtils.variance(double[])" "org.apache.commons.math.stat.StatUtils.variance : Variance"
call "org.apache.commons.math.stat.StatUtils.variance(double[])" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[])"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.variance(double[])"
reference "org.apache.commons.math.stat.StatUtils.variance(double[],int,int)" "org.apache.commons.math.stat.StatUtils.variance : Variance"
call "org.apache.commons.math.stat.StatUtils.variance(double[],int,int)" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.variance(double[],int,int)"
reference "org.apache.commons.math.stat.StatUtils.variance(double[],double,int,int)" "org.apache.commons.math.stat.StatUtils.variance : Variance"
call "org.apache.commons.math.stat.StatUtils.variance(double[],double,int,int)" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],double,int,int)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.variance(double[],double,int,int)"
reference "org.apache.commons.math.stat.StatUtils.variance(double[],double)" "org.apache.commons.math.stat.StatUtils.variance : Variance"
call "org.apache.commons.math.stat.StatUtils.variance(double[],double)" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],double)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.variance(double[],double)"
reference "org.apache.commons.math.stat.StatUtils.max(double[])" "org.apache.commons.math.stat.StatUtils.max : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.max(double[])" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[])"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.max(double[])"
reference "org.apache.commons.math.stat.StatUtils.max(double[],int,int)" "org.apache.commons.math.stat.StatUtils.max : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.max(double[],int,int)" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.max(double[],int,int)"
reference "org.apache.commons.math.stat.StatUtils.min(double[])" "org.apache.commons.math.stat.StatUtils.min : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.min(double[])" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[])"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.min(double[])"
reference "org.apache.commons.math.stat.StatUtils.min(double[],int,int)" "org.apache.commons.math.stat.StatUtils.min : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.min(double[],int,int)" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.min(double[],int,int)"
reference "org.apache.commons.math.stat.StatUtils.percentile(double[],double)" "org.apache.commons.math.stat.StatUtils.percentile : Percentile"
call "org.apache.commons.math.stat.StatUtils.percentile(double[],double)" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],double)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.percentile(double[],double)"
reference "org.apache.commons.math.stat.StatUtils.percentile(double[],int,int,double)" "org.apache.commons.math.stat.StatUtils.percentile : Percentile"
call "org.apache.commons.math.stat.StatUtils.percentile(double[],int,int,double)" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int,double)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.percentile(double[],int,int,double)"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.sumDifference(double[],double[])"
call "org.apache.commons.math.stat.StatUtils.meanDifference(double[],double[])" "org.apache.commons.math.stat.StatUtils.sumDifference(double[],double[])"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.meanDifference(double[],double[])"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.varianceDifference(double[],double[],double)"
call "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.descriptive.summary.Sum.Sum()"
reference "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.StatUtils.sum : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.SumOfSquares()"
reference "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.StatUtils.sumSq : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.descriptive.summary.Product.Product()"
reference "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.StatUtils.prod : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.SumOfLogs()"
reference "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.StatUtils.sumLog : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.descriptive.rank.Min.Min()"
reference "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.StatUtils.min : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.descriptive.rank.Max.Max()"
reference "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.StatUtils.max : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
reference "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.StatUtils.mean : UnivariateStatistic"
call "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()"
reference "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.StatUtils.variance : Variance"
call "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile()"
reference "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.StatUtils.percentile : Percentile"
call "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.GeometricMean()"
reference "org.apache.commons.math.stat.StatUtils.static {...}" "org.apache.commons.math.stat.StatUtils.geometricMean : GeometricMean"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.static {...}"
reference "org.apache.commons.math.stat.StatUtils.sum : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.sum : UnivariateStatistic"
reference "org.apache.commons.math.stat.StatUtils.sumSq : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.sumSq : UnivariateStatistic"
reference "org.apache.commons.math.stat.StatUtils.prod : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.prod : UnivariateStatistic"
reference "org.apache.commons.math.stat.StatUtils.sumLog : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.sumLog : UnivariateStatistic"
reference "org.apache.commons.math.stat.StatUtils.min : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.min : UnivariateStatistic"
reference "org.apache.commons.math.stat.StatUtils.max : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.max : UnivariateStatistic"
reference "org.apache.commons.math.stat.StatUtils.mean : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.mean : UnivariateStatistic"
reference "org.apache.commons.math.stat.StatUtils.variance : Variance" "org.apache.commons.math.stat.descriptive.moment.Variance"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.variance : Variance"
reference "org.apache.commons.math.stat.StatUtils.percentile : Percentile" "org.apache.commons.math.stat.descriptive.rank.Percentile"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.percentile : Percentile"
reference "org.apache.commons.math.stat.StatUtils.geometricMean : GeometricMean" "org.apache.commons.math.stat.descriptive.moment.GeometricMean"
contain "org.apache.commons.math.stat.StatUtils" "org.apache.commons.math.stat.StatUtils.geometricMean : GeometricMean"
reference "org.apache.commons.math.ode.MidpointIntegrator" "org.apache.commons.math.ode.MidpointStepInterpolator"
reference "org.apache.commons.math.ode.MidpointIntegrator" "double[]"
reference "org.apache.commons.math.ode.MidpointIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator"
reference "org.apache.commons.math.ode.MidpointIntegrator.MidpointIntegrator(double)" "org.apache.commons.math.ode.MidpointIntegrator.c : double[]"
reference "org.apache.commons.math.ode.MidpointIntegrator.MidpointIntegrator(double)" "org.apache.commons.math.ode.MidpointIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.MidpointIntegrator.MidpointIntegrator(double)" "org.apache.commons.math.ode.MidpointIntegrator.b : double[]"
call "org.apache.commons.math.ode.MidpointIntegrator.MidpointIntegrator(double)" "org.apache.commons.math.ode.MidpointStepInterpolator.MidpointStepInterpolator()"
call "org.apache.commons.math.ode.MidpointIntegrator.MidpointIntegrator(double)" "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)"
contain "org.apache.commons.math.ode.MidpointIntegrator" "org.apache.commons.math.ode.MidpointIntegrator.MidpointIntegrator(double)"
contain "org.apache.commons.math.ode.MidpointIntegrator" "org.apache.commons.math.ode.MidpointIntegrator.getName()"
reference "org.apache.commons.math.ode.MidpointIntegrator.static {...}" "org.apache.commons.math.ode.MidpointIntegrator.c : double[]"
reference "org.apache.commons.math.ode.MidpointIntegrator.static {...}" "org.apache.commons.math.ode.MidpointIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.MidpointIntegrator.static {...}" "org.apache.commons.math.ode.MidpointIntegrator.b : double[]"
contain "org.apache.commons.math.ode.MidpointIntegrator" "org.apache.commons.math.ode.MidpointIntegrator.static {...}"
contain "org.apache.commons.math.ode.MidpointIntegrator" "org.apache.commons.math.ode.MidpointIntegrator.methodName : String"
reference "org.apache.commons.math.ode.MidpointIntegrator.c : double[]" "double[]"
contain "org.apache.commons.math.ode.MidpointIntegrator" "org.apache.commons.math.ode.MidpointIntegrator.c : double[]"
reference "org.apache.commons.math.ode.MidpointIntegrator.a : double[][]" "double[][]"
contain "org.apache.commons.math.ode.MidpointIntegrator" "org.apache.commons.math.ode.MidpointIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.MidpointIntegrator.b : double[]" "double[]"
contain "org.apache.commons.math.ode.MidpointIntegrator" "org.apache.commons.math.ode.MidpointIntegrator.b : double[]"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummary" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMean()"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummary" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getVariance()"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummary" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getStandardDeviation()"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummary" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMax()"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummary" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMin()"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummary" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getN()"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummary" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getSum()"
reference "org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction" "org.apache.commons.math.analysis.UnivariateRealFunction"
contain "org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction" "org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction.derivative()"
reference "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.DoubleArray"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray()" "org.apache.commons.math.util.ResizableDoubleArray.contractionCriteria : float"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray()" "org.apache.commons.math.util.ResizableDoubleArray.expansionFactor : float"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray()" "org.apache.commons.math.util.ResizableDoubleArray.expansionMode : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray()" "org.apache.commons.math.util.ResizableDoubleArray.initialCapacity : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray()" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray()" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray()" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray()"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int)" "org.apache.commons.math.util.ResizableDoubleArray.contractionCriteria : float"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int)" "org.apache.commons.math.util.ResizableDoubleArray.expansionFactor : float"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int)" "org.apache.commons.math.util.ResizableDoubleArray.expansionMode : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int)" "org.apache.commons.math.util.ResizableDoubleArray.initialCapacity : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int)" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int)" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
call "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int)" "org.apache.commons.math.util.ResizableDoubleArray.setInitialCapacity(int)"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int)" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int)"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float)" "org.apache.commons.math.util.ResizableDoubleArray.contractionCriteria : float"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float)" "org.apache.commons.math.util.ResizableDoubleArray.expansionFactor : float"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float)" "org.apache.commons.math.util.ResizableDoubleArray.expansionMode : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float)" "org.apache.commons.math.util.ResizableDoubleArray.initialCapacity : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float)" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float)" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
call "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float)" "org.apache.commons.math.util.ResizableDoubleArray.setInitialCapacity(int)"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float)" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
call "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float)" "org.apache.commons.math.util.ResizableDoubleArray.setContractionCriteria(float)"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float)"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float)" "org.apache.commons.math.util.ResizableDoubleArray.contractionCriteria : float"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float)" "org.apache.commons.math.util.ResizableDoubleArray.expansionFactor : float"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float)" "org.apache.commons.math.util.ResizableDoubleArray.expansionMode : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float)" "org.apache.commons.math.util.ResizableDoubleArray.initialCapacity : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float)" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float)" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
call "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float)" "org.apache.commons.math.util.ResizableDoubleArray.setContractionCriteria(float)"
call "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float)" "org.apache.commons.math.util.ResizableDoubleArray.setInitialCapacity(int)"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float)" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float)"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)" "org.apache.commons.math.util.ResizableDoubleArray.contractionCriteria : float"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)" "org.apache.commons.math.util.ResizableDoubleArray.expansionFactor : float"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)" "org.apache.commons.math.util.ResizableDoubleArray.expansionMode : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)" "org.apache.commons.math.util.ResizableDoubleArray.initialCapacity : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
call "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)" "org.apache.commons.math.util.ResizableDoubleArray.setContractionCriteria(float)"
call "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)" "org.apache.commons.math.util.ResizableDoubleArray.setInitialCapacity(int)"
call "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)" "org.apache.commons.math.util.ResizableDoubleArray.setExpansionMode(int)"
reference "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)"
reference "org.apache.commons.math.util.ResizableDoubleArray.addElement(double)" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.addElement(double)" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.addElement(double)" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
call "org.apache.commons.math.util.ResizableDoubleArray.addElement(double)" "org.apache.commons.math.util.ResizableDoubleArray.expand()"
call "org.apache.commons.math.util.ResizableDoubleArray.addElement(double)" "org.apache.commons.math.util.ResizableDoubleArray.shouldContract()"
call "org.apache.commons.math.util.ResizableDoubleArray.addElement(double)" "org.apache.commons.math.util.ResizableDoubleArray.contract()"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.addElement(double)"
reference "org.apache.commons.math.util.ResizableDoubleArray.addElementRolling(double)" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
reference "org.apache.commons.math.util.ResizableDoubleArray.addElementRolling(double)" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.addElementRolling(double)" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
call "org.apache.commons.math.util.ResizableDoubleArray.addElementRolling(double)" "org.apache.commons.math.util.ResizableDoubleArray.expand()"
call "org.apache.commons.math.util.ResizableDoubleArray.addElementRolling(double)" "org.apache.commons.math.util.ResizableDoubleArray.shouldContract()"
call "org.apache.commons.math.util.ResizableDoubleArray.addElementRolling(double)" "org.apache.commons.math.util.ResizableDoubleArray.contract()"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.addElementRolling(double)"
reference "org.apache.commons.math.util.ResizableDoubleArray.checkContractExpand(float,float)" "org.apache.commons.math.util.ResizableDoubleArray.contractionCriteria : float"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.checkContractExpand(float,float)"
reference "org.apache.commons.math.util.ResizableDoubleArray.clear()" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.clear()" "org.apache.commons.math.util.ResizableDoubleArray.initialCapacity : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.clear()" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.clear()"
reference "org.apache.commons.math.util.ResizableDoubleArray.contract()" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.contract()" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
reference "org.apache.commons.math.util.ResizableDoubleArray.contract()" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.contract()"
reference "org.apache.commons.math.util.ResizableDoubleArray.discardFrontElements(int)" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.discardFrontElements(int)" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
call "org.apache.commons.math.util.ResizableDoubleArray.discardFrontElements(int)" "org.apache.commons.math.util.ResizableDoubleArray.shouldContract()"
call "org.apache.commons.math.util.ResizableDoubleArray.discardFrontElements(int)" "org.apache.commons.math.util.ResizableDoubleArray.contract()"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.discardFrontElements(int)"
reference "org.apache.commons.math.util.ResizableDoubleArray.expand()" "org.apache.commons.math.util.ResizableDoubleArray.expansionMode : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.expand()" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
reference "org.apache.commons.math.util.ResizableDoubleArray.expand()" "org.apache.commons.math.util.ResizableDoubleArray.expansionFactor : float"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.expand()"
reference "org.apache.commons.math.util.ResizableDoubleArray.expandTo(int)" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.expandTo(int)"
reference "org.apache.commons.math.util.ResizableDoubleArray.getContractionCriteria()" "org.apache.commons.math.util.ResizableDoubleArray.contractionCriteria : float"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.getContractionCriteria()"
reference "org.apache.commons.math.util.ResizableDoubleArray.getElement(int)" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.getElement(int)" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
reference "org.apache.commons.math.util.ResizableDoubleArray.getElement(int)" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.getElement(int)"
reference "org.apache.commons.math.util.ResizableDoubleArray.getElements()" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.getElements()" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
reference "org.apache.commons.math.util.ResizableDoubleArray.getElements()" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.getElements()"
reference "org.apache.commons.math.util.ResizableDoubleArray.getExpansionFactor()" "org.apache.commons.math.util.ResizableDoubleArray.expansionFactor : float"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.getExpansionFactor()"
reference "org.apache.commons.math.util.ResizableDoubleArray.getExpansionMode()" "org.apache.commons.math.util.ResizableDoubleArray.expansionMode : int"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.getExpansionMode()"
reference "org.apache.commons.math.util.ResizableDoubleArray.getInternalLength()" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.getInternalLength()"
reference "org.apache.commons.math.util.ResizableDoubleArray.getNumElements()" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.getNumElements()"
reference "org.apache.commons.math.util.ResizableDoubleArray.getValues()" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.getValues()"
call "org.apache.commons.math.util.ResizableDoubleArray.setContractionCriteria(float)" "org.apache.commons.math.util.ResizableDoubleArray.getExpansionFactor()"
call "org.apache.commons.math.util.ResizableDoubleArray.setContractionCriteria(float)" "org.apache.commons.math.util.ResizableDoubleArray.checkContractExpand(float,float)"
reference "org.apache.commons.math.util.ResizableDoubleArray.setContractionCriteria(float)" "org.apache.commons.math.util.ResizableDoubleArray.contractionCriteria : float"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.setContractionCriteria(float)"
reference "org.apache.commons.math.util.ResizableDoubleArray.setElement(int,double)" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.setElement(int,double)" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.setElement(int,double)" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
call "org.apache.commons.math.util.ResizableDoubleArray.setElement(int,double)" "org.apache.commons.math.util.ResizableDoubleArray.expandTo(int)"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.setElement(int,double)"
call "org.apache.commons.math.util.ResizableDoubleArray.setExpansionFactor(float)" "org.apache.commons.math.util.ResizableDoubleArray.getContractionCriteria()"
call "org.apache.commons.math.util.ResizableDoubleArray.setExpansionFactor(float)" "org.apache.commons.math.util.ResizableDoubleArray.checkContractExpand(float,float)"
reference "org.apache.commons.math.util.ResizableDoubleArray.setExpansionFactor(float)" "org.apache.commons.math.util.ResizableDoubleArray.expansionFactor : float"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.setExpansionFactor(float)"
reference "org.apache.commons.math.util.ResizableDoubleArray.setExpansionMode(int)" "org.apache.commons.math.util.ResizableDoubleArray.expansionMode : int"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.setExpansionMode(int)"
reference "org.apache.commons.math.util.ResizableDoubleArray.setInitialCapacity(int)" "org.apache.commons.math.util.ResizableDoubleArray.initialCapacity : int"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.setInitialCapacity(int)"
reference "org.apache.commons.math.util.ResizableDoubleArray.setNumElements(int)" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.setNumElements(int)" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
call "org.apache.commons.math.util.ResizableDoubleArray.setNumElements(int)" "org.apache.commons.math.util.ResizableDoubleArray.expandTo(int)"
reference "org.apache.commons.math.util.ResizableDoubleArray.setNumElements(int)" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.setNumElements(int)"
reference "org.apache.commons.math.util.ResizableDoubleArray.shouldContract()" "org.apache.commons.math.util.ResizableDoubleArray.expansionMode : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.shouldContract()" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
reference "org.apache.commons.math.util.ResizableDoubleArray.shouldContract()" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.shouldContract()" "org.apache.commons.math.util.ResizableDoubleArray.contractionCriteria : float"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.shouldContract()"
reference "org.apache.commons.math.util.ResizableDoubleArray.start()" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.start()"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.serialVersionUID : long"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE : int"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE : int"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.contractionCriteria : float"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.expansionFactor : float"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.expansionMode : int"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.initialCapacity : int"
reference "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]" "double[]"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.internalArray : double[]"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.numElements : int"
contain "org.apache.commons.math.util.ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray.startIndex : int"
reference "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.AbstractStepInterpolator"
reference "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()" "org.apache.commons.math.ode.ContinuousOutputModel.steps : ArrayList"
call "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()" "org.apache.commons.math.ode.ContinuousOutputModel.reset()"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
reference "org.apache.commons.math.ode.ContinuousOutputModel.append(ContinuousOutputModel)" "org.apache.commons.math.ode.ContinuousOutputModel.steps : ArrayList"
reference "org.apache.commons.math.ode.ContinuousOutputModel.append(ContinuousOutputModel)" "org.apache.commons.math.ode.ContinuousOutputModel.initialTime : double"
reference "org.apache.commons.math.ode.ContinuousOutputModel.append(ContinuousOutputModel)" "org.apache.commons.math.ode.ContinuousOutputModel.forward : boolean"
call "org.apache.commons.math.ode.ContinuousOutputModel.append(ContinuousOutputModel)" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()"
reference "org.apache.commons.math.ode.ContinuousOutputModel.append(ContinuousOutputModel)" "org.apache.commons.math.ode.ContinuousOutputModel.index : int"
call "org.apache.commons.math.ode.ContinuousOutputModel.append(ContinuousOutputModel)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.ContinuousOutputModel.append(ContinuousOutputModel)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.ContinuousOutputModel.append(ContinuousOutputModel)" "org.apache.commons.math.ode.ContinuousOutputModel.getInitialTime()"
call "org.apache.commons.math.ode.ContinuousOutputModel.append(ContinuousOutputModel)" "org.apache.commons.math.ode.AbstractStepInterpolator.copy()"
reference "org.apache.commons.math.ode.ContinuousOutputModel.append(ContinuousOutputModel)" "org.apache.commons.math.ode.ContinuousOutputModel.finalTime : double"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.append(ContinuousOutputModel)"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.requiresDenseOutput()"
reference "org.apache.commons.math.ode.ContinuousOutputModel.reset()" "org.apache.commons.math.ode.ContinuousOutputModel.initialTime : double"
reference "org.apache.commons.math.ode.ContinuousOutputModel.reset()" "org.apache.commons.math.ode.ContinuousOutputModel.finalTime : double"
reference "org.apache.commons.math.ode.ContinuousOutputModel.reset()" "org.apache.commons.math.ode.ContinuousOutputModel.forward : boolean"
reference "org.apache.commons.math.ode.ContinuousOutputModel.reset()" "org.apache.commons.math.ode.ContinuousOutputModel.index : int"
reference "org.apache.commons.math.ode.ContinuousOutputModel.reset()" "org.apache.commons.math.ode.ContinuousOutputModel.steps : ArrayList"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.reset()"
reference "org.apache.commons.math.ode.ContinuousOutputModel.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.ContinuousOutputModel.steps : ArrayList"
call "org.apache.commons.math.ode.ContinuousOutputModel.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
reference "org.apache.commons.math.ode.ContinuousOutputModel.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.ContinuousOutputModel.initialTime : double"
call "org.apache.commons.math.ode.ContinuousOutputModel.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.isForward()"
reference "org.apache.commons.math.ode.ContinuousOutputModel.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.ContinuousOutputModel.forward : boolean"
call "org.apache.commons.math.ode.ContinuousOutputModel.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.copy()"
call "org.apache.commons.math.ode.ContinuousOutputModel.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.getCurrentTime()"
reference "org.apache.commons.math.ode.ContinuousOutputModel.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.ContinuousOutputModel.finalTime : double"
reference "org.apache.commons.math.ode.ContinuousOutputModel.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.ContinuousOutputModel.index : int"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.handleStep(StepInterpolator,boolean)"
reference "org.apache.commons.math.ode.ContinuousOutputModel.getInitialTime()" "org.apache.commons.math.ode.ContinuousOutputModel.initialTime : double"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.getInitialTime()"
reference "org.apache.commons.math.ode.ContinuousOutputModel.getFinalTime()" "org.apache.commons.math.ode.ContinuousOutputModel.finalTime : double"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.getFinalTime()"
reference "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedTime()" "org.apache.commons.math.ode.ContinuousOutputModel.steps : ArrayList"
reference "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedTime()" "org.apache.commons.math.ode.ContinuousOutputModel.index : int"
call "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedTime()" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedTime()"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedTime()"
reference "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)" "org.apache.commons.math.ode.ContinuousOutputModel.steps : ArrayList"
call "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)" "org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double,StepInterpolator)"
reference "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)" "org.apache.commons.math.ode.ContinuousOutputModel.index : int"
call "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)" "org.apache.commons.math.ode.DerivativeException.getMessage()"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)"
reference "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()" "org.apache.commons.math.ode.ContinuousOutputModel.steps : ArrayList"
reference "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()" "org.apache.commons.math.ode.ContinuousOutputModel.index : int"
call "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()"
reference "org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double,StepInterpolator)" "org.apache.commons.math.ode.ContinuousOutputModel.forward : boolean"
call "org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double,StepInterpolator)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double,StepInterpolator)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double,StepInterpolator)"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.initialTime : double"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.finalTime : double"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.forward : boolean"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.index : int"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.steps : ArrayList"
contain "org.apache.commons.math.ode.ContinuousOutputModel" "org.apache.commons.math.ode.ContinuousOutputModel.serialVersionUID : long"
reference "org.apache.commons.math.distribution.GammaDistribution" "org.apache.commons.math.distribution.ContinuousDistribution"
contain "org.apache.commons.math.distribution.GammaDistribution" "org.apache.commons.math.distribution.GammaDistribution.setAlpha(double)"
contain "org.apache.commons.math.distribution.GammaDistribution" "org.apache.commons.math.distribution.GammaDistribution.getAlpha()"
contain "org.apache.commons.math.distribution.GammaDistribution" "org.apache.commons.math.distribution.GammaDistribution.setBeta(double)"
contain "org.apache.commons.math.distribution.GammaDistribution" "org.apache.commons.math.distribution.GammaDistribution.getBeta()"
reference "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.MathException"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.pairedT(double[],double[])"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.pairedTTest(double[],double[])"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.pairedTTest(double[],double[],double)"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.t(double,double[])"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.t(double,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.homoscedasticT(double[],double[])"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.t(double[],double[])"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.t(StatisticalSummary,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.homoscedasticT(StatisticalSummary,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.tTest(double,double[])"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.tTest(double,double[],double)"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.tTest(double,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.tTest(double,StatisticalSummary,double)"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.tTest(double[],double[])"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.homoscedasticTTest(double[],double[])"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.tTest(double[],double[],double)"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.homoscedasticTTest(double[],double[],double)"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.tTest(StatisticalSummary,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.homoscedasticTTest(StatisticalSummary,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TTest" "org.apache.commons.math.stat.inference.TTest.tTest(StatisticalSummary,StatisticalSummary,double)"
reference "org.apache.commons.math.analysis.UnivariateRealInterpolator" "org.apache.commons.math.MathException"
contain "org.apache.commons.math.analysis.UnivariateRealInterpolator" "org.apache.commons.math.analysis.UnivariateRealInterpolator.interpolate(double[],double[])"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator" "double[]"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaIntegrator"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.c : double[]"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.b : double[]"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)" "org.apache.commons.math.ode.RungeKuttaIntegrator.RungeKuttaIntegrator(double[],double[][],double[],RungeKuttaStepInterpolator,double)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.getName()"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.static {...}" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.c : double[]"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.static {...}" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.static {...}" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.b : double[]"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.static {...}"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.methodName : String"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.c : double[]" "double[]"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.c : double[]"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.a : double[][]" "double[][]"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.b : double[]" "double[]"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.b : double[]"
reference "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.ProperFractionFormat"
reference "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.Fraction"
reference "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.ConvergenceException"
call "org.apache.commons.math.fraction.FractionFormat.FractionFormat()" "org.apache.commons.math.fraction.FractionFormat.getDefaultNumberFormat()"
call "org.apache.commons.math.fraction.FractionFormat.FractionFormat()" "org.apache.commons.math.fraction.FractionFormat.FractionFormat(NumberFormat)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.FractionFormat()"
call "org.apache.commons.math.fraction.FractionFormat.FractionFormat(NumberFormat)" "org.apache.commons.math.fraction.FractionFormat.FractionFormat(NumberFormat,NumberFormat)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.FractionFormat(NumberFormat)"
reference "org.apache.commons.math.fraction.FractionFormat.FractionFormat(NumberFormat,NumberFormat)" "org.apache.commons.math.fraction.FractionFormat.numeratorFormat : NumberFormat"
reference "org.apache.commons.math.fraction.FractionFormat.FractionFormat(NumberFormat,NumberFormat)" "org.apache.commons.math.fraction.FractionFormat.denominatorFormat : NumberFormat"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.FractionFormat(NumberFormat,NumberFormat)"
call "org.apache.commons.math.fraction.FractionFormat.formatFraction(Fraction)" "org.apache.commons.math.fraction.FractionFormat.getImproperInstance()"
call "org.apache.commons.math.fraction.FractionFormat.formatFraction(Fraction)" "org.apache.commons.math.fraction.FractionFormat.format(Object)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.formatFraction(Fraction)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.getAvailableLocales()"
call "org.apache.commons.math.fraction.FractionFormat.getImproperInstance()" "org.apache.commons.math.fraction.FractionFormat.getImproperInstance(Locale)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.getImproperInstance()"
call "org.apache.commons.math.fraction.FractionFormat.getImproperInstance(Locale)" "org.apache.commons.math.fraction.FractionFormat.getDefaultNumberFormat(Locale)"
call "org.apache.commons.math.fraction.FractionFormat.getImproperInstance(Locale)" "org.apache.commons.math.fraction.FractionFormat.FractionFormat(NumberFormat)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.getImproperInstance(Locale)"
call "org.apache.commons.math.fraction.FractionFormat.getProperInstance()" "org.apache.commons.math.fraction.FractionFormat.getProperInstance(Locale)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.getProperInstance()"
call "org.apache.commons.math.fraction.FractionFormat.getProperInstance(Locale)" "org.apache.commons.math.fraction.FractionFormat.getDefaultNumberFormat(Locale)"
call "org.apache.commons.math.fraction.FractionFormat.getProperInstance(Locale)" "org.apache.commons.math.fraction.ProperFractionFormat.ProperFractionFormat(NumberFormat)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.getProperInstance(Locale)"
call "org.apache.commons.math.fraction.FractionFormat.getDefaultNumberFormat()" "org.apache.commons.math.fraction.FractionFormat.getDefaultNumberFormat(Locale)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.getDefaultNumberFormat()"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.getDefaultNumberFormat(Locale)"
call "org.apache.commons.math.fraction.FractionFormat.format(Fraction,StringBuffer,FieldPosition)" "org.apache.commons.math.fraction.FractionFormat.getNumeratorFormat()"
call "org.apache.commons.math.fraction.FractionFormat.format(Fraction,StringBuffer,FieldPosition)" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionFormat.format(Fraction,StringBuffer,FieldPosition)" "org.apache.commons.math.fraction.FractionFormat.getDenominatorFormat()"
call "org.apache.commons.math.fraction.FractionFormat.format(Fraction,StringBuffer,FieldPosition)" "org.apache.commons.math.fraction.Fraction.getDenominator()"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.format(Fraction,StringBuffer,FieldPosition)"
call "org.apache.commons.math.fraction.FractionFormat.format(Object,StringBuffer,FieldPosition)" "org.apache.commons.math.fraction.FractionFormat.format(Fraction,StringBuffer,FieldPosition)"
call "org.apache.commons.math.fraction.FractionFormat.format(Object,StringBuffer,FieldPosition)" "org.apache.commons.math.fraction.Fraction.Fraction(double)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.format(Object,StringBuffer,FieldPosition)"
reference "org.apache.commons.math.fraction.FractionFormat.getDenominatorFormat()" "org.apache.commons.math.fraction.FractionFormat.denominatorFormat : NumberFormat"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.getDenominatorFormat()"
reference "org.apache.commons.math.fraction.FractionFormat.getNumeratorFormat()" "org.apache.commons.math.fraction.FractionFormat.numeratorFormat : NumberFormat"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.getNumeratorFormat()"
call "org.apache.commons.math.fraction.FractionFormat.parse(String)" "org.apache.commons.math.fraction.FractionFormat.parse(String,ParsePosition)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.parse(String)"
call "org.apache.commons.math.fraction.FractionFormat.parse(String,ParsePosition)" "org.apache.commons.math.fraction.FractionFormat.parseAndIgnoreWhitespace(String,ParsePosition)"
call "org.apache.commons.math.fraction.FractionFormat.parse(String,ParsePosition)" "org.apache.commons.math.fraction.FractionFormat.getNumeratorFormat()"
call "org.apache.commons.math.fraction.FractionFormat.parse(String,ParsePosition)" "org.apache.commons.math.fraction.FractionFormat.parseNextCharacter(String,ParsePosition)"
call "org.apache.commons.math.fraction.FractionFormat.parse(String,ParsePosition)" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionFormat.parse(String,ParsePosition)" "org.apache.commons.math.fraction.FractionFormat.getDenominatorFormat()"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.parse(String,ParsePosition)"
call "org.apache.commons.math.fraction.FractionFormat.parseObject(String,ParsePosition)" "org.apache.commons.math.fraction.FractionFormat.parse(String,ParsePosition)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.parseObject(String,ParsePosition)"
reference "org.apache.commons.math.fraction.FractionFormat.setDenominatorFormat(NumberFormat)" "org.apache.commons.math.fraction.FractionFormat.denominatorFormat : NumberFormat"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.setDenominatorFormat(NumberFormat)"
reference "org.apache.commons.math.fraction.FractionFormat.setNumeratorFormat(NumberFormat)" "org.apache.commons.math.fraction.FractionFormat.numeratorFormat : NumberFormat"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.setNumeratorFormat(NumberFormat)"
call "org.apache.commons.math.fraction.FractionFormat.parseAndIgnoreWhitespace(String,ParsePosition)" "org.apache.commons.math.fraction.FractionFormat.parseNextCharacter(String,ParsePosition)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.parseAndIgnoreWhitespace(String,ParsePosition)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.parseNextCharacter(String,ParsePosition)"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.serialVersionUID : long"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.denominatorFormat : NumberFormat"
contain "org.apache.commons.math.fraction.FractionFormat" "org.apache.commons.math.fraction.FractionFormat.numeratorFormat : NumberFormat"
reference "org.apache.commons.math.analysis.PolynomialFunction" "org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction"
reference "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])" "org.apache.commons.math.analysis.PolynomialFunction.coefficients : double[]"
contain "org.apache.commons.math.analysis.PolynomialFunction" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
reference "org.apache.commons.math.analysis.PolynomialFunction.value(double)" "org.apache.commons.math.analysis.PolynomialFunction.coefficients : double[]"
call "org.apache.commons.math.analysis.PolynomialFunction.value(double)" "org.apache.commons.math.analysis.PolynomialFunction.evaluate(double[],double)"
contain "org.apache.commons.math.analysis.PolynomialFunction" "org.apache.commons.math.analysis.PolynomialFunction.value(double)"
reference "org.apache.commons.math.analysis.PolynomialFunction.degree()" "org.apache.commons.math.analysis.PolynomialFunction.coefficients : double[]"
contain "org.apache.commons.math.analysis.PolynomialFunction" "org.apache.commons.math.analysis.PolynomialFunction.degree()"
reference "org.apache.commons.math.analysis.PolynomialFunction.getCoefficients()" "org.apache.commons.math.analysis.PolynomialFunction.coefficients : double[]"
contain "org.apache.commons.math.analysis.PolynomialFunction" "org.apache.commons.math.analysis.PolynomialFunction.getCoefficients()"
contain "org.apache.commons.math.analysis.PolynomialFunction" "org.apache.commons.math.analysis.PolynomialFunction.evaluate(double[],double)"
contain "org.apache.commons.math.analysis.PolynomialFunction" "org.apache.commons.math.analysis.PolynomialFunction.differentiate(double[])"
reference "org.apache.commons.math.analysis.PolynomialFunction.polynomialDerivative()" "org.apache.commons.math.analysis.PolynomialFunction.coefficients : double[]"
call "org.apache.commons.math.analysis.PolynomialFunction.polynomialDerivative()" "org.apache.commons.math.analysis.PolynomialFunction.differentiate(double[])"
call "org.apache.commons.math.analysis.PolynomialFunction.polynomialDerivative()" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
contain "org.apache.commons.math.analysis.PolynomialFunction" "org.apache.commons.math.analysis.PolynomialFunction.polynomialDerivative()"
call "org.apache.commons.math.analysis.PolynomialFunction.derivative()" "org.apache.commons.math.analysis.PolynomialFunction.polynomialDerivative()"
contain "org.apache.commons.math.analysis.PolynomialFunction" "org.apache.commons.math.analysis.PolynomialFunction.derivative()"
contain "org.apache.commons.math.analysis.PolynomialFunction" "org.apache.commons.math.analysis.PolynomialFunction.serialVersionUID : long"
reference "org.apache.commons.math.analysis.PolynomialFunction.coefficients : double[]" "double[]"
contain "org.apache.commons.math.analysis.PolynomialFunction" "org.apache.commons.math.analysis.PolynomialFunction.coefficients : double[]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "double[]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.DummyStepInterpolator"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.SwitchingFunctionsHandler"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.AbstractStepInterpolator"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.FirstOrderDifferentialEquations"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.fsal : boolean"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.c : double[]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.b : double[]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.prototype : RungeKuttaStepInterpolator"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getOrder()"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.exp : double"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setSafety(double)"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setMinReduction(double)"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double)"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.fsal : boolean"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.c : double[]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.b : double[]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.prototype : RungeKuttaStepInterpolator"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getOrder()"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.exp : double"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setSafety(double)"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setMinReduction(double)"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double)"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getName()"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getOrder()"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getSafety()" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.safety : double"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getSafety()"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setSafety(double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.safety : double"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setSafety(double)"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.sanityChecks(FirstOrderDifferentialEquations,double,double[],double,double[])"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.c : double[]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.handler : StepHandler"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.StepHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.switchesHandler : SwitchingFunctionsHandler"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.isEmpty()"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.prototype : RungeKuttaStepInterpolator"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.copy()"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.RungeKuttaStepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(double[],boolean)"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.AbstractStepInterpolator.storeTime(double)"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.stepStart : double"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.StepHandler.reset()"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.AbstractStepInterpolator.shift()"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.fsal : boolean"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.FirstOrderDifferentialEquations.computeDerivatives(double,double[],double[])"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.vecAbsoluteTolerance : double[]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.scalAbsoluteTolerance : double"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getOrder()"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.initializeStep(FirstOrderDifferentialEquations,boolean,int,double[],double,double[],double[],double[],double[])"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.stepSize : double"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.b : double[]"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.estimateError(double[][],double[],double[],double)"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.getEventTime()"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.maxGrowth : double"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.minReduction : double"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.safety : double"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.exp : double"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.filterStep(double,boolean)"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.stepAccepted(double,double[])"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.stop()"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.StepHandler.handleStep(StepInterpolator,boolean)"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.reset(double,double[])"
call "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.resetInternalState()"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getMinReduction()" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.minReduction : double"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getMinReduction()"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setMinReduction(double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.minReduction : double"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setMinReduction(double)"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getMaxGrowth()" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.maxGrowth : double"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getMaxGrowth()"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double)" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.maxGrowth : double"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double)"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.estimateError(double[][],double[],double[],double)"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.fsal : boolean"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.c : double[]" "double[]"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.c : double[]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.a : double[][]" "double[][]"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.a : double[][]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.b : double[]" "double[]"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.b : double[]"
reference "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.prototype : RungeKuttaStepInterpolator" "org.apache.commons.math.ode.RungeKuttaStepInterpolator"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.prototype : RungeKuttaStepInterpolator"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.exp : double"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.safety : double"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.minReduction : double"
contain "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.maxGrowth : double"
reference "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.AbstractIntegerDistribution"
reference "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistribution"
reference "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.util.MathUtils"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.HypergeometricDistributionImpl(int,int,int)" "org.apache.commons.math.distribution.AbstractIntegerDistribution.AbstractIntegerDistribution()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.HypergeometricDistributionImpl(int,int,int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.setPopulationSize(int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.HypergeometricDistributionImpl(int,int,int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.setSampleSize(int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.HypergeometricDistributionImpl(int,int,int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.setNumberOfSuccesses(int)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.HypergeometricDistributionImpl(int,int,int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.cumulativeProbability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getPopulationSize()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.cumulativeProbability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getNumberOfSuccesses()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.cumulativeProbability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getSampleSize()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.cumulativeProbability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomain(int,int,int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.cumulativeProbability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.innerCumulativeProbability(int,int,int,int,int,int)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.cumulativeProbability(int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomain(int,int,int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getLowerDomain(int,int,int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomain(int,int,int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getUpperDomain(int,int)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomain(int,int,int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomainLowerBound(double)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getPopulationSize()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomainLowerBound(double)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getNumberOfSuccesses()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomainLowerBound(double)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getSampleSize()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomainLowerBound(double)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getLowerDomain(int,int,int)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomainLowerBound(double)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomainUpperBound(double)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getSampleSize()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomainUpperBound(double)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getNumberOfSuccesses()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomainUpperBound(double)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getUpperDomain(int,int)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomainUpperBound(double)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getLowerDomain(int,int,int)"
reference "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getNumberOfSuccesses()" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.numberOfSuccesses : int"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getNumberOfSuccesses()"
reference "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getPopulationSize()" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.populationSize : int"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getPopulationSize()"
reference "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getSampleSize()" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.sampleSize : int"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getSampleSize()"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getUpperDomain(int,int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.probability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getPopulationSize()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.probability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getNumberOfSuccesses()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.probability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getSampleSize()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.probability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomain(int,int,int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.probability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.probability(int,int,int,int)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.probability(int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.probability(int,int,int,int)" "org.apache.commons.math.util.MathUtils.binomialCoefficientLog(int,int)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.probability(int,int,int,int)"
reference "org.apache.commons.math.distribution.HypergeometricDistributionImpl.setNumberOfSuccesses(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.numberOfSuccesses : int"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.setNumberOfSuccesses(int)"
reference "org.apache.commons.math.distribution.HypergeometricDistributionImpl.setPopulationSize(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.populationSize : int"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.setPopulationSize(int)"
reference "org.apache.commons.math.distribution.HypergeometricDistributionImpl.setSampleSize(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.sampleSize : int"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.setSampleSize(int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.upperCumulativeProbability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getPopulationSize()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.upperCumulativeProbability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getNumberOfSuccesses()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.upperCumulativeProbability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getSampleSize()"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.upperCumulativeProbability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.getDomain(int,int,int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.upperCumulativeProbability(int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.innerCumulativeProbability(int,int,int,int,int,int)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.upperCumulativeProbability(int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionImpl.innerCumulativeProbability(int,int,int,int,int,int)" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.probability(int,int,int,int)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.innerCumulativeProbability(int,int,int,int,int,int)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.serialVersionUID : long"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.numberOfSuccesses : int"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.populationSize : int"
contain "org.apache.commons.math.distribution.HypergeometricDistributionImpl" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.sampleSize : int"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfLogs" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.SumOfLogs()" "org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.SumOfLogs()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.value : double"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.SumOfLogs()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.n : int"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfLogs" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.SumOfLogs()"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.increment(double)" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.value : double"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.increment(double)" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.n : int"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfLogs" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.increment(double)"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.getResult()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.n : int"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.getResult()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.value : double"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfLogs" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.getResult()"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.getN()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.n : int"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfLogs" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.getN()"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.clear()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.value : double"
reference "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.clear()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.n : int"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfLogs" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.clear()"
call "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.test(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfLogs" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfLogs" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfLogs" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.n : int"
contain "org.apache.commons.math.stat.descriptive.summary.SumOfLogs" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.value : double"
reference "org.apache.commons.math.DimensionMismatchException" "org.apache.commons.math.MathException"
call "org.apache.commons.math.DimensionMismatchException.DimensionMismatchException(int,int)" "org.apache.commons.math.MathException.MathException(String,Object[])"
reference "org.apache.commons.math.DimensionMismatchException.DimensionMismatchException(int,int)" "org.apache.commons.math.DimensionMismatchException.dimension1 : int"
reference "org.apache.commons.math.DimensionMismatchException.DimensionMismatchException(int,int)" "org.apache.commons.math.DimensionMismatchException.dimension2 : int"
contain "org.apache.commons.math.DimensionMismatchException" "org.apache.commons.math.DimensionMismatchException.DimensionMismatchException(int,int)"
reference "org.apache.commons.math.DimensionMismatchException.getDimension1()" "org.apache.commons.math.DimensionMismatchException.dimension1 : int"
contain "org.apache.commons.math.DimensionMismatchException" "org.apache.commons.math.DimensionMismatchException.getDimension1()"
reference "org.apache.commons.math.DimensionMismatchException.getDimension2()" "org.apache.commons.math.DimensionMismatchException.dimension2 : int"
contain "org.apache.commons.math.DimensionMismatchException" "org.apache.commons.math.DimensionMismatchException.getDimension2()"
contain "org.apache.commons.math.DimensionMismatchException" "org.apache.commons.math.DimensionMismatchException.serialVersionUID : long"
contain "org.apache.commons.math.DimensionMismatchException" "org.apache.commons.math.DimensionMismatchException.dimension1 : int"
contain "org.apache.commons.math.DimensionMismatchException" "org.apache.commons.math.DimensionMismatchException.dimension2 : int"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "double[][]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.AbstractStepInterpolator"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.resetTables(int)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.polynoms : double[][]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.resetTables(int)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.errfac : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.resetTables(int)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentDegree : int"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.resetTables(int)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentState : double[]"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.resetTables(int)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator()" "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator()"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator()" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y0Dot : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator()" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y1 : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator()" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y1Dot : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator()" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.yMidDots : double[][]"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator()" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.resetTables(int)"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[],double[],double[],double[],double[][],boolean)" "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(double[],boolean)"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[],double[],double[],double[],double[][],boolean)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y0Dot : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[],double[],double[],double[],double[][],boolean)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y1 : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[],double[],double[],double[],double[][],boolean)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y1Dot : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[],double[],double[],double[],double[][],boolean)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.yMidDots : double[][]"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[],double[],double[],double[],double[][],boolean)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.resetTables(int)"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[],double[],double[],double[],double[][],boolean)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator)" "org.apache.commons.math.ode.AbstractStepInterpolator.AbstractStepInterpolator(AbstractStepInterpolator)"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y0Dot : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y1 : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y1Dot : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.yMidDots : double[][]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.polynoms : double[][]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentDegree : int"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.resetTables(int)"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.doCopy()" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator)"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.doCopy()"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeCoefficients(int,double)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.polynoms : double[][]"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeCoefficients(int,double)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.resetTables(int)"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeCoefficients(int,double)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentDegree : int"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeCoefficients(int,double)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeCoefficients(int,double)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y0Dot : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeCoefficients(int,double)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y1Dot : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeCoefficients(int,double)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y1 : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeCoefficients(int,double)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.yMidDots : double[][]"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeCoefficients(int,double)"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.estimateError(double[])" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentDegree : int"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.estimateError(double[])" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.estimateError(double[])" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.polynoms : double[][]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.estimateError(double[])" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.errfac : double[]"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.estimateError(double[])"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentState : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.interpolatedState : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.polynoms : double[][]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentDegree : int"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeInterpolatedState(double,double)"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.writeExternal(ObjectOutput)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentState : double[]"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.writeExternal(ObjectOutput)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.writeBaseExternal(ObjectOutput)"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.writeExternal(ObjectOutput)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentDegree : int"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.writeExternal(ObjectOutput)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.polynoms : double[][]"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.writeExternal(ObjectOutput)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.readBaseExternal(ObjectInput)"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentState : double[]"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.resetTables(int)"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentDegree : int"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.polynoms : double[][]"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.readExternal(ObjectInput)" "org.apache.commons.math.ode.DerivativeException.getMessage()"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.readExternal(ObjectInput)"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y0Dot : double[]" "double[]"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y0Dot : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y1 : double[]" "double[]"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y1 : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y1Dot : double[]" "double[]"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.y1Dot : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.yMidDots : double[][]" "double[][]"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.yMidDots : double[][]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.polynoms : double[][]" "double[][]"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.polynoms : double[][]"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.errfac : double[]" "double[]"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.errfac : double[]"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.currentDegree : int"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.serialVersionUID : long"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.1" "org.apache.commons.math.optimization.PointCostPair"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer.1" "org.apache.commons.math.optimization.DirectSearchOptimizer.1.{...}"
reference "org.apache.commons.math.optimization.DirectSearchOptimizer.1.compare(Object,Object)" "org.apache.commons.math.optimization.PointCostPair.cost : double"
contain "org.apache.commons.math.optimization.DirectSearchOptimizer.1" "org.apache.commons.math.optimization.DirectSearchOptimizer.1.compare(Object,Object)"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "double[][]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.DummyStepInterpolator"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.SwitchingFunctionsHandler"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.FirstOrderDifferentialEquations"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.AbstractStepInterpolator"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double,double)"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.handler : StepHandler"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)" "org.apache.commons.math.ode.StepHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.switchesHandler : SwitchingFunctionsHandler"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)" "org.apache.commons.math.ode.SwitchingFunctionsHandler.isEmpty()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.denseOutput : boolean"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStabilityCheck(boolean,int,int,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepsizeControl(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setOrderControl(int,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setInterpolationControl(boolean,int)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double,double,double[],double[])"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.handler : StepHandler"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.StepHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.switchesHandler : SwitchingFunctionsHandler"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.isEmpty()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.denseOutput : boolean"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStabilityCheck(boolean,int,int,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepsizeControl(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setOrderControl(int,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setInterpolationControl(boolean,int)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double[],double[])"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStabilityCheck(boolean,int,int,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.performTest : boolean"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStabilityCheck(boolean,int,int,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.maxIter : int"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStabilityCheck(boolean,int,int,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.maxChecks : int"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStabilityCheck(boolean,int,int,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stabilityReduction : double"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStabilityCheck(boolean,int,int,double)"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepsizeControl(double,double,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepControl1 : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepsizeControl(double,double,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepControl2 : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepsizeControl(double,double,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepControl3 : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepsizeControl(double,double,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepControl4 : double"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepsizeControl(double,double,double,double)"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setOrderControl(int,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.maxOrder : int"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setOrderControl(int,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.orderControl1 : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setOrderControl(int,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.orderControl2 : double"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setOrderControl(int,double,double)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.initializeArrays()"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setOrderControl(int,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepHandler(StepHandler)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepHandler(StepHandler)" "org.apache.commons.math.ode.StepHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepHandler(StepHandler)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.switchesHandler : SwitchingFunctionsHandler"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepHandler(StepHandler)" "org.apache.commons.math.ode.SwitchingFunctionsHandler.isEmpty()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepHandler(StepHandler)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.denseOutput : boolean"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepHandler(StepHandler)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.initializeArrays()"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.handler : StepHandler"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.StepHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.switchesHandler : SwitchingFunctionsHandler"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchingFunctionsHandler.isEmpty()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.denseOutput : boolean"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.initializeArrays()"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.initializeArrays()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.maxOrder : int"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.initializeArrays()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.sequence : int[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.initializeArrays()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.costPerStep : int[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.initializeArrays()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.coeff : double[][]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.initializeArrays()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.costPerTimeUnit : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.initializeArrays()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.optimalStep : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.initializeArrays()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.denseOutput : boolean"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.initializeArrays()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setInterpolationControl(boolean,int)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.useInterpolationError : boolean"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setInterpolationControl(boolean,int)" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.mudif : int"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setInterpolationControl(boolean,int)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.getName()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.rescale(double[],double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.vecAbsoluteTolerance : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.rescale(double[],double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.scalAbsoluteTolerance : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.rescale(double[],double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.scalRelativeTolerance : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.rescale(double[],double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.vecRelativeTolerance : double[]"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.rescale(double[],double[],double[])"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.tryStep(FirstOrderDifferentialEquations,double,double[],double,int,double[],double[][],double[],double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.sequence : int[]"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.tryStep(FirstOrderDifferentialEquations,double,double[],double,int,double[],double[][],double[],double[],double[])" "org.apache.commons.math.ode.FirstOrderDifferentialEquations.computeDerivatives(double,double[],double[])"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.tryStep(FirstOrderDifferentialEquations,double,double[],double,int,double[],double[][],double[],double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.performTest : boolean"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.tryStep(FirstOrderDifferentialEquations,double,double[],double,int,double[],double[][],double[],double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.maxChecks : int"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.tryStep(FirstOrderDifferentialEquations,double,double[],double,int,double[],double[][],double[],double[],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.maxIter : int"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.tryStep(FirstOrderDifferentialEquations,double,double[],double,int,double[],double[][],double[],double[],double[])"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.extrapolate(int,int,double[][],double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.coeff : double[][]"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.extrapolate(int,int,double[][],double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.sanityChecks(FirstOrderDifferentialEquations,double,double[],double,double[])"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.sequence : int[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.denseOutput : boolean"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.rescale(double[],double[],double[])"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.vecRelativeTolerance : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.scalRelativeTolerance : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.switchesHandler : SwitchingFunctionsHandler"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.isEmpty()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[],double[],double[],double[],double[][],boolean)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(double[],boolean)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.AbstractStepInterpolator.storeTime(double)"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepStart : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.handler : StepHandler"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.StepHandler.reset()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.costPerTimeUnit : double[]"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.AbstractStepInterpolator.shift()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.FirstOrderDifferentialEquations.computeDerivatives(double,double[],double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.initializeStep(FirstOrderDifferentialEquations,boolean,int,double[],double,double[],double[],double[],double[])"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepSize : double"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.tryStep(FirstOrderDifferentialEquations,double,double[],double,int,double[],double[][],double[],double[],double[])"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stabilityReduction : double"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.filterStep(double,boolean)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.extrapolate(int,int,double[][],double[])"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepControl2 : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepControl1 : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepControl3 : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepControl4 : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.optimalStep : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.costPerStep : int[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.orderControl1 : double"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.getMaxStep()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.mudif : int"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.computeCoefficients(int,double)"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.useInterpolationError : boolean"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator.estimateError(double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.evaluateStep(StepInterpolator)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.getEventTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.stepAccepted(double,double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.stop()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.StepHandler.handleStep(StepInterpolator,boolean)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.SwitchingFunctionsHandler.reset(double,double[])"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.orderControl2 : double"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.methodName : String"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.maxOrder : int"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.sequence : int[]" "int[]"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.sequence : int[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.costPerStep : int[]" "int[]"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.costPerStep : int[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.costPerTimeUnit : double[]" "double[]"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.costPerTimeUnit : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.optimalStep : double[]" "double[]"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.optimalStep : double[]"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.coeff : double[][]" "double[][]"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.coeff : double[][]"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.performTest : boolean"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.maxChecks : int"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.maxIter : int"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stabilityReduction : double"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepControl1 : double"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepControl2 : double"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepControl3 : double"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.stepControl4 : double"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.orderControl1 : double"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.orderControl2 : double"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.denseOutput : boolean"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.useInterpolationError : boolean"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegrator" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.mudif : int"
contain "org.apache.commons.math.linear.QRDecomposition" "org.apache.commons.math.linear.QRDecomposition.getR()"
contain "org.apache.commons.math.linear.QRDecomposition" "org.apache.commons.math.linear.QRDecomposition.getQ()"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator" "double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator" "org.apache.commons.math.random.RandomVectorGenerator"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator" "org.apache.commons.math.random.NormalizedRandomGenerator"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.UncorrelatedRandomVectorGenerator(double[],double[],NormalizedRandomGenerator)" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.mean : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.UncorrelatedRandomVectorGenerator(double[],double[],NormalizedRandomGenerator)" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.standardDeviation : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.UncorrelatedRandomVectorGenerator(double[],double[],NormalizedRandomGenerator)" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.generator : NormalizedRandomGenerator"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.UncorrelatedRandomVectorGenerator(double[],double[],NormalizedRandomGenerator)"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.UncorrelatedRandomVectorGenerator(int,NormalizedRandomGenerator)" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.mean : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.UncorrelatedRandomVectorGenerator(int,NormalizedRandomGenerator)" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.standardDeviation : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.UncorrelatedRandomVectorGenerator(int,NormalizedRandomGenerator)" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.generator : NormalizedRandomGenerator"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.UncorrelatedRandomVectorGenerator(int,NormalizedRandomGenerator)"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.nextVector()" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.mean : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.nextVector()" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.standardDeviation : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.nextVector()" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.generator : NormalizedRandomGenerator"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.nextVector()" "org.apache.commons.math.random.NormalizedRandomGenerator.nextNormalizedDouble()"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.nextVector()"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.mean : double[]" "double[]"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.mean : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.standardDeviation : double[]" "double[]"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.standardDeviation : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.generator : NormalizedRandomGenerator" "org.apache.commons.math.random.NormalizedRandomGenerator"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.generator : NormalizedRandomGenerator"
reference "org.apache.commons.math.distribution.ExponentialDistribution" "org.apache.commons.math.distribution.ContinuousDistribution"
contain "org.apache.commons.math.distribution.ExponentialDistribution" "org.apache.commons.math.distribution.ExponentialDistribution.setMean(double)"
contain "org.apache.commons.math.distribution.ExponentialDistribution" "org.apache.commons.math.distribution.ExponentialDistribution.getMean()"
reference "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl"
reference "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest"
reference "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.distribution.ChiSquaredDistribution"
reference "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.distribution.DistributionFactory"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl()" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl(ChiSquaredDistribution)"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl()"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl(ChiSquaredDistribution)" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.setDistribution(ChiSquaredDistribution)"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl(ChiSquaredDistribution)"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.isPositive(double[])"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[])"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
reference "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[],long[])" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.distribution : ChiSquaredDistribution"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[],long[])" "org.apache.commons.math.distribution.ChiSquaredDistribution.setDegreesOfFreedom(double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[],long[])" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[],long[])" "org.apache.commons.math.distribution.ChiSquaredDistribution.cumulativeProbability(double)"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[],long[])"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[],long[],double)" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[],long[])"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[],long[],double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(long[][])" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.checkArray(long[][])"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(long[][])"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][])" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.checkArray(long[][])"
reference "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][])" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.distribution : ChiSquaredDistribution"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][])" "org.apache.commons.math.distribution.ChiSquaredDistribution.setDegreesOfFreedom(double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][])" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(long[][])"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][])" "org.apache.commons.math.distribution.ChiSquaredDistribution.cumulativeProbability(double)"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][])"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][],double)" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][])"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][],double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareDataSetsComparison(long[],long[])" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[])"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareDataSetsComparison(long[],long[])"
reference "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTestDataSetsComparison(long[],long[])" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.distribution : ChiSquaredDistribution"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTestDataSetsComparison(long[],long[])" "org.apache.commons.math.distribution.ChiSquaredDistribution.setDegreesOfFreedom(double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTestDataSetsComparison(long[],long[])" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareDataSetsComparison(long[],long[])"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTestDataSetsComparison(long[],long[])" "org.apache.commons.math.distribution.ChiSquaredDistribution.cumulativeProbability(double)"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTestDataSetsComparison(long[],long[])"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTestDataSetsComparison(long[],long[],double)" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTestDataSetsComparison(long[],long[])"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTestDataSetsComparison(long[],long[],double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.checkArray(long[][])" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.isRectangular(long[][])"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.checkArray(long[][])" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[][])"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.checkArray(long[][])"
call "org.apache.commons.math.stat.inference.ChiSquareTestImpl.getDistributionFactory()" "org.apache.commons.math.distribution.DistributionFactory.newInstance()"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.getDistributionFactory()"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.isRectangular(long[][])"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.isPositive(double[])"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[])"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[][])"
reference "org.apache.commons.math.stat.inference.ChiSquareTestImpl.setDistribution(ChiSquaredDistribution)" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.distribution : ChiSquaredDistribution"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.setDistribution(ChiSquaredDistribution)"
reference "org.apache.commons.math.stat.inference.ChiSquareTestImpl.distribution : ChiSquaredDistribution" "org.apache.commons.math.distribution.ChiSquaredDistribution"
contain "org.apache.commons.math.stat.inference.ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.distribution : ChiSquaredDistribution"
reference "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.AbstractContinuousDistribution"
reference "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistribution"
reference "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.special.Gamma"
call "org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double,double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution()"
call "org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double,double)" "org.apache.commons.math.distribution.GammaDistributionImpl.setAlpha(double)"
call "org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double,double)" "org.apache.commons.math.distribution.GammaDistributionImpl.setBeta(double)"
contain "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double,double)"
call "org.apache.commons.math.distribution.GammaDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha()"
call "org.apache.commons.math.distribution.GammaDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.distribution.GammaDistributionImpl.getBeta()"
call "org.apache.commons.math.distribution.GammaDistributionImpl.cumulativeProbability(double)" "org.apache.commons.math.special.Gamma.regularizedGammaP(double,double)"
contain "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl.cumulativeProbability(double)"
call "org.apache.commons.math.distribution.GammaDistributionImpl.inverseCumulativeProbability(double)" "org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl.inverseCumulativeProbability(double)"
reference "org.apache.commons.math.distribution.GammaDistributionImpl.setAlpha(double)" "org.apache.commons.math.distribution.GammaDistributionImpl.alpha : double"
contain "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl.setAlpha(double)"
reference "org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha()" "org.apache.commons.math.distribution.GammaDistributionImpl.alpha : double"
contain "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha()"
reference "org.apache.commons.math.distribution.GammaDistributionImpl.setBeta(double)" "org.apache.commons.math.distribution.GammaDistributionImpl.beta : double"
contain "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl.setBeta(double)"
reference "org.apache.commons.math.distribution.GammaDistributionImpl.getBeta()" "org.apache.commons.math.distribution.GammaDistributionImpl.beta : double"
contain "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl.getBeta()"
contain "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl.getDomainLowerBound(double)"
call "org.apache.commons.math.distribution.GammaDistributionImpl.getDomainUpperBound(double)" "org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha()"
call "org.apache.commons.math.distribution.GammaDistributionImpl.getDomainUpperBound(double)" "org.apache.commons.math.distribution.GammaDistributionImpl.getBeta()"
contain "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl.getDomainUpperBound(double)"
call "org.apache.commons.math.distribution.GammaDistributionImpl.getInitialDomain(double)" "org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha()"
call "org.apache.commons.math.distribution.GammaDistributionImpl.getInitialDomain(double)" "org.apache.commons.math.distribution.GammaDistributionImpl.getBeta()"
contain "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl.getInitialDomain(double)"
contain "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl.serialVersionUID : long"
contain "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl.alpha : double"
contain "org.apache.commons.math.distribution.GammaDistributionImpl" "org.apache.commons.math.distribution.GammaDistributionImpl.beta : double"
contain "org.apache.commons.math.random.RandomData" "org.apache.commons.math.random.RandomData.nextHexString(int)"
contain "org.apache.commons.math.random.RandomData" "org.apache.commons.math.random.RandomData.nextInt(int,int)"
contain "org.apache.commons.math.random.RandomData" "org.apache.commons.math.random.RandomData.nextLong(long,long)"
contain "org.apache.commons.math.random.RandomData" "org.apache.commons.math.random.RandomData.nextSecureHexString(int)"
contain "org.apache.commons.math.random.RandomData" "org.apache.commons.math.random.RandomData.nextSecureInt(int,int)"
contain "org.apache.commons.math.random.RandomData" "org.apache.commons.math.random.RandomData.nextSecureLong(long,long)"
contain "org.apache.commons.math.random.RandomData" "org.apache.commons.math.random.RandomData.nextPoisson(double)"
contain "org.apache.commons.math.random.RandomData" "org.apache.commons.math.random.RandomData.nextGaussian(double,double)"
contain "org.apache.commons.math.random.RandomData" "org.apache.commons.math.random.RandomData.nextExponential(double)"
contain "org.apache.commons.math.random.RandomData" "org.apache.commons.math.random.RandomData.nextUniform(double,double)"
contain "org.apache.commons.math.random.RandomData" "org.apache.commons.math.random.RandomData.nextPermutation(int,int)"
contain "org.apache.commons.math.random.RandomData" "org.apache.commons.math.random.RandomData.nextSample(Collection,int)"
reference "org.apache.commons.math.estimation.EstimationException" "org.apache.commons.math.MathException"
call "org.apache.commons.math.estimation.EstimationException.EstimationException(String,String[])" "org.apache.commons.math.MathException.MathException(String,Object[])"
contain "org.apache.commons.math.estimation.EstimationException" "org.apache.commons.math.estimation.EstimationException.EstimationException(String,String[])"
call "org.apache.commons.math.estimation.EstimationException.EstimationException(Throwable)" "org.apache.commons.math.MathException.MathException(Throwable)"
contain "org.apache.commons.math.estimation.EstimationException" "org.apache.commons.math.estimation.EstimationException.EstimationException(Throwable)"
contain "org.apache.commons.math.estimation.EstimationException" "org.apache.commons.math.estimation.EstimationException.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl.SummaryStatisticsImpl()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl.SummaryStatisticsImpl()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl.clear()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl.serialVersionUID : long"
reference "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.JDKRandomGenerator"
reference "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomData"
reference "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomGenerator"
reference "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl()" "org.apache.commons.math.random.RandomDataImpl.rand : RandomGenerator"
reference "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl()" "org.apache.commons.math.random.RandomDataImpl.secRand : SecureRandom"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl()"
reference "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl(RandomGenerator)" "org.apache.commons.math.random.RandomDataImpl.rand : RandomGenerator"
reference "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl(RandomGenerator)" "org.apache.commons.math.random.RandomDataImpl.secRand : SecureRandom"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl(RandomGenerator)"
call "org.apache.commons.math.random.RandomDataImpl.nextHexString(int)" "org.apache.commons.math.random.RandomDataImpl.getRan()"
call "org.apache.commons.math.random.RandomDataImpl.nextHexString(int)" "org.apache.commons.math.random.RandomGenerator.nextBytes(byte[])"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.nextHexString(int)"
call "org.apache.commons.math.random.RandomDataImpl.nextInt(int,int)" "org.apache.commons.math.random.RandomDataImpl.getRan()"
call "org.apache.commons.math.random.RandomDataImpl.nextInt(int,int)" "org.apache.commons.math.random.RandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.nextInt(int,int)"
call "org.apache.commons.math.random.RandomDataImpl.nextLong(long,long)" "org.apache.commons.math.random.RandomDataImpl.getRan()"
call "org.apache.commons.math.random.RandomDataImpl.nextLong(long,long)" "org.apache.commons.math.random.RandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.nextLong(long,long)"
call "org.apache.commons.math.random.RandomDataImpl.nextSecureHexString(int)" "org.apache.commons.math.random.RandomDataImpl.getSecRan()"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.nextSecureHexString(int)"
call "org.apache.commons.math.random.RandomDataImpl.nextSecureInt(int,int)" "org.apache.commons.math.random.RandomDataImpl.getSecRan()"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.nextSecureInt(int,int)"
call "org.apache.commons.math.random.RandomDataImpl.nextSecureLong(long,long)" "org.apache.commons.math.random.RandomDataImpl.getSecRan()"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.nextSecureLong(long,long)"
call "org.apache.commons.math.random.RandomDataImpl.nextPoisson(double)" "org.apache.commons.math.random.RandomDataImpl.getRan()"
call "org.apache.commons.math.random.RandomDataImpl.nextPoisson(double)" "org.apache.commons.math.random.RandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.nextPoisson(double)"
call "org.apache.commons.math.random.RandomDataImpl.nextGaussian(double,double)" "org.apache.commons.math.random.RandomDataImpl.getRan()"
call "org.apache.commons.math.random.RandomDataImpl.nextGaussian(double,double)" "org.apache.commons.math.random.RandomGenerator.nextGaussian()"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.nextGaussian(double,double)"
call "org.apache.commons.math.random.RandomDataImpl.nextExponential(double)" "org.apache.commons.math.random.RandomDataImpl.getRan()"
call "org.apache.commons.math.random.RandomDataImpl.nextExponential(double)" "org.apache.commons.math.random.RandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.nextExponential(double)"
call "org.apache.commons.math.random.RandomDataImpl.nextUniform(double,double)" "org.apache.commons.math.random.RandomDataImpl.getRan()"
call "org.apache.commons.math.random.RandomDataImpl.nextUniform(double,double)" "org.apache.commons.math.random.RandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.nextUniform(double,double)"
reference "org.apache.commons.math.random.RandomDataImpl.getRan()" "org.apache.commons.math.random.RandomDataImpl.rand : RandomGenerator"
call "org.apache.commons.math.random.RandomDataImpl.getRan()" "org.apache.commons.math.random.JDKRandomGenerator.JDKRandomGenerator()"
call "org.apache.commons.math.random.RandomDataImpl.getRan()" "org.apache.commons.math.random.RandomGenerator.setSeed(long)"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.getRan()"
reference "org.apache.commons.math.random.RandomDataImpl.getSecRan()" "org.apache.commons.math.random.RandomDataImpl.secRand : SecureRandom"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.getSecRan()"
reference "org.apache.commons.math.random.RandomDataImpl.reSeed(long)" "org.apache.commons.math.random.RandomDataImpl.rand : RandomGenerator"
call "org.apache.commons.math.random.RandomDataImpl.reSeed(long)" "org.apache.commons.math.random.JDKRandomGenerator.JDKRandomGenerator()"
call "org.apache.commons.math.random.RandomDataImpl.reSeed(long)" "org.apache.commons.math.random.RandomGenerator.setSeed(long)"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.reSeed(long)"
reference "org.apache.commons.math.random.RandomDataImpl.reSeedSecure()" "org.apache.commons.math.random.RandomDataImpl.secRand : SecureRandom"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.reSeedSecure()"
reference "org.apache.commons.math.random.RandomDataImpl.reSeedSecure(long)" "org.apache.commons.math.random.RandomDataImpl.secRand : SecureRandom"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.reSeedSecure(long)"
reference "org.apache.commons.math.random.RandomDataImpl.reSeed()" "org.apache.commons.math.random.RandomDataImpl.rand : RandomGenerator"
call "org.apache.commons.math.random.RandomDataImpl.reSeed()" "org.apache.commons.math.random.JDKRandomGenerator.JDKRandomGenerator()"
call "org.apache.commons.math.random.RandomDataImpl.reSeed()" "org.apache.commons.math.random.RandomGenerator.setSeed(long)"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.reSeed()"
reference "org.apache.commons.math.random.RandomDataImpl.setSecureAlgorithm(String,String)" "org.apache.commons.math.random.RandomDataImpl.secRand : SecureRandom"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.setSecureAlgorithm(String,String)"
call "org.apache.commons.math.random.RandomDataImpl.nextPermutation(int,int)" "org.apache.commons.math.random.RandomDataImpl.getNatural(int)"
call "org.apache.commons.math.random.RandomDataImpl.nextPermutation(int,int)" "org.apache.commons.math.random.RandomDataImpl.shuffle(int[],int)"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.nextPermutation(int,int)"
call "org.apache.commons.math.random.RandomDataImpl.nextSample(Collection,int)" "org.apache.commons.math.random.RandomDataImpl.nextPermutation(int,int)"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.nextSample(Collection,int)"
call "org.apache.commons.math.random.RandomDataImpl.shuffle(int[],int)" "org.apache.commons.math.random.RandomDataImpl.nextInt(int,int)"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.shuffle(int[],int)"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.getNatural(int)"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.serialVersionUID : long"
reference "org.apache.commons.math.random.RandomDataImpl.rand : RandomGenerator" "org.apache.commons.math.random.RandomGenerator"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.rand : RandomGenerator"
contain "org.apache.commons.math.random.RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl.secRand : SecureRandom"
reference "org.apache.commons.math.special.Beta.1" "org.apache.commons.math.util.ContinuedFraction"
call "org.apache.commons.math.special.Beta.1.{...}" "org.apache.commons.math.util.ContinuedFraction.ContinuedFraction()"
reference "org.apache.commons.math.special.Beta.1.{...}" "org.apache.commons.math.special.Beta.1.val$b : double"
reference "org.apache.commons.math.special.Beta.1.{...}" "org.apache.commons.math.special.Beta.1.val$a : double"
contain "org.apache.commons.math.special.Beta.1" "org.apache.commons.math.special.Beta.1.{...}"
reference "org.apache.commons.math.special.Beta.1.getB(int,double)" "org.apache.commons.math.special.Beta.1.val$b : double"
reference "org.apache.commons.math.special.Beta.1.getB(int,double)" "org.apache.commons.math.special.Beta.1.val$a : double"
contain "org.apache.commons.math.special.Beta.1" "org.apache.commons.math.special.Beta.1.getB(int,double)"
contain "org.apache.commons.math.special.Beta.1" "org.apache.commons.math.special.Beta.1.getA(int,double)"
contain "org.apache.commons.math.special.Beta.1" "org.apache.commons.math.special.Beta.1.serialVersionUID : long"
contain "org.apache.commons.math.special.Beta.1" "org.apache.commons.math.special.Beta.1.val$b : double"
contain "org.apache.commons.math.special.Beta.1" "org.apache.commons.math.special.Beta.1.val$a : double"
reference "org.apache.commons.math.special.Gamma.1" "org.apache.commons.math.util.ContinuedFraction"
call "org.apache.commons.math.special.Gamma.1.{...}" "org.apache.commons.math.util.ContinuedFraction.ContinuedFraction()"
reference "org.apache.commons.math.special.Gamma.1.{...}" "org.apache.commons.math.special.Gamma.1.val$a : double"
contain "org.apache.commons.math.special.Gamma.1" "org.apache.commons.math.special.Gamma.1.{...}"
reference "org.apache.commons.math.special.Gamma.1.getA(int,double)" "org.apache.commons.math.special.Gamma.1.val$a : double"
contain "org.apache.commons.math.special.Gamma.1" "org.apache.commons.math.special.Gamma.1.getA(int,double)"
reference "org.apache.commons.math.special.Gamma.1.getB(int,double)" "org.apache.commons.math.special.Gamma.1.val$a : double"
contain "org.apache.commons.math.special.Gamma.1" "org.apache.commons.math.special.Gamma.1.getB(int,double)"
contain "org.apache.commons.math.special.Gamma.1" "org.apache.commons.math.special.Gamma.1.serialVersionUID : long"
contain "org.apache.commons.math.special.Gamma.1" "org.apache.commons.math.special.Gamma.1.val$a : double"
reference "org.apache.commons.math.estimation.Estimator" "org.apache.commons.math.estimation.EstimationException"
contain "org.apache.commons.math.estimation.Estimator" "org.apache.commons.math.estimation.Estimator.estimate(EstimationProblem)"
contain "org.apache.commons.math.estimation.Estimator" "org.apache.commons.math.estimation.Estimator.getRMS(EstimationProblem)"
reference "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.DefaultTransformer"
reference "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.NumberTransformer"
reference "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.util.TransformerMap.TransformerMap()" "org.apache.commons.math.util.TransformerMap.defaultTransformer : NumberTransformer"
reference "org.apache.commons.math.util.TransformerMap.TransformerMap()" "org.apache.commons.math.util.TransformerMap.map : Map"
call "org.apache.commons.math.util.TransformerMap.TransformerMap()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
contain "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.TransformerMap.TransformerMap()"
reference "org.apache.commons.math.util.TransformerMap.containsClass(Class)" "org.apache.commons.math.util.TransformerMap.map : Map"
contain "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.TransformerMap.containsClass(Class)"
reference "org.apache.commons.math.util.TransformerMap.containsTransformer(NumberTransformer)" "org.apache.commons.math.util.TransformerMap.map : Map"
contain "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.TransformerMap.containsTransformer(NumberTransformer)"
reference "org.apache.commons.math.util.TransformerMap.getTransformer(Class)" "org.apache.commons.math.util.TransformerMap.map : Map"
contain "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.TransformerMap.getTransformer(Class)"
reference "org.apache.commons.math.util.TransformerMap.putTransformer(Class,NumberTransformer)" "org.apache.commons.math.util.TransformerMap.map : Map"
contain "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.TransformerMap.putTransformer(Class,NumberTransformer)"
reference "org.apache.commons.math.util.TransformerMap.removeTransformer(Class)" "org.apache.commons.math.util.TransformerMap.map : Map"
contain "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.TransformerMap.removeTransformer(Class)"
reference "org.apache.commons.math.util.TransformerMap.clear()" "org.apache.commons.math.util.TransformerMap.map : Map"
contain "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.TransformerMap.clear()"
reference "org.apache.commons.math.util.TransformerMap.classes()" "org.apache.commons.math.util.TransformerMap.map : Map"
contain "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.TransformerMap.classes()"
reference "org.apache.commons.math.util.TransformerMap.transformers()" "org.apache.commons.math.util.TransformerMap.map : Map"
contain "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.TransformerMap.transformers()"
reference "org.apache.commons.math.util.TransformerMap.transform(Object)" "org.apache.commons.math.util.TransformerMap.defaultTransformer : NumberTransformer"
call "org.apache.commons.math.util.TransformerMap.transform(Object)" "org.apache.commons.math.util.NumberTransformer.transform(Object)"
call "org.apache.commons.math.util.TransformerMap.transform(Object)" "org.apache.commons.math.util.TransformerMap.getTransformer(Class)"
contain "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.TransformerMap.transform(Object)"
contain "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.TransformerMap.serialVersionUID : long"
reference "org.apache.commons.math.util.TransformerMap.defaultTransformer : NumberTransformer" "org.apache.commons.math.util.NumberTransformer"
contain "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.TransformerMap.defaultTransformer : NumberTransformer"
contain "org.apache.commons.math.util.TransformerMap" "org.apache.commons.math.util.TransformerMap.map : Map"
reference "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.SynchronizedSummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.SynchronizedSummaryStatistics()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getSummary()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSummary()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getSummary()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getN()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getN()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getN()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getSum()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSum()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getSum()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getSumsq()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumsq()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getSumsq()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getMean()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getStandardDeviation()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getStandardDeviation()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getVariance()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getVariance()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getMax()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMax()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getMax()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getMin()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMin()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getMin()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getGeometricMean()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getGeometricMean()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.getGeometricMean()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.toString()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.toString()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.toString()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.clear()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.equals(Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.equals(Object)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.equals(Object)"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.hashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.hashCode()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.hashCode()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.serialVersionUID : long"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl" "org.apache.commons.math.analysis.BisectionSolver"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl" "org.apache.commons.math.analysis.BrentSolver"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl" "org.apache.commons.math.analysis.NewtonSolver"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl" "org.apache.commons.math.analysis.SecantSolver"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl" "org.apache.commons.math.analysis.UnivariateRealSolverFactory"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.UnivariateRealSolverFactoryImpl()" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.UnivariateRealSolverFactory()"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.UnivariateRealSolverFactoryImpl()"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newDefaultSolver(UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newBrentSolver(UnivariateRealFunction)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newDefaultSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newBisectionSolver(UnivariateRealFunction)" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newBisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newBrentSolver(UnivariateRealFunction)" "org.apache.commons.math.analysis.BrentSolver.BrentSolver(UnivariateRealFunction)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newBrentSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newNewtonSolver(DifferentiableUnivariateRealFunction)" "org.apache.commons.math.analysis.NewtonSolver.NewtonSolver(DifferentiableUnivariateRealFunction)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newNewtonSolver(DifferentiableUnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newSecantSolver(UnivariateRealFunction)" "org.apache.commons.math.analysis.SecantSolver.SecantSolver(UnivariateRealFunction)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newSecantSolver(UnivariateRealFunction)"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMean" "org.apache.commons.math.stat.descriptive.moment.Mean"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMean" "org.apache.commons.math.DimensionMismatchException"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMean.VectorialMean(int)" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.means : Mean[]"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMean.VectorialMean(int)" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMean" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.VectorialMean(int)"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMean.increment(double[])" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.means : Mean[]"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMean.increment(double[])" "org.apache.commons.math.DimensionMismatchException.DimensionMismatchException(int,int)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMean.increment(double[])" "org.apache.commons.math.stat.descriptive.moment.Mean.increment(double)"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMean" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.increment(double[])"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMean.getResult()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.means : Mean[]"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMean.getResult()" "org.apache.commons.math.stat.descriptive.moment.Mean.getResult()"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMean" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.getResult()"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMean.getN()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.means : Mean[]"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMean.getN()" "org.apache.commons.math.stat.descriptive.moment.Mean.getN()"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMean" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.getN()"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMean" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMean.means : Mean[]" "org.apache.commons.math.stat.descriptive.moment.Mean[]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMean" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.means : Mean[]"
reference "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.FunctionEvaluationException"
contain "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegrator.setMaximalIterationCount(int)"
contain "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegrator.getMaximalIterationCount()"
contain "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegrator.resetMaximalIterationCount()"
contain "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegrator.setMinimalIterationCount(int)"
contain "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegrator.getMinimalIterationCount()"
contain "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegrator.resetMinimalIterationCount()"
contain "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegrator.setRelativeAccuracy(double)"
contain "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegrator.getRelativeAccuracy()"
contain "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegrator.resetRelativeAccuracy()"
contain "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegrator.integrate(double,double)"
contain "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegrator.getResult()"
contain "org.apache.commons.math.analysis.UnivariateRealIntegrator" "org.apache.commons.math.analysis.UnivariateRealIntegrator.getIterationCount()"
reference "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchingFunction"
reference "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.analysis.BrentSolver"
reference "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.analysis.UnivariateRealSolver"
reference "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchState.function : SwitchingFunction"
reference "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchState.maxCheckInterval : double"
reference "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchState.convergence : double"
reference "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchState.maxIterationCount : int"
reference "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchState.t0 : double"
reference "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchState.g0 : double"
reference "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchState.g0Positive : boolean"
reference "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchState.pendingEvent : boolean"
reference "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchState.pendingEventTime : double"
reference "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchState.previousEventTime : double"
reference "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchState.increasing : boolean"
reference "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)" "org.apache.commons.math.ode.SwitchState.nextAction : int"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.SwitchState(SwitchingFunction,double,double,int)"
reference "org.apache.commons.math.ode.SwitchState.reinitializeBegin(double,double[])" "org.apache.commons.math.ode.SwitchState.t0 : double"
reference "org.apache.commons.math.ode.SwitchState.reinitializeBegin(double,double[])" "org.apache.commons.math.ode.SwitchState.function : SwitchingFunction"
call "org.apache.commons.math.ode.SwitchState.reinitializeBegin(double,double[])" "org.apache.commons.math.ode.SwitchingFunction.g(double,double[])"
reference "org.apache.commons.math.ode.SwitchState.reinitializeBegin(double,double[])" "org.apache.commons.math.ode.SwitchState.g0 : double"
reference "org.apache.commons.math.ode.SwitchState.reinitializeBegin(double,double[])" "org.apache.commons.math.ode.SwitchState.g0Positive : boolean"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.reinitializeBegin(double,double[])"
call "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
reference "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.t0 : double"
reference "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.maxCheckInterval : double"
reference "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.g0 : double"
reference "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.convergence : double"
call "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
reference "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.function : SwitchingFunction"
call "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
call "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchingFunction.g(double,double[])"
reference "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.g0Positive : boolean"
reference "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.increasing : boolean"
call "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.1.{...}"
call "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.analysis.BrentSolver.BrentSolver(UnivariateRealFunction)"
call "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.analysis.UnivariateRealSolver.setAbsoluteAccuracy(double)"
reference "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.maxIterationCount : int"
call "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.analysis.UnivariateRealSolver.setMaximalIterationCount(int)"
call "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
reference "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.previousEventTime : double"
reference "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.pendingEventTime : double"
reference "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.ode.SwitchState.pendingEvent : boolean"
call "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)" "org.apache.commons.math.FunctionEvaluationException.getCause()"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.evaluateStep(StepInterpolator)"
reference "org.apache.commons.math.ode.SwitchState.getEventTime()" "org.apache.commons.math.ode.SwitchState.pendingEventTime : double"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.getEventTime()"
reference "org.apache.commons.math.ode.SwitchState.stepAccepted(double,double[])" "org.apache.commons.math.ode.SwitchState.t0 : double"
reference "org.apache.commons.math.ode.SwitchState.stepAccepted(double,double[])" "org.apache.commons.math.ode.SwitchState.function : SwitchingFunction"
call "org.apache.commons.math.ode.SwitchState.stepAccepted(double,double[])" "org.apache.commons.math.ode.SwitchingFunction.g(double,double[])"
reference "org.apache.commons.math.ode.SwitchState.stepAccepted(double,double[])" "org.apache.commons.math.ode.SwitchState.g0 : double"
reference "org.apache.commons.math.ode.SwitchState.stepAccepted(double,double[])" "org.apache.commons.math.ode.SwitchState.pendingEvent : boolean"
reference "org.apache.commons.math.ode.SwitchState.stepAccepted(double,double[])" "org.apache.commons.math.ode.SwitchState.previousEventTime : double"
reference "org.apache.commons.math.ode.SwitchState.stepAccepted(double,double[])" "org.apache.commons.math.ode.SwitchState.increasing : boolean"
reference "org.apache.commons.math.ode.SwitchState.stepAccepted(double,double[])" "org.apache.commons.math.ode.SwitchState.g0Positive : boolean"
call "org.apache.commons.math.ode.SwitchState.stepAccepted(double,double[])" "org.apache.commons.math.ode.SwitchingFunction.eventOccurred(double,double[])"
reference "org.apache.commons.math.ode.SwitchState.stepAccepted(double,double[])" "org.apache.commons.math.ode.SwitchState.nextAction : int"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.stepAccepted(double,double[])"
reference "org.apache.commons.math.ode.SwitchState.stop()" "org.apache.commons.math.ode.SwitchState.nextAction : int"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.stop()"
reference "org.apache.commons.math.ode.SwitchState.reset(double,double[])" "org.apache.commons.math.ode.SwitchState.pendingEvent : boolean"
reference "org.apache.commons.math.ode.SwitchState.reset(double,double[])" "org.apache.commons.math.ode.SwitchState.nextAction : int"
reference "org.apache.commons.math.ode.SwitchState.reset(double,double[])" "org.apache.commons.math.ode.SwitchState.function : SwitchingFunction"
call "org.apache.commons.math.ode.SwitchState.reset(double,double[])" "org.apache.commons.math.ode.SwitchingFunction.resetState(double,double[])"
reference "org.apache.commons.math.ode.SwitchState.reset(double,double[])" "org.apache.commons.math.ode.SwitchState.pendingEventTime : double"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.reset(double,double[])"
reference "org.apache.commons.math.ode.SwitchState.access$000(SwitchState)" "org.apache.commons.math.ode.SwitchState.function : SwitchingFunction"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.access$000(SwitchState)"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.serialVersionUID : long"
reference "org.apache.commons.math.ode.SwitchState.function : SwitchingFunction" "org.apache.commons.math.ode.SwitchingFunction"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.function : SwitchingFunction"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.maxCheckInterval : double"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.convergence : double"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.maxIterationCount : int"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.t0 : double"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.g0 : double"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.g0Positive : boolean"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.pendingEvent : boolean"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.pendingEventTime : double"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.previousEventTime : double"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.increasing : boolean"
contain "org.apache.commons.math.ode.SwitchState" "org.apache.commons.math.ode.SwitchState.nextAction : int"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance" "org.apache.commons.math.DimensionMismatchException"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance" "org.apache.commons.math.linear.RealMatrixImpl"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.VectorialCovariance(int)" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.sums : double[]"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.VectorialCovariance(int)" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.productsSums : double[]"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.VectorialCovariance(int)" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.n : long"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.VectorialCovariance(int)"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.increment(double[])" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.sums : double[]"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.increment(double[])" "org.apache.commons.math.DimensionMismatchException.DimensionMismatchException(int,int)"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.increment(double[])" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.productsSums : double[]"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.increment(double[])" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.n : long"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.increment(double[])"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getResult()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.sums : double[]"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getResult()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getResult()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.n : long"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getResult()" "org.apache.commons.math.linear.RealMatrixImpl.getDataRef()"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getResult()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.productsSums : double[]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getResult()"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getN()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.n : long"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getN()"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.sums : double[]" "double[]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.sums : double[]"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.productsSums : double[]" "double[]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.productsSums : double[]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.n : long"
reference "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.transform.FastFourierTransformer"
reference "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.transform.FastCosineTransformer.FastCosineTransformer()"
call "org.apache.commons.math.transform.FastCosineTransformer.transform(double[])" "org.apache.commons.math.transform.FastCosineTransformer.fct(double[])"
contain "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.transform.FastCosineTransformer.transform(double[])"
call "org.apache.commons.math.transform.FastCosineTransformer.transform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.sample(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastCosineTransformer.transform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastCosineTransformer.fct(double[])"
contain "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.transform.FastCosineTransformer.transform(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastCosineTransformer.transform2(double[])" "org.apache.commons.math.transform.FastCosineTransformer.fct(double[])"
call "org.apache.commons.math.transform.FastCosineTransformer.transform2(double[])" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[],double)"
contain "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.transform.FastCosineTransformer.transform2(double[])"
call "org.apache.commons.math.transform.FastCosineTransformer.transform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.sample(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastCosineTransformer.transform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastCosineTransformer.fct(double[])"
call "org.apache.commons.math.transform.FastCosineTransformer.transform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[],double)"
contain "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.transform.FastCosineTransformer.transform2(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastCosineTransformer.inversetransform(double[])" "org.apache.commons.math.transform.FastCosineTransformer.fct(double[])"
call "org.apache.commons.math.transform.FastCosineTransformer.inversetransform(double[])" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[],double)"
contain "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.transform.FastCosineTransformer.inversetransform(double[])"
call "org.apache.commons.math.transform.FastCosineTransformer.inversetransform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.sample(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastCosineTransformer.inversetransform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastCosineTransformer.fct(double[])"
call "org.apache.commons.math.transform.FastCosineTransformer.inversetransform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[],double)"
contain "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.transform.FastCosineTransformer.inversetransform(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastCosineTransformer.inversetransform2(double[])" "org.apache.commons.math.transform.FastCosineTransformer.transform2(double[])"
contain "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.transform.FastCosineTransformer.inversetransform2(double[])"
call "org.apache.commons.math.transform.FastCosineTransformer.inversetransform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastCosineTransformer.transform2(UnivariateRealFunction,double,double,int)"
contain "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.transform.FastCosineTransformer.inversetransform2(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastCosineTransformer.fct(double[])" "org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2(long)"
call "org.apache.commons.math.transform.FastCosineTransformer.fct(double[])" "org.apache.commons.math.transform.FastFourierTransformer.FastFourierTransformer()"
call "org.apache.commons.math.transform.FastCosineTransformer.fct(double[])" "org.apache.commons.math.transform.FastFourierTransformer.transform(double[])"
call "org.apache.commons.math.transform.FastCosineTransformer.fct(double[])" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.transform.FastCosineTransformer.fct(double[])" "org.apache.commons.math.complex.Complex.getImaginary()"
contain "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.transform.FastCosineTransformer.fct(double[])"
contain "org.apache.commons.math.transform.FastCosineTransformer" "org.apache.commons.math.transform.FastCosineTransformer.serialVersionUID : long"
reference "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.FunctionEvaluationException"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.setMaximalIterationCount(int)"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.getMaximalIterationCount()"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.resetMaximalIterationCount()"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.setAbsoluteAccuracy(double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.resetAbsoluteAccuracy()"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.setRelativeAccuracy(double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.getRelativeAccuracy()"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.resetRelativeAccuracy()"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.setFunctionValueAccuracy(double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.getFunctionValueAccuracy()"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.resetFunctionValueAccuracy()"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double,double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.getResult()"
contain "org.apache.commons.math.analysis.UnivariateRealSolver" "org.apache.commons.math.analysis.UnivariateRealSolver.getIterationCount()"
reference "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double)" "org.apache.commons.math.estimation.WeightedMeasurement.weight : double"
reference "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double)" "org.apache.commons.math.estimation.WeightedMeasurement.measuredValue : double"
reference "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double)" "org.apache.commons.math.estimation.WeightedMeasurement.ignored : boolean"
contain "org.apache.commons.math.estimation.WeightedMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double)"
reference "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double,boolean)" "org.apache.commons.math.estimation.WeightedMeasurement.weight : double"
reference "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double,boolean)" "org.apache.commons.math.estimation.WeightedMeasurement.measuredValue : double"
reference "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double,boolean)" "org.apache.commons.math.estimation.WeightedMeasurement.ignored : boolean"
contain "org.apache.commons.math.estimation.WeightedMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double,boolean)"
reference "org.apache.commons.math.estimation.WeightedMeasurement.getWeight()" "org.apache.commons.math.estimation.WeightedMeasurement.weight : double"
contain "org.apache.commons.math.estimation.WeightedMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement.getWeight()"
reference "org.apache.commons.math.estimation.WeightedMeasurement.getMeasuredValue()" "org.apache.commons.math.estimation.WeightedMeasurement.measuredValue : double"
contain "org.apache.commons.math.estimation.WeightedMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement.getMeasuredValue()"
reference "org.apache.commons.math.estimation.WeightedMeasurement.getResidual()" "org.apache.commons.math.estimation.WeightedMeasurement.measuredValue : double"
call "org.apache.commons.math.estimation.WeightedMeasurement.getResidual()" "org.apache.commons.math.estimation.WeightedMeasurement.getTheoreticalValue()"
contain "org.apache.commons.math.estimation.WeightedMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement.getResidual()"
contain "org.apache.commons.math.estimation.WeightedMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement.getTheoreticalValue()"
contain "org.apache.commons.math.estimation.WeightedMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement.getPartial(EstimatedParameter)"
reference "org.apache.commons.math.estimation.WeightedMeasurement.setIgnored(boolean)" "org.apache.commons.math.estimation.WeightedMeasurement.ignored : boolean"
contain "org.apache.commons.math.estimation.WeightedMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement.setIgnored(boolean)"
reference "org.apache.commons.math.estimation.WeightedMeasurement.isIgnored()" "org.apache.commons.math.estimation.WeightedMeasurement.ignored : boolean"
contain "org.apache.commons.math.estimation.WeightedMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement.isIgnored()"
contain "org.apache.commons.math.estimation.WeightedMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement.weight : double"
contain "org.apache.commons.math.estimation.WeightedMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement.measuredValue : double"
contain "org.apache.commons.math.estimation.WeightedMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement.ignored : boolean"
reference "org.apache.commons.math.distribution.DiscreteDistribution" "org.apache.commons.math.distribution.Distribution"
contain "org.apache.commons.math.distribution.DiscreteDistribution" "org.apache.commons.math.distribution.DiscreteDistribution.probability(double)"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolver"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resultComputed : boolean"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.f : UnivariateRealFunction"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.defaultAbsoluteAccuracy : double"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.defaultRelativeAccuracy : double"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.defaultFunctionValueAccuracy : double"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.absoluteAccuracy : double"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.relativeAccuracy : double"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.functionValueAccuracy : double"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.defaultMaximalIterationCount : int"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.maximalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getResult()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resultComputed : boolean"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getResult()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.result : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getResult()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getIterationCount()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resultComputed : boolean"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getIterationCount()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.iterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getIterationCount()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.setResult(double,int)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.result : double"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.setResult(double,int)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.iterationCount : int"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.setResult(double,int)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resultComputed : boolean"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.setResult(double,int)"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.clearResult()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resultComputed : boolean"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.clearResult()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.setAbsoluteAccuracy(double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.absoluteAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.setAbsoluteAccuracy(double)"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getAbsoluteAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.absoluteAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getAbsoluteAccuracy()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resetAbsoluteAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.defaultAbsoluteAccuracy : double"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resetAbsoluteAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.absoluteAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resetAbsoluteAccuracy()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.setMaximalIterationCount(int)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.maximalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.setMaximalIterationCount(int)"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getMaximalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.maximalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getMaximalIterationCount()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resetMaximalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.defaultMaximalIterationCount : int"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resetMaximalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.maximalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resetMaximalIterationCount()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.setRelativeAccuracy(double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.relativeAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.setRelativeAccuracy(double)"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getRelativeAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.relativeAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getRelativeAccuracy()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resetRelativeAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.defaultRelativeAccuracy : double"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resetRelativeAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.relativeAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resetRelativeAccuracy()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.setFunctionValueAccuracy(double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.functionValueAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.setFunctionValueAccuracy(double)"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getFunctionValueAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.functionValueAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getFunctionValueAccuracy()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resetFunctionValueAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.defaultFunctionValueAccuracy : double"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resetFunctionValueAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.functionValueAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resetFunctionValueAccuracy()"
call "org.apache.commons.math.analysis.UnivariateRealSolverImpl.isBracketing(double,double,UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.isBracketing(double,double,UnivariateRealFunction)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.isSequence(double,double,double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyInterval(double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifySequence(double,double,double)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.isSequence(double,double,double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifySequence(double,double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyBracketing(double,double,UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyInterval(double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyBracketing(double,double,UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.isBracketing(double,double,UnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyBracketing(double,double,UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyBracketing(double,double,UnivariateRealFunction)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.serialVersionUID : long"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.absoluteAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.relativeAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.functionValueAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.maximalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.defaultAbsoluteAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.defaultRelativeAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.defaultFunctionValueAccuracy : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.defaultMaximalIterationCount : int"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.resultComputed : boolean"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.result : double"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.iterationCount : int"
reference "org.apache.commons.math.analysis.UnivariateRealSolverImpl.f : UnivariateRealFunction" "org.apache.commons.math.analysis.UnivariateRealFunction"
contain "org.apache.commons.math.analysis.UnivariateRealSolverImpl" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.f : UnivariateRealFunction"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.util.ResizableDoubleArray"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.moment.Mean"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.moment.GeometricMean"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.moment.Kurtosis"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.rank.Max"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.rank.Min"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.rank.Percentile"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.moment.Skewness"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.moment.Variance"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.summary.Sum"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.discovery.tools.DiscoverClass"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.StatisticalSummary"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.windowSize : int"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.eDA : ResizableDoubleArray"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.meanImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.GeometricMean()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.geometricMeanImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.kurtosisImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.rank.Max.Max()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.maxImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.rank.Min.Min()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.minImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.percentileImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.skewnessImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.varianceImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.SumOfSquares()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumsqImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.summary.Sum.Sum()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.windowSize : int"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.eDA : ResizableDoubleArray"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.meanImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.GeometricMean()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.geometricMeanImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.kurtosisImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.rank.Max.Max()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.maxImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.rank.Min.Min()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.minImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.percentileImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.skewnessImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.varianceImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.SumOfSquares()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumsqImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.summary.Sum.Sum()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setWindowSize(int)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics(int)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance(Class)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance()" "org.apache.commons.discovery.tools.DiscoverClass.DiscoverClass()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.class$org$apache$commons$math$stat$descriptive$DescriptiveStatistics : Class"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.class$(String)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance()" "org.apache.commons.discovery.tools.DiscoverClass.newInstance(Class,String)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl.DescriptiveStatisticsImpl()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.windowSize : int"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getN()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.eDA : ResizableDoubleArray"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)" "org.apache.commons.math.util.ResizableDoubleArray.addElementRolling(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)" "org.apache.commons.math.util.ResizableDoubleArray.addElement(double)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.meanImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getGeometricMean()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.geometricMeanImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getGeometricMean()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getGeometricMean()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.varianceImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getN()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSkewness()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.skewnessImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSkewness()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSkewness()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.kurtosisImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getKurtosis()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMax()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.maxImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMax()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMax()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMin()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.minImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMin()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMin()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getN()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.eDA : ResizableDoubleArray"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getN()" "org.apache.commons.math.util.ResizableDoubleArray.getNumElements()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getN()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSum()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSum()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSum()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSumsq()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumsqImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSumsq()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSumsq()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.clear()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.eDA : ResizableDoubleArray"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.clear()" "org.apache.commons.math.util.ResizableDoubleArray.clear()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.clear()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getWindowSize()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.windowSize : int"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getWindowSize()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setWindowSize(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.windowSize : int"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setWindowSize(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.eDA : ResizableDoubleArray"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setWindowSize(int)" "org.apache.commons.math.util.ResizableDoubleArray.getNumElements()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setWindowSize(int)" "org.apache.commons.math.util.ResizableDoubleArray.discardFrontElements(int)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setWindowSize(int)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getValues()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.eDA : ResizableDoubleArray"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getValues()" "org.apache.commons.math.util.ResizableDoubleArray.getNumElements()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getValues()" "org.apache.commons.math.util.ResizableDoubleArray.getElements()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getValues()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSortedValues()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getValues()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSortedValues()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getElement(int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.eDA : ResizableDoubleArray"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getElement(int)" "org.apache.commons.math.util.ResizableDoubleArray.getElement(int)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getElement(int)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getPercentile(double)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.percentileImpl : UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getPercentile(double)" "org.apache.commons.math.stat.descriptive.rank.Percentile.setQuantile(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getPercentile(double)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getPercentile(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.toString()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getN()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.toString()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMin()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.toString()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMax()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.toString()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.toString()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.toString()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getPercentile(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.toString()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSkewness()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.toString()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getKurtosis()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.toString()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.eDA : ResizableDoubleArray"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)" "org.apache.commons.math.util.ResizableDoubleArray.getValues()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)" "org.apache.commons.math.util.ResizableDoubleArray.start()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)" "org.apache.commons.math.util.ResizableDoubleArray.getNumElements()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.apply(UnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMeanImpl()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.meanImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMeanImpl()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setMeanImpl(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.meanImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setMeanImpl(UnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getGeometricMeanImpl()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.geometricMeanImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getGeometricMeanImpl()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setGeometricMeanImpl(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.geometricMeanImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setGeometricMeanImpl(UnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getKurtosisImpl()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.kurtosisImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getKurtosisImpl()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setKurtosisImpl(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.kurtosisImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setKurtosisImpl(UnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMaxImpl()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.maxImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMaxImpl()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setMaxImpl(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.maxImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setMaxImpl(UnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMinImpl()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.minImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMinImpl()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setMinImpl(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.minImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setMinImpl(UnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getPercentileImpl()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.percentileImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getPercentileImpl()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setPercentileImpl(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.percentileImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setPercentileImpl(UnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSkewnessImpl()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.skewnessImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSkewnessImpl()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setSkewnessImpl(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.skewnessImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setSkewnessImpl(UnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVarianceImpl()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.varianceImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVarianceImpl()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setVarianceImpl(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.varianceImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setVarianceImpl(UnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSumsqImpl()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumsqImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSumsqImpl()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setSumsqImpl(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumsqImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setSumsqImpl(UnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSumImpl()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSumImpl()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setSumImpl(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setSumImpl(UnivariateStatistic)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.class$(String)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.windowSize : int"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.eDA : ResizableDoubleArray" "org.apache.commons.math.util.ResizableDoubleArray"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.eDA : ResizableDoubleArray"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.meanImpl : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.meanImpl : UnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.geometricMeanImpl : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.geometricMeanImpl : UnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.kurtosisImpl : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.kurtosisImpl : UnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.maxImpl : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.maxImpl : UnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.minImpl : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.minImpl : UnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.percentileImpl : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.percentileImpl : UnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.skewnessImpl : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.skewnessImpl : UnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.varianceImpl : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.varianceImpl : UnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumsqImpl : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumsqImpl : UnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumImpl : UnivariateStatistic" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumImpl : UnivariateStatistic"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.INFINITE_WINDOW : int"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.class$org$apache$commons$math$stat$descriptive$DescriptiveStatistics : Class"
reference "org.apache.commons.math.ode.StepInterpolator" "org.apache.commons.math.ode.DerivativeException"
contain "org.apache.commons.math.ode.StepInterpolator" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
contain "org.apache.commons.math.ode.StepInterpolator" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
contain "org.apache.commons.math.ode.StepInterpolator" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedTime()"
contain "org.apache.commons.math.ode.StepInterpolator" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
contain "org.apache.commons.math.ode.StepInterpolator" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
contain "org.apache.commons.math.ode.StepInterpolator" "org.apache.commons.math.ode.StepInterpolator.isForward()"
contain "org.apache.commons.math.ode.StepInterpolator" "org.apache.commons.math.ode.StepInterpolator.copy()"
reference "org.apache.commons.math.analysis.BrentSolver" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.analysis.BrentSolver" "org.apache.commons.math.analysis.UnivariateRealSolverImpl"
reference "org.apache.commons.math.analysis.BrentSolver" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.BrentSolver" "org.apache.commons.math.analysis.UnivariateRealFunction"
call "org.apache.commons.math.analysis.BrentSolver.BrentSolver(UnivariateRealFunction)" "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(UnivariateRealFunction,int,double)"
contain "org.apache.commons.math.analysis.BrentSolver" "org.apache.commons.math.analysis.BrentSolver.BrentSolver(UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double)" "org.apache.commons.math.analysis.BrentSolver.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
reference "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double)" "org.apache.commons.math.analysis.BrentSolver.functionValueAccuracy : double"
call "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double)" "org.apache.commons.math.analysis.BrentSolver.setResult(double,int)"
reference "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double)" "org.apache.commons.math.analysis.BrentSolver.result : double"
call "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double)" "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double,double,double,double)"
contain "org.apache.commons.math.analysis.BrentSolver" "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double)"
call "org.apache.commons.math.analysis.BrentSolver.solve(double,double)" "org.apache.commons.math.analysis.BrentSolver.clearResult()"
call "org.apache.commons.math.analysis.BrentSolver.solve(double,double)" "org.apache.commons.math.analysis.BrentSolver.verifyInterval(double,double)"
reference "org.apache.commons.math.analysis.BrentSolver.solve(double,double)" "org.apache.commons.math.analysis.BrentSolver.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.BrentSolver.solve(double,double)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.BrentSolver.solve(double,double)" "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double,double,double,double)"
contain "org.apache.commons.math.analysis.BrentSolver" "org.apache.commons.math.analysis.BrentSolver.solve(double,double)"
reference "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double,double,double,double)" "org.apache.commons.math.analysis.BrentSolver.maximalIterationCount : int"
reference "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double,double,double,double)" "org.apache.commons.math.analysis.BrentSolver.functionValueAccuracy : double"
call "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double,double,double,double)" "org.apache.commons.math.analysis.BrentSolver.setResult(double,int)"
reference "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double,double,double,double)" "org.apache.commons.math.analysis.BrentSolver.result : double"
reference "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double,double,double,double)" "org.apache.commons.math.analysis.BrentSolver.relativeAccuracy : double"
reference "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double,double,double,double)" "org.apache.commons.math.analysis.BrentSolver.absoluteAccuracy : double"
reference "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double,double,double,double)" "org.apache.commons.math.analysis.BrentSolver.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double,double,double,double)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double,double,double,double)" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
contain "org.apache.commons.math.analysis.BrentSolver" "org.apache.commons.math.analysis.BrentSolver.solve(double,double,double,double,double,double)"
contain "org.apache.commons.math.analysis.BrentSolver" "org.apache.commons.math.analysis.BrentSolver.serialVersionUID : long"
reference "org.apache.commons.math.ode.IntegratorException" "org.apache.commons.math.MathException"
call "org.apache.commons.math.ode.IntegratorException.IntegratorException(String,String[])" "org.apache.commons.math.MathException.MathException(String,Object[])"
contain "org.apache.commons.math.ode.IntegratorException" "org.apache.commons.math.ode.IntegratorException.IntegratorException(String,String[])"
call "org.apache.commons.math.ode.IntegratorException.IntegratorException(Throwable)" "org.apache.commons.math.MathException.MathException(Throwable)"
contain "org.apache.commons.math.ode.IntegratorException" "org.apache.commons.math.ode.IntegratorException.IntegratorException(Throwable)"
contain "org.apache.commons.math.ode.IntegratorException" "org.apache.commons.math.ode.IntegratorException.serialVersionUID : long"
reference "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TTestImpl"
reference "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.ChiSquareTestImpl"
reference "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TTest"
reference "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.ChiSquareTest"
reference "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.TestUtils()"
reference "org.apache.commons.math.stat.inference.TestUtils.setChiSquareTest(TTest)" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.setChiSquareTest(TTest)"
reference "org.apache.commons.math.stat.inference.TestUtils.getTTest()" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.getTTest()"
reference "org.apache.commons.math.stat.inference.TestUtils.setChiSquareTest(ChiSquareTest)" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest : ChiSquareTest"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.setChiSquareTest(ChiSquareTest)"
reference "org.apache.commons.math.stat.inference.TestUtils.getChiSquareTest()" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest : ChiSquareTest"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.getChiSquareTest()"
reference "org.apache.commons.math.stat.inference.TestUtils.setUnknownDistributionChiSquareTest(UnknownDistributionChiSquareTest)" "org.apache.commons.math.stat.inference.TestUtils.unknownDistributionChiSquareTest : UnknownDistributionChiSquareTest"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.setUnknownDistributionChiSquareTest(UnknownDistributionChiSquareTest)"
reference "org.apache.commons.math.stat.inference.TestUtils.getUnknownDistributionChiSquareTest()" "org.apache.commons.math.stat.inference.TestUtils.unknownDistributionChiSquareTest : UnknownDistributionChiSquareTest"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.getUnknownDistributionChiSquareTest()"
reference "org.apache.commons.math.stat.inference.TestUtils.homoscedasticT(double[],double[])" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.homoscedasticT(double[],double[])" "org.apache.commons.math.stat.inference.TTest.homoscedasticT(double[],double[])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.homoscedasticT(double[],double[])"
reference "org.apache.commons.math.stat.inference.TestUtils.homoscedasticT(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.homoscedasticT(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.inference.TTest.homoscedasticT(StatisticalSummary,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.homoscedasticT(StatisticalSummary,StatisticalSummary)"
reference "org.apache.commons.math.stat.inference.TestUtils.homoscedasticTTest(double[],double[],double)" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.homoscedasticTTest(double[],double[],double)" "org.apache.commons.math.stat.inference.TTest.homoscedasticTTest(double[],double[],double)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.homoscedasticTTest(double[],double[],double)"
reference "org.apache.commons.math.stat.inference.TestUtils.homoscedasticTTest(double[],double[])" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.homoscedasticTTest(double[],double[])" "org.apache.commons.math.stat.inference.TTest.homoscedasticTTest(double[],double[])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.homoscedasticTTest(double[],double[])"
reference "org.apache.commons.math.stat.inference.TestUtils.homoscedasticTTest(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.homoscedasticTTest(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.inference.TTest.homoscedasticTTest(StatisticalSummary,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.homoscedasticTTest(StatisticalSummary,StatisticalSummary)"
reference "org.apache.commons.math.stat.inference.TestUtils.pairedT(double[],double[])" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.pairedT(double[],double[])" "org.apache.commons.math.stat.inference.TTest.pairedT(double[],double[])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.pairedT(double[],double[])"
reference "org.apache.commons.math.stat.inference.TestUtils.pairedTTest(double[],double[],double)" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.pairedTTest(double[],double[],double)" "org.apache.commons.math.stat.inference.TTest.pairedTTest(double[],double[],double)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.pairedTTest(double[],double[],double)"
reference "org.apache.commons.math.stat.inference.TestUtils.pairedTTest(double[],double[])" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.pairedTTest(double[],double[])" "org.apache.commons.math.stat.inference.TTest.pairedTTest(double[],double[])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.pairedTTest(double[],double[])"
reference "org.apache.commons.math.stat.inference.TestUtils.t(double,double[])" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.t(double,double[])" "org.apache.commons.math.stat.inference.TTest.t(double,double[])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.t(double,double[])"
reference "org.apache.commons.math.stat.inference.TestUtils.t(double,StatisticalSummary)" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.t(double,StatisticalSummary)" "org.apache.commons.math.stat.inference.TTest.t(double,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.t(double,StatisticalSummary)"
reference "org.apache.commons.math.stat.inference.TestUtils.t(double[],double[])" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.t(double[],double[])" "org.apache.commons.math.stat.inference.TTest.t(double[],double[])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.t(double[],double[])"
reference "org.apache.commons.math.stat.inference.TestUtils.t(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.t(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.inference.TTest.t(StatisticalSummary,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.t(StatisticalSummary,StatisticalSummary)"
reference "org.apache.commons.math.stat.inference.TestUtils.tTest(double,double[],double)" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.tTest(double,double[],double)" "org.apache.commons.math.stat.inference.TTest.tTest(double,double[],double)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.tTest(double,double[],double)"
reference "org.apache.commons.math.stat.inference.TestUtils.tTest(double,double[])" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.tTest(double,double[])" "org.apache.commons.math.stat.inference.TTest.tTest(double,double[])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.tTest(double,double[])"
reference "org.apache.commons.math.stat.inference.TestUtils.tTest(double,StatisticalSummary,double)" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.tTest(double,StatisticalSummary,double)" "org.apache.commons.math.stat.inference.TTest.tTest(double,StatisticalSummary,double)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.tTest(double,StatisticalSummary,double)"
reference "org.apache.commons.math.stat.inference.TestUtils.tTest(double,StatisticalSummary)" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.tTest(double,StatisticalSummary)" "org.apache.commons.math.stat.inference.TTest.tTest(double,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.tTest(double,StatisticalSummary)"
reference "org.apache.commons.math.stat.inference.TestUtils.tTest(double[],double[],double)" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.tTest(double[],double[],double)" "org.apache.commons.math.stat.inference.TTest.tTest(double[],double[],double)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.tTest(double[],double[],double)"
reference "org.apache.commons.math.stat.inference.TestUtils.tTest(double[],double[])" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.tTest(double[],double[])" "org.apache.commons.math.stat.inference.TTest.tTest(double[],double[])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.tTest(double[],double[])"
reference "org.apache.commons.math.stat.inference.TestUtils.tTest(StatisticalSummary,StatisticalSummary,double)" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.tTest(StatisticalSummary,StatisticalSummary,double)" "org.apache.commons.math.stat.inference.TTest.tTest(StatisticalSummary,StatisticalSummary,double)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.tTest(StatisticalSummary,StatisticalSummary,double)"
reference "org.apache.commons.math.stat.inference.TestUtils.tTest(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.tTest(StatisticalSummary,StatisticalSummary)" "org.apache.commons.math.stat.inference.TTest.tTest(StatisticalSummary,StatisticalSummary)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.tTest(StatisticalSummary,StatisticalSummary)"
reference "org.apache.commons.math.stat.inference.TestUtils.chiSquare(double[],long[])" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest : ChiSquareTest"
call "org.apache.commons.math.stat.inference.TestUtils.chiSquare(double[],long[])" "org.apache.commons.math.stat.inference.ChiSquareTest.chiSquare(double[],long[])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.chiSquare(double[],long[])"
reference "org.apache.commons.math.stat.inference.TestUtils.chiSquare(long[][])" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest : ChiSquareTest"
call "org.apache.commons.math.stat.inference.TestUtils.chiSquare(long[][])" "org.apache.commons.math.stat.inference.ChiSquareTest.chiSquare(long[][])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.chiSquare(long[][])"
reference "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[],long[],double)" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest : ChiSquareTest"
call "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[],long[],double)" "org.apache.commons.math.stat.inference.ChiSquareTest.chiSquareTest(double[],long[],double)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[],long[],double)"
reference "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[],long[])" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest : ChiSquareTest"
call "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[],long[])" "org.apache.commons.math.stat.inference.ChiSquareTest.chiSquareTest(double[],long[])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[],long[])"
reference "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][],double)" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest : ChiSquareTest"
call "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][],double)" "org.apache.commons.math.stat.inference.ChiSquareTest.chiSquareTest(long[][],double)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][],double)"
reference "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][])" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest : ChiSquareTest"
call "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][])" "org.apache.commons.math.stat.inference.ChiSquareTest.chiSquareTest(long[][])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][])"
reference "org.apache.commons.math.stat.inference.TestUtils.chiSquareDataSetsComparison(long[],long[])" "org.apache.commons.math.stat.inference.TestUtils.unknownDistributionChiSquareTest : UnknownDistributionChiSquareTest"
call "org.apache.commons.math.stat.inference.TestUtils.chiSquareDataSetsComparison(long[],long[])" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareDataSetsComparison(long[],long[])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.chiSquareDataSetsComparison(long[],long[])"
reference "org.apache.commons.math.stat.inference.TestUtils.chiSquareTestDataSetsComparison(long[],long[])" "org.apache.commons.math.stat.inference.TestUtils.unknownDistributionChiSquareTest : UnknownDistributionChiSquareTest"
call "org.apache.commons.math.stat.inference.TestUtils.chiSquareTestDataSetsComparison(long[],long[])" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(long[],long[])"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTestDataSetsComparison(long[],long[])"
reference "org.apache.commons.math.stat.inference.TestUtils.chiSquareTestDataSetsComparison(long[],long[],double)" "org.apache.commons.math.stat.inference.TestUtils.unknownDistributionChiSquareTest : UnknownDistributionChiSquareTest"
call "org.apache.commons.math.stat.inference.TestUtils.chiSquareTestDataSetsComparison(long[],long[],double)" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(long[],long[],double)"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTestDataSetsComparison(long[],long[],double)"
call "org.apache.commons.math.stat.inference.TestUtils.static {...}" "org.apache.commons.math.stat.inference.TTestImpl.TTestImpl()"
reference "org.apache.commons.math.stat.inference.TestUtils.static {...}" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
call "org.apache.commons.math.stat.inference.TestUtils.static {...}" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl()"
reference "org.apache.commons.math.stat.inference.TestUtils.static {...}" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest : ChiSquareTest"
reference "org.apache.commons.math.stat.inference.TestUtils.static {...}" "org.apache.commons.math.stat.inference.TestUtils.unknownDistributionChiSquareTest : UnknownDistributionChiSquareTest"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.static {...}"
reference "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest" "org.apache.commons.math.stat.inference.TTest"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.tTest : TTest"
reference "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest : ChiSquareTest" "org.apache.commons.math.stat.inference.ChiSquareTest"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest : ChiSquareTest"
reference "org.apache.commons.math.stat.inference.TestUtils.unknownDistributionChiSquareTest : UnknownDistributionChiSquareTest" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest"
contain "org.apache.commons.math.stat.inference.TestUtils" "org.apache.commons.math.stat.inference.TestUtils.unknownDistributionChiSquareTest : UnknownDistributionChiSquareTest"
reference "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.complex.Complex"
reference "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.transform.FastFourierTransformer.FastFourierTransformer()" "org.apache.commons.math.transform.FastFourierTransformer.omega : Complex[]"
reference "org.apache.commons.math.transform.FastFourierTransformer.FastFourierTransformer()" "org.apache.commons.math.transform.FastFourierTransformer.omegaCount : int"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.FastFourierTransformer()"
call "org.apache.commons.math.transform.FastFourierTransformer.transform(double[])" "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.transform(double[])"
call "org.apache.commons.math.transform.FastFourierTransformer.transform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.sample(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastFourierTransformer.transform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.transform(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastFourierTransformer.transform(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.computeOmega(int)"
call "org.apache.commons.math.transform.FastFourierTransformer.transform(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.fft(Complex[])"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.transform(Complex[])"
call "org.apache.commons.math.transform.FastFourierTransformer.transform2(double[])" "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)"
call "org.apache.commons.math.transform.FastFourierTransformer.transform2(double[])" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.transform2(double[])"
call "org.apache.commons.math.transform.FastFourierTransformer.transform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.sample(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastFourierTransformer.transform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)"
call "org.apache.commons.math.transform.FastFourierTransformer.transform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.transform2(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastFourierTransformer.transform2(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.computeOmega(int)"
call "org.apache.commons.math.transform.FastFourierTransformer.transform2(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.fft(Complex[])"
call "org.apache.commons.math.transform.FastFourierTransformer.transform2(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.transform2(Complex[])"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform(double[])" "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform(double[])" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.inversetransform(double[])"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.sample(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.inversetransform(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.computeOmega(int)"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.fft(Complex[])"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.inversetransform(Complex[])"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(double[])" "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(double[])" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(double[])"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.sample(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.computeOmega(int)"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.fft(Complex[])"
call "org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(Complex[])"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)" "org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(double[])"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)" "org.apache.commons.math.transform.FastFourierTransformer.computeOmega(int)"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)" "org.apache.commons.math.transform.FastFourierTransformer.fft(Complex[])"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)" "org.apache.commons.math.complex.Complex.getImaginary()"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)" "org.apache.commons.math.complex.Complex.conjugate()"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)" "org.apache.commons.math.complex.Complex.add(Complex)"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)" "org.apache.commons.math.complex.Complex.subtract(Complex)"
reference "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)" "org.apache.commons.math.transform.FastFourierTransformer.omega : Complex[]"
reference "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)" "org.apache.commons.math.complex.Complex.I : Complex"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)" "org.apache.commons.math.complex.Complex.multiply(Complex)"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.fft(double[],boolean)"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(Object[])"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(Complex[])" "org.apache.commons.math.complex.Complex.add(Complex)"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(Complex[])" "org.apache.commons.math.complex.Complex.subtract(Complex)"
reference "org.apache.commons.math.transform.FastFourierTransformer.fft(Complex[])" "org.apache.commons.math.complex.Complex.I : Complex"
call "org.apache.commons.math.transform.FastFourierTransformer.fft(Complex[])" "org.apache.commons.math.complex.Complex.multiply(Complex)"
reference "org.apache.commons.math.transform.FastFourierTransformer.fft(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.omegaCount : int"
reference "org.apache.commons.math.transform.FastFourierTransformer.fft(Complex[])" "org.apache.commons.math.transform.FastFourierTransformer.omega : Complex[]"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.fft(Complex[])"
reference "org.apache.commons.math.transform.FastFourierTransformer.computeOmega(int)" "org.apache.commons.math.transform.FastFourierTransformer.omegaCount : int"
reference "org.apache.commons.math.transform.FastFourierTransformer.computeOmega(int)" "org.apache.commons.math.transform.FastFourierTransformer.omega : Complex[]"
call "org.apache.commons.math.transform.FastFourierTransformer.computeOmega(int)" "org.apache.commons.math.complex.Complex.conjugate()"
call "org.apache.commons.math.transform.FastFourierTransformer.computeOmega(int)" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.transform.FastFourierTransformer.computeOmega(int)" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.transform.FastFourierTransformer.computeOmega(int)" "org.apache.commons.math.complex.Complex.getImaginary()"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.computeOmega(int)"
call "org.apache.commons.math.transform.FastFourierTransformer.sample(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(double,double)"
call "org.apache.commons.math.transform.FastFourierTransformer.sample(UnivariateRealFunction,double,double,int)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.sample(UnivariateRealFunction,double,double,int)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[],double)"
call "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)" "org.apache.commons.math.complex.Complex.getImaginary()"
call "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)" "org.apache.commons.math.complex.Complex.Complex(double,double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(Complex[],double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2(long)"
call "org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(double[])" "org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2(long)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(double[])"
call "org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(Object[])" "org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2(long)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(Object[])"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(double,double)"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.serialVersionUID : long"
reference "org.apache.commons.math.transform.FastFourierTransformer.omega : Complex[]" "org.apache.commons.math.complex.Complex[]"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.omega : Complex[]"
contain "org.apache.commons.math.transform.FastFourierTransformer" "org.apache.commons.math.transform.FastFourierTransformer.omegaCount : int"
reference "org.apache.commons.math.ode.SwitchingFunction" "org.apache.commons.math.FunctionEvaluationException"
contain "org.apache.commons.math.ode.SwitchingFunction" "org.apache.commons.math.ode.SwitchingFunction.g(double,double[])"
contain "org.apache.commons.math.ode.SwitchingFunction" "org.apache.commons.math.ode.SwitchingFunction.eventOccurred(double,double[])"
contain "org.apache.commons.math.ode.SwitchingFunction" "org.apache.commons.math.ode.SwitchingFunction.resetState(double,double[])"
contain "org.apache.commons.math.ode.SwitchingFunction" "org.apache.commons.math.ode.SwitchingFunction.STOP : int"
contain "org.apache.commons.math.ode.SwitchingFunction" "org.apache.commons.math.ode.SwitchingFunction.RESET_STATE : int"
contain "org.apache.commons.math.ode.SwitchingFunction" "org.apache.commons.math.ode.SwitchingFunction.RESET_DERIVATIVES : int"
contain "org.apache.commons.math.ode.SwitchingFunction" "org.apache.commons.math.ode.SwitchingFunction.CONTINUE : int"
reference "org.apache.commons.math.stat.data.LotteryTest" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest"
call "org.apache.commons.math.stat.data.LotteryTest.LotteryTest()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.CertifiedDataAbstractTest()"
contain "org.apache.commons.math.stat.data.LotteryTest" "org.apache.commons.math.stat.data.LotteryTest.LotteryTest()"
contain "org.apache.commons.math.stat.data.LotteryTest" "org.apache.commons.math.stat.data.LotteryTest.getResourceName()"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler" "junit.framework.Assert"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.DP54SmallLastHandler(double)" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.lastSeen : boolean"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.DP54SmallLastHandler(double)" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.minStep : double"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.DP54SmallLastHandler(double)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.requiresDenseOutput()"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.reset()"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.lastSeen : boolean"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.minStep : double"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.handleStep(StepInterpolator,boolean)"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.wasLastSeen()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.lastSeen : boolean"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.wasLastSeen()"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.lastSeen : boolean"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.minStep : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.TestProblem5"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.TestProblemHandler"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.TestProblem4"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.StepProblem"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.FirstOrderIntegrator"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.TestProblemAbstract"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.GraggBulirschStoerIntegratorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.GraggBulirschStoerIntegratorTest(String)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testDimensionCheck()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testNullIntervalCheck()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testNullIntervalCheck()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testNullIntervalCheck()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testNullIntervalCheck()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testNullIntervalCheck()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testNullIntervalCheck()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem5.TestProblem5()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem5.getFinalTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem5.getInitialTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testMinStep()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double[],double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testMinStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem5.getInitialState()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem5.getDimension()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testMinStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testMinStep()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testMinStep()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getCalls()"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIncreasingTolerance()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIntegratorControls()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIntegratorControls()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIntegratorControls()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIntegratorControls()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIntegratorControls()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.getMaxError(FirstOrderIntegrator,TestProblemAbstract)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIntegratorControls()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStabilityCheck(boolean,int,int,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIntegratorControls()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIntegratorControls()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepsizeControl(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIntegratorControls()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setOrderControl(int,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIntegratorControls()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setInterpolationControl(boolean,int)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testIntegratorControls()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.getMaxError(FirstOrderIntegrator,TestProblemAbstract)" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.getMaxError(FirstOrderIntegrator,TestProblemAbstract)" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.getMaxError(FirstOrderIntegrator,TestProblemAbstract)" "org.apache.commons.math.ode.TestProblemAbstract.getInitialTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.getMaxError(FirstOrderIntegrator,TestProblemAbstract)" "org.apache.commons.math.ode.TestProblemAbstract.getInitialState()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.getMaxError(FirstOrderIntegrator,TestProblemAbstract)" "org.apache.commons.math.ode.TestProblemAbstract.getFinalTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.getMaxError(FirstOrderIntegrator,TestProblemAbstract)" "org.apache.commons.math.ode.TestProblemAbstract.getDimension()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.getMaxError(FirstOrderIntegrator,TestProblemAbstract)" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.getMaxError(FirstOrderIntegrator,TestProblemAbstract)" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.getMaxError(FirstOrderIntegrator,TestProblemAbstract)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.TestProblem4()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getFinalTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getInitialTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getSwitchingFunctions()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getInitialState()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getDimension()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.getLastTime()"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testSwitchingFunctions()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testKepler()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testKepler()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.KeplerStepHandler(TestProblem3)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getCalls()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testKepler()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testKepler()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.VariableStepHandler()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.getName()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.assertEquals(String,String)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testVariableSteps()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.StepProblem.StepProblem(double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.testUnstableDerivative()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.suite()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.class$org$apache$commons$math$ode$GraggBulirschStoerIntegratorTest : Class"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.suite()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.class$(String)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.suite()"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.class$(String)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.class$org$apache$commons$math$ode$GraggBulirschStoerIntegratorTest : Class"
reference "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest" "org.apache.commons.math.ode.ThreeEighthesIntegrator"
reference "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest" "org.apache.commons.math.ode.ContinuousOutputModel"
reference "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest" "org.apache.commons.math.ode.IntegratorException"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.ThreeEighthesStepInterpolatorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest" "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.ThreeEighthesStepInterpolatorTest(String)"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double)"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ThreeEighthesIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ThreeEighthesIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ThreeEighthesIntegrator.getStepHandler()"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
contain "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest" "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.testSerialization()"
reference "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.suite()" "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.class$org$apache$commons$math$ode$ThreeEighthesStepInterpolatorTest : Class"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.suite()" "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.class$(String)"
call "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest" "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.suite()"
contain "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest" "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.class$(String)"
contain "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest" "org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest.class$org$apache$commons$math$ode$ThreeEighthesStepInterpolatorTest : Class"
reference "org.apache.commons.math.ode.StepNormalizerTest.1" "org.apache.commons.math.ode.FixedStepHandler"
reference "org.apache.commons.math.ode.StepNormalizerTest.1" "org.apache.commons.math.ode.StepNormalizerTest"
reference "org.apache.commons.math.ode.StepNormalizerTest.1" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.StepNormalizerTest.1.{...}" "org.apache.commons.math.ode.StepNormalizerTest.1.this$0 : StepNormalizerTest"
reference "org.apache.commons.math.ode.StepNormalizerTest.1.{...}" "org.apache.commons.math.ode.StepNormalizerTest.1.firstCall : boolean"
contain "org.apache.commons.math.ode.StepNormalizerTest.1" "org.apache.commons.math.ode.StepNormalizerTest.1.{...}"
reference "org.apache.commons.math.ode.StepNormalizerTest.1.handleStep(double,double[],boolean)" "org.apache.commons.math.ode.StepNormalizerTest.1.firstCall : boolean"
reference "org.apache.commons.math.ode.StepNormalizerTest.1.handleStep(double,double[],boolean)" "org.apache.commons.math.ode.StepNormalizerTest.1.this$0 : StepNormalizerTest"
reference "org.apache.commons.math.ode.StepNormalizerTest.1.handleStep(double,double[],boolean)" "org.apache.commons.math.ode.StepNormalizerTest.pb : TestProblem3"
call "org.apache.commons.math.ode.StepNormalizerTest.1.handleStep(double,double[],boolean)" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.StepNormalizerTest.1.handleStep(double,double[],boolean)" "org.apache.commons.math.ode.StepNormalizerTest.checkValue(double,double)"
call "org.apache.commons.math.ode.StepNormalizerTest.1.handleStep(double,double[],boolean)" "org.apache.commons.math.ode.StepNormalizerTest.setLastSeen(boolean)"
call "org.apache.commons.math.ode.StepNormalizerTest.1.handleStep(double,double[],boolean)" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
contain "org.apache.commons.math.ode.StepNormalizerTest.1" "org.apache.commons.math.ode.StepNormalizerTest.1.handleStep(double,double[],boolean)"
contain "org.apache.commons.math.ode.StepNormalizerTest.1" "org.apache.commons.math.ode.StepNormalizerTest.1.firstCall : boolean"
reference "org.apache.commons.math.ode.StepNormalizerTest.1.this$0 : StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest"
contain "org.apache.commons.math.ode.StepNormalizerTest.1" "org.apache.commons.math.ode.StepNormalizerTest.1.this$0 : StepNormalizerTest"
reference "org.apache.commons.math.ode.StepNormalizerTest.2" "org.apache.commons.math.ode.FixedStepHandler"
reference "org.apache.commons.math.ode.StepNormalizerTest.2" "org.apache.commons.math.ode.StepNormalizerTest"
reference "org.apache.commons.math.ode.StepNormalizerTest.2" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.StepNormalizerTest.2.{...}" "org.apache.commons.math.ode.StepNormalizerTest.2.this$0 : StepNormalizerTest"
reference "org.apache.commons.math.ode.StepNormalizerTest.2.{...}" "org.apache.commons.math.ode.StepNormalizerTest.2.val$range : double"
contain "org.apache.commons.math.ode.StepNormalizerTest.2" "org.apache.commons.math.ode.StepNormalizerTest.2.{...}"
reference "org.apache.commons.math.ode.StepNormalizerTest.2.handleStep(double,double[],boolean)" "org.apache.commons.math.ode.StepNormalizerTest.2.this$0 : StepNormalizerTest"
call "org.apache.commons.math.ode.StepNormalizerTest.2.handleStep(double,double[],boolean)" "org.apache.commons.math.ode.StepNormalizerTest.setLastSeen(boolean)"
reference "org.apache.commons.math.ode.StepNormalizerTest.2.handleStep(double,double[],boolean)" "org.apache.commons.math.ode.StepNormalizerTest.pb : TestProblem3"
call "org.apache.commons.math.ode.StepNormalizerTest.2.handleStep(double,double[],boolean)" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
reference "org.apache.commons.math.ode.StepNormalizerTest.2.handleStep(double,double[],boolean)" "org.apache.commons.math.ode.StepNormalizerTest.2.val$range : double"
call "org.apache.commons.math.ode.StepNormalizerTest.2.handleStep(double,double[],boolean)" "org.apache.commons.math.ode.StepNormalizerTest.checkValue(double,double)"
contain "org.apache.commons.math.ode.StepNormalizerTest.2" "org.apache.commons.math.ode.StepNormalizerTest.2.handleStep(double,double[],boolean)"
contain "org.apache.commons.math.ode.StepNormalizerTest.2" "org.apache.commons.math.ode.StepNormalizerTest.2.val$range : double"
reference "org.apache.commons.math.ode.StepNormalizerTest.2.this$0 : StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest"
contain "org.apache.commons.math.ode.StepNormalizerTest.2" "org.apache.commons.math.ode.StepNormalizerTest.2.this$0 : StepNormalizerTest"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.MinpackMeasurement(MinpackTest.MinpackFunction,int)" "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double)"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.MinpackMeasurement(MinpackTest.MinpackFunction,int)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.this$0 : MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.MinpackMeasurement(MinpackTest.MinpackFunction,int)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.index : int"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.MinpackMeasurement(MinpackTest.MinpackFunction,int)"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.getTheoreticalValue()" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.this$0 : MinpackFunction"
call "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.getTheoreticalValue()" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getResiduals()"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.getTheoreticalValue()" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.index : int"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.getTheoreticalValue()"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.this$0 : MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.n : int"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.index : int"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.getPartial(EstimatedParameter)"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.index : int"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.serialVersionUID : long"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.this$0 : MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.this$0 : MinpackFunction"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.random.RandomDataImpl"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "junit.framework.TestCase"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.random.RandomData"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.var : double"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.max : double"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.mean : double"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.min : double"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.n : double"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.one : double"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.std : double"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.sum : double"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.sumSq : double"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.three : int"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.tolerance : double"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.two : float"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.createDescriptiveStatistics()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.setUp()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testAddValue()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.createDescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testAddValue()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setWindowSize(int)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testAddValue()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testAddValue()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getValues()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testAddValue()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testAddValue()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testGetSortedValues()" "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testGetSortedValues()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.tstGetSortedValues(double[])"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testGetSortedValues()" "org.apache.commons.math.random.RandomData.nextPermutation(int,int)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testGetSortedValues()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.createDescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.one : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testN0andN1Conditions()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testNewInstanceClassNull()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance(Class)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testNewInstanceClassNull()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.fail(String)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testNewInstanceClassNull()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.fail()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testNewInstanceClassNull()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testNewInstanceClassValid()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.class$org$apache$commons$math$stat$descriptive$DescriptiveStatisticsImpl : Class"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testNewInstanceClassValid()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testNewInstanceClassValid()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance(Class)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testNewInstanceClassValid()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertNotNull(Object)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testNewInstanceClassValid()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testNewInstanceClassValid()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.fail()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testNewInstanceClassValid()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testPercentiles()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.createDescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testPercentiles()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setWindowSize(int)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testPercentiles()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testPercentiles()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getPercentile(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testPercentiles()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testPercentiles()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.fail(String)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testPercentiles()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.clear()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testPercentiles()" "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testPercentiles()" "org.apache.commons.math.random.RandomData.nextPermutation(int,int)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testPercentiles()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testPercentiles()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.createDescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setWindowSize(int)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getGeometricMean()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testProductAndGeometricMean()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.createDescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getN()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.tolerance : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.one : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.two : float"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.TestUtils.serializeAndRecover(Object)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.three : int"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.n : double"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.sum : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSum()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.sumSq : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSumsq()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.var : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.std : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.mean : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.min : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMin()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.max : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMax()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.clear()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSerialization()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.createDescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSkewness()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getKurtosis()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testSkewAndKurtosis()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.createDescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getN()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.tolerance : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.one : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.two : float"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.three : int"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.n : double"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.sum : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSum()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.sumSq : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSumsq()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.var : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.std : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.mean : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.min : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMin()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.max : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMax()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.clear()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testStats()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testToString()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.createDescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testToString()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.toString()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testToString()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testToString()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testToString()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowing()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.createDescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowing()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setWindowSize(int)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowing()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowing()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowing()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.tolerance : double"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowing()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowing()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowSize()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.createDescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowSize()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setWindowSize(int)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowSize()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getWindowSize()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowSize()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertEquals(int,int)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowSize()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowSize()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getN()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowSize()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.assertEquals(long,long)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.testWindowSize()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.tstGetSortedValues(double[])" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.createDescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.tstGetSortedValues(double[])" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setWindowSize(int)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.tstGetSortedValues(double[])" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.tstGetSortedValues(double[])" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSortedValues()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.tstGetSortedValues(double[])" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.fail(String)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.tstGetSortedValues(double[])"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.class$(String)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.var : double"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.max : double"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.mean : double"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.min : double"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.n : double"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.one : double"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.std : double"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.sum : double"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.sumSq : double"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.three : int"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.tolerance : double"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.two : float"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.class$org$apache$commons$math$stat$descriptive$DescriptiveStatisticsImpl : Class"
reference "org.apache.commons.math.geometry.RotationOrderTest" "org.apache.commons.math.geometry.RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrderTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.geometry.RotationOrderTest" "junit.framework.TestCase"
call "org.apache.commons.math.geometry.RotationOrderTest.RotationOrderTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.geometry.RotationOrderTest" "org.apache.commons.math.geometry.RotationOrderTest.RotationOrderTest(String)"
reference "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrder.XYZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrder.XZY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrder.YXZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrder.YZX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrder.ZXY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrder.ZYX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrder.XYX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrder.XZX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrder.YXY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrder.YZY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrder.ZXZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrder.ZYZ : RotationOrder"
call "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrderTest.getFieldName(RotationOrder)"
call "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrder.toString()"
call "org.apache.commons.math.geometry.RotationOrderTest.testName()" "org.apache.commons.math.geometry.RotationOrderTest.assertEquals(String,String)"
contain "org.apache.commons.math.geometry.RotationOrderTest" "org.apache.commons.math.geometry.RotationOrderTest.testName()"
reference "org.apache.commons.math.geometry.RotationOrderTest.getFieldName(RotationOrder)" "org.apache.commons.math.geometry.RotationOrderTest.class$org$apache$commons$math$geometry$RotationOrder : Class"
call "org.apache.commons.math.geometry.RotationOrderTest.getFieldName(RotationOrder)" "org.apache.commons.math.geometry.RotationOrderTest.class$(String)"
contain "org.apache.commons.math.geometry.RotationOrderTest" "org.apache.commons.math.geometry.RotationOrderTest.getFieldName(RotationOrder)"
reference "org.apache.commons.math.geometry.RotationOrderTest.suite()" "org.apache.commons.math.geometry.RotationOrderTest.class$org$apache$commons$math$geometry$RotationOrderTest : Class"
call "org.apache.commons.math.geometry.RotationOrderTest.suite()" "org.apache.commons.math.geometry.RotationOrderTest.class$(String)"
call "org.apache.commons.math.geometry.RotationOrderTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.geometry.RotationOrderTest" "org.apache.commons.math.geometry.RotationOrderTest.suite()"
contain "org.apache.commons.math.geometry.RotationOrderTest" "org.apache.commons.math.geometry.RotationOrderTest.class$(String)"
contain "org.apache.commons.math.geometry.RotationOrderTest" "org.apache.commons.math.geometry.RotationOrderTest.class$org$apache$commons$math$geometry$RotationOrder : Class"
contain "org.apache.commons.math.geometry.RotationOrderTest" "org.apache.commons.math.geometry.RotationOrderTest.class$org$apache$commons$math$geometry$RotationOrderTest : Class"
reference "org.apache.commons.math.estimation.EstimatedParameterTest" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.EstimatedParameterTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.estimation.EstimatedParameterTest" "junit.framework.TestCase"
call "org.apache.commons.math.estimation.EstimatedParameterTest.EstimatedParameterTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.estimation.EstimatedParameterTest" "org.apache.commons.math.estimation.EstimatedParameterTest.EstimatedParameterTest(String)"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testConstruction()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testConstruction()" "org.apache.commons.math.estimation.EstimatedParameter.getName()"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testConstruction()" "org.apache.commons.math.estimation.EstimatedParameterTest.assertTrue(boolean)"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testConstruction()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testConstruction()" "org.apache.commons.math.estimation.EstimatedParameterTest.checkValue(double,double)"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testConstruction()" "org.apache.commons.math.estimation.EstimatedParameter.isBound()"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testConstruction()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double,boolean)"
contain "org.apache.commons.math.estimation.EstimatedParameterTest" "org.apache.commons.math.estimation.EstimatedParameterTest.testConstruction()"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testBound()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testBound()" "org.apache.commons.math.estimation.EstimatedParameter.isBound()"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testBound()" "org.apache.commons.math.estimation.EstimatedParameterTest.assertTrue(boolean)"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testBound()" "org.apache.commons.math.estimation.EstimatedParameter.setBound(boolean)"
contain "org.apache.commons.math.estimation.EstimatedParameterTest" "org.apache.commons.math.estimation.EstimatedParameterTest.testBound()"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testEstimate()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testEstimate()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testEstimate()" "org.apache.commons.math.estimation.EstimatedParameterTest.checkValue(double,double)"
call "org.apache.commons.math.estimation.EstimatedParameterTest.testEstimate()" "org.apache.commons.math.estimation.EstimatedParameter.setEstimate(double)"
contain "org.apache.commons.math.estimation.EstimatedParameterTest" "org.apache.commons.math.estimation.EstimatedParameterTest.testEstimate()"
reference "org.apache.commons.math.estimation.EstimatedParameterTest.suite()" "org.apache.commons.math.estimation.EstimatedParameterTest.class$org$apache$commons$math$estimation$EstimatedParameterTest : Class"
call "org.apache.commons.math.estimation.EstimatedParameterTest.suite()" "org.apache.commons.math.estimation.EstimatedParameterTest.class$(String)"
call "org.apache.commons.math.estimation.EstimatedParameterTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.estimation.EstimatedParameterTest" "org.apache.commons.math.estimation.EstimatedParameterTest.suite()"
call "org.apache.commons.math.estimation.EstimatedParameterTest.checkValue(double,double)" "org.apache.commons.math.estimation.EstimatedParameterTest.assertTrue(boolean)"
contain "org.apache.commons.math.estimation.EstimatedParameterTest" "org.apache.commons.math.estimation.EstimatedParameterTest.checkValue(double,double)"
contain "org.apache.commons.math.estimation.EstimatedParameterTest" "org.apache.commons.math.estimation.EstimatedParameterTest.class$(String)"
contain "org.apache.commons.math.estimation.EstimatedParameterTest" "org.apache.commons.math.estimation.EstimatedParameterTest.class$org$apache$commons$math$estimation$EstimatedParameterTest : Class"
reference "org.apache.commons.math.analysis.SinFunction.1" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.analysis.SinFunction.1" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.SinFunction.1.{...}" "org.apache.commons.math.analysis.SinFunction.1.this$0 : SinFunction"
contain "org.apache.commons.math.analysis.SinFunction.1" "org.apache.commons.math.analysis.SinFunction.1.{...}"
contain "org.apache.commons.math.analysis.SinFunction.1" "org.apache.commons.math.analysis.SinFunction.1.value(double)"
reference "org.apache.commons.math.analysis.SinFunction.1.this$0 : SinFunction" "org.apache.commons.math.analysis.SinFunction"
contain "org.apache.commons.math.analysis.SinFunction.1" "org.apache.commons.math.analysis.SinFunction.1.this$0 : SinFunction"
reference "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator" "org.apache.commons.math.random.RandomGenerator"
reference "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator" "org.apache.commons.math.random.RandomAdaptorTest"
contain "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.ConstantGenerator()"
contain "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.nextBoolean()"
contain "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.nextBytes(byte[])"
contain "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.nextDouble()"
contain "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.nextFloat()"
contain "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.nextGaussian()"
contain "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.nextInt()"
contain "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.nextInt(int)"
contain "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.nextLong()"
contain "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.setSeed(long)"
call "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.ConstantGenerator(RandomAdaptorTest.1)" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.ConstantGenerator()"
contain "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.ConstantGenerator(RandomAdaptorTest.1)"
reference "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.BrownAlmostLinearFunction(int,double,double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.buildArray(int,double)"
call "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.BrownAlmostLinearFunction(int,double,double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction" "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.BrownAlmostLinearFunction(int,double,double,double,double[])"
reference "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.n : int"
reference "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction" "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.n : int"
reference "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction" "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.getResiduals()"
reference "org.apache.commons.math.util.TestBean.TestBean()" "org.apache.commons.math.util.TestBean.x : Double"
reference "org.apache.commons.math.util.TestBean.TestBean()" "org.apache.commons.math.util.TestBean.y : String"
contain "org.apache.commons.math.util.TestBean" "org.apache.commons.math.util.TestBean.TestBean()"
reference "org.apache.commons.math.util.TestBean.getX()" "org.apache.commons.math.util.TestBean.x : Double"
contain "org.apache.commons.math.util.TestBean" "org.apache.commons.math.util.TestBean.getX()"
reference "org.apache.commons.math.util.TestBean.getY()" "org.apache.commons.math.util.TestBean.y : String"
contain "org.apache.commons.math.util.TestBean" "org.apache.commons.math.util.TestBean.getY()"
reference "org.apache.commons.math.util.TestBean.setX(Double)" "org.apache.commons.math.util.TestBean.x : Double"
contain "org.apache.commons.math.util.TestBean" "org.apache.commons.math.util.TestBean.setX(Double)"
reference "org.apache.commons.math.util.TestBean.setY(String)" "org.apache.commons.math.util.TestBean.y : String"
contain "org.apache.commons.math.util.TestBean" "org.apache.commons.math.util.TestBean.setY(String)"
contain "org.apache.commons.math.util.TestBean" "org.apache.commons.math.util.TestBean.getZ()"
contain "org.apache.commons.math.util.TestBean" "org.apache.commons.math.util.TestBean.setZ(Double)"
contain "org.apache.commons.math.util.TestBean" "org.apache.commons.math.util.TestBean.x : Double"
contain "org.apache.commons.math.util.TestBean" "org.apache.commons.math.util.TestBean.y : String"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler" "junit.framework.Assert"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.VariableHandler()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.firstTime : boolean"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.VariableHandler()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.minStep : double"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.VariableHandler()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.maxStep : double"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.VariableHandler()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.reset()"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.VariableHandler()"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.reset()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.firstTime : boolean"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.reset()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.minStep : double"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.reset()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.maxStep : double"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.reset()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.firstTime : boolean"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.minStep : double"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.maxStep : double"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.firstTime : boolean"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.minStep : double"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.maxStep : double"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest" "org.apache.commons.math.MathException"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.PolynomialFunctionNewtonFormTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest" "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.PolynomialFunctionNewtonFormTest()"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testLinearFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.PolynomialFunctionNewtonForm(double[],double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testLinearFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.value(double)"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testLinearFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testLinearFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.degree()"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testLinearFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.assertEquals(int,int)"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testLinearFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.getCoefficients()"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest" "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testLinearFunction()"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuadraticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.PolynomialFunctionNewtonForm(double[],double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuadraticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.value(double)"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuadraticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuadraticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.degree()"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuadraticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.assertEquals(int,int)"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuadraticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.getCoefficients()"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest" "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuadraticFunction()"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuinticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.PolynomialFunctionNewtonForm(double[],double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuinticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.value(double)"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuinticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuinticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.degree()"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuinticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.assertEquals(int,int)"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuinticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.getCoefficients()"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest" "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testQuinticFunction()"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testParameters()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonForm.PolynomialFunctionNewtonForm(double[],double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testParameters()" "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.fail(String)"
contain "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest" "org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest.testParameters()"
reference "org.apache.commons.math.random.RandomAdaptorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.random.RandomAdaptorTest" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator"
reference "org.apache.commons.math.random.RandomAdaptorTest" "org.apache.commons.math.random.RandomAdaptor"
reference "org.apache.commons.math.random.RandomAdaptorTest" "org.apache.commons.math.random.RandomDataTest"
call "org.apache.commons.math.random.RandomAdaptorTest.RandomAdaptorTest(String)" "org.apache.commons.math.random.RandomDataTest.RandomDataTest(String)"
contain "org.apache.commons.math.random.RandomAdaptorTest" "org.apache.commons.math.random.RandomAdaptorTest.RandomAdaptorTest(String)"
reference "org.apache.commons.math.random.RandomAdaptorTest.suite()" "org.apache.commons.math.random.RandomAdaptorTest.class$org$apache$commons$math$random$RandomAdaptorTest : Class"
call "org.apache.commons.math.random.RandomAdaptorTest.suite()" "org.apache.commons.math.random.RandomAdaptorTest.class$(String)"
call "org.apache.commons.math.random.RandomAdaptorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.random.RandomAdaptorTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.random.RandomAdaptorTest" "org.apache.commons.math.random.RandomAdaptorTest.suite()"
call "org.apache.commons.math.random.RandomAdaptorTest.testAdaptor()" "org.apache.commons.math.random.RandomAdaptorTest.ConstantGenerator.ConstantGenerator(RandomAdaptorTest.1)"
call "org.apache.commons.math.random.RandomAdaptorTest.testAdaptor()" "org.apache.commons.math.random.RandomAdaptor.createAdaptor(RandomGenerator)"
call "org.apache.commons.math.random.RandomAdaptorTest.testAdaptor()" "org.apache.commons.math.random.RandomAdaptorTest.checkConstant(Random)"
call "org.apache.commons.math.random.RandomAdaptorTest.testAdaptor()" "org.apache.commons.math.random.RandomAdaptor.RandomAdaptor(RandomGenerator)"
contain "org.apache.commons.math.random.RandomAdaptorTest" "org.apache.commons.math.random.RandomAdaptorTest.testAdaptor()"
call "org.apache.commons.math.random.RandomAdaptorTest.checkConstant(Random)" "org.apache.commons.math.random.RandomAdaptorTest.assertEquals(int,int)"
call "org.apache.commons.math.random.RandomAdaptorTest.checkConstant(Random)" "org.apache.commons.math.random.RandomAdaptorTest.assertEquals(boolean,boolean)"
call "org.apache.commons.math.random.RandomAdaptorTest.checkConstant(Random)" "org.apache.commons.math.random.RandomAdaptorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.random.RandomAdaptorTest.checkConstant(Random)" "org.apache.commons.math.random.RandomAdaptorTest.assertEquals(float,float,float)"
call "org.apache.commons.math.random.RandomAdaptorTest.checkConstant(Random)" "org.apache.commons.math.random.RandomAdaptorTest.assertEquals(long,long)"
contain "org.apache.commons.math.random.RandomAdaptorTest" "org.apache.commons.math.random.RandomAdaptorTest.checkConstant(Random)"
contain "org.apache.commons.math.random.RandomAdaptorTest" "org.apache.commons.math.random.RandomAdaptorTest.class$(String)"
contain "org.apache.commons.math.random.RandomAdaptorTest" "org.apache.commons.math.random.RandomAdaptorTest.class$org$apache$commons$math$random$RandomAdaptorTest : Class"
reference "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionImpl"
reference "org.apache.commons.math.distribution.HypergeometricDistributionTest" "double[]"
reference "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest"
reference "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistribution"
reference "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.HypergeometricDistributionTest(String)" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(String)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.HypergeometricDistributionTest(String)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.makeDistribution()" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.HypergeometricDistributionImpl(int,int,int)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.makeDistribution()"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.makeDensityTestPoints()"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.makeDensityTestValues()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.makeCumulativeTestPoints()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.makeDensityTestPoints()"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.makeCumulativeTestValues()"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.makeInverseCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.makeInverseCumulativeTestValues()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures()" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.HypergeometricDistributionImpl(int,int,int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setDistribution(IntegerDistribution)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setCumulativeTestPoints(int[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setDensityTestPoints(int[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setDensityTestValues(double[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setInverseCumulativeTestValues(int[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.verifyDensities()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.verifyCumulativeProbabilities()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses()" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.HypergeometricDistributionImpl(int,int,int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setDistribution(IntegerDistribution)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setCumulativeTestPoints(int[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setDensityTestPoints(int[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setDensityTestValues(double[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setInverseCumulativeTestValues(int[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.verifyDensities()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.verifyCumulativeProbabilities()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample()" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.HypergeometricDistributionImpl(int,int,int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setDistribution(IntegerDistribution)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setCumulativeTestPoints(int[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setDensityTestPoints(int[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setDensityTestValues(double[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.setInverseCumulativeTestValues(int[])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.verifyDensities()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.verifyCumulativeProbabilities()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testPopulationSize()" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.HypergeometricDistributionImpl(int,int,int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testPopulationSize()" "org.apache.commons.math.distribution.HypergeometricDistribution.setPopulationSize(int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testPopulationSize()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.fail(String)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testPopulationSize()" "org.apache.commons.math.distribution.HypergeometricDistribution.getPopulationSize()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testPopulationSize()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.assertEquals(int,int)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.testPopulationSize()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testLargeValues()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.testHypergeometricDistributionProbabilities(int,int,int,double[][])"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.testLargeValues()"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testHypergeometricDistributionProbabilities(int,int,int,double[][])" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.HypergeometricDistributionImpl(int,int,int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testHypergeometricDistributionProbabilities(int,int,int,double[][])" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.probability(int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testHypergeometricDistributionProbabilities(int,int,int,double[][])" "org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testHypergeometricDistributionProbabilities(int,int,int,double[][])" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.cumulativeProbability(int)"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testHypergeometricDistributionProbabilities(int,int,int,double[][])" "org.apache.commons.math.distribution.HypergeometricDistributionImpl.upperCumulativeProbability(int)"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.testHypergeometricDistributionProbabilities(int,int,int,double[][])"
call "org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues()" "org.apache.commons.math.distribution.HypergeometricDistributionTest.testHypergeometricDistributionProbabilities(int,int,int,double[][])"
contain "org.apache.commons.math.distribution.HypergeometricDistributionTest" "org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues()"
reference "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.FirstOrderConverterTest.Equations"
reference "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.FirstOrderConverter"
reference "org.apache.commons.math.ode.FirstOrderConverterTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator"
reference "org.apache.commons.math.ode.FirstOrderConverterTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.SecondOrderDifferentialEquations"
call "org.apache.commons.math.ode.FirstOrderConverterTest.FirstOrderConverterTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.FirstOrderConverterTest.FirstOrderConverterTest(String)"
call "org.apache.commons.math.ode.FirstOrderConverterTest.testDoubleDimension()" "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.Equations(int,double)"
call "org.apache.commons.math.ode.FirstOrderConverterTest.testDoubleDimension()" "org.apache.commons.math.ode.FirstOrderConverter.FirstOrderConverter(SecondOrderDifferentialEquations)"
call "org.apache.commons.math.ode.FirstOrderConverterTest.testDoubleDimension()" "org.apache.commons.math.ode.FirstOrderConverter.getDimension()"
call "org.apache.commons.math.ode.FirstOrderConverterTest.testDoubleDimension()" "org.apache.commons.math.ode.SecondOrderDifferentialEquations.getDimension()"
call "org.apache.commons.math.ode.FirstOrderConverterTest.testDoubleDimension()" "org.apache.commons.math.ode.FirstOrderConverterTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.FirstOrderConverterTest.testDoubleDimension()"
call "org.apache.commons.math.ode.FirstOrderConverterTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double,double,double,double)"
call "org.apache.commons.math.ode.FirstOrderConverterTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderConverterTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.FirstOrderConverterTest.testDecreasingSteps()"
call "org.apache.commons.math.ode.FirstOrderConverterTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double,double,double,double)"
call "org.apache.commons.math.ode.FirstOrderConverterTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderConverterTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.FirstOrderConverterTest.testSmallStep()"
call "org.apache.commons.math.ode.FirstOrderConverterTest.testBigStep()" "org.apache.commons.math.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double,double,double,double)"
call "org.apache.commons.math.ode.FirstOrderConverterTest.testBigStep()" "org.apache.commons.math.ode.FirstOrderConverterTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.FirstOrderConverterTest.testBigStep()"
reference "org.apache.commons.math.ode.FirstOrderConverterTest.suite()" "org.apache.commons.math.ode.FirstOrderConverterTest.class$org$apache$commons$math$ode$FirstOrderConverterTest : Class"
call "org.apache.commons.math.ode.FirstOrderConverterTest.suite()" "org.apache.commons.math.ode.FirstOrderConverterTest.class$(String)"
call "org.apache.commons.math.ode.FirstOrderConverterTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.FirstOrderConverterTest.suite()"
call "org.apache.commons.math.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double,double,double,double)" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)"
call "org.apache.commons.math.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double,double,double,double)" "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.Equations(int,double)"
call "org.apache.commons.math.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double,double,double,double)" "org.apache.commons.math.ode.FirstOrderConverter.FirstOrderConverter(SecondOrderDifferentialEquations)"
call "org.apache.commons.math.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double,double,double,double)" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
contain "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double,double,double,double)"
contain "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.FirstOrderConverterTest.class$(String)"
contain "org.apache.commons.math.ode.FirstOrderConverterTest" "org.apache.commons.math.ode.FirstOrderConverterTest.class$org$apache$commons$math$ode$FirstOrderConverterTest : Class"
reference "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics"
reference "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.SynchronizedSummaryStatisticsTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.SynchronizedSummaryStatisticsTest(String)"
reference "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.suite()" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.class$org$apache$commons$math$stat$descriptive$SynchronizedSummaryStatisticsTest : Class"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.suite()" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.suite()"
call "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.createSummaryStatistics()" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.SynchronizedSummaryStatistics()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.createSummaryStatistics()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.class$(String)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.class$org$apache$commons$math$stat$descriptive$SynchronizedSummaryStatisticsTest : Class"
reference "org.apache.commons.math.stat.inference.TestUtilsTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.inference.TestUtilsTest" "long[]"
reference "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.ChiSquareTestImpl"
reference "org.apache.commons.math.stat.inference.TestUtilsTest" "double[]"
reference "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
reference "org.apache.commons.math.stat.inference.TestUtilsTest" "junit.framework.TestCase"
reference "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtils"
call "org.apache.commons.math.stat.inference.TestUtilsTest.TestUtilsTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.inference.TestUtilsTest.TestUtilsTest(String)" "org.apache.commons.math.stat.inference.TestUtilsTest.tooShortObs : double[]"
reference "org.apache.commons.math.stat.inference.TestUtilsTest.TestUtilsTest(String)" "org.apache.commons.math.stat.inference.TestUtilsTest.emptyObs : double[]"
call "org.apache.commons.math.stat.inference.TestUtilsTest.TestUtilsTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
reference "org.apache.commons.math.stat.inference.TestUtilsTest.TestUtilsTest(String)" "org.apache.commons.math.stat.inference.TestUtilsTest.emptyStats : SummaryStatistics"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.TestUtilsTest(String)"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.setUp()"
reference "org.apache.commons.math.stat.inference.TestUtilsTest.suite()" "org.apache.commons.math.stat.inference.TestUtilsTest.class$org$apache$commons$math$stat$inference$TestUtilsTest : Class"
call "org.apache.commons.math.stat.inference.TestUtilsTest.suite()" "org.apache.commons.math.stat.inference.TestUtilsTest.class$(String)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.suite()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare()" "org.apache.commons.math.stat.inference.TestUtils.chiSquare(double[],long[])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare()" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[],long[])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare()" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[],long[],double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare()" "org.apache.commons.math.stat.inference.TestUtilsTest.fail(String)"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareIndependence()" "org.apache.commons.math.stat.inference.TestUtils.chiSquare(long[][])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareIndependence()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareIndependence()" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareIndependence()" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][],double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareIndependence()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareIndependence()" "org.apache.commons.math.stat.inference.TestUtilsTest.fail(String)"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareIndependence()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[],long[])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic()" "org.apache.commons.math.stat.inference.TestUtils.chiSquare(double[],long[])"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareZeroCount()" "org.apache.commons.math.stat.inference.TestUtils.chiSquare(long[][])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareZeroCount()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareZeroCount()" "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][])"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareZeroCount()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TestUtils.t(double,double[])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TestUtils.t(double,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TestUtils.tTest(double,double[])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TestUtils.tTest(double,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TestUtilsTest.fail(String)"
reference "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TestUtilsTest.emptyObs : double[]"
reference "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TestUtilsTest.emptyStats : SummaryStatistics"
reference "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TestUtilsTest.tooShortObs : double[]"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TestUtils.t(double,double[])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TestUtils.t(double,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TestUtils.tTest(double,double[])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TestUtils.tTest(double,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TestUtils.tTest(double,double[],double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TestUtils.tTest(double,StatisticalSummary,double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TestUtilsTest.fail(String)"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TestUtils.t(double[],double[])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TestUtils.t(StatisticalSummary,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TestUtils.tTest(double[],double[])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TestUtils.tTest(StatisticalSummary,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TestUtils.tTest(double[],double[],double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TestUtils.tTest(StatisticalSummary,StatisticalSummary,double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TestUtilsTest.fail(String)"
reference "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TestUtilsTest.tooShortObs : double[]"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.inference.TestUtils.homoscedasticT(double[],double[])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.inference.TestUtils.homoscedasticTTest(StatisticalSummary,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.inference.TestUtils.homoscedasticTTest(double[],double[],double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testSmallSamples()" "org.apache.commons.math.stat.inference.TestUtils.t(double[],double[])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testSmallSamples()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testSmallSamples()" "org.apache.commons.math.stat.inference.TestUtils.tTest(double[],double[])"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.testSmallSamples()"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testPaired()" "org.apache.commons.math.stat.inference.TestUtils.pairedT(double[],double[])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testPaired()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testPaired()" "org.apache.commons.math.stat.inference.TestUtils.pairedTTest(double[],double[])"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testPaired()" "org.apache.commons.math.stat.inference.TestUtils.pairedTTest(double[],double[],double)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testPaired()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertFalse(boolean)"
call "org.apache.commons.math.stat.inference.TestUtilsTest.testPaired()" "org.apache.commons.math.stat.inference.TestUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.testPaired()"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.class$(String)"
reference "org.apache.commons.math.stat.inference.TestUtilsTest.tooShortObs : double[]" "double[]"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.tooShortObs : double[]"
reference "org.apache.commons.math.stat.inference.TestUtilsTest.emptyObs : double[]" "double[]"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.emptyObs : double[]"
reference "org.apache.commons.math.stat.inference.TestUtilsTest.emptyStats : SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.emptyStats : SummaryStatistics"
contain "org.apache.commons.math.stat.inference.TestUtilsTest" "org.apache.commons.math.stat.inference.TestUtilsTest.class$org$apache$commons$math$stat$inference$TestUtilsTest : Class"
reference "org.apache.commons.math.stat.data.LewTest" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest"
call "org.apache.commons.math.stat.data.LewTest.LewTest()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.CertifiedDataAbstractTest()"
contain "org.apache.commons.math.stat.data.LewTest" "org.apache.commons.math.stat.data.LewTest.LewTest()"
contain "org.apache.commons.math.stat.data.LewTest" "org.apache.commons.math.stat.data.LewTest.getResourceName()"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.2" "org.apache.commons.math.optimization.CostFunction"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.2" "org.apache.commons.math.optimization.MultiDirectionalTest"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.2.{...}" "org.apache.commons.math.optimization.MultiDirectionalTest.2.this$0 : MultiDirectionalTest"
contain "org.apache.commons.math.optimization.MultiDirectionalTest.2" "org.apache.commons.math.optimization.MultiDirectionalTest.2.{...}"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.2.cost(double[])" "org.apache.commons.math.optimization.MultiDirectionalTest.2.this$0 : MultiDirectionalTest"
call "org.apache.commons.math.optimization.MultiDirectionalTest.2.cost(double[])" "org.apache.commons.math.optimization.MultiDirectionalTest.access$004(MultiDirectionalTest)"
contain "org.apache.commons.math.optimization.MultiDirectionalTest.2" "org.apache.commons.math.optimization.MultiDirectionalTest.2.cost(double[])"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.2.this$0 : MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectionalTest"
contain "org.apache.commons.math.optimization.MultiDirectionalTest.2" "org.apache.commons.math.optimization.MultiDirectionalTest.2.this$0 : MultiDirectionalTest"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest" "org.apache.commons.math.ode.DummyStepInterpolator"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest" "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest" "org.apache.commons.math.ode.IntegratorException"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.DummyStepInterpolatorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest" "org.apache.commons.math.ode.DummyStepInterpolatorTest.DummyStepInterpolatorTest(String)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testNoReset()" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(double[],boolean)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testNoReset()" "org.apache.commons.math.ode.DummyStepInterpolator.storeTime(double)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testNoReset()" "org.apache.commons.math.ode.DummyStepInterpolator.shift()"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testNoReset()" "org.apache.commons.math.ode.DummyStepInterpolator.getInterpolatedState()"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testNoReset()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest" "org.apache.commons.math.ode.DummyStepInterpolatorTest.testNoReset()"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testFixedState()" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(double[],boolean)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testFixedState()" "org.apache.commons.math.ode.DummyStepInterpolator.storeTime(double)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testFixedState()" "org.apache.commons.math.ode.DummyStepInterpolator.shift()"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testFixedState()" "org.apache.commons.math.ode.DummyStepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testFixedState()" "org.apache.commons.math.ode.DummyStepInterpolator.getInterpolatedState()"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testFixedState()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest" "org.apache.commons.math.ode.DummyStepInterpolatorTest.testFixedState()"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(double[],boolean)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DummyStepInterpolator.storeTime(double)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DummyStepInterpolator.shift()"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DummyStepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DummyStepInterpolator.getInterpolatedState()"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest" "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerialization()"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testImpossibleSerialization()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.1.{...}"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testImpossibleSerialization()" "org.apache.commons.math.ode.DummyStepInterpolator.storeTime(double)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testImpossibleSerialization()" "org.apache.commons.math.ode.DummyStepInterpolator.shift()"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testImpossibleSerialization()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.fail(String)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testImpossibleSerialization()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.assertNull(Object)"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest" "org.apache.commons.math.ode.DummyStepInterpolatorTest.testImpossibleSerialization()"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerializationError()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator.ErrorGeneratingInterpolator(double[],boolean)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerializationError()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator.storeTime(double)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerializationError()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator.shift()"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerializationError()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerializationError()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.fail(String)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerializationError()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.assertNull(Object)"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest" "org.apache.commons.math.ode.DummyStepInterpolatorTest.testSerializationError()"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest.suite()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.class$org$apache$commons$math$ode$DummyStepInterpolatorTest : Class"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.suite()" "org.apache.commons.math.ode.DummyStepInterpolatorTest.class$(String)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest" "org.apache.commons.math.ode.DummyStepInterpolatorTest.suite()"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest" "org.apache.commons.math.ode.DummyStepInterpolatorTest.class$(String)"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest" "org.apache.commons.math.ode.DummyStepInterpolatorTest.class$org$apache$commons$math$ode$DummyStepInterpolatorTest : Class"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.3" "org.apache.commons.math.optimization.CostFunction"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.3" "org.apache.commons.math.optimization.MultiDirectionalTest"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.3.{...}" "org.apache.commons.math.optimization.MultiDirectionalTest.3.this$0 : MultiDirectionalTest"
contain "org.apache.commons.math.optimization.MultiDirectionalTest.3" "org.apache.commons.math.optimization.MultiDirectionalTest.3.{...}"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.3.cost(double[])" "org.apache.commons.math.optimization.MultiDirectionalTest.3.this$0 : MultiDirectionalTest"
call "org.apache.commons.math.optimization.MultiDirectionalTest.3.cost(double[])" "org.apache.commons.math.optimization.MultiDirectionalTest.access$004(MultiDirectionalTest)"
contain "org.apache.commons.math.optimization.MultiDirectionalTest.3" "org.apache.commons.math.optimization.MultiDirectionalTest.3.cost(double[])"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.3.this$0 : MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectionalTest"
contain "org.apache.commons.math.optimization.MultiDirectionalTest.3" "org.apache.commons.math.optimization.MultiDirectionalTest.3.this$0 : MultiDirectionalTest"
reference "org.apache.commons.math.estimation.MinpackTest.WatsonFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.WatsonFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.WatsonFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.WatsonFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.WatsonFunction(int,double,double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.buildArray(int,double)"
call "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.WatsonFunction(int,double,double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.WatsonFunction" "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.WatsonFunction(int,double,double,double,double[])"
reference "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.n : int"
reference "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.WatsonFunction" "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.n : int"
reference "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.WatsonFunction" "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.getResiduals()"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.1" "org.apache.commons.math.optimization.CostException"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.1" "org.apache.commons.math.optimization.CostFunction"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.1.{...}" "org.apache.commons.math.optimization.MultiDirectionalTest.1.this$0 : MultiDirectionalTest"
contain "org.apache.commons.math.optimization.MultiDirectionalTest.1" "org.apache.commons.math.optimization.MultiDirectionalTest.1.{...}"
call "org.apache.commons.math.optimization.MultiDirectionalTest.1.cost(double[])" "org.apache.commons.math.optimization.CostException.CostException(String,Object[])"
call "org.apache.commons.math.optimization.MultiDirectionalTest.1.cost(double[])" "org.apache.commons.math.optimization.CostException.CostException(Throwable)"
contain "org.apache.commons.math.optimization.MultiDirectionalTest.1" "org.apache.commons.math.optimization.MultiDirectionalTest.1.cost(double[])"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.1.this$0 : MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectionalTest"
contain "org.apache.commons.math.optimization.MultiDirectionalTest.1" "org.apache.commons.math.optimization.MultiDirectionalTest.1.this$0 : MultiDirectionalTest"
reference "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.GammaDistributionImpl"
reference "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.GammaDistribution"
reference "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest"
call "org.apache.commons.math.distribution.GammaDistributionTest.GammaDistributionTest(String)" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(String)"
contain "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.GammaDistributionTest.GammaDistributionTest(String)"
call "org.apache.commons.math.distribution.GammaDistributionTest.makeDistribution()" "org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double,double)"
contain "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.GammaDistributionTest.makeDistribution()"
contain "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestValues()"
call "org.apache.commons.math.distribution.GammaDistributionTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()"
call "org.apache.commons.math.distribution.GammaDistributionTest.setUp()" "org.apache.commons.math.distribution.GammaDistributionTest.setTolerance(double)"
contain "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.GammaDistributionTest.setUp()"
call "org.apache.commons.math.distribution.GammaDistributionTest.testParameterAccessors()" "org.apache.commons.math.distribution.GammaDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.GammaDistributionTest.testParameterAccessors()" "org.apache.commons.math.distribution.GammaDistribution.getAlpha()"
call "org.apache.commons.math.distribution.GammaDistributionTest.testParameterAccessors()" "org.apache.commons.math.distribution.GammaDistributionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.distribution.GammaDistributionTest.testParameterAccessors()" "org.apache.commons.math.distribution.GammaDistribution.setAlpha(double)"
call "org.apache.commons.math.distribution.GammaDistributionTest.testParameterAccessors()" "org.apache.commons.math.distribution.GammaDistribution.getBeta()"
call "org.apache.commons.math.distribution.GammaDistributionTest.testParameterAccessors()" "org.apache.commons.math.distribution.GammaDistribution.setBeta(double)"
call "org.apache.commons.math.distribution.GammaDistributionTest.testParameterAccessors()" "org.apache.commons.math.distribution.GammaDistributionTest.fail(String)"
contain "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.GammaDistributionTest.testParameterAccessors()"
call "org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities()" "org.apache.commons.math.distribution.GammaDistributionTest.testProbability(double,double,double,double)"
contain "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities()"
call "org.apache.commons.math.distribution.GammaDistributionTest.testValues()" "org.apache.commons.math.distribution.GammaDistributionTest.testValue(double,double,double,double)"
contain "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.GammaDistributionTest.testValues()"
call "org.apache.commons.math.distribution.GammaDistributionTest.testProbability(double,double,double,double)" "org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double,double)"
call "org.apache.commons.math.distribution.GammaDistributionTest.testProbability(double,double,double,double)" "org.apache.commons.math.distribution.GammaDistribution.cumulativeProbability(double)"
call "org.apache.commons.math.distribution.GammaDistributionTest.testProbability(double,double,double,double)" "org.apache.commons.math.distribution.GammaDistributionTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.GammaDistributionTest.testProbability(double,double,double,double)"
call "org.apache.commons.math.distribution.GammaDistributionTest.testValue(double,double,double,double)" "org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double,double)"
call "org.apache.commons.math.distribution.GammaDistributionTest.testValue(double,double,double,double)" "org.apache.commons.math.distribution.GammaDistribution.inverseCumulativeProbability(double)"
call "org.apache.commons.math.distribution.GammaDistributionTest.testValue(double,double,double,double)" "org.apache.commons.math.distribution.GammaDistributionTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.GammaDistributionTest.testValue(double,double,double,double)"
call "org.apache.commons.math.distribution.GammaDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.GammaDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.GammaDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.GammaDistributionTest.setInverseCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.GammaDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.GammaDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.GammaDistributionTest" "org.apache.commons.math.distribution.GammaDistributionTest.testInverseCumulativeProbabilityExtremes()"
reference "org.apache.commons.math.stat.descriptive.rank.MedianTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.rank.MedianTest" "org.apache.commons.math.stat.descriptive.rank.Median"
reference "org.apache.commons.math.stat.descriptive.rank.MedianTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.rank.MedianTest.MedianTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.rank.MedianTest" "org.apache.commons.math.stat.descriptive.rank.MedianTest.MedianTest(String)"
reference "org.apache.commons.math.stat.descriptive.rank.MedianTest.suite()" "org.apache.commons.math.stat.descriptive.rank.MedianTest.class$org$apache$commons$math$stat$descriptive$rank$MedianTest : Class"
call "org.apache.commons.math.stat.descriptive.rank.MedianTest.suite()" "org.apache.commons.math.stat.descriptive.rank.MedianTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.rank.MedianTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.rank.MedianTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.rank.MedianTest" "org.apache.commons.math.stat.descriptive.rank.MedianTest.suite()"
call "org.apache.commons.math.stat.descriptive.rank.MedianTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.rank.Median.Median()"
contain "org.apache.commons.math.stat.descriptive.rank.MedianTest" "org.apache.commons.math.stat.descriptive.rank.MedianTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.rank.MedianTest.expectedValue()" "org.apache.commons.math.stat.descriptive.rank.MedianTest.median : double"
contain "org.apache.commons.math.stat.descriptive.rank.MedianTest" "org.apache.commons.math.stat.descriptive.rank.MedianTest.expectedValue()"
contain "org.apache.commons.math.stat.descriptive.rank.MedianTest" "org.apache.commons.math.stat.descriptive.rank.MedianTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.rank.MedianTest.stat : Median" "org.apache.commons.math.stat.descriptive.rank.Median"
contain "org.apache.commons.math.stat.descriptive.rank.MedianTest" "org.apache.commons.math.stat.descriptive.rank.MedianTest.stat : Median"
contain "org.apache.commons.math.stat.descriptive.rank.MedianTest" "org.apache.commons.math.stat.descriptive.rank.MedianTest.class$org$apache$commons$math$stat$descriptive$rank$MedianTest : Class"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54Integrator"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.TestProblemHandler"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.TestProblem4"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.FirstOrderIntegrator"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.HighamHall54IntegratorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest.HighamHall54IntegratorTest(String)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testWrongDerivative()" "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testWrongDerivative()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.1.{...}"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testWrongDerivative()" "org.apache.commons.math.ode.HighamHall54Integrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testWrongDerivative()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest.testWrongDerivative()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double[],double[])"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest.testMinStep()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getCalls()"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest.testIncreasingTolerance()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.TestProblem4()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getFinalTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getInitialTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getSwitchingFunctions()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getInitialState()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getDimension()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.getLastTime()"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctions()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsError()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsError()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsError()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsError()" "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsError()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsError()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsError()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.{...}"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsError()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsError()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsError()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsError()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsError()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsError()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.{...}"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.fail(String)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.IntegratorException.getCause()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSwitchingFunctionsNoConvergence()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSanityChecks()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSanityChecks()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSanityChecks()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSanityChecks()" "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double[],double[])"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSanityChecks()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSanityChecks()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSanityChecks()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.fail(String)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSanityChecks()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest.testSanityChecks()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testKepler()" "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double[],double[])"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testKepler()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.getName()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.testKepler()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.assertEquals(String,String)"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest.testKepler()"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.suite()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.class$org$apache$commons$math$ode$HighamHall54IntegratorTest : Class"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.suite()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.class$(String)"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest.suite()"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest.class$(String)"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest.class$org$apache$commons$math$ode$HighamHall54IntegratorTest : Class"
reference "org.apache.commons.math.stat.CertifiedDataTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.CertifiedDataTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics"
reference "org.apache.commons.math.stat.CertifiedDataTest" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
reference "org.apache.commons.math.stat.CertifiedDataTest" "junit.framework.TestCase"
call "org.apache.commons.math.stat.CertifiedDataTest.CertifiedDataTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.CertifiedDataTest.CertifiedDataTest(String)" "org.apache.commons.math.stat.CertifiedDataTest.mean : double"
reference "org.apache.commons.math.stat.CertifiedDataTest.CertifiedDataTest(String)" "org.apache.commons.math.stat.CertifiedDataTest.std : double"
contain "org.apache.commons.math.stat.CertifiedDataTest" "org.apache.commons.math.stat.CertifiedDataTest.CertifiedDataTest(String)"
contain "org.apache.commons.math.stat.CertifiedDataTest" "org.apache.commons.math.stat.CertifiedDataTest.setUp()"
reference "org.apache.commons.math.stat.CertifiedDataTest.suite()" "org.apache.commons.math.stat.CertifiedDataTest.class$org$apache$commons$math$stat$CertifiedDataTest : Class"
call "org.apache.commons.math.stat.CertifiedDataTest.suite()" "org.apache.commons.math.stat.CertifiedDataTest.class$(String)"
call "org.apache.commons.math.stat.CertifiedDataTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.CertifiedDataTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.CertifiedDataTest" "org.apache.commons.math.stat.CertifiedDataTest.suite()"
reference "org.apache.commons.math.stat.CertifiedDataTest.testSummaryStatistics()" "org.apache.commons.math.stat.CertifiedDataTest.class$org$apache$commons$math$stat$descriptive$SummaryStatisticsImpl : Class"
call "org.apache.commons.math.stat.CertifiedDataTest.testSummaryStatistics()" "org.apache.commons.math.stat.CertifiedDataTest.class$(String)"
call "org.apache.commons.math.stat.CertifiedDataTest.testSummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance(Class)"
call "org.apache.commons.math.stat.CertifiedDataTest.testSummaryStatistics()" "org.apache.commons.math.stat.CertifiedDataTest.loadStats(String,Object)"
reference "org.apache.commons.math.stat.CertifiedDataTest.testSummaryStatistics()" "org.apache.commons.math.stat.CertifiedDataTest.std : double"
call "org.apache.commons.math.stat.CertifiedDataTest.testSummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()"
call "org.apache.commons.math.stat.CertifiedDataTest.testSummaryStatistics()" "org.apache.commons.math.stat.CertifiedDataTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.stat.CertifiedDataTest.testSummaryStatistics()" "org.apache.commons.math.stat.CertifiedDataTest.mean : double"
call "org.apache.commons.math.stat.CertifiedDataTest.testSummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
contain "org.apache.commons.math.stat.CertifiedDataTest" "org.apache.commons.math.stat.CertifiedDataTest.testSummaryStatistics()"
call "org.apache.commons.math.stat.CertifiedDataTest.testDescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance()"
call "org.apache.commons.math.stat.CertifiedDataTest.testDescriptiveStatistics()" "org.apache.commons.math.stat.CertifiedDataTest.loadStats(String,Object)"
reference "org.apache.commons.math.stat.CertifiedDataTest.testDescriptiveStatistics()" "org.apache.commons.math.stat.CertifiedDataTest.std : double"
call "org.apache.commons.math.stat.CertifiedDataTest.testDescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()"
call "org.apache.commons.math.stat.CertifiedDataTest.testDescriptiveStatistics()" "org.apache.commons.math.stat.CertifiedDataTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.stat.CertifiedDataTest.testDescriptiveStatistics()" "org.apache.commons.math.stat.CertifiedDataTest.mean : double"
call "org.apache.commons.math.stat.CertifiedDataTest.testDescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
contain "org.apache.commons.math.stat.CertifiedDataTest" "org.apache.commons.math.stat.CertifiedDataTest.testDescriptiveStatistics()"
reference "org.apache.commons.math.stat.CertifiedDataTest.loadStats(String,Object)" "org.apache.commons.math.stat.CertifiedDataTest.mean : double"
reference "org.apache.commons.math.stat.CertifiedDataTest.loadStats(String,Object)" "org.apache.commons.math.stat.CertifiedDataTest.std : double"
call "org.apache.commons.math.stat.CertifiedDataTest.loadStats(String,Object)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
call "org.apache.commons.math.stat.CertifiedDataTest.loadStats(String,Object)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
contain "org.apache.commons.math.stat.CertifiedDataTest" "org.apache.commons.math.stat.CertifiedDataTest.loadStats(String,Object)"
contain "org.apache.commons.math.stat.CertifiedDataTest" "org.apache.commons.math.stat.CertifiedDataTest.class$(String)"
contain "org.apache.commons.math.stat.CertifiedDataTest" "org.apache.commons.math.stat.CertifiedDataTest.mean : double"
contain "org.apache.commons.math.stat.CertifiedDataTest" "org.apache.commons.math.stat.CertifiedDataTest.std : double"
contain "org.apache.commons.math.stat.CertifiedDataTest" "org.apache.commons.math.stat.CertifiedDataTest.class$org$apache$commons$math$stat$CertifiedDataTest : Class"
contain "org.apache.commons.math.stat.CertifiedDataTest" "org.apache.commons.math.stat.CertifiedDataTest.class$org$apache$commons$math$stat$descriptive$SummaryStatisticsImpl : Class"
reference "org.apache.commons.math.complex.FrenchComplexFormatTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest"
call "org.apache.commons.math.complex.FrenchComplexFormatTest.FrenchComplexFormatTest()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.ComplexFormatAbstractTest()"
contain "org.apache.commons.math.complex.FrenchComplexFormatTest" "org.apache.commons.math.complex.FrenchComplexFormatTest.FrenchComplexFormatTest()"
contain "org.apache.commons.math.complex.FrenchComplexFormatTest" "org.apache.commons.math.complex.FrenchComplexFormatTest.getDecimalCharacter()"
contain "org.apache.commons.math.complex.FrenchComplexFormatTest" "org.apache.commons.math.complex.FrenchComplexFormatTest.getLocale()"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1" "junit.framework.Assert"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.{...}" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.this$0 : DormandPrince853StepInterpolatorTest"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.{...}"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.copy()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedTime()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.requiresDenseOutput()"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.reset()"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.this$0 : DormandPrince853StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.this$0 : DormandPrince853StepInterpolatorTest"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne2Function" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne2Function" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne2Function" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne2Function" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.Osborne2Function(double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.Osborne2Function" "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.Osborne2Function(double[],double,double,double[])"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.m : int"
contain "org.apache.commons.math.estimation.MinpackTest.Osborne2Function" "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.y : double[]"
contain "org.apache.commons.math.estimation.MinpackTest.Osborne2Function" "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.getResiduals()"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.static {...}" "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.y : double[]"
contain "org.apache.commons.math.estimation.MinpackTest.Osborne2Function" "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.static {...}"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.y : double[]" "double[]"
contain "org.apache.commons.math.estimation.MinpackTest.Osborne2Function" "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.y : double[]"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.util.DefaultTransformer"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.util.NumberTransformer"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List)"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List)" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List)" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List,NumberTransformer)"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List,NumberTransformer)" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List,NumberTransformer)" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.list : List"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List,NumberTransformer)" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.transformer : NumberTransformer"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List,NumberTransformer)"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getValues()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.list : List"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getValues()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.windowSize : int"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getValues()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getElement(int)"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getValues()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getElement(int)" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.windowSize : int"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getElement(int)" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.list : List"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getElement(int)" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.transformer : NumberTransformer"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getElement(int)" "org.apache.commons.math.util.NumberTransformer.transform(Object)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getElement(int)" "org.apache.commons.math.MathException.printStackTrace()"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getElement(int)"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getN()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.windowSize : int"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getN()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.list : List"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getN()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.addValue(double)" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.list : List"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.addValue(double)"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.addObject(Object)" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.list : List"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.addObject(Object)"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.clear()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.list : List"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.clear()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.apply(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getValues()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.apply(UnivariateStatistic)" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.apply(UnivariateStatistic)"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getTransformer()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.transformer : NumberTransformer"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getTransformer()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.setTransformer(NumberTransformer)" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.transformer : NumberTransformer"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.setTransformer(NumberTransformer)"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.setWindowSize(int)" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.windowSize : int"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.setWindowSize(int)" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.list : List"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.setWindowSize(int)"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getWindowSize()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.windowSize : int"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getWindowSize()"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.serialVersionUID : long"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.list : List"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.transformer : NumberTransformer" "org.apache.commons.math.util.NumberTransformer"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImpl" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.transformer : NumberTransformer"
reference "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.BisectionSolver"
reference "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.QuinticFunction"
reference "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.UnivariateRealSolver"
reference "org.apache.commons.math.analysis.BisectionSolverTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.analysis.BisectionSolverTest.BisectionSolverTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.BisectionSolverTest.BisectionSolverTest()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSinZero()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSinZero()" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSinZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSinZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSinZero()" "org.apache.commons.math.analysis.BisectionSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.BisectionSolverTest.testSinZero()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.BisectionSolverTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.getResult()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.getIterationCount()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.BisectionSolverTest.assertTrue(boolean)"
contain "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.BisectionSolverTest.testQuinticZero()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetFunctionValueAccuracy()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetFunctionValueAccuracy()" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetFunctionValueAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.setFunctionValueAccuracy(double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetFunctionValueAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.getFunctionValueAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetFunctionValueAccuracy()" "org.apache.commons.math.analysis.BisectionSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.BisectionSolverTest.testSetFunctionValueAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetFunctionValueAccuracy()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetFunctionValueAccuracy()" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetFunctionValueAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.getFunctionValueAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetFunctionValueAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.setFunctionValueAccuracy(double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetFunctionValueAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.resetFunctionValueAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetFunctionValueAccuracy()" "org.apache.commons.math.analysis.BisectionSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.BisectionSolverTest.testResetFunctionValueAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetAbsoluteAccuracy()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetAbsoluteAccuracy()" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetAbsoluteAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.setAbsoluteAccuracy(double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetAbsoluteAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetAbsoluteAccuracy()" "org.apache.commons.math.analysis.BisectionSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.BisectionSolverTest.testSetAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetAbsoluteAccuracy()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetAbsoluteAccuracy()" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetAbsoluteAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetAbsoluteAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.setAbsoluteAccuracy(double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetAbsoluteAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.resetAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetAbsoluteAccuracy()" "org.apache.commons.math.analysis.BisectionSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.BisectionSolverTest.testResetAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetMaximalIterationCount()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetMaximalIterationCount()" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetMaximalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealSolver.setMaximalIterationCount(int)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetMaximalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealSolver.getMaximalIterationCount()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetMaximalIterationCount()" "org.apache.commons.math.analysis.BisectionSolverTest.assertEquals(int,int)"
contain "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.BisectionSolverTest.testSetMaximalIterationCount()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetMaximalIterationCount()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetMaximalIterationCount()" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetMaximalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealSolver.getMaximalIterationCount()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetMaximalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealSolver.setMaximalIterationCount(int)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetMaximalIterationCount()" "org.apache.commons.math.analysis.UnivariateRealSolver.resetMaximalIterationCount()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetMaximalIterationCount()" "org.apache.commons.math.analysis.BisectionSolverTest.assertEquals(int,int)"
contain "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.BisectionSolverTest.testResetMaximalIterationCount()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetRelativeAccuracy()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetRelativeAccuracy()" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetRelativeAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.setRelativeAccuracy(double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetRelativeAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSetRelativeAccuracy()" "org.apache.commons.math.analysis.BisectionSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.BisectionSolverTest.testSetRelativeAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetRelativeAccuracy()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetRelativeAccuracy()" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetRelativeAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetRelativeAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.setRelativeAccuracy(double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetRelativeAccuracy()" "org.apache.commons.math.analysis.UnivariateRealSolver.resetRelativeAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testResetRelativeAccuracy()" "org.apache.commons.math.analysis.BisectionSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.BisectionSolverTest.testResetRelativeAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.TestUtils.serializeAndRecover(Object)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.analysis.BisectionSolver.solve(double,double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.analysis.BisectionSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.analysis.BisectionSolverTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.analysis.BisectionSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.analysis.BisectionSolver.setRelativeAccuracy(double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.analysis.BisectionSolver.resetRelativeAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.analysis.UnivariateRealSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.analysis.UnivariateRealSolver.setRelativeAccuracy(double)"
call "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()" "org.apache.commons.math.analysis.UnivariateRealSolver.resetRelativeAccuracy()"
contain "org.apache.commons.math.analysis.BisectionSolverTest" "org.apache.commons.math.analysis.BisectionSolverTest.testSerialization()"
reference "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest" "org.apache.commons.math.DuplicateSampleAbscissaException"
reference "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest" "junit.framework.TestCase"
call "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.DuplicateSampleAbscissaExceptionTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest" "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.DuplicateSampleAbscissaExceptionTest()"
call "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.testConstructor()" "org.apache.commons.math.DuplicateSampleAbscissaException.DuplicateSampleAbscissaException(double,int,int)"
call "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.testConstructor()" "org.apache.commons.math.DuplicateSampleAbscissaException.getCause()"
call "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.testConstructor()" "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.assertNull(Object)"
call "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.testConstructor()" "org.apache.commons.math.DuplicateSampleAbscissaException.getMessage()"
call "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.testConstructor()" "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.assertNotNull(Object)"
call "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.testConstructor()" "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.assertTrue(boolean)"
call "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.testConstructor()" "org.apache.commons.math.DuplicateSampleAbscissaException.getDuplicateAbscissa()"
call "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.testConstructor()" "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.testConstructor()" "org.apache.commons.math.DuplicateSampleAbscissaException.getMessage(Locale)"
call "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.testConstructor()" "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.assertFalse(boolean)"
contain "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest" "org.apache.commons.math.DuplicateSampleAbscissaExceptionTest.testConstructor()"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.BardFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.WatsonFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.Osborne1Function"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.Osborne2Function"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.EstimationException"
reference "org.apache.commons.math.estimation.MinpackTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.estimation.MinpackTest" "junit.framework.TestCase"
reference "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
call "org.apache.commons.math.estimation.MinpackTest.MinpackTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.MinpackTest(String)"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackLinearFullRank()" "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.LinearFullRankFunction(int,int,double,double,double)"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackLinearFullRank()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackLinearFullRank()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackLinearRank1()" "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.LinearRank1Function(int,int,double,double,double)"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackLinearRank1()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackLinearRank1()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackLinearRank1ZeroColsAndRows()" "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.LinearRank1ZeroColsAndRowsFunction(int,int,double)"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackLinearRank1ZeroColsAndRows()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackLinearRank1ZeroColsAndRows()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackRosenbrok()" "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction.RosenbrockFunction(double[],double)"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackRosenbrok()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackRosenbrok()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackHelicalValley()" "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction.HelicalValleyFunction(double[],double)"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackHelicalValley()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackHelicalValley()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackPowellSingular()" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.PowellSingularFunction(double[],double)"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackPowellSingular()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackPowellSingular()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackFreudensteinRoth()" "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction.FreudensteinRothFunction(double[],double,double,double[])"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackFreudensteinRoth()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackFreudensteinRoth()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackBard()" "org.apache.commons.math.estimation.MinpackTest.BardFunction.BardFunction(double,double,double,double[])"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackBard()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackBard()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackKowalikOsborne()" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.KowalikOsborneFunction(double[],double,double,double[])"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackKowalikOsborne()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackKowalikOsborne()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackMeyer()" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.MeyerFunction(double[],double,double,double[])"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackMeyer()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackMeyer()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackWatson()" "org.apache.commons.math.estimation.MinpackTest.WatsonFunction.WatsonFunction(int,double,double,double,double[])"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackWatson()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackWatson()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackBox3Dimensional()" "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.Box3DimensionalFunction(int,double[],double)"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackBox3Dimensional()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackBox3Dimensional()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackJennrichSampson()" "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.JennrichSampsonFunction(int,double[],double,double,double[])"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackJennrichSampson()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackJennrichSampson()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackBrownDennis()" "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.BrownDennisFunction(int,double[],double,double,double[])"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackBrownDennis()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackBrownDennis()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackChebyquad()" "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.ChebyquadFunction(int,int,double,double,double,double[])"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackChebyquad()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackChebyquad()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackBrownAlmostLinear()" "org.apache.commons.math.estimation.MinpackTest.BrownAlmostLinearFunction.BrownAlmostLinearFunction(int,double,double,double,double[])"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackBrownAlmostLinear()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackBrownAlmostLinear()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackOsborne1()" "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.Osborne1Function(double[],double,double,double[])"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackOsborne1()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackOsborne1()"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackOsborne2()" "org.apache.commons.math.estimation.MinpackTest.Osborne2Function.Osborne2Function(double[],double,double,double[])"
call "org.apache.commons.math.estimation.MinpackTest.testMinpackOsborne2()" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.testMinpackOsborne2()"
call "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getN()"
call "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setMaxCostEval(int)"
call "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setCostRelativeTolerance(double)"
call "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setParRelativeTolerance(double)"
call "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setOrthoTolerance(double)"
call "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalStartCost(double)"
call "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)" "org.apache.commons.math.estimation.MinpackTest.assertTrue(boolean)"
call "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)" "org.apache.commons.math.estimation.MinpackTest.assertFalse(boolean)"
call "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalMinCost(double)"
call "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalMinParams()"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.minpackTest(MinpackTest.MinpackFunction,boolean)"
reference "org.apache.commons.math.estimation.MinpackTest.suite()" "org.apache.commons.math.estimation.MinpackTest.class$org$apache$commons$math$estimation$MinpackTest : Class"
call "org.apache.commons.math.estimation.MinpackTest.suite()" "org.apache.commons.math.estimation.MinpackTest.class$(String)"
call "org.apache.commons.math.estimation.MinpackTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.suite()"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.class$(String)"
contain "org.apache.commons.math.estimation.MinpackTest" "org.apache.commons.math.estimation.MinpackTest.class$org$apache$commons$math$estimation$MinpackTest : Class"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.1" "org.apache.commons.math.ode.DormandPrince853IntegratorTest"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "junit.framework.TestCase"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.TestUtils"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.StatisticalSummary"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.one : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.twoF : float"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.twoL : long"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.three : int"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.mean : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.sumSq : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.sum : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.var : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.std : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.n : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.min : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.max : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.tolerance : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.u : SummaryStatistics"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.createSummaryStatistics()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.setUp()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.createSummaryStatistics()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.setUp()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.u : SummaryStatistics"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.setUp()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.u : SummaryStatistics"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getN()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.tolerance : double"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.one : double"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.twoF : float"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.twoL : long"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.three : int"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.n : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.sum : double"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSum()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.sumSq : double"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSumsq()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.var : double"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.std : double"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.mean : double"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.min : double"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMin()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.max : double"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMax()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testStats()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.u : SummaryStatistics"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.one : double"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getGeometricMean()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.twoF : float"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testN0andN1Conditions()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.u : SummaryStatistics"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getGeometricMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testProductAndGeometricMean()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testNaNContracts()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.u : SummaryStatistics"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testNaNContracts()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testNaNContracts()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testNaNContracts()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMin()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testNaNContracts()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testNaNContracts()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testNaNContracts()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getGeometricMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testNaNContracts()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testNaNContracts()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testNaNContracts()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testGetSummary()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.u : SummaryStatistics"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testGetSummary()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSummary()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testGetSummary()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testGetSummary()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testGetSummary()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.u : SummaryStatistics"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.TestUtils.checkSerializedEquality(Object)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.TestUtils.serializeAndRecover(Object)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSummary()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testSerialization()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.u : SummaryStatistics"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.hashCode()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.equals(Object)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.assertFalse(String,boolean)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.createSummaryStatistics()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.assertEquals(String,int,int)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.testEqualsAndHashCode()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getN()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.u : SummaryStatistics"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getN()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.assertEquals(String,long,long)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getSum()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getSum()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.tolerance : double"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.TestUtils.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getVariance()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getVariance()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getStandardDeviation()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMin()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMin()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMax()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMax()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.verifySummary(StatisticalSummary)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.one : double"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.twoF : float"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.twoL : long"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.three : int"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.mean : double"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.sumSq : double"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.sum : double"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.var : double"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.std : double"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.n : double"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.min : double"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.max : double"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.tolerance : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.u : SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.u : SummaryStatistics"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker" "org.apache.commons.math.optimization.ConvergenceChecker"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker" "org.apache.commons.math.optimization.PointCostPair"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker" "org.apache.commons.math.optimization.MultiDirectionalTest"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker.ValueChecker(double)" "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker.threshold : double"
contain "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker" "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker.ValueChecker(double)"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker.converged(PointCostPair[])" "org.apache.commons.math.optimization.PointCostPair.cost : double"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker.converged(PointCostPair[])" "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker.threshold : double"
contain "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker" "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker.converged(PointCostPair[])"
contain "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker" "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker.threshold : double"
reference "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.stat.inference.ChiSquareTestImpl"
reference "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataImpl"
reference "org.apache.commons.math.random.RandomDataTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.stat.Frequency"
reference "org.apache.commons.math.random.RandomDataTest" "int[]"
reference "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.RetryTestCase"
reference "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
call "org.apache.commons.math.random.RandomDataTest.RandomDataTest(String)" "org.apache.commons.math.RetryTestCase.RetryTestCase(String)"
reference "org.apache.commons.math.random.RandomDataTest.RandomDataTest(String)" "org.apache.commons.math.random.RandomDataTest.smallSampleSize : long"
reference "org.apache.commons.math.random.RandomDataTest.RandomDataTest(String)" "org.apache.commons.math.random.RandomDataTest.expected : double[]"
reference "org.apache.commons.math.random.RandomDataTest.RandomDataTest(String)" "org.apache.commons.math.random.RandomDataTest.largeSampleSize : int"
reference "org.apache.commons.math.random.RandomDataTest.RandomDataTest(String)" "org.apache.commons.math.random.RandomDataTest.hex : String[]"
reference "org.apache.commons.math.random.RandomDataTest.RandomDataTest(String)" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.RandomDataTest(String)" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl()"
reference "org.apache.commons.math.random.RandomDataTest.RandomDataTest(String)" "org.apache.commons.math.random.RandomDataTest.testStatistic : ChiSquareTestImpl"
call "org.apache.commons.math.random.RandomDataTest.RandomDataTest(String)" "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl()"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.RandomDataTest(String)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.setUp()"
reference "org.apache.commons.math.random.RandomDataTest.suite()" "org.apache.commons.math.random.RandomDataTest.class$org$apache$commons$math$random$RandomDataTest : Class"
call "org.apache.commons.math.random.RandomDataTest.suite()" "org.apache.commons.math.random.RandomDataTest.class$(String)"
call "org.apache.commons.math.random.RandomDataTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.random.RandomDataTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.suite()"
reference "org.apache.commons.math.random.RandomDataTest.testNextIntExtremeValues()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextIntExtremeValues()" "org.apache.commons.math.random.RandomDataImpl.nextInt(int,int)"
call "org.apache.commons.math.random.RandomDataTest.testNextIntExtremeValues()" "org.apache.commons.math.random.RandomDataTest.assertFalse(boolean)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextIntExtremeValues()"
reference "org.apache.commons.math.random.RandomDataTest.testNextLongExtremeValues()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextLongExtremeValues()" "org.apache.commons.math.random.RandomDataImpl.nextLong(long,long)"
call "org.apache.commons.math.random.RandomDataTest.testNextLongExtremeValues()" "org.apache.commons.math.random.RandomDataTest.assertFalse(boolean)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextLongExtremeValues()"
reference "org.apache.commons.math.random.RandomDataTest.testNextInt()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextInt()" "org.apache.commons.math.random.RandomDataImpl.nextInt(int,int)"
call "org.apache.commons.math.random.RandomDataTest.testNextInt()" "org.apache.commons.math.random.RandomDataTest.fail(String)"
call "org.apache.commons.math.random.RandomDataTest.testNextInt()" "org.apache.commons.math.stat.Frequency.Frequency()"
reference "org.apache.commons.math.random.RandomDataTest.testNextInt()" "org.apache.commons.math.random.RandomDataTest.smallSampleSize : long"
call "org.apache.commons.math.random.RandomDataTest.testNextInt()" "org.apache.commons.math.random.RandomDataTest.assertTrue(String,boolean)"
call "org.apache.commons.math.random.RandomDataTest.testNextInt()" "org.apache.commons.math.stat.Frequency.addValue(int)"
call "org.apache.commons.math.random.RandomDataTest.testNextInt()" "org.apache.commons.math.stat.Frequency.getCount(int)"
reference "org.apache.commons.math.random.RandomDataTest.testNextInt()" "org.apache.commons.math.random.RandomDataTest.testStatistic : ChiSquareTestImpl"
reference "org.apache.commons.math.random.RandomDataTest.testNextInt()" "org.apache.commons.math.random.RandomDataTest.expected : double[]"
call "org.apache.commons.math.random.RandomDataTest.testNextInt()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextInt()"
reference "org.apache.commons.math.random.RandomDataTest.testNextLong()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextLong()" "org.apache.commons.math.random.RandomDataImpl.nextLong(long,long)"
call "org.apache.commons.math.random.RandomDataTest.testNextLong()" "org.apache.commons.math.random.RandomDataTest.fail(String)"
call "org.apache.commons.math.random.RandomDataTest.testNextLong()" "org.apache.commons.math.stat.Frequency.Frequency()"
reference "org.apache.commons.math.random.RandomDataTest.testNextLong()" "org.apache.commons.math.random.RandomDataTest.smallSampleSize : long"
call "org.apache.commons.math.random.RandomDataTest.testNextLong()" "org.apache.commons.math.random.RandomDataTest.assertTrue(String,boolean)"
call "org.apache.commons.math.random.RandomDataTest.testNextLong()" "org.apache.commons.math.stat.Frequency.addValue(long)"
call "org.apache.commons.math.random.RandomDataTest.testNextLong()" "org.apache.commons.math.stat.Frequency.getCount(int)"
reference "org.apache.commons.math.random.RandomDataTest.testNextLong()" "org.apache.commons.math.random.RandomDataTest.testStatistic : ChiSquareTestImpl"
reference "org.apache.commons.math.random.RandomDataTest.testNextLong()" "org.apache.commons.math.random.RandomDataTest.expected : double[]"
call "org.apache.commons.math.random.RandomDataTest.testNextLong()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextLong()"
reference "org.apache.commons.math.random.RandomDataTest.testNextSecureLong()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureLong()" "org.apache.commons.math.random.RandomDataImpl.nextSecureLong(long,long)"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureLong()" "org.apache.commons.math.random.RandomDataTest.fail(String)"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureLong()" "org.apache.commons.math.stat.Frequency.Frequency()"
reference "org.apache.commons.math.random.RandomDataTest.testNextSecureLong()" "org.apache.commons.math.random.RandomDataTest.smallSampleSize : long"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureLong()" "org.apache.commons.math.random.RandomDataTest.assertTrue(String,boolean)"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureLong()" "org.apache.commons.math.stat.Frequency.addValue(long)"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureLong()" "org.apache.commons.math.stat.Frequency.getCount(int)"
reference "org.apache.commons.math.random.RandomDataTest.testNextSecureLong()" "org.apache.commons.math.random.RandomDataTest.testStatistic : ChiSquareTestImpl"
reference "org.apache.commons.math.random.RandomDataTest.testNextSecureLong()" "org.apache.commons.math.random.RandomDataTest.expected : double[]"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureLong()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextSecureLong()"
reference "org.apache.commons.math.random.RandomDataTest.testNextSecureInt()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureInt()" "org.apache.commons.math.random.RandomDataImpl.nextSecureInt(int,int)"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureInt()" "org.apache.commons.math.random.RandomDataTest.fail(String)"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureInt()" "org.apache.commons.math.stat.Frequency.Frequency()"
reference "org.apache.commons.math.random.RandomDataTest.testNextSecureInt()" "org.apache.commons.math.random.RandomDataTest.smallSampleSize : long"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureInt()" "org.apache.commons.math.random.RandomDataTest.assertTrue(String,boolean)"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureInt()" "org.apache.commons.math.stat.Frequency.addValue(int)"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureInt()" "org.apache.commons.math.stat.Frequency.getCount(int)"
reference "org.apache.commons.math.random.RandomDataTest.testNextSecureInt()" "org.apache.commons.math.random.RandomDataTest.testStatistic : ChiSquareTestImpl"
reference "org.apache.commons.math.random.RandomDataTest.testNextSecureInt()" "org.apache.commons.math.random.RandomDataTest.expected : double[]"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureInt()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextSecureInt()"
reference "org.apache.commons.math.random.RandomDataTest.testNextPoisson()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextPoisson()" "org.apache.commons.math.random.RandomDataImpl.nextPoisson(double)"
call "org.apache.commons.math.random.RandomDataTest.testNextPoisson()" "org.apache.commons.math.random.RandomDataTest.fail(String)"
call "org.apache.commons.math.random.RandomDataTest.testNextPoisson()" "org.apache.commons.math.stat.Frequency.Frequency()"
reference "org.apache.commons.math.random.RandomDataTest.testNextPoisson()" "org.apache.commons.math.random.RandomDataTest.largeSampleSize : int"
call "org.apache.commons.math.random.RandomDataTest.testNextPoisson()" "org.apache.commons.math.stat.Frequency.addValue(long)"
call "org.apache.commons.math.random.RandomDataTest.testNextPoisson()" "org.apache.commons.math.stat.Frequency.getCount(int)"
call "org.apache.commons.math.random.RandomDataTest.testNextPoisson()" "org.apache.commons.math.stat.Frequency.getSumFreq()"
call "org.apache.commons.math.random.RandomDataTest.testNextPoisson()" "org.apache.commons.math.random.RandomDataTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextPoisson()"
reference "org.apache.commons.math.random.RandomDataTest.testNextHex()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextHex()" "org.apache.commons.math.random.RandomDataImpl.nextHexString(int)"
call "org.apache.commons.math.random.RandomDataTest.testNextHex()" "org.apache.commons.math.random.RandomDataTest.fail(String)"
call "org.apache.commons.math.random.RandomDataTest.testNextHex()" "org.apache.commons.math.stat.Frequency.Frequency()"
reference "org.apache.commons.math.random.RandomDataTest.testNextHex()" "org.apache.commons.math.random.RandomDataTest.smallSampleSize : long"
call "org.apache.commons.math.random.RandomDataTest.testNextHex()" "org.apache.commons.math.stat.Frequency.addValue(Object)"
reference "org.apache.commons.math.random.RandomDataTest.testNextHex()" "org.apache.commons.math.random.RandomDataTest.hex : String[]"
call "org.apache.commons.math.random.RandomDataTest.testNextHex()" "org.apache.commons.math.stat.Frequency.getCount(Object)"
reference "org.apache.commons.math.random.RandomDataTest.testNextHex()" "org.apache.commons.math.random.RandomDataTest.testStatistic : ChiSquareTestImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextHex()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
call "org.apache.commons.math.random.RandomDataTest.testNextHex()" "org.apache.commons.math.random.RandomDataTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextHex()"
reference "org.apache.commons.math.random.RandomDataTest.testNextSecureHex()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureHex()" "org.apache.commons.math.random.RandomDataImpl.nextSecureHexString(int)"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureHex()" "org.apache.commons.math.random.RandomDataTest.fail(String)"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureHex()" "org.apache.commons.math.stat.Frequency.Frequency()"
reference "org.apache.commons.math.random.RandomDataTest.testNextSecureHex()" "org.apache.commons.math.random.RandomDataTest.smallSampleSize : long"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureHex()" "org.apache.commons.math.stat.Frequency.addValue(Object)"
reference "org.apache.commons.math.random.RandomDataTest.testNextSecureHex()" "org.apache.commons.math.random.RandomDataTest.hex : String[]"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureHex()" "org.apache.commons.math.stat.Frequency.getCount(Object)"
reference "org.apache.commons.math.random.RandomDataTest.testNextSecureHex()" "org.apache.commons.math.random.RandomDataTest.testStatistic : ChiSquareTestImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureHex()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
call "org.apache.commons.math.random.RandomDataTest.testNextSecureHex()" "org.apache.commons.math.random.RandomDataTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextSecureHex()"
reference "org.apache.commons.math.random.RandomDataTest.testNextUniform()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextUniform()" "org.apache.commons.math.random.RandomDataImpl.nextUniform(double,double)"
call "org.apache.commons.math.random.RandomDataTest.testNextUniform()" "org.apache.commons.math.random.RandomDataTest.fail(String)"
reference "org.apache.commons.math.random.RandomDataTest.testNextUniform()" "org.apache.commons.math.random.RandomDataTest.testStatistic : ChiSquareTestImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextUniform()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
call "org.apache.commons.math.random.RandomDataTest.testNextUniform()" "org.apache.commons.math.random.RandomDataTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextUniform()"
reference "org.apache.commons.math.random.RandomDataTest.testNextUniformExclusiveEndpoints()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextUniformExclusiveEndpoints()" "org.apache.commons.math.random.RandomDataImpl.nextUniform(double,double)"
call "org.apache.commons.math.random.RandomDataTest.testNextUniformExclusiveEndpoints()" "org.apache.commons.math.random.RandomDataTest.assertTrue(boolean)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextUniformExclusiveEndpoints()"
reference "org.apache.commons.math.random.RandomDataTest.testNextGaussian()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextGaussian()" "org.apache.commons.math.random.RandomDataImpl.nextGaussian(double,double)"
call "org.apache.commons.math.random.RandomDataTest.testNextGaussian()" "org.apache.commons.math.random.RandomDataTest.fail(String)"
call "org.apache.commons.math.random.RandomDataTest.testNextGaussian()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
reference "org.apache.commons.math.random.RandomDataTest.testNextGaussian()" "org.apache.commons.math.random.RandomDataTest.largeSampleSize : int"
call "org.apache.commons.math.random.RandomDataTest.testNextGaussian()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.random.RandomDataTest.testNextGaussian()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.random.RandomDataTest.testNextGaussian()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()"
call "org.apache.commons.math.random.RandomDataTest.testNextGaussian()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getN()"
call "org.apache.commons.math.random.RandomDataTest.testNextGaussian()" "org.apache.commons.math.random.RandomDataTest.assertTrue(boolean)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextGaussian()"
reference "org.apache.commons.math.random.RandomDataTest.testNextExponential()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextExponential()" "org.apache.commons.math.random.RandomDataImpl.nextExponential(double)"
call "org.apache.commons.math.random.RandomDataTest.testNextExponential()" "org.apache.commons.math.random.RandomDataTest.fail(String)"
call "org.apache.commons.math.random.RandomDataTest.testNextExponential()" "org.apache.commons.math.random.RandomDataTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.random.RandomDataTest.testNextExponential()" "org.apache.commons.math.random.RandomDataTest.largeSampleSize : int"
call "org.apache.commons.math.random.RandomDataTest.testNextExponential()" "org.apache.commons.math.random.RandomDataTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextExponential()"
reference "org.apache.commons.math.random.RandomDataTest.testConfig()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testConfig()" "org.apache.commons.math.random.RandomDataImpl.reSeed(long)"
call "org.apache.commons.math.random.RandomDataTest.testConfig()" "org.apache.commons.math.random.RandomDataImpl.nextUniform(double,double)"
call "org.apache.commons.math.random.RandomDataTest.testConfig()" "org.apache.commons.math.random.RandomDataImpl.reSeed()"
call "org.apache.commons.math.random.RandomDataTest.testConfig()" "org.apache.commons.math.random.RandomDataTest.assertTrue(String,boolean)"
call "org.apache.commons.math.random.RandomDataTest.testConfig()" "org.apache.commons.math.random.RandomDataTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.random.RandomDataTest.testConfig()" "org.apache.commons.math.random.RandomDataImpl.reSeedSecure(long)"
call "org.apache.commons.math.random.RandomDataTest.testConfig()" "org.apache.commons.math.random.RandomDataImpl.nextSecureHexString(int)"
call "org.apache.commons.math.random.RandomDataTest.testConfig()" "org.apache.commons.math.random.RandomDataImpl.reSeedSecure()"
call "org.apache.commons.math.random.RandomDataTest.testConfig()" "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl()"
call "org.apache.commons.math.random.RandomDataTest.testConfig()" "org.apache.commons.math.random.RandomDataImpl.nextLong(long,long)"
call "org.apache.commons.math.random.RandomDataTest.testConfig()" "org.apache.commons.math.random.RandomDataImpl.nextSecureLong(long,long)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testConfig()"
reference "org.apache.commons.math.random.RandomDataTest.testNextSample()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextSample()" "org.apache.commons.math.random.RandomDataImpl.nextSample(Collection,int)"
call "org.apache.commons.math.random.RandomDataTest.testNextSample()" "org.apache.commons.math.random.RandomDataTest.findSample(Object[],Object[])"
reference "org.apache.commons.math.random.RandomDataTest.testNextSample()" "org.apache.commons.math.random.RandomDataTest.testStatistic : ChiSquareTestImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextSample()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
call "org.apache.commons.math.random.RandomDataTest.testNextSample()" "org.apache.commons.math.random.RandomDataTest.assertTrue(String,boolean)"
call "org.apache.commons.math.random.RandomDataTest.testNextSample()" "org.apache.commons.math.random.RandomDataTest.fail(String)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextSample()"
call "org.apache.commons.math.random.RandomDataTest.findSample(Object[],Object[])" "org.apache.commons.math.random.RandomDataTest.fail(String)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.findSample(Object[],Object[])"
reference "org.apache.commons.math.random.RandomDataTest.testNextPermutation()" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextPermutation()" "org.apache.commons.math.random.RandomDataImpl.nextPermutation(int,int)"
call "org.apache.commons.math.random.RandomDataTest.testNextPermutation()" "org.apache.commons.math.random.RandomDataTest.findPerm(int[][],int[])"
reference "org.apache.commons.math.random.RandomDataTest.testNextPermutation()" "org.apache.commons.math.random.RandomDataTest.testStatistic : ChiSquareTestImpl"
call "org.apache.commons.math.random.RandomDataTest.testNextPermutation()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
call "org.apache.commons.math.random.RandomDataTest.testNextPermutation()" "org.apache.commons.math.random.RandomDataTest.assertTrue(String,boolean)"
call "org.apache.commons.math.random.RandomDataTest.testNextPermutation()" "org.apache.commons.math.random.RandomDataTest.fail(String)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testNextPermutation()"
call "org.apache.commons.math.random.RandomDataTest.findPerm(int[][],int[])" "org.apache.commons.math.random.RandomDataTest.fail(String)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.findPerm(int[][],int[])"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.class$(String)"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.smallSampleSize : long"
reference "org.apache.commons.math.random.RandomDataTest.expected : double[]" "double[]"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.expected : double[]"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.largeSampleSize : int"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.hex : String[]"
reference "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl" "org.apache.commons.math.random.RandomDataImpl"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.randomData : RandomDataImpl"
reference "org.apache.commons.math.random.RandomDataTest.testStatistic : ChiSquareTestImpl" "org.apache.commons.math.stat.inference.ChiSquareTestImpl"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.testStatistic : ChiSquareTestImpl"
contain "org.apache.commons.math.random.RandomDataTest" "org.apache.commons.math.random.RandomDataTest.class$org$apache$commons$math$random$RandomDataTest : Class"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.util.TransformerMap"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Foo"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Bar"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "junit.framework.TestCase"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.one : double"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.two : float"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.three : int"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.mean : double"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.sumSq : double"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.sum : double"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.var : double"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.std : double"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.n : double"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.min : double"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.max : double"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.tolerance : double"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.util.TransformerMap.TransformerMap()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.transformers : TransformerMap"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.class$org$apache$commons$math$stat$descriptive$MixedListUnivariateImplTest$Foo : Class"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1.{...}"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.util.TransformerMap.putTransformer(Class,NumberTransformer)"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.class$org$apache$commons$math$stat$descriptive$MixedListUnivariateImplTest$Bar : Class"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2.{...}"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.MixedListUnivariateImplTest(String)"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.setUp()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.suite()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.class$org$apache$commons$math$stat$descriptive$MixedListUnivariateImplTest : Class"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.suite()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.suite()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.transformers : TransformerMap"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List,NumberTransformer)"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getN()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.tolerance : double"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.one : double"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.two : float"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.three : int"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.n : double"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.sum : double"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSum()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.sumSq : double"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSumsq()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.var : double"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.std : double"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.mean : double"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.min : double"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMin()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.max : double"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMax()"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.clear()"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testStats()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.transformers : TransformerMap"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List,NumberTransformer)"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.one : double"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testN0andN1Conditions()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.transformers : TransformerMap"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List,NumberTransformer)"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.addObject(Object)"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Foo.Foo()"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Bar.Bar()"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getMean()"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getVariance()"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getSkewness()"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getKurtosis()"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testSkewAndKurtosis()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.transformers : TransformerMap"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List,NumberTransformer)"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.setWindowSize(int)"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.addValue(double)"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getGeometricMean()"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.testProductAndGeometricMean()"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.class$(String)"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.one : double"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.two : float"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.three : int"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.mean : double"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.sumSq : double"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.sum : double"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.var : double"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.std : double"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.n : double"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.min : double"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.max : double"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.tolerance : double"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.transformers : TransformerMap" "org.apache.commons.math.util.TransformerMap"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.transformers : TransformerMap"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.class$org$apache$commons$math$stat$descriptive$MixedListUnivariateImplTest$Foo : Class"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.class$org$apache$commons$math$stat$descriptive$MixedListUnivariateImplTest$Bar : Class"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.class$org$apache$commons$math$stat$descriptive$MixedListUnivariateImplTest : Class"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Foo" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Foo" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Foo.Foo()"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Foo" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Foo.heresFoo()"
reference "org.apache.commons.math.distribution.FDistributionTest" "org.apache.commons.math.distribution.FDistributionImpl"
reference "org.apache.commons.math.distribution.FDistributionTest" "org.apache.commons.math.distribution.FDistribution"
reference "org.apache.commons.math.distribution.FDistributionTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest"
call "org.apache.commons.math.distribution.FDistributionTest.FDistributionTest(String)" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(String)"
contain "org.apache.commons.math.distribution.FDistributionTest" "org.apache.commons.math.distribution.FDistributionTest.FDistributionTest(String)"
call "org.apache.commons.math.distribution.FDistributionTest.makeDistribution()" "org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double,double)"
contain "org.apache.commons.math.distribution.FDistributionTest" "org.apache.commons.math.distribution.FDistributionTest.makeDistribution()"
contain "org.apache.commons.math.distribution.FDistributionTest" "org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.FDistributionTest" "org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestValues()"
call "org.apache.commons.math.distribution.FDistributionTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()"
call "org.apache.commons.math.distribution.FDistributionTest.setUp()" "org.apache.commons.math.distribution.FDistributionTest.setTolerance(double)"
contain "org.apache.commons.math.distribution.FDistributionTest" "org.apache.commons.math.distribution.FDistributionTest.setUp()"
call "org.apache.commons.math.distribution.FDistributionTest.testCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.FDistributionTest.setCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.FDistributionTest.testCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.FDistributionTest.setCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.FDistributionTest.testCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.FDistributionTest.verifyCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.FDistributionTest" "org.apache.commons.math.distribution.FDistributionTest.testCumulativeProbabilityExtremes()"
call "org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.FDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.FDistributionTest.setInverseCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.FDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.FDistributionTest" "org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilityExtremes()"
call "org.apache.commons.math.distribution.FDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.FDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.FDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.FDistribution.getNumeratorDegreesOfFreedom()"
call "org.apache.commons.math.distribution.FDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.FDistributionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.distribution.FDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.FDistribution.setNumeratorDegreesOfFreedom(double)"
call "org.apache.commons.math.distribution.FDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.FDistribution.getDenominatorDegreesOfFreedom()"
call "org.apache.commons.math.distribution.FDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.FDistribution.setDenominatorDegreesOfFreedom(double)"
call "org.apache.commons.math.distribution.FDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.FDistributionTest.fail(String)"
contain "org.apache.commons.math.distribution.FDistributionTest" "org.apache.commons.math.distribution.FDistributionTest.testDfAccessors()"
call "org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom()" "org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double,double)"
call "org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom()" "org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double)"
call "org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom()" "org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double)"
call "org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom()" "org.apache.commons.math.distribution.FDistributionTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.distribution.FDistributionTest" "org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.UnivariateRealSolverUtils"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.UnivariateRealFunction"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.UnivariateRealSolverUtilsTest()" "junit.framework.TestCase.TestCase()"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.UnivariateRealSolverUtilsTest()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.UnivariateRealSolverUtilsTest()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.sin : UnivariateRealFunction"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.UnivariateRealSolverUtilsTest()"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveNull()" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveNull()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.fail()"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveNull()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveBadParameters()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.sin : UnivariateRealFunction"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveBadParameters()" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double,double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveBadParameters()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveSin()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.sin : UnivariateRealFunction"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveSin()" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveSin()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveSin()"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveAccuracyNull()" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveAccuracyNull()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.fail()"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveAccuracyNull()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveAccuracySin()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.sin : UnivariateRealFunction"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveAccuracySin()" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveAccuracySin()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveAccuracySin()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveNoRoot()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.sin : UnivariateRealFunction"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveNoRoot()" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveNoRoot()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.fail(String)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveNoRoot()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBracketSin()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.sin : UnivariateRealFunction"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBracketSin()" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealFunction,double,double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBracketSin()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBracketSin()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBracketSin()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBracketCornerSolution()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.sin : UnivariateRealFunction"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBracketCornerSolution()" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealFunction,double,double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBracketCornerSolution()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.fail(String)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBracketCornerSolution()"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBadParameters()" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealFunction,double,double,double)"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBadParameters()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.fail(String)"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBadParameters()" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.sin : UnivariateRealFunction"
call "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBadParameters()" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealFunction,double,double,double,int)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBadParameters()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.sin : UnivariateRealFunction" "org.apache.commons.math.analysis.UnivariateRealFunction"
contain "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest" "org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.sin : UnivariateRealFunction"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1" "junit.framework.Assert"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.{...}" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.this$0 : HighamHall54StepInterpolatorTest"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.{...}"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.copy()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedTime()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.requiresDenseOutput()"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.reset()"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.this$0 : HighamHall54StepInterpolatorTest" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.this$0 : HighamHall54StepInterpolatorTest"
reference "org.apache.commons.math.FunctionEvaluationExceptionTest" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.FunctionEvaluationExceptionTest" "junit.framework.TestCase"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.FunctionEvaluationExceptionTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.FunctionEvaluationExceptionTest" "org.apache.commons.math.FunctionEvaluationExceptionTest.FunctionEvaluationExceptionTest()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructor()" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructor()" "org.apache.commons.math.FunctionEvaluationException.getCause()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructor()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertNull(Object)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructor()" "org.apache.commons.math.FunctionEvaluationException.getMessage()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructor()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertNotNull(Object)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructor()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertTrue(boolean)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructor()" "org.apache.commons.math.FunctionEvaluationException.getArgument()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructor()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.FunctionEvaluationExceptionTest" "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructor()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Object[])"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.FunctionEvaluationException.getCause()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertNull(Object)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.FunctionEvaluationException.getPattern()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertEquals(String,String)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.FunctionEvaluationException.getArguments()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertEquals(int,int)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertEquals(Object,Object)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.FunctionEvaluationException.getMessage()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertFalse(boolean)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.FunctionEvaluationException.getMessage(Locale)"
contain "org.apache.commons.math.FunctionEvaluationExceptionTest" "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArguments()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,String,Object[],Throwable)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.FunctionEvaluationException.getCause()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertEquals(Object,Object)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.FunctionEvaluationException.getPattern()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertEquals(String,String)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.FunctionEvaluationException.getArguments()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertEquals(int,int)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.FunctionEvaluationException.getMessage()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertFalse(boolean)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.FunctionEvaluationException.getMessage(Locale)"
contain "org.apache.commons.math.FunctionEvaluationExceptionTest" "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorPatternArgumentsCause()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorArgumentCause()" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double,Throwable)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorArgumentCause()" "org.apache.commons.math.FunctionEvaluationException.getCause()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorArgumentCause()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertEquals(Object,Object)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorArgumentCause()" "org.apache.commons.math.FunctionEvaluationException.getMessage()"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorArgumentCause()" "org.apache.commons.math.FunctionEvaluationException.getMessage(Locale)"
call "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorArgumentCause()" "org.apache.commons.math.FunctionEvaluationExceptionTest.assertTrue(boolean)"
contain "org.apache.commons.math.FunctionEvaluationExceptionTest" "org.apache.commons.math.FunctionEvaluationExceptionTest.testConstructorArgumentCause()"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.LinearRank1ZeroColsAndRowsFunction(int,int,double)" "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.buildArray(int,double)"
call "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.LinearRank1ZeroColsAndRowsFunction(int,int,double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction" "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.LinearRank1ZeroColsAndRowsFunction(int,int,double)"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.n : int"
contain "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction" "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.n : int"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction" "org.apache.commons.math.estimation.MinpackTest.LinearRank1ZeroColsAndRowsFunction.getResiduals()"
reference "org.apache.commons.math.stat.inference.TTestFactoryTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.inference.TTestFactoryTest" "org.apache.commons.math.stat.inference.TTestTest"
reference "org.apache.commons.math.stat.inference.TTestFactoryTest" "org.apache.commons.math.stat.inference.TestUtils"
call "org.apache.commons.math.stat.inference.TTestFactoryTest.TTestFactoryTest(String)" "org.apache.commons.math.stat.inference.TTestTest.TTestTest(String)"
contain "org.apache.commons.math.stat.inference.TTestFactoryTest" "org.apache.commons.math.stat.inference.TTestFactoryTest.TTestFactoryTest(String)"
call "org.apache.commons.math.stat.inference.TTestFactoryTest.setUp()" "org.apache.commons.math.stat.inference.TTestTest.setUp()"
call "org.apache.commons.math.stat.inference.TTestFactoryTest.setUp()" "org.apache.commons.math.stat.inference.TestUtils.getTTest()"
reference "org.apache.commons.math.stat.inference.TTestFactoryTest.setUp()" "org.apache.commons.math.stat.inference.TTestFactoryTest.testStatistic : TTest"
contain "org.apache.commons.math.stat.inference.TTestFactoryTest" "org.apache.commons.math.stat.inference.TTestFactoryTest.setUp()"
reference "org.apache.commons.math.stat.inference.TTestFactoryTest.suite()" "org.apache.commons.math.stat.inference.TTestFactoryTest.class$org$apache$commons$math$stat$inference$TTestFactoryTest : Class"
call "org.apache.commons.math.stat.inference.TTestFactoryTest.suite()" "org.apache.commons.math.stat.inference.TTestFactoryTest.class$(String)"
call "org.apache.commons.math.stat.inference.TTestFactoryTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.inference.TTestFactoryTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.inference.TTestFactoryTest" "org.apache.commons.math.stat.inference.TTestFactoryTest.suite()"
contain "org.apache.commons.math.stat.inference.TTestFactoryTest" "org.apache.commons.math.stat.inference.TTestFactoryTest.class$(String)"
contain "org.apache.commons.math.stat.inference.TTestFactoryTest" "org.apache.commons.math.stat.inference.TTestFactoryTest.class$org$apache$commons$math$stat$inference$TTestFactoryTest : Class"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest.DescriptiveStatisticsImplTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest.DescriptiveStatisticsImplTest(String)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest.suite()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest.class$org$apache$commons$math$stat$descriptive$DescriptiveStatisticsImplTest : Class"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest.suite()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest.suite()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest.createDescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl.DescriptiveStatisticsImpl()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest.createDescriptiveStatistics()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest.class$(String)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest.class$org$apache$commons$math$stat$descriptive$DescriptiveStatisticsImplTest : Class"
reference "org.apache.commons.math.stat.descriptive.moment.SkewnessTest" "org.apache.commons.math.stat.descriptive.moment.Skewness"
reference "org.apache.commons.math.stat.descriptive.moment.SkewnessTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.moment.SkewnessTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.SkewnessTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.moment.SkewnessTest" "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.SkewnessTest(String)"
call "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness()"
contain "org.apache.commons.math.stat.descriptive.moment.SkewnessTest" "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.suite()" "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.class$org$apache$commons$math$stat$descriptive$moment$SkewnessTest : Class"
call "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.suite()" "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.moment.SkewnessTest" "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.suite()"
reference "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.expectedValue()" "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.skew : double"
contain "org.apache.commons.math.stat.descriptive.moment.SkewnessTest" "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness()"
call "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.Skewness.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.Skewness.increment(double)"
call "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.assertFalse(boolean)"
contain "org.apache.commons.math.stat.descriptive.moment.SkewnessTest" "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.testNaN()"
contain "org.apache.commons.math.stat.descriptive.moment.SkewnessTest" "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.stat : Skewness" "org.apache.commons.math.stat.descriptive.moment.Skewness"
contain "org.apache.commons.math.stat.descriptive.moment.SkewnessTest" "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.stat : Skewness"
contain "org.apache.commons.math.stat.descriptive.moment.SkewnessTest" "org.apache.commons.math.stat.descriptive.moment.SkewnessTest.class$org$apache$commons$math$stat$descriptive$moment$SkewnessTest : Class"
reference "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.special.GammaTest" "junit.framework.TestCase"
reference "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.Gamma"
reference "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.special.GammaTest.GammaTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.GammaTest(String)"
call "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double,double,double)" "org.apache.commons.math.special.Gamma.regularizedGammaP(double,double)"
call "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double,double,double)" "org.apache.commons.math.special.Gamma.regularizedGammaQ(double,double)"
call "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double,double,double)" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
call "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double,double,double)" "org.apache.commons.math.MathException.getMessage()"
call "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double,double,double)" "org.apache.commons.math.special.GammaTest.fail(String)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double,double,double)"
call "org.apache.commons.math.special.GammaTest.testLogGamma(double,double)" "org.apache.commons.math.special.Gamma.logGamma(double)"
call "org.apache.commons.math.special.GammaTest.testLogGamma(double,double)" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.testLogGamma(double,double)"
call "org.apache.commons.math.special.GammaTest.testRegularizedGammaNanPositive()" "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double,double,double)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.testRegularizedGammaNanPositive()"
call "org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveNan()" "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double,double,double)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveNan()"
call "org.apache.commons.math.special.GammaTest.testRegularizedGammaNegativePositive()" "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double,double,double)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.testRegularizedGammaNegativePositive()"
call "org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveNegative()" "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double,double,double)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveNegative()"
call "org.apache.commons.math.special.GammaTest.testRegularizedGammaZeroPositive()" "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double,double,double)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.testRegularizedGammaZeroPositive()"
call "org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveZero()" "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double,double,double)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveZero()"
call "org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive()" "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double,double,double)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive()"
call "org.apache.commons.math.special.GammaTest.testLogGammaNan()" "org.apache.commons.math.special.GammaTest.testLogGamma(double,double)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.testLogGammaNan()"
call "org.apache.commons.math.special.GammaTest.testLogGammaNegative()" "org.apache.commons.math.special.GammaTest.testLogGamma(double,double)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.testLogGammaNegative()"
call "org.apache.commons.math.special.GammaTest.testLogGammaZero()" "org.apache.commons.math.special.GammaTest.testLogGamma(double,double)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.testLogGammaZero()"
call "org.apache.commons.math.special.GammaTest.testLogGammaPositive()" "org.apache.commons.math.special.GammaTest.testLogGamma(double,double)"
contain "org.apache.commons.math.special.GammaTest" "org.apache.commons.math.special.GammaTest.testLogGammaPositive()"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.LinearRank1Function(int,int,double,double,double)" "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.buildArray(int,double)"
call "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.LinearRank1Function(int,int,double,double,double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function" "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.LinearRank1Function(int,int,double,double,double)"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.n : int"
contain "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function" "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.n : int"
reference "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function" "org.apache.commons.math.estimation.MinpackTest.LinearRank1Function.getResiduals()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.sumMean()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.this$0 : SummaryStatisticsTest"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.sumMean()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.sum : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.sumMean()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.n : long"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.sumMean()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.evaluate(double[])"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.sum : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.clear()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.n : long"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.clear()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.getN()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.n : long"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.getN()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.getResult()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.sum : double"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.getResult()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.increment(double)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.sum : double"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.increment(double)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.n : long"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.increment(double)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.incrementAll(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.incrementAll(double[])"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.sum : double"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.n : long"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.this$0 : SummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.this$0 : SummaryStatisticsTest"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.moment.Mean"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.SummaryStatisticsTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.SummaryStatisticsTest(String)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.suite()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.class$org$apache$commons$math$stat$descriptive$SummaryStatisticsTest : Class"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.suite()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.suite()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.createSummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.createSummaryStatistics()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.u : SummaryStatistics"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.sumMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.setMeanImpl(StorelessUnivariateStatistic)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterInjection()"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterIllegalState()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.u : SummaryStatistics"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterIllegalState()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterIllegalState()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.sumMean.sumMean()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterIllegalState()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.setMeanImpl(StorelessUnivariateStatistic)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterIllegalState()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.fail(String)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testSetterIllegalState()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.class$(String)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.class$org$apache$commons$math$stat$descriptive$SummaryStatisticsTest : Class"
reference "org.apache.commons.math.ode.StepProblem" "org.apache.commons.math.ode.SwitchingFunction"
reference "org.apache.commons.math.ode.StepProblem" "org.apache.commons.math.ode.FirstOrderDifferentialEquations"
reference "org.apache.commons.math.ode.StepProblem.StepProblem(double,double,double)" "org.apache.commons.math.ode.StepProblem.rateAfter : double"
reference "org.apache.commons.math.ode.StepProblem.StepProblem(double,double,double)" "org.apache.commons.math.ode.StepProblem.switchTime : double"
call "org.apache.commons.math.ode.StepProblem.StepProblem(double,double,double)" "org.apache.commons.math.ode.StepProblem.setRate(double)"
contain "org.apache.commons.math.ode.StepProblem" "org.apache.commons.math.ode.StepProblem.StepProblem(double,double,double)"
reference "org.apache.commons.math.ode.StepProblem.computeDerivatives(double,double[],double[])" "org.apache.commons.math.ode.StepProblem.rate : double"
contain "org.apache.commons.math.ode.StepProblem" "org.apache.commons.math.ode.StepProblem.computeDerivatives(double,double[],double[])"
contain "org.apache.commons.math.ode.StepProblem" "org.apache.commons.math.ode.StepProblem.getDimension()"
reference "org.apache.commons.math.ode.StepProblem.setRate(double)" "org.apache.commons.math.ode.StepProblem.rate : double"
contain "org.apache.commons.math.ode.StepProblem" "org.apache.commons.math.ode.StepProblem.setRate(double)"
reference "org.apache.commons.math.ode.StepProblem.eventOccurred(double,double[])" "org.apache.commons.math.ode.StepProblem.rateAfter : double"
call "org.apache.commons.math.ode.StepProblem.eventOccurred(double,double[])" "org.apache.commons.math.ode.StepProblem.setRate(double)"
contain "org.apache.commons.math.ode.StepProblem" "org.apache.commons.math.ode.StepProblem.eventOccurred(double,double[])"
reference "org.apache.commons.math.ode.StepProblem.g(double,double[])" "org.apache.commons.math.ode.StepProblem.switchTime : double"
contain "org.apache.commons.math.ode.StepProblem" "org.apache.commons.math.ode.StepProblem.g(double,double[])"
contain "org.apache.commons.math.ode.StepProblem" "org.apache.commons.math.ode.StepProblem.resetState(double,double[])"
contain "org.apache.commons.math.ode.StepProblem" "org.apache.commons.math.ode.StepProblem.rate : double"
contain "org.apache.commons.math.ode.StepProblem" "org.apache.commons.math.ode.StepProblem.rateAfter : double"
contain "org.apache.commons.math.ode.StepProblem" "org.apache.commons.math.ode.StepProblem.switchTime : double"
contain "org.apache.commons.math.ode.StepProblem" "org.apache.commons.math.ode.StepProblem.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest" "org.apache.commons.math.stat.descriptive.moment.FirstMoment"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.FirstMomentTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest" "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.FirstMomentTest(String)"
call "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.moment.FirstMoment.FirstMoment()"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest" "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.expectedValue()" "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.mean : double"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest" "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.expectedValue()"
reference "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.stat : FirstMoment" "org.apache.commons.math.stat.descriptive.moment.FirstMoment"
contain "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest" "org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.stat : FirstMoment"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.moment.SecondMoment"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.moment.Mean"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.StandardDeviationTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.StandardDeviationTest(String)"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation()"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.suite()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.class$org$apache$commons$math$stat$descriptive$moment$StandardDeviationTest : Class"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.suite()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.suite()"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.expectedValue()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.std : double"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation()"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.increment(double)"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testNaN()"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.populationStandardDeviation(double[])"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment()"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation()"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.setBiasCorrected(boolean)"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.incrementAll(double[])"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(boolean,SecondMoment)"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation(boolean)"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.testPopulation()"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.populationStandardDeviation(double[])" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
call "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.populationStandardDeviation(double[])" "org.apache.commons.math.stat.descriptive.moment.Mean.evaluate(double[])"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.populationStandardDeviation(double[])"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.stat : StandardDeviation" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.stat : StandardDeviation"
contain "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest" "org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest.class$org$apache$commons$math$stat$descriptive$moment$StandardDeviationTest : Class"
reference "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.Complex"
reference "org.apache.commons.math.complex.ComplexTest" "junit.framework.TestCase"
reference "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.TestUtils"
reference "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexUtils"
call "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "junit.framework.TestCase.TestCase()"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.inf : double"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.neginf : double"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.nan : double"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.pi : double"
call "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.infZero : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.infNaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.negInfZero : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.negInfNaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.oneNaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.zeroInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.zeroNaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.nanInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.nanNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.ComplexTest()" "org.apache.commons.math.complex.ComplexTest.nanZero : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.ComplexTest()"
call "org.apache.commons.math.complex.ComplexTest.testConstructor()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testConstructor()" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.complex.ComplexTest.testConstructor()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
call "org.apache.commons.math.complex.ComplexTest.testConstructor()" "org.apache.commons.math.complex.Complex.getImaginary()"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testConstructor()"
call "org.apache.commons.math.complex.ComplexTest.testConstructorNaN()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testConstructorNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testConstructorNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
reference "org.apache.commons.math.complex.ComplexTest.testConstructorNaN()" "org.apache.commons.math.complex.ComplexTest.nan : double"
call "org.apache.commons.math.complex.ComplexTest.testConstructorNaN()" "org.apache.commons.math.complex.ComplexTest.assertFalse(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testConstructorNaN()"
call "org.apache.commons.math.complex.ComplexTest.testAbs()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testAbs()" "org.apache.commons.math.complex.Complex.abs()"
call "org.apache.commons.math.complex.ComplexTest.testAbs()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAbs()"
reference "org.apache.commons.math.complex.ComplexTest.testAbsNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testAbsNaN()" "org.apache.commons.math.complex.Complex.abs()"
call "org.apache.commons.math.complex.ComplexTest.testAbsNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
reference "org.apache.commons.math.complex.ComplexTest.testAbsNaN()" "org.apache.commons.math.complex.ComplexTest.inf : double"
reference "org.apache.commons.math.complex.ComplexTest.testAbsNaN()" "org.apache.commons.math.complex.ComplexTest.nan : double"
call "org.apache.commons.math.complex.ComplexTest.testAbsNaN()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAbsNaN()"
reference "org.apache.commons.math.complex.ComplexTest.testAbsInfinite()" "org.apache.commons.math.complex.ComplexTest.inf : double"
call "org.apache.commons.math.complex.ComplexTest.testAbsInfinite()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testAbsInfinite()" "org.apache.commons.math.complex.Complex.abs()"
call "org.apache.commons.math.complex.ComplexTest.testAbsInfinite()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testAbsInfinite()" "org.apache.commons.math.complex.ComplexTest.neginf : double"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAbsInfinite()"
call "org.apache.commons.math.complex.ComplexTest.testAdd()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testAdd()" "org.apache.commons.math.complex.Complex.add(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testAdd()" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.complex.ComplexTest.testAdd()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
call "org.apache.commons.math.complex.ComplexTest.testAdd()" "org.apache.commons.math.complex.Complex.getImaginary()"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAdd()"
call "org.apache.commons.math.complex.ComplexTest.testAddNaN()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testAddNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testAddNaN()" "org.apache.commons.math.complex.Complex.add(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testAddNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testAddNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
reference "org.apache.commons.math.complex.ComplexTest.testAddNaN()" "org.apache.commons.math.complex.ComplexTest.nan : double"
reference "org.apache.commons.math.complex.ComplexTest.testAddNaN()" "org.apache.commons.math.complex.Complex.real : double"
call "org.apache.commons.math.complex.ComplexTest.testAddNaN()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testAddNaN()" "org.apache.commons.math.complex.Complex.imaginary : double"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAddNaN()"
call "org.apache.commons.math.complex.ComplexTest.testAddInfinite()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testAddInfinite()" "org.apache.commons.math.complex.ComplexTest.inf : double"
call "org.apache.commons.math.complex.ComplexTest.testAddInfinite()" "org.apache.commons.math.complex.Complex.add(Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testAddInfinite()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.ComplexTest.testAddInfinite()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testAddInfinite()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.ComplexTest.testAddInfinite()" "org.apache.commons.math.complex.ComplexTest.neginf : double"
call "org.apache.commons.math.complex.ComplexTest.testAddInfinite()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAddInfinite()"
call "org.apache.commons.math.complex.ComplexTest.testConjugate()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testConjugate()" "org.apache.commons.math.complex.Complex.conjugate()"
call "org.apache.commons.math.complex.ComplexTest.testConjugate()" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.complex.ComplexTest.testConjugate()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
call "org.apache.commons.math.complex.ComplexTest.testConjugate()" "org.apache.commons.math.complex.Complex.getImaginary()"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testConjugate()"
reference "org.apache.commons.math.complex.ComplexTest.testConjugateNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testConjugateNaN()" "org.apache.commons.math.complex.Complex.conjugate()"
call "org.apache.commons.math.complex.ComplexTest.testConjugateNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testConjugateNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testConjugateNaN()"
reference "org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite()" "org.apache.commons.math.complex.ComplexTest.inf : double"
call "org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite()" "org.apache.commons.math.complex.ComplexTest.neginf : double"
call "org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite()" "org.apache.commons.math.complex.Complex.conjugate()"
reference "org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite()"
call "org.apache.commons.math.complex.ComplexTest.testDivide()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testDivide()" "org.apache.commons.math.complex.Complex.divide(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testDivide()" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.complex.ComplexTest.testDivide()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
call "org.apache.commons.math.complex.ComplexTest.testDivide()" "org.apache.commons.math.complex.Complex.getImaginary()"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testDivide()"
call "org.apache.commons.math.complex.ComplexTest.testDivideInfinite()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testDivideInfinite()" "org.apache.commons.math.complex.ComplexTest.neginf : double"
reference "org.apache.commons.math.complex.ComplexTest.testDivideInfinite()" "org.apache.commons.math.complex.ComplexTest.inf : double"
call "org.apache.commons.math.complex.ComplexTest.testDivideInfinite()" "org.apache.commons.math.complex.Complex.divide(Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testDivideInfinite()" "org.apache.commons.math.complex.Complex.ZERO : Complex"
call "org.apache.commons.math.complex.ComplexTest.testDivideInfinite()" "org.apache.commons.math.complex.Complex.equals(Object)"
call "org.apache.commons.math.complex.ComplexTest.testDivideInfinite()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
reference "org.apache.commons.math.complex.ComplexTest.testDivideInfinite()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.ComplexTest.testDivideInfinite()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.ComplexTest.testDivideInfinite()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testDivideInfinite()"
call "org.apache.commons.math.complex.ComplexTest.testDivideNaN()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testDivideNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testDivideNaN()" "org.apache.commons.math.complex.Complex.divide(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testDivideNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testDivideNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testDivideNaN()"
reference "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()" "org.apache.commons.math.complex.Complex.ONE : Complex"
call "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()" "org.apache.commons.math.complex.Complex.divide(Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()" "org.apache.commons.math.complex.Complex.real : double"
call "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
reference "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()" "org.apache.commons.math.complex.ComplexTest.inf : double"
reference "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()" "org.apache.commons.math.complex.Complex.imaginary : double"
call "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()" "org.apache.commons.math.complex.ComplexTest.oneNaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()"
call "org.apache.commons.math.complex.ComplexTest.testMultiply()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testMultiply()" "org.apache.commons.math.complex.Complex.multiply(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testMultiply()" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.complex.ComplexTest.testMultiply()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
call "org.apache.commons.math.complex.ComplexTest.testMultiply()" "org.apache.commons.math.complex.Complex.getImaginary()"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testMultiply()"
call "org.apache.commons.math.complex.ComplexTest.testMultiplyNaN()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testMultiplyNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testMultiplyNaN()" "org.apache.commons.math.complex.Complex.multiply(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testMultiplyNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testMultiplyNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testMultiplyNaN()"
call "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
call "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()" "org.apache.commons.math.complex.Complex.multiply(Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()" "org.apache.commons.math.complex.Complex.real : double"
reference "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()" "org.apache.commons.math.complex.ComplexTest.inf : double"
call "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()" "org.apache.commons.math.complex.Complex.imaginary : double"
reference "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
reference "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()" "org.apache.commons.math.complex.ComplexTest.oneNaN : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()"
call "org.apache.commons.math.complex.ComplexTest.testNegate()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testNegate()" "org.apache.commons.math.complex.Complex.negate()"
call "org.apache.commons.math.complex.ComplexTest.testNegate()" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.complex.ComplexTest.testNegate()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
call "org.apache.commons.math.complex.ComplexTest.testNegate()" "org.apache.commons.math.complex.Complex.getImaginary()"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testNegate()"
reference "org.apache.commons.math.complex.ComplexTest.testNegateNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testNegateNaN()" "org.apache.commons.math.complex.Complex.negate()"
call "org.apache.commons.math.complex.ComplexTest.testNegateNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testNegateNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testNegateNaN()"
call "org.apache.commons.math.complex.ComplexTest.testSubtract()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testSubtract()" "org.apache.commons.math.complex.Complex.subtract(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testSubtract()" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.complex.ComplexTest.testSubtract()" "org.apache.commons.math.complex.ComplexTest.assertEquals(double,double,double)"
call "org.apache.commons.math.complex.ComplexTest.testSubtract()" "org.apache.commons.math.complex.Complex.getImaginary()"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSubtract()"
call "org.apache.commons.math.complex.ComplexTest.testSubtractNaN()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testSubtractNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testSubtractNaN()" "org.apache.commons.math.complex.Complex.subtract(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testSubtractNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testSubtractNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSubtractNaN()"
call "org.apache.commons.math.complex.ComplexTest.testEqualsNull()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testEqualsNull()" "org.apache.commons.math.complex.Complex.equals(Object)"
call "org.apache.commons.math.complex.ComplexTest.testEqualsNull()" "org.apache.commons.math.complex.ComplexTest.assertFalse(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testEqualsNull()"
call "org.apache.commons.math.complex.ComplexTest.testEqualsClass()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testEqualsClass()" "org.apache.commons.math.complex.Complex.equals(Object)"
call "org.apache.commons.math.complex.ComplexTest.testEqualsClass()" "org.apache.commons.math.complex.ComplexTest.assertFalse(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testEqualsClass()"
call "org.apache.commons.math.complex.ComplexTest.testEqualsSame()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testEqualsSame()" "org.apache.commons.math.complex.Complex.equals(Object)"
call "org.apache.commons.math.complex.ComplexTest.testEqualsSame()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testEqualsSame()"
call "org.apache.commons.math.complex.ComplexTest.testEqualsTrue()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testEqualsTrue()" "org.apache.commons.math.complex.Complex.equals(Object)"
call "org.apache.commons.math.complex.ComplexTest.testEqualsTrue()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testEqualsTrue()"
call "org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference()" "org.apache.commons.math.complex.Complex.equals(Object)"
call "org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference()" "org.apache.commons.math.complex.ComplexTest.assertFalse(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference()"
call "org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference()" "org.apache.commons.math.complex.Complex.equals(Object)"
call "org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference()" "org.apache.commons.math.complex.ComplexTest.assertFalse(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference()"
call "org.apache.commons.math.complex.ComplexTest.testEqualsNaN()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testEqualsNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testEqualsNaN()" "org.apache.commons.math.complex.Complex.equals(Object)"
call "org.apache.commons.math.complex.ComplexTest.testEqualsNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testEqualsNaN()"
call "org.apache.commons.math.complex.ComplexTest.testHashCode()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testHashCode()" "org.apache.commons.math.complex.Complex.hashCode()"
call "org.apache.commons.math.complex.ComplexTest.testHashCode()" "org.apache.commons.math.complex.ComplexTest.assertFalse(boolean)"
call "org.apache.commons.math.complex.ComplexTest.testHashCode()" "org.apache.commons.math.complex.ComplexTest.assertEquals(int,int)"
reference "org.apache.commons.math.complex.ComplexTest.testHashCode()" "org.apache.commons.math.complex.Complex.NaN : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testHashCode()"
call "org.apache.commons.math.complex.ComplexTest.testAcos()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testAcos()" "org.apache.commons.math.complex.Complex.acos()"
call "org.apache.commons.math.complex.ComplexTest.testAcos()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
reference "org.apache.commons.math.complex.ComplexTest.testAcos()" "org.apache.commons.math.complex.Complex.ZERO : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAcos()"
reference "org.apache.commons.math.complex.ComplexTest.testAcosInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAcosInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testAcosInf()" "org.apache.commons.math.complex.Complex.acos()"
call "org.apache.commons.math.complex.ComplexTest.testAcosInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testAcosInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAcosInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAcosInf()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAcosInf()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAcosInf()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAcosInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAcosInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAcosInf()"
reference "org.apache.commons.math.complex.ComplexTest.testAcosNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testAcosNaN()" "org.apache.commons.math.complex.Complex.acos()"
call "org.apache.commons.math.complex.ComplexTest.testAcosNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testAcosNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAcosNaN()"
call "org.apache.commons.math.complex.ComplexTest.testAsin()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testAsin()" "org.apache.commons.math.complex.Complex.asin()"
call "org.apache.commons.math.complex.ComplexTest.testAsin()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAsin()"
reference "org.apache.commons.math.complex.ComplexTest.testAsinNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testAsinNaN()" "org.apache.commons.math.complex.Complex.asin()"
call "org.apache.commons.math.complex.ComplexTest.testAsinNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testAsinNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAsinNaN()"
reference "org.apache.commons.math.complex.ComplexTest.testAsinInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAsinInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testAsinInf()" "org.apache.commons.math.complex.Complex.asin()"
call "org.apache.commons.math.complex.ComplexTest.testAsinInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testAsinInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAsinInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAsinInf()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAsinInf()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAsinInf()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAsinInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAsinInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAsinInf()"
call "org.apache.commons.math.complex.ComplexTest.testAtan()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testAtan()" "org.apache.commons.math.complex.Complex.atan()"
call "org.apache.commons.math.complex.ComplexTest.testAtan()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAtan()"
reference "org.apache.commons.math.complex.ComplexTest.testAtanInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAtanInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testAtanInf()" "org.apache.commons.math.complex.Complex.atan()"
call "org.apache.commons.math.complex.ComplexTest.testAtanInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testAtanInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAtanInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAtanInf()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAtanInf()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAtanInf()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAtanInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testAtanInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAtanInf()"
reference "org.apache.commons.math.complex.ComplexTest.testAtanNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testAtanNaN()" "org.apache.commons.math.complex.Complex.atan()"
call "org.apache.commons.math.complex.ComplexTest.testAtanNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testAtanNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
reference "org.apache.commons.math.complex.ComplexTest.testAtanNaN()" "org.apache.commons.math.complex.Complex.I : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testAtanNaN()"
call "org.apache.commons.math.complex.ComplexTest.testCos()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testCos()" "org.apache.commons.math.complex.Complex.cos()"
call "org.apache.commons.math.complex.ComplexTest.testCos()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testCos()"
reference "org.apache.commons.math.complex.ComplexTest.testCosNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testCosNaN()" "org.apache.commons.math.complex.Complex.cos()"
call "org.apache.commons.math.complex.ComplexTest.testCosNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testCosNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testCosNaN()"
reference "org.apache.commons.math.complex.ComplexTest.testCosInf()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCosInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testCosInf()" "org.apache.commons.math.complex.Complex.cos()"
call "org.apache.commons.math.complex.ComplexTest.testCosInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testCosInf()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCosInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCosInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCosInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCosInf()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCosInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCosInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testCosInf()"
call "org.apache.commons.math.complex.ComplexTest.testCosh()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testCosh()" "org.apache.commons.math.complex.Complex.cosh()"
call "org.apache.commons.math.complex.ComplexTest.testCosh()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testCosh()"
reference "org.apache.commons.math.complex.ComplexTest.testCoshNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testCoshNaN()" "org.apache.commons.math.complex.Complex.cosh()"
call "org.apache.commons.math.complex.ComplexTest.testCoshNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testCoshNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testCoshNaN()"
reference "org.apache.commons.math.complex.ComplexTest.testCoshInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCoshInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testCoshInf()" "org.apache.commons.math.complex.Complex.cosh()"
call "org.apache.commons.math.complex.ComplexTest.testCoshInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testCoshInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCoshInf()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCoshInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCoshInf()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCoshInf()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCoshInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testCoshInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testCoshInf()"
call "org.apache.commons.math.complex.ComplexTest.testExp()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testExp()" "org.apache.commons.math.complex.Complex.exp()"
call "org.apache.commons.math.complex.ComplexTest.testExp()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
reference "org.apache.commons.math.complex.ComplexTest.testExp()" "org.apache.commons.math.complex.Complex.ONE : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testExp()" "org.apache.commons.math.complex.Complex.ZERO : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testExp()" "org.apache.commons.math.complex.Complex.I : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testExp()" "org.apache.commons.math.complex.ComplexTest.pi : double"
call "org.apache.commons.math.complex.ComplexTest.testExp()" "org.apache.commons.math.complex.Complex.multiply(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testExp()" "org.apache.commons.math.complex.Complex.negate()"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testExp()"
reference "org.apache.commons.math.complex.ComplexTest.testExpNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testExpNaN()" "org.apache.commons.math.complex.Complex.exp()"
call "org.apache.commons.math.complex.ComplexTest.testExpNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testExpNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testExpNaN()"
reference "org.apache.commons.math.complex.ComplexTest.testExpInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testExpInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testExpInf()" "org.apache.commons.math.complex.Complex.exp()"
call "org.apache.commons.math.complex.ComplexTest.testExpInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testExpInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testExpInf()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testExpInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testExpInf()" "org.apache.commons.math.complex.Complex.ZERO : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testExpInf()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testExpInf()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testExpInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testExpInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testExpInf()"
call "org.apache.commons.math.complex.ComplexTest.testLog()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testLog()" "org.apache.commons.math.complex.Complex.log()"
call "org.apache.commons.math.complex.ComplexTest.testLog()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testLog()"
reference "org.apache.commons.math.complex.ComplexTest.testLogNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testLogNaN()" "org.apache.commons.math.complex.Complex.log()"
call "org.apache.commons.math.complex.ComplexTest.testLogNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testLogNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testLogNaN()"
reference "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.complex.ComplexTest.inf : double"
reference "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.complex.ComplexTest.pi : double"
call "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.complex.Complex.log()"
call "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
reference "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.complex.ComplexTest.infZero : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testLogInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testLogInf()"
reference "org.apache.commons.math.complex.ComplexTest.testLogZero()" "org.apache.commons.math.complex.ComplexTest.negInfZero : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testLogZero()" "org.apache.commons.math.complex.Complex.ZERO : Complex"
call "org.apache.commons.math.complex.ComplexTest.testLogZero()" "org.apache.commons.math.complex.Complex.log()"
call "org.apache.commons.math.complex.ComplexTest.testLogZero()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testLogZero()"
call "org.apache.commons.math.complex.ComplexTest.testPow()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testPow()" "org.apache.commons.math.complex.Complex.pow(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testPow()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testPow()"
call "org.apache.commons.math.complex.ComplexTest.testPowNaNBase()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testPowNaNBase()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testPowNaNBase()" "org.apache.commons.math.complex.Complex.pow(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testPowNaNBase()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testPowNaNBase()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testPowNaNBase()"
call "org.apache.commons.math.complex.ComplexTest.testPowNaNExponent()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexTest.testPowNaNExponent()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testPowNaNExponent()" "org.apache.commons.math.complex.Complex.pow(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testPowNaNExponent()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testPowNaNExponent()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testPowNaNExponent()"
reference "org.apache.commons.math.complex.ComplexTest.testPowInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testPowInf()" "org.apache.commons.math.complex.Complex.ONE : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testPowInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testPowInf()" "org.apache.commons.math.complex.Complex.pow(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testPowInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testPowInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testPowInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testPowInf()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testPowInf()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testPowInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testPowInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testPowInf()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testPowInf()"
reference "org.apache.commons.math.complex.ComplexTest.testPowZero()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testPowZero()" "org.apache.commons.math.complex.Complex.ZERO : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testPowZero()" "org.apache.commons.math.complex.Complex.ONE : Complex"
call "org.apache.commons.math.complex.ComplexTest.testPowZero()" "org.apache.commons.math.complex.Complex.pow(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testPowZero()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testPowZero()" "org.apache.commons.math.complex.Complex.I : Complex"
call "org.apache.commons.math.complex.ComplexTest.testPowZero()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
call "org.apache.commons.math.complex.ComplexTest.testPowZero()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testPowZero()"
reference "org.apache.commons.math.complex.ComplexTest.testpowNull()" "org.apache.commons.math.complex.Complex.ONE : Complex"
call "org.apache.commons.math.complex.ComplexTest.testpowNull()" "org.apache.commons.math.complex.Complex.pow(Complex)"
call "org.apache.commons.math.complex.ComplexTest.testpowNull()" "org.apache.commons.math.complex.ComplexTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testpowNull()"
call "org.apache.commons.math.complex.ComplexTest.testSin()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testSin()" "org.apache.commons.math.complex.Complex.sin()"
call "org.apache.commons.math.complex.ComplexTest.testSin()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSin()"
reference "org.apache.commons.math.complex.ComplexTest.testSinInf()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testSinInf()" "org.apache.commons.math.complex.Complex.sin()"
call "org.apache.commons.math.complex.ComplexTest.testSinInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testSinInf()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinInf()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSinInf()"
reference "org.apache.commons.math.complex.ComplexTest.testSinNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testSinNaN()" "org.apache.commons.math.complex.Complex.sin()"
call "org.apache.commons.math.complex.ComplexTest.testSinNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testSinNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSinNaN()"
call "org.apache.commons.math.complex.ComplexTest.testSinh()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testSinh()" "org.apache.commons.math.complex.Complex.sinh()"
call "org.apache.commons.math.complex.ComplexTest.testSinh()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSinh()"
reference "org.apache.commons.math.complex.ComplexTest.testSinhNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testSinhNaN()" "org.apache.commons.math.complex.Complex.sinh()"
call "org.apache.commons.math.complex.ComplexTest.testSinhNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testSinhNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSinhNaN()"
reference "org.apache.commons.math.complex.ComplexTest.testSinhInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinhInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testSinhInf()" "org.apache.commons.math.complex.Complex.sinh()"
call "org.apache.commons.math.complex.ComplexTest.testSinhInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testSinhInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinhInf()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinhInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinhInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinhInf()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinhInf()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSinhInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSinhInf()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtRealPositive()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testSqrtRealPositive()" "org.apache.commons.math.complex.Complex.sqrt()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtRealPositive()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSqrtRealPositive()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtRealZero()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testSqrtRealZero()" "org.apache.commons.math.complex.Complex.sqrt()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtRealZero()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSqrtRealZero()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtRealNegative()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testSqrtRealNegative()" "org.apache.commons.math.complex.Complex.sqrt()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtRealNegative()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSqrtRealNegative()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero()" "org.apache.commons.math.complex.Complex.sqrt()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative()" "org.apache.commons.math.complex.Complex.sqrt()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative()"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtPolar()" "org.apache.commons.math.complex.ComplexTest.pi : double"
call "org.apache.commons.math.complex.ComplexTest.testSqrtPolar()" "org.apache.commons.math.complex.ComplexUtils.polar2Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testSqrtPolar()" "org.apache.commons.math.complex.Complex.sqrt()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtPolar()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSqrtPolar()"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testSqrtNaN()" "org.apache.commons.math.complex.Complex.sqrt()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSqrtNaN()"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexTest.infNaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.Complex.sqrt()"
call "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexTest.infZero : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexTest.zeroInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexTest.nanInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexTest.nanNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSqrtInf()"
call "org.apache.commons.math.complex.ComplexTest.testSqrt1z()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testSqrt1z()" "org.apache.commons.math.complex.Complex.sqrt1z()"
call "org.apache.commons.math.complex.ComplexTest.testSqrt1z()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSqrt1z()"
reference "org.apache.commons.math.complex.ComplexTest.testSqrt1zNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testSqrt1zNaN()" "org.apache.commons.math.complex.Complex.sqrt1z()"
call "org.apache.commons.math.complex.ComplexTest.testSqrt1zNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testSqrt1zNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testSqrt1zNaN()"
call "org.apache.commons.math.complex.ComplexTest.testTan()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testTan()" "org.apache.commons.math.complex.Complex.tan()"
call "org.apache.commons.math.complex.ComplexTest.testTan()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testTan()"
reference "org.apache.commons.math.complex.ComplexTest.testTanNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testTanNaN()" "org.apache.commons.math.complex.Complex.tan()"
call "org.apache.commons.math.complex.ComplexTest.testTanNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testTanNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testTanNaN()"
reference "org.apache.commons.math.complex.ComplexTest.testTanInf()" "org.apache.commons.math.complex.ComplexTest.zeroNaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testTanInf()" "org.apache.commons.math.complex.Complex.tan()"
call "org.apache.commons.math.complex.ComplexTest.testTanInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testTanInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanInf()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanInf()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanInf()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testTanInf()"
reference "org.apache.commons.math.complex.ComplexTest.testTanCritical()" "org.apache.commons.math.complex.ComplexTest.infNaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanCritical()" "org.apache.commons.math.complex.ComplexTest.pi : double"
call "org.apache.commons.math.complex.ComplexTest.testTanCritical()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testTanCritical()" "org.apache.commons.math.complex.Complex.tan()"
call "org.apache.commons.math.complex.ComplexTest.testTanCritical()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testTanCritical()" "org.apache.commons.math.complex.ComplexTest.negInfNaN : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testTanCritical()"
call "org.apache.commons.math.complex.ComplexTest.testTanh()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testTanh()" "org.apache.commons.math.complex.Complex.tanh()"
call "org.apache.commons.math.complex.ComplexTest.testTanh()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testTanh()"
reference "org.apache.commons.math.complex.ComplexTest.testTanhNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexTest.testTanhNaN()" "org.apache.commons.math.complex.Complex.tanh()"
call "org.apache.commons.math.complex.ComplexTest.testTanhNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexTest.testTanhNaN()" "org.apache.commons.math.complex.ComplexTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testTanhNaN()"
reference "org.apache.commons.math.complex.ComplexTest.testTanhInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanhInf()" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexTest.testTanhInf()" "org.apache.commons.math.complex.Complex.tanh()"
call "org.apache.commons.math.complex.ComplexTest.testTanhInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexTest.testTanhInf()" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanhInf()" "org.apache.commons.math.complex.ComplexTest.nanZero : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanhInf()" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanhInf()" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanhInf()" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanhInf()" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanhInf()" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanhInf()" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testTanhInf()"
reference "org.apache.commons.math.complex.ComplexTest.testTanhCritical()" "org.apache.commons.math.complex.ComplexTest.nanInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.testTanhCritical()" "org.apache.commons.math.complex.ComplexTest.pi : double"
call "org.apache.commons.math.complex.ComplexTest.testTanhCritical()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexTest.testTanhCritical()" "org.apache.commons.math.complex.Complex.tanh()"
call "org.apache.commons.math.complex.ComplexTest.testTanhCritical()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.testTanhCritical()"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.inf : double"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.neginf : double"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.nan : double"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.pi : double"
reference "org.apache.commons.math.complex.ComplexTest.oneInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.oneInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.infOne : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.infZero : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.infZero : Complex"
reference "org.apache.commons.math.complex.ComplexTest.infNaN : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.infNaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.infInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.negInfZero : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.negInfZero : Complex"
reference "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexTest.negInfNaN : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.negInfNaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.negInfNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.oneNaN : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.oneNaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.zeroInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.zeroInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.zeroNaN : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.zeroNaN : Complex"
reference "org.apache.commons.math.complex.ComplexTest.nanInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.nanInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.nanNegInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.nanNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexTest.nanZero : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexTest" "org.apache.commons.math.complex.ComplexTest.nanZero : Complex"
reference "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.special.BetaTest" "junit.framework.TestCase"
reference "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.Beta"
reference "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.special.BetaTest.BetaTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.BetaTest(String)"
call "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)" "org.apache.commons.math.special.Beta.regularizedBeta(double,double,double)"
call "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
call "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)" "org.apache.commons.math.MathException.getMessage()"
call "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)" "org.apache.commons.math.special.BetaTest.fail(String)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)"
call "org.apache.commons.math.special.BetaTest.testLogBeta(double,double,double)" "org.apache.commons.math.special.Beta.logBeta(double,double)"
call "org.apache.commons.math.special.BetaTest.testLogBeta(double,double,double)" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testLogBeta(double,double,double)"
call "org.apache.commons.math.special.BetaTest.testRegularizedBetaNanPositivePositive()" "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testRegularizedBetaNanPositivePositive()"
call "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositiveNanPositive()" "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositiveNanPositive()"
call "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositivePositiveNan()" "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositivePositiveNan()"
call "org.apache.commons.math.special.BetaTest.testRegularizedBetaNegativePositivePositive()" "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testRegularizedBetaNegativePositivePositive()"
call "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositiveNegativePositive()" "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositiveNegativePositive()"
call "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositivePositiveNegative()" "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositivePositiveNegative()"
call "org.apache.commons.math.special.BetaTest.testRegularizedBetaZeroPositivePositive()" "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testRegularizedBetaZeroPositivePositive()"
call "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositiveZeroPositive()" "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositiveZeroPositive()"
call "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositivePositiveZero()" "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositivePositiveZero()"
call "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositivePositivePositive()" "org.apache.commons.math.special.BetaTest.testRegularizedBeta(double,double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testRegularizedBetaPositivePositivePositive()"
call "org.apache.commons.math.special.BetaTest.testLogBetaNanPositive()" "org.apache.commons.math.special.BetaTest.testLogBeta(double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testLogBetaNanPositive()"
call "org.apache.commons.math.special.BetaTest.testLogBetaPositiveNan()" "org.apache.commons.math.special.BetaTest.testLogBeta(double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testLogBetaPositiveNan()"
call "org.apache.commons.math.special.BetaTest.testLogBetaNegativePositive()" "org.apache.commons.math.special.BetaTest.testLogBeta(double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testLogBetaNegativePositive()"
call "org.apache.commons.math.special.BetaTest.testLogBetaPositiveNegative()" "org.apache.commons.math.special.BetaTest.testLogBeta(double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testLogBetaPositiveNegative()"
call "org.apache.commons.math.special.BetaTest.testLogBetaZeroPositive()" "org.apache.commons.math.special.BetaTest.testLogBeta(double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testLogBetaZeroPositive()"
call "org.apache.commons.math.special.BetaTest.testLogBetaPositiveZero()" "org.apache.commons.math.special.BetaTest.testLogBeta(double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testLogBetaPositiveZero()"
call "org.apache.commons.math.special.BetaTest.testLogBetaPositivePositive()" "org.apache.commons.math.special.BetaTest.testLogBeta(double,double,double)"
contain "org.apache.commons.math.special.BetaTest" "org.apache.commons.math.special.BetaTest.testLogBetaPositivePositive()"
reference "org.apache.commons.math.special.ErfTest" "junit.framework.TestCase"
reference "org.apache.commons.math.special.ErfTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.special.ErfTest" "org.apache.commons.math.special.Erf"
call "org.apache.commons.math.special.ErfTest.ErfTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.special.ErfTest" "org.apache.commons.math.special.ErfTest.ErfTest()"
call "org.apache.commons.math.special.ErfTest.testErf0()" "org.apache.commons.math.special.Erf.erf(double)"
call "org.apache.commons.math.special.ErfTest.testErf0()" "org.apache.commons.math.special.ErfTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.special.ErfTest" "org.apache.commons.math.special.ErfTest.testErf0()"
call "org.apache.commons.math.special.ErfTest.testErf1960()" "org.apache.commons.math.special.Erf.erf(double)"
call "org.apache.commons.math.special.ErfTest.testErf1960()" "org.apache.commons.math.special.ErfTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.special.ErfTest" "org.apache.commons.math.special.ErfTest.testErf1960()"
call "org.apache.commons.math.special.ErfTest.testErf2576()" "org.apache.commons.math.special.Erf.erf(double)"
call "org.apache.commons.math.special.ErfTest.testErf2576()" "org.apache.commons.math.special.ErfTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.special.ErfTest" "org.apache.commons.math.special.ErfTest.testErf2576()"
call "org.apache.commons.math.special.ErfTest.testErf2807()" "org.apache.commons.math.special.Erf.erf(double)"
call "org.apache.commons.math.special.ErfTest.testErf2807()" "org.apache.commons.math.special.ErfTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.special.ErfTest" "org.apache.commons.math.special.ErfTest.testErf2807()"
call "org.apache.commons.math.special.ErfTest.testErf3291()" "org.apache.commons.math.special.Erf.erf(double)"
call "org.apache.commons.math.special.ErfTest.testErf3291()" "org.apache.commons.math.special.ErfTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.special.ErfTest" "org.apache.commons.math.special.ErfTest.testErf3291()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.BisectionSolver"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.NewtonSolver"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.BrentSolver"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.SecantSolver"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactory"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.UnivariateRealSolverFactoryImplTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.UnivariateRealSolverFactoryImplTest()"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.setUp()" "junit.framework.TestCase.setUp()"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.setUp()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.UnivariateRealSolverFactoryImpl()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.setUp()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.factory : UnivariateRealSolverFactory"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.setUp()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.setUp()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.function : DifferentiableUnivariateRealFunction"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.setUp()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.tearDown()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.factory : UnivariateRealSolverFactory"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.tearDown()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.function : DifferentiableUnivariateRealFunction"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.tearDown()" "junit.framework.TestCase.tearDown()"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.tearDown()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBisectionSolverNull()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.factory : UnivariateRealSolverFactory"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBisectionSolverNull()" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newBisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBisectionSolverNull()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.fail()"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBisectionSolverNull()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBisectionSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.factory : UnivariateRealSolverFactory"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBisectionSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.function : DifferentiableUnivariateRealFunction"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBisectionSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newBisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBisectionSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.assertNotNull(Object)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBisectionSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.assertTrue(boolean)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBisectionSolverValid()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewNewtonSolverNull()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.factory : UnivariateRealSolverFactory"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewNewtonSolverNull()" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newNewtonSolver(DifferentiableUnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewNewtonSolverNull()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.fail()"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewNewtonSolverNull()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewNewtonSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.factory : UnivariateRealSolverFactory"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewNewtonSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.function : DifferentiableUnivariateRealFunction"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewNewtonSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newNewtonSolver(DifferentiableUnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewNewtonSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.assertNotNull(Object)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewNewtonSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.assertTrue(boolean)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewNewtonSolverValid()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBrentSolverNull()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.factory : UnivariateRealSolverFactory"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBrentSolverNull()" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newBrentSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBrentSolverNull()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.fail()"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBrentSolverNull()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBrentSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.factory : UnivariateRealSolverFactory"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBrentSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.function : DifferentiableUnivariateRealFunction"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBrentSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newBrentSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBrentSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.assertNotNull(Object)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBrentSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.assertTrue(boolean)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewBrentSolverValid()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewSecantSolverNull()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.factory : UnivariateRealSolverFactory"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewSecantSolverNull()" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newSecantSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewSecantSolverNull()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.fail()"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewSecantSolverNull()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewSecantSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.factory : UnivariateRealSolverFactory"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewSecantSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.function : DifferentiableUnivariateRealFunction"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewSecantSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactory.newSecantSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewSecantSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.assertNotNull(Object)"
call "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewSecantSolverValid()" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.assertTrue(boolean)"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.testNewSecantSolverValid()"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.factory : UnivariateRealSolverFactory" "org.apache.commons.math.analysis.UnivariateRealSolverFactory"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.factory : UnivariateRealSolverFactory"
reference "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.function : DifferentiableUnivariateRealFunction" "org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction"
contain "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest" "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest.function : DifferentiableUnivariateRealFunction"
reference "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionImpl"
reference "org.apache.commons.math.random.EmpiricalDistributionTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistribution"
reference "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.RetryTestCase"
reference "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.stat.descriptive.StatisticalSummary"
reference "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.TestUtils"
reference "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
call "org.apache.commons.math.random.EmpiricalDistributionTest.EmpiricalDistributionTest(String)" "org.apache.commons.math.RetryTestCase.RetryTestCase(String)"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.EmpiricalDistributionTest(String)" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution : EmpiricalDistribution"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.EmpiricalDistributionTest(String)" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution2 : EmpiricalDistribution"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.EmpiricalDistributionTest(String)" "org.apache.commons.math.random.EmpiricalDistributionTest.file : File"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.EmpiricalDistributionTest(String)" "org.apache.commons.math.random.EmpiricalDistributionTest.url : URL"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.EmpiricalDistributionTest(String)" "org.apache.commons.math.random.EmpiricalDistributionTest.dataArray : double[]"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.EmpiricalDistributionTest(String)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.setUp()" "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl(int)"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.setUp()" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution : EmpiricalDistribution"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.setUp()" "org.apache.commons.math.random.EmpiricalDistributionTest.url : URL"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.setUp()" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution2 : EmpiricalDistribution"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.setUp()" "org.apache.commons.math.random.EmpiricalDistributionTest.dataArray : double[]"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.setUp()"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.suite()" "org.apache.commons.math.random.EmpiricalDistributionTest.class$org$apache$commons$math$random$EmpiricalDistributionTest : Class"
call "org.apache.commons.math.random.EmpiricalDistributionTest.suite()" "org.apache.commons.math.random.EmpiricalDistributionTest.class$(String)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.suite()"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.testLoad()" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution : EmpiricalDistribution"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.testLoad()" "org.apache.commons.math.random.EmpiricalDistributionTest.url : URL"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testLoad()" "org.apache.commons.math.random.EmpiricalDistribution.load(URL)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testLoad()" "org.apache.commons.math.random.EmpiricalDistribution.getSampleStats()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testLoad()" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getN()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testLoad()" "org.apache.commons.math.random.EmpiricalDistributionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testLoad()" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMean()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testLoad()" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getStandardDeviation()"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.testLoad()"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.testDoubleLoad()" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution2 : EmpiricalDistribution"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.testDoubleLoad()" "org.apache.commons.math.random.EmpiricalDistributionTest.dataArray : double[]"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testDoubleLoad()" "org.apache.commons.math.random.EmpiricalDistribution.load(double[])"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testDoubleLoad()" "org.apache.commons.math.random.EmpiricalDistribution.getSampleStats()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testDoubleLoad()" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getN()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testDoubleLoad()" "org.apache.commons.math.random.EmpiricalDistributionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testDoubleLoad()" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getMean()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testDoubleLoad()" "org.apache.commons.math.stat.descriptive.StatisticalSummary.getStandardDeviation()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testDoubleLoad()" "org.apache.commons.math.random.EmpiricalDistribution.getUpperBounds()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testDoubleLoad()" "org.apache.commons.math.random.EmpiricalDistributionTest.assertEquals(int,int)"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.testDoubleLoad()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testNext()" "org.apache.commons.math.random.EmpiricalDistributionTest.tstGen(double)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testNext()" "org.apache.commons.math.random.EmpiricalDistributionTest.tstDoubleGen(double)"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.testNext()"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.testNexFail()" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution : EmpiricalDistribution"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testNexFail()" "org.apache.commons.math.random.EmpiricalDistribution.getNextValue()"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.testNexFail()" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution2 : EmpiricalDistribution"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testNexFail()" "org.apache.commons.math.random.EmpiricalDistributionTest.fail(String)"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.testNexFail()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testGridTooFine()" "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl(int)"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.testGridTooFine()" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution : EmpiricalDistribution"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testGridTooFine()" "org.apache.commons.math.random.EmpiricalDistributionTest.tstGen(double)"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.testGridTooFine()" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution2 : EmpiricalDistribution"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testGridTooFine()" "org.apache.commons.math.random.EmpiricalDistributionTest.tstDoubleGen(double)"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.testGridTooFine()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testGridTooFat()" "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl(int)"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.testGridTooFat()" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution : EmpiricalDistribution"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testGridTooFat()" "org.apache.commons.math.random.EmpiricalDistributionTest.tstGen(double)"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.testGridTooFat()" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution2 : EmpiricalDistribution"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testGridTooFat()" "org.apache.commons.math.random.EmpiricalDistributionTest.tstDoubleGen(double)"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.testGridTooFat()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testBinIndexOverflow()" "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testBinIndexOverflow()" "org.apache.commons.math.random.EmpiricalDistributionImpl.load(double[])"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.testBinIndexOverflow()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testSerialization()" "org.apache.commons.math.random.EmpiricalDistributionImpl.EmpiricalDistributionImpl()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testSerialization()" "org.apache.commons.math.TestUtils.serializeAndRecover(Object)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testSerialization()" "org.apache.commons.math.random.EmpiricalDistributionTest.verifySame(EmpiricalDistribution,EmpiricalDistribution)"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.testSerialization()" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution2 : EmpiricalDistribution"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.testSerialization()" "org.apache.commons.math.random.EmpiricalDistributionTest.dataArray : double[]"
call "org.apache.commons.math.random.EmpiricalDistributionTest.testSerialization()" "org.apache.commons.math.random.EmpiricalDistribution.load(double[])"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.testSerialization()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.verifySame(EmpiricalDistribution,EmpiricalDistribution)" "org.apache.commons.math.random.EmpiricalDistribution.isLoaded()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.verifySame(EmpiricalDistribution,EmpiricalDistribution)" "org.apache.commons.math.random.EmpiricalDistributionTest.assertEquals(boolean,boolean)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.verifySame(EmpiricalDistribution,EmpiricalDistribution)" "org.apache.commons.math.random.EmpiricalDistribution.getBinCount()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.verifySame(EmpiricalDistribution,EmpiricalDistribution)" "org.apache.commons.math.random.EmpiricalDistributionTest.assertEquals(int,int)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.verifySame(EmpiricalDistribution,EmpiricalDistribution)" "org.apache.commons.math.random.EmpiricalDistribution.getSampleStats()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.verifySame(EmpiricalDistribution,EmpiricalDistribution)" "org.apache.commons.math.random.EmpiricalDistributionTest.assertEquals(Object,Object)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.verifySame(EmpiricalDistribution,EmpiricalDistribution)" "org.apache.commons.math.random.EmpiricalDistribution.getUpperBounds()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.verifySame(EmpiricalDistribution,EmpiricalDistribution)" "org.apache.commons.math.random.EmpiricalDistributionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.verifySame(EmpiricalDistribution,EmpiricalDistribution)" "org.apache.commons.math.random.EmpiricalDistribution.getBinStats()"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.verifySame(EmpiricalDistribution,EmpiricalDistribution)"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.tstGen(double)" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution : EmpiricalDistribution"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.tstGen(double)" "org.apache.commons.math.random.EmpiricalDistributionTest.url : URL"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstGen(double)" "org.apache.commons.math.random.EmpiricalDistribution.load(URL)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstGen(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstGen(double)" "org.apache.commons.math.random.EmpiricalDistribution.getNextValue()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstGen(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstGen(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstGen(double)" "org.apache.commons.math.random.EmpiricalDistributionTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstGen(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.tstGen(double)"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.tstDoubleGen(double)" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution2 : EmpiricalDistribution"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.tstDoubleGen(double)" "org.apache.commons.math.random.EmpiricalDistributionTest.dataArray : double[]"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstDoubleGen(double)" "org.apache.commons.math.random.EmpiricalDistribution.load(double[])"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstDoubleGen(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstDoubleGen(double)" "org.apache.commons.math.random.EmpiricalDistribution.getNextValue()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstDoubleGen(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstDoubleGen(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstDoubleGen(double)" "org.apache.commons.math.random.EmpiricalDistributionTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.random.EmpiricalDistributionTest.tstDoubleGen(double)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.tstDoubleGen(double)"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.class$(String)"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution : EmpiricalDistribution" "org.apache.commons.math.random.EmpiricalDistribution"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution : EmpiricalDistribution"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution2 : EmpiricalDistribution" "org.apache.commons.math.random.EmpiricalDistribution"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.empiricalDistribution2 : EmpiricalDistribution"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.file : File"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.url : URL"
reference "org.apache.commons.math.random.EmpiricalDistributionTest.dataArray : double[]" "double[]"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.dataArray : double[]"
contain "org.apache.commons.math.random.EmpiricalDistributionTest" "org.apache.commons.math.random.EmpiricalDistributionTest.class$org$apache$commons$math$random$EmpiricalDistributionTest : Class"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1" "junit.framework.Assert"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.{...}" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.this$0 : GraggBulirschStoerStepInterpolatorTest"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.{...}"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.copy()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.handleStep(StepInterpolator,boolean)"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.requiresDenseOutput()"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.reset()"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.this$0 : GraggBulirschStoerStepInterpolatorTest" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.this$0 : GraggBulirschStoerStepInterpolatorTest"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator" "org.apache.commons.math.ode.DummyStepInterpolator"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator" "org.apache.commons.math.ode.DummyStepInterpolatorTest"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator.ErrorGeneratingInterpolator()" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator()"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator" "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator.ErrorGeneratingInterpolator()"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator.ErrorGeneratingInterpolator(double[],boolean)" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(double[],boolean)"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator" "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator.ErrorGeneratingInterpolator(double[],boolean)"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator.computeInterpolatedState(double,double)" "org.apache.commons.math.ode.DerivativeException.DerivativeException(Throwable)"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator" "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator.computeInterpolatedState(double,double)"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator" "org.apache.commons.math.ode.DummyStepInterpolatorTest.ErrorGeneratingInterpolator.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest" "junit.framework.TestCase"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.StatisticalSummaryValuesTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.StatisticalSummaryValuesTest(String)"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.setUp()"
reference "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.suite()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.class$org$apache$commons$math$stat$descriptive$StatisticalSummaryValuesTest : Class"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.suite()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.suite()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testSerialization()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.StatisticalSummaryValues(double,double,long,double,double,double)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testSerialization()" "org.apache.commons.math.TestUtils.checkSerializedEquality(Object)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testSerialization()" "org.apache.commons.math.TestUtils.serializeAndRecover(Object)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testSerialization()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.verifyEquality(StatisticalSummaryValues,StatisticalSummaryValues)"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testSerialization()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.StatisticalSummaryValues(double,double,long,double,double,double)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.equals(Object)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.assertFalse(String,boolean)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.hashCode()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.assertEquals(String,int,int)"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.testEqualsAndHashCode()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.verifyEquality(StatisticalSummaryValues,StatisticalSummaryValues)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getN()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.verifyEquality(StatisticalSummaryValues,StatisticalSummaryValues)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.assertEquals(String,long,long)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.verifyEquality(StatisticalSummaryValues,StatisticalSummaryValues)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getSum()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.verifyEquality(StatisticalSummaryValues,StatisticalSummaryValues)" "org.apache.commons.math.TestUtils.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.verifyEquality(StatisticalSummaryValues,StatisticalSummaryValues)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getVariance()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.verifyEquality(StatisticalSummaryValues,StatisticalSummaryValues)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getStandardDeviation()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.verifyEquality(StatisticalSummaryValues,StatisticalSummaryValues)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMean()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.verifyEquality(StatisticalSummaryValues,StatisticalSummaryValues)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMin()"
call "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.verifyEquality(StatisticalSummaryValues,StatisticalSummaryValues)" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.getMax()"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.verifyEquality(StatisticalSummaryValues,StatisticalSummaryValues)"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.class$(String)"
contain "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest" "org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest.class$org$apache$commons$math$stat$descriptive$StatisticalSummaryValuesTest : Class"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.EstimationException"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "junit.framework.TestCase"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LevenbergMarquardtEstimatorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LevenbergMarquardtEstimatorTest(String)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.LinearProblem(LevenbergMarquardtEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.getUnboundParameters()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTrivial()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.LinearProblem(LevenbergMarquardtEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testQRColumnsPermutation()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.LinearProblem(LevenbergMarquardtEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNoDependency()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.LinearProblem(LevenbergMarquardtEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testOneSet()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.LinearProblem(LevenbergMarquardtEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testTwoSets()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.LinearProblem(LevenbergMarquardtEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertTrue(boolean)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.getResidual()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.getPartial(EstimatedParameter)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testNonInversible()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.LinearProblem(LevenbergMarquardtEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testIllConditioned()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersSimple()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersSimple()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersSimple()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.LinearProblem(LevenbergMarquardtEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersSimple()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersSimple()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersSimple()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersSimple()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersSimple()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.LinearProblem(LevenbergMarquardtEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testMoreEstimatedParametersUnsorted()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.LinearProblem(LevenbergMarquardtEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testRedundantEquations()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.LinearProblem(LevenbergMarquardtEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertTrue(boolean)"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testInconsistentEquations()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testControlParameters()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.Circle(double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testControlParameters()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.addPoint(double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testControlParameters()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.checkEstimate(EstimationProblem,double,int,double,double,double,boolean)"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testControlParameters()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.checkEstimate(EstimationProblem,double,int,double,double,double,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.checkEstimate(EstimationProblem,double,int,double,double,double,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setInitialStepBoundFactor(double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.checkEstimate(EstimationProblem,double,int,double,double,double,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setMaxCostEval(int)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.checkEstimate(EstimationProblem,double,int,double,double,double,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setCostRelativeTolerance(double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.checkEstimate(EstimationProblem,double,int,double,double,double,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setParRelativeTolerance(double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.checkEstimate(EstimationProblem,double,int,double,double,double,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setOrthoTolerance(double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.checkEstimate(EstimationProblem,double,int,double,double,double,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.checkEstimate(EstimationProblem,double,int,double,double,double,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertTrue(boolean)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.checkEstimate(EstimationProblem,double,int,double,double,double,boolean)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.fail(String)"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.checkEstimate(EstimationProblem,double,int,double,double,double,boolean)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.Circle(double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.addPoint(double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getCostEvaluations()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertTrue(boolean)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getJacobianEvaluations()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getM()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getRadius()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getX()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getY()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFitting()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.Circle(double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.addPoint(double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.LevenbergMarquardtEstimator()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getCostEvaluations()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertTrue(boolean)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getJacobianEvaluations()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getRadius()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getX()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getY()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.testCircleFittingBadInit()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.suite()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.class$org$apache$commons$math$estimation$LevenbergMarquardtEstimatorTest : Class"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.suite()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.class$(String)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.suite()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.class$(String)"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.class$org$apache$commons$math$estimation$LevenbergMarquardtEstimatorTest : Class"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince54Integrator"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest" "org.apache.commons.math.ode.ContinuousOutputModel"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest" "org.apache.commons.math.ode.IntegratorException"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.DormandPrince54StepInterpolatorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.DormandPrince54StepInterpolatorTest(String)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DormandPrince54Integrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DormandPrince54Integrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DormandPrince54Integrator.getStepHandler()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testSerialization()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.{...}"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.DormandPrince54Integrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.DormandPrince54Integrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.testClone()"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.suite()" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.class$org$apache$commons$math$ode$DormandPrince54StepInterpolatorTest : Class"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.suite()" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.class$(String)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.suite()"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.class$(String)"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.class$org$apache$commons$math$ode$DormandPrince54StepInterpolatorTest : Class"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.random.TestRandomGenerator"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.random.RandomDataImpl"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.stat.Frequency"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.random.RandomDataTest"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.stat.inference.ChiSquareTestImpl"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.AbstractRandomGeneratorTest(String)" "org.apache.commons.math.random.RandomDataTest.RandomDataTest(String)"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.AbstractRandomGeneratorTest(String)" "org.apache.commons.math.random.TestRandomGenerator.TestRandomGenerator()"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.AbstractRandomGeneratorTest(String)" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testGenerator : TestRandomGenerator"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.AbstractRandomGeneratorTest(String)" "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl(RandomGenerator)"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.AbstractRandomGeneratorTest(String)" "org.apache.commons.math.random.AbstractRandomGeneratorTest.randomData : RandomDataImpl"
contain "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.random.AbstractRandomGeneratorTest.AbstractRandomGeneratorTest(String)"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.suite()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.class$org$apache$commons$math$random$AbstractRandomGeneratorTest : Class"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.suite()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.class$(String)"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.random.AbstractRandomGeneratorTest.suite()"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextInt()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testGenerator : TestRandomGenerator"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextInt()" "org.apache.commons.math.random.TestRandomGenerator.nextInt(int)"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextInt()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.fail(String)"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextInt()" "org.apache.commons.math.stat.Frequency.Frequency()"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextInt()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.smallSampleSize : long"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextInt()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.assertTrue(String,boolean)"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextInt()" "org.apache.commons.math.stat.Frequency.addValue(int)"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextInt()" "org.apache.commons.math.stat.Frequency.getCount(int)"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextInt()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testStatistic : ChiSquareTestImpl"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextInt()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.expected : double[]"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextInt()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
contain "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextInt()"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextLong()" "org.apache.commons.math.stat.Frequency.Frequency()"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextLong()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.smallSampleSize : long"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextLong()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testGenerator : TestRandomGenerator"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextLong()" "org.apache.commons.math.random.TestRandomGenerator.nextLong()"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextLong()" "org.apache.commons.math.stat.Frequency.addValue(int)"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextLong()" "org.apache.commons.math.stat.Frequency.getCount(int)"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextLong()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testStatistic : ChiSquareTestImpl"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextLong()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.expected : double[]"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextLong()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextLong()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextLong()"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextBoolean()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.smallSampleSize : long"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextBoolean()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testGenerator : TestRandomGenerator"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextBoolean()" "org.apache.commons.math.random.TestRandomGenerator.nextBoolean()"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextBoolean()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testStatistic : ChiSquareTestImpl"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextBoolean()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextBoolean()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextBoolean()"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextFloat()" "org.apache.commons.math.stat.Frequency.Frequency()"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextFloat()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.smallSampleSize : long"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextFloat()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testGenerator : TestRandomGenerator"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextFloat()" "org.apache.commons.math.random.TestRandomGenerator.nextFloat()"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextFloat()" "org.apache.commons.math.stat.Frequency.addValue(int)"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextFloat()" "org.apache.commons.math.stat.Frequency.getCount(int)"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextFloat()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testStatistic : ChiSquareTestImpl"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextFloat()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.expected : double[]"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextFloat()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
call "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextFloat()" "org.apache.commons.math.random.AbstractRandomGeneratorTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testNextFloat()"
contain "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.random.AbstractRandomGeneratorTest.class$(String)"
reference "org.apache.commons.math.random.AbstractRandomGeneratorTest.testGenerator : TestRandomGenerator" "org.apache.commons.math.random.TestRandomGenerator"
contain "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.random.AbstractRandomGeneratorTest.testGenerator : TestRandomGenerator"
contain "org.apache.commons.math.random.AbstractRandomGeneratorTest" "org.apache.commons.math.random.AbstractRandomGeneratorTest.class$org$apache$commons$math$random$AbstractRandomGeneratorTest : Class"
reference "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction.HelicalValleyFunction(double[],double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction" "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction.HelicalValleyFunction(double[],double)"
reference "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction" "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction" "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction.getResiduals()"
contain "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction" "org.apache.commons.math.estimation.MinpackTest.HelicalValleyFunction.twoPi : double"
reference "org.apache.commons.math.util.DefaultTransformerTest" "org.apache.commons.math.util.DefaultTransformer"
reference "org.apache.commons.math.util.DefaultTransformerTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.util.DefaultTransformerTest" "junit.framework.TestCase"
call "org.apache.commons.math.util.DefaultTransformerTest.DefaultTransformerTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.util.DefaultTransformerTest" "org.apache.commons.math.util.DefaultTransformerTest.DefaultTransformerTest()"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformDouble()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformDouble()" "org.apache.commons.math.util.DefaultTransformer.transform(Object)"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformDouble()" "org.apache.commons.math.util.DefaultTransformerTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.util.DefaultTransformerTest" "org.apache.commons.math.util.DefaultTransformerTest.testTransformDouble()"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformNull()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformNull()" "org.apache.commons.math.util.DefaultTransformer.transform(Object)"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformNull()" "org.apache.commons.math.util.DefaultTransformerTest.fail(String)"
contain "org.apache.commons.math.util.DefaultTransformerTest" "org.apache.commons.math.util.DefaultTransformerTest.testTransformNull()"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformInteger()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformInteger()" "org.apache.commons.math.util.DefaultTransformer.transform(Object)"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformInteger()" "org.apache.commons.math.util.DefaultTransformerTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.util.DefaultTransformerTest" "org.apache.commons.math.util.DefaultTransformerTest.testTransformInteger()"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformBigDecimal()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformBigDecimal()" "org.apache.commons.math.util.DefaultTransformer.transform(Object)"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformBigDecimal()" "org.apache.commons.math.util.DefaultTransformerTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.util.DefaultTransformerTest" "org.apache.commons.math.util.DefaultTransformerTest.testTransformBigDecimal()"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformString()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformString()" "org.apache.commons.math.util.DefaultTransformer.transform(Object)"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformString()" "org.apache.commons.math.util.DefaultTransformerTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.util.DefaultTransformerTest" "org.apache.commons.math.util.DefaultTransformerTest.testTransformString()"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformObject()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformObject()" "org.apache.commons.math.util.DefaultTransformer.transform(Object)"
call "org.apache.commons.math.util.DefaultTransformerTest.testTransformObject()" "org.apache.commons.math.util.DefaultTransformerTest.fail(String)"
contain "org.apache.commons.math.util.DefaultTransformerTest" "org.apache.commons.math.util.DefaultTransformerTest.testTransformObject()"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler" "junit.framework.Assert"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.maxError : double"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.pb : TestProblem3"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.reset()" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.maxError : double"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.reset()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.pb : TestProblem3"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.maxError : double"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.pb : TestProblem3" "org.apache.commons.math.ode.TestProblem3"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.pb : TestProblem3"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.maxError : double"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile" "org.apache.commons.math.stat.descriptive.rank.Percentile"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.goodPercentile()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.this$0 : DescriptiveStatisticsTest"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.goodPercentile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.goodPercentile()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.percentile : Percentile"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.goodPercentile()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.setQuantile(double)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.percentile : Percentile"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.setQuantile(double)" "org.apache.commons.math.stat.descriptive.rank.Percentile.setQuantile(double)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.setQuantile(double)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.percentile : Percentile"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.evaluate(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.evaluate(double[])" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.evaluate(double[])"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.evaluate(double[])"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.percentile : Percentile" "org.apache.commons.math.stat.descriptive.rank.Percentile"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.percentile : Percentile"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.this$0 : DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.this$0 : DescriptiveStatisticsTest"
reference "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.random.ValueServer"
reference "org.apache.commons.math.random.ValueServerTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.RetryTestCase"
reference "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
call "org.apache.commons.math.random.ValueServerTest.ValueServerTest(String)" "org.apache.commons.math.RetryTestCase.RetryTestCase(String)"
call "org.apache.commons.math.random.ValueServerTest.ValueServerTest(String)" "org.apache.commons.math.random.ValueServer.ValueServer()"
reference "org.apache.commons.math.random.ValueServerTest.ValueServerTest(String)" "org.apache.commons.math.random.ValueServerTest.vs : ValueServer"
contain "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.random.ValueServerTest.ValueServerTest(String)"
reference "org.apache.commons.math.random.ValueServerTest.setUp()" "org.apache.commons.math.random.ValueServerTest.vs : ValueServer"
call "org.apache.commons.math.random.ValueServerTest.setUp()" "org.apache.commons.math.random.ValueServer.setMode(int)"
call "org.apache.commons.math.random.ValueServerTest.setUp()" "org.apache.commons.math.random.ValueServer.setValuesFileURL(URL)"
call "org.apache.commons.math.random.ValueServerTest.setUp()" "org.apache.commons.math.random.ValueServerTest.fail(String)"
contain "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.random.ValueServerTest.setUp()"
reference "org.apache.commons.math.random.ValueServerTest.suite()" "org.apache.commons.math.random.ValueServerTest.class$org$apache$commons$math$random$ValueServerTest : Class"
call "org.apache.commons.math.random.ValueServerTest.suite()" "org.apache.commons.math.random.ValueServerTest.class$(String)"
call "org.apache.commons.math.random.ValueServerTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.random.ValueServerTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.random.ValueServerTest.suite()"
reference "org.apache.commons.math.random.ValueServerTest.testNextDigest()" "org.apache.commons.math.random.ValueServerTest.vs : ValueServer"
call "org.apache.commons.math.random.ValueServerTest.testNextDigest()" "org.apache.commons.math.random.ValueServer.computeDistribution()"
call "org.apache.commons.math.random.ValueServerTest.testNextDigest()" "org.apache.commons.math.random.ValueServer.getEmpiricalDistribution()"
call "org.apache.commons.math.random.ValueServerTest.testNextDigest()" "org.apache.commons.math.random.ValueServerTest.assertTrue(String,boolean)"
call "org.apache.commons.math.random.ValueServerTest.testNextDigest()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.random.ValueServerTest.testNextDigest()" "org.apache.commons.math.random.ValueServer.getNext()"
call "org.apache.commons.math.random.ValueServerTest.testNextDigest()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
call "org.apache.commons.math.random.ValueServerTest.testNextDigest()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getMean()"
call "org.apache.commons.math.random.ValueServerTest.testNextDigest()" "org.apache.commons.math.random.ValueServerTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.random.ValueServerTest.testNextDigest()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.getStandardDeviation()"
call "org.apache.commons.math.random.ValueServerTest.testNextDigest()" "org.apache.commons.math.random.ValueServer.computeDistribution(int)"
contain "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.random.ValueServerTest.testNextDigest()"
reference "org.apache.commons.math.random.ValueServerTest.testNextDigestFail()" "org.apache.commons.math.random.ValueServerTest.vs : ValueServer"
call "org.apache.commons.math.random.ValueServerTest.testNextDigestFail()" "org.apache.commons.math.random.ValueServer.getNext()"
call "org.apache.commons.math.random.ValueServerTest.testNextDigestFail()" "org.apache.commons.math.random.ValueServerTest.fail(String)"
contain "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.random.ValueServerTest.testNextDigestFail()"
reference "org.apache.commons.math.random.ValueServerTest.testReplay()" "org.apache.commons.math.random.ValueServerTest.vs : ValueServer"
call "org.apache.commons.math.random.ValueServerTest.testReplay()" "org.apache.commons.math.random.ValueServer.setMode(int)"
call "org.apache.commons.math.random.ValueServerTest.testReplay()" "org.apache.commons.math.random.ValueServer.resetReplayFile()"
call "org.apache.commons.math.random.ValueServerTest.testReplay()" "org.apache.commons.math.random.ValueServer.getNext()"
call "org.apache.commons.math.random.ValueServerTest.testReplay()" "org.apache.commons.math.random.ValueServerTest.assertEquals(double,double,double)"
call "org.apache.commons.math.random.ValueServerTest.testReplay()" "org.apache.commons.math.random.ValueServer.closeReplayFile()"
contain "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.random.ValueServerTest.testReplay()"
reference "org.apache.commons.math.random.ValueServerTest.testModes()" "org.apache.commons.math.random.ValueServerTest.vs : ValueServer"
call "org.apache.commons.math.random.ValueServerTest.testModes()" "org.apache.commons.math.random.ValueServer.setMode(int)"
call "org.apache.commons.math.random.ValueServerTest.testModes()" "org.apache.commons.math.random.ValueServer.setMu(double)"
call "org.apache.commons.math.random.ValueServerTest.testModes()" "org.apache.commons.math.random.ValueServer.getMu()"
call "org.apache.commons.math.random.ValueServerTest.testModes()" "org.apache.commons.math.random.ValueServer.getNext()"
call "org.apache.commons.math.random.ValueServerTest.testModes()" "org.apache.commons.math.random.ValueServerTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.random.ValueServerTest.testModes()" "org.apache.commons.math.random.ValueServerTest.assertTrue(boolean)"
call "org.apache.commons.math.random.ValueServerTest.testModes()" "org.apache.commons.math.random.ValueServer.setSigma(double)"
call "org.apache.commons.math.random.ValueServerTest.testModes()" "org.apache.commons.math.random.ValueServer.getSigma()"
call "org.apache.commons.math.random.ValueServerTest.testModes()" "org.apache.commons.math.random.ValueServerTest.assertTrue(String,boolean)"
call "org.apache.commons.math.random.ValueServerTest.testModes()" "org.apache.commons.math.random.ValueServerTest.fail(String)"
contain "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.random.ValueServerTest.testModes()"
reference "org.apache.commons.math.random.ValueServerTest.testFill()" "org.apache.commons.math.random.ValueServerTest.vs : ValueServer"
call "org.apache.commons.math.random.ValueServerTest.testFill()" "org.apache.commons.math.random.ValueServer.setMode(int)"
call "org.apache.commons.math.random.ValueServerTest.testFill()" "org.apache.commons.math.random.ValueServer.setMu(double)"
call "org.apache.commons.math.random.ValueServerTest.testFill()" "org.apache.commons.math.random.ValueServer.fill(double[])"
call "org.apache.commons.math.random.ValueServerTest.testFill()" "org.apache.commons.math.random.ValueServerTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.random.ValueServerTest.testFill()" "org.apache.commons.math.random.ValueServer.fill(int)"
contain "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.random.ValueServerTest.testFill()"
reference "org.apache.commons.math.random.ValueServerTest.testProperties()" "org.apache.commons.math.random.ValueServerTest.vs : ValueServer"
call "org.apache.commons.math.random.ValueServerTest.testProperties()" "org.apache.commons.math.random.ValueServer.setMode(int)"
call "org.apache.commons.math.random.ValueServerTest.testProperties()" "org.apache.commons.math.random.ValueServer.getMode()"
call "org.apache.commons.math.random.ValueServerTest.testProperties()" "org.apache.commons.math.random.ValueServerTest.assertEquals(String,int,int)"
call "org.apache.commons.math.random.ValueServerTest.testProperties()" "org.apache.commons.math.random.ValueServer.setValuesFileURL(String)"
call "org.apache.commons.math.random.ValueServerTest.testProperties()" "org.apache.commons.math.random.ValueServer.getValuesFileURL()"
call "org.apache.commons.math.random.ValueServerTest.testProperties()" "org.apache.commons.math.random.ValueServerTest.assertEquals(String,String,String)"
contain "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.random.ValueServerTest.testProperties()"
contain "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.random.ValueServerTest.class$(String)"
reference "org.apache.commons.math.random.ValueServerTest.vs : ValueServer" "org.apache.commons.math.random.ValueServer"
contain "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.random.ValueServerTest.vs : ValueServer"
contain "org.apache.commons.math.random.ValueServerTest" "org.apache.commons.math.random.ValueServerTest.class$org$apache$commons$math$random$ValueServerTest : Class"
reference "org.apache.commons.math.stat.descriptive.moment.MeanTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.moment.MeanTest" "org.apache.commons.math.stat.descriptive.moment.Mean"
reference "org.apache.commons.math.stat.descriptive.moment.MeanTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.moment.MeanTest.MeanTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.moment.MeanTest" "org.apache.commons.math.stat.descriptive.moment.MeanTest.MeanTest(String)"
reference "org.apache.commons.math.stat.descriptive.moment.MeanTest.suite()" "org.apache.commons.math.stat.descriptive.moment.MeanTest.class$org$apache$commons$math$stat$descriptive$moment$MeanTest : Class"
call "org.apache.commons.math.stat.descriptive.moment.MeanTest.suite()" "org.apache.commons.math.stat.descriptive.moment.MeanTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.moment.MeanTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.moment.MeanTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.moment.MeanTest" "org.apache.commons.math.stat.descriptive.moment.MeanTest.suite()"
call "org.apache.commons.math.stat.descriptive.moment.MeanTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
contain "org.apache.commons.math.stat.descriptive.moment.MeanTest" "org.apache.commons.math.stat.descriptive.moment.MeanTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.MeanTest.expectedValue()" "org.apache.commons.math.stat.descriptive.moment.MeanTest.mean : double"
contain "org.apache.commons.math.stat.descriptive.moment.MeanTest" "org.apache.commons.math.stat.descriptive.moment.MeanTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.moment.MeanTest.testSmallSamples()" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
call "org.apache.commons.math.stat.descriptive.moment.MeanTest.testSmallSamples()" "org.apache.commons.math.stat.descriptive.moment.Mean.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.MeanTest.testSmallSamples()" "org.apache.commons.math.stat.descriptive.moment.MeanTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.moment.MeanTest.testSmallSamples()" "org.apache.commons.math.stat.descriptive.moment.Mean.increment(double)"
call "org.apache.commons.math.stat.descriptive.moment.MeanTest.testSmallSamples()" "org.apache.commons.math.stat.descriptive.moment.MeanTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.moment.MeanTest" "org.apache.commons.math.stat.descriptive.moment.MeanTest.testSmallSamples()"
contain "org.apache.commons.math.stat.descriptive.moment.MeanTest" "org.apache.commons.math.stat.descriptive.moment.MeanTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.moment.MeanTest.stat : Mean" "org.apache.commons.math.stat.descriptive.moment.Mean"
contain "org.apache.commons.math.stat.descriptive.moment.MeanTest" "org.apache.commons.math.stat.descriptive.moment.MeanTest.stat : Mean"
contain "org.apache.commons.math.stat.descriptive.moment.MeanTest" "org.apache.commons.math.stat.descriptive.moment.MeanTest.class$org$apache$commons$math$stat$descriptive$moment$MeanTest : Class"
reference "org.apache.commons.math.linear.QRDecompositionImplTest" "double[]"
reference "org.apache.commons.math.linear.QRDecompositionImplTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.RealMatrixImpl"
reference "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImpl"
reference "org.apache.commons.math.linear.QRDecompositionImplTest" "junit.framework.TestCase"
reference "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecomposition"
reference "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.RealMatrix"
reference "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.MatrixUtils"
call "org.apache.commons.math.linear.QRDecompositionImplTest.QRDecompositionImplTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.QRDecompositionImplTest(String)" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x3NonSingular : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.QRDecompositionImplTest(String)" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x3Singular : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.QRDecompositionImplTest(String)" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x4 : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.QRDecompositionImplTest(String)" "org.apache.commons.math.linear.QRDecompositionImplTest.testData4x3 : double[][]"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.QRDecompositionImplTest(String)"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.suite()" "org.apache.commons.math.linear.QRDecompositionImplTest.class$org$apache$commons$math$linear$QRDecompositionImplTest : Class"
call "org.apache.commons.math.linear.QRDecompositionImplTest.suite()" "org.apache.commons.math.linear.QRDecompositionImplTest.class$(String)"
call "org.apache.commons.math.linear.QRDecompositionImplTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.linear.QRDecompositionImplTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.suite()"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testDimensions()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x3NonSingular : double[][]"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testDimensions()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testDimensions()" "org.apache.commons.math.linear.QRDecompositionImpl.QRDecompositionImpl(RealMatrix)"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testDimensions()" "org.apache.commons.math.linear.QRDecomposition.getQ()"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testDimensions()" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testDimensions()" "org.apache.commons.math.linear.QRDecompositionImplTest.assertEquals(String,int,int)"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testDimensions()" "org.apache.commons.math.linear.RealMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testDimensions()" "org.apache.commons.math.linear.QRDecomposition.getR()"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testDimensions()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData4x3 : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testDimensions()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x4 : double[][]"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.testDimensions()"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x3NonSingular : double[][]"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR()" "org.apache.commons.math.linear.QRDecompositionImpl.QRDecompositionImpl(RealMatrix)"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR()" "org.apache.commons.math.linear.QRDecomposition.getQ()"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR()" "org.apache.commons.math.linear.QRDecomposition.getR()"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR()" "org.apache.commons.math.linear.RealMatrix.multiply(RealMatrix)"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR()" "org.apache.commons.math.linear.RealMatrix.subtract(RealMatrix)"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR()" "org.apache.commons.math.linear.RealMatrix.getNorm()"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR()" "org.apache.commons.math.linear.QRDecompositionImplTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x3Singular : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x4 : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData4x3 : double[][]"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.testAEqualQR()"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x3NonSingular : double[][]"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()" "org.apache.commons.math.linear.QRDecompositionImpl.QRDecompositionImpl(RealMatrix)"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()" "org.apache.commons.math.linear.QRDecompositionImpl.getQ()"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()" "org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(int)"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()" "org.apache.commons.math.linear.RealMatrix.transpose()"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()" "org.apache.commons.math.linear.RealMatrix.multiply(RealMatrix)"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()" "org.apache.commons.math.linear.RealMatrix.subtract(RealMatrix)"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()" "org.apache.commons.math.linear.RealMatrix.getNorm()"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()" "org.apache.commons.math.linear.QRDecompositionImplTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x3Singular : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x4 : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData4x3 : double[][]"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.testQOrthogonal()"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testRUpperTriangular()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x3NonSingular : double[][]"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testRUpperTriangular()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testRUpperTriangular()" "org.apache.commons.math.linear.QRDecompositionImpl.QRDecompositionImpl(RealMatrix)"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testRUpperTriangular()" "org.apache.commons.math.linear.QRDecompositionImpl.getR()"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testRUpperTriangular()" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testRUpperTriangular()" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
call "org.apache.commons.math.linear.QRDecompositionImplTest.testRUpperTriangular()" "org.apache.commons.math.linear.QRDecompositionImplTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testRUpperTriangular()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x4 : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testRUpperTriangular()" "org.apache.commons.math.linear.QRDecompositionImplTest.testData4x3 : double[][]"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.testRUpperTriangular()"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.class$(String)"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x3NonSingular : double[][]" "double[][]"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x3NonSingular : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x3Singular : double[][]" "double[][]"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x3Singular : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x4 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.testData3x4 : double[][]"
reference "org.apache.commons.math.linear.QRDecompositionImplTest.testData4x3 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.testData4x3 : double[][]"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.entryTolerance : double"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.normTolerance : double"
contain "org.apache.commons.math.linear.QRDecompositionImplTest" "org.apache.commons.math.linear.QRDecompositionImplTest.class$org$apache$commons$math$linear$QRDecompositionImplTest : Class"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.WeightedMeasurement"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.EstimationProblem"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.n : int"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.theoreticalStartCost : double"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.theoreticalMinCost : double"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.theoreticalMinParams : double[]"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.costAccuracy : double"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.paramsAccuracy : double"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.buildArray(int,double)"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.setCostAccuracy(double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.costAccuracy : double"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.setCostAccuracy(double)"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.setParamsAccuracy(double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.paramsAccuracy : double"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.setParamsAccuracy(double)"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getN()" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.parameters : EstimatedParameter[]"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getN()"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalStartCost(double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.costAccuracy : double"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalStartCost(double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.theoreticalStartCost : double"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalStartCost(double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.m : int"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalStartCost(double)"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalMinCost(double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.costAccuracy : double"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalMinCost(double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.theoreticalMinCost : double"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalMinCost(double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.m : int"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalMinCost(double)"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalMinParams()" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.theoreticalMinParams : double[]"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalMinParams()" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalMinParams()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalMinParams()" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.paramsAccuracy : double"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.checkTheoreticalMinParams()"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getMeasurements()" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.m : int"
call "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getMeasurements()" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackMeasurement.MinpackMeasurement(MinpackTest.MinpackFunction,int)"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getMeasurements()"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getUnboundParameters()" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.parameters : EstimatedParameter[]"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getUnboundParameters()"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getAllParameters()" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.parameters : EstimatedParameter[]"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getAllParameters()"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getJacobian()"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.getResiduals()"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.n : int"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.parameters : EstimatedParameter[]" "org.apache.commons.math.estimation.EstimatedParameter[]"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.parameters : EstimatedParameter[]"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.theoreticalStartCost : double"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.theoreticalMinCost : double"
reference "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.theoreticalMinParams : double[]" "double[]"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.theoreticalMinParams : double[]"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.costAccuracy : double"
contain "org.apache.commons.math.estimation.MinpackTest.MinpackFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.paramsAccuracy : double"
reference "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.Variance"
reference "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation"
reference "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.SecondMoment"
reference "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.Mean"
reference "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.VarianceTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.VarianceTest(String)"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()"
contain "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.VarianceTest.suite()" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.class$org$apache$commons$math$stat$descriptive$moment$VarianceTest : Class"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.suite()" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.suite()"
reference "org.apache.commons.math.stat.descriptive.moment.VarianceTest.expectedValue()" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.var : double"
contain "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.StandardDeviation()"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.increment(double)"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testNaN()"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment()"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.Variance.setBiasCorrected(boolean)"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.populationVariance(double[])"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.Variance.incrementAll(double[])"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.Variance.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean,SecondMoment)"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation()" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(boolean)"
contain "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testPopulation()"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.populationVariance(double[])" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
call "org.apache.commons.math.stat.descriptive.moment.VarianceTest.populationVariance(double[])" "org.apache.commons.math.stat.descriptive.moment.Mean.evaluate(double[])"
contain "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.populationVariance(double[])"
contain "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.moment.VarianceTest.stat : Variance" "org.apache.commons.math.stat.descriptive.moment.Variance"
contain "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.stat : Variance"
contain "org.apache.commons.math.stat.descriptive.moment.VarianceTest" "org.apache.commons.math.stat.descriptive.moment.VarianceTest.class$org$apache$commons$math$stat$descriptive$moment$VarianceTest : Class"
reference "org.apache.commons.math.analysis.RombergIntegratorTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.analysis.RombergIntegratorTest" "org.apache.commons.math.analysis.RombergIntegrator"
reference "org.apache.commons.math.analysis.RombergIntegratorTest" "org.apache.commons.math.analysis.QuinticFunction"
reference "org.apache.commons.math.analysis.RombergIntegratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.RombergIntegratorTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.RombergIntegratorTest" "org.apache.commons.math.analysis.UnivariateRealIntegrator"
call "org.apache.commons.math.analysis.RombergIntegratorTest.RombergIntegratorTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.analysis.RombergIntegratorTest" "org.apache.commons.math.analysis.RombergIntegratorTest.RombergIntegratorTest()"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.RombergIntegrator.RombergIntegrator(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.integrate(double,double)"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.RombergIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.RombergIntegratorTest" "org.apache.commons.math.analysis.RombergIntegratorTest.testSinFunction()"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.RombergIntegrator.RombergIntegrator(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.integrate(double,double)"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.RombergIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.RombergIntegratorTest" "org.apache.commons.math.analysis.RombergIntegratorTest.testQuinticFunction()"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testParameters()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testParameters()" "org.apache.commons.math.analysis.RombergIntegrator.RombergIntegrator(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.integrate(double,double)"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testParameters()" "org.apache.commons.math.analysis.RombergIntegratorTest.fail(String)"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.setMinimalIterationCount(int)"
call "org.apache.commons.math.analysis.RombergIntegratorTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.setMaximalIterationCount(int)"
contain "org.apache.commons.math.analysis.RombergIntegratorTest" "org.apache.commons.math.analysis.RombergIntegratorTest.testParameters()"
reference "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.GillIntegrator"
reference "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.TestProblemAbstract"
reference "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.TestProblemHandler"
reference "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler"
reference "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.StepProblem"
reference "org.apache.commons.math.ode.GillIntegratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.GillIntegratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.TestProblemFactory"
reference "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.FirstOrderIntegrator"
call "org.apache.commons.math.ode.GillIntegratorTest.GillIntegratorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.GillIntegratorTest.GillIntegratorTest(String)"
call "org.apache.commons.math.ode.GillIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.GillIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.GillIntegrator.GillIntegrator(double)"
call "org.apache.commons.math.ode.GillIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.GillIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.GillIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GillIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.GillIntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.GillIntegratorTest.testDimensionCheck()"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemFactory.getProblems()"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.clone()"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getFinalTime()"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getInitialTime()"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.GillIntegrator.GillIntegrator(double)"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getSwitchingFunctions()"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getInitialState()"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getDimension()"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.GillIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.GillIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.GillIntegratorTest.testDecreasingSteps()"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.GillIntegrator.GillIntegrator(double)"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getLastError()"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.GillIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.GillIntegratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.getName()"
call "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.GillIntegratorTest.assertEquals(String,String)"
contain "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.GillIntegratorTest.testSmallStep()"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.GillIntegrator.GillIntegrator(double)"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getLastError()"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.GillIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()" "org.apache.commons.math.ode.GillIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.GillIntegratorTest.testBigStep()"
call "org.apache.commons.math.ode.GillIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.GillIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.GillIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.GillIntegratorTest.testKepler()" "org.apache.commons.math.ode.GillIntegrator.GillIntegrator(double)"
call "org.apache.commons.math.ode.GillIntegratorTest.testKepler()" "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.KeplerStepHandler(TestProblem3)"
call "org.apache.commons.math.ode.GillIntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GillIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.GillIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.GillIntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
contain "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.GillIntegratorTest.testKepler()"
call "org.apache.commons.math.ode.GillIntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.StepProblem.StepProblem(double,double,double)"
call "org.apache.commons.math.ode.GillIntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.GillIntegrator.GillIntegrator(double)"
call "org.apache.commons.math.ode.GillIntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.GillIntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GillIntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.GillIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.GillIntegratorTest.testUnstableDerivative()"
reference "org.apache.commons.math.ode.GillIntegratorTest.suite()" "org.apache.commons.math.ode.GillIntegratorTest.class$org$apache$commons$math$ode$GillIntegratorTest : Class"
call "org.apache.commons.math.ode.GillIntegratorTest.suite()" "org.apache.commons.math.ode.GillIntegratorTest.class$(String)"
call "org.apache.commons.math.ode.GillIntegratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.GillIntegratorTest.suite()"
contain "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.GillIntegratorTest.class$(String)"
contain "org.apache.commons.math.ode.GillIntegratorTest" "org.apache.commons.math.ode.GillIntegratorTest.class$org$apache$commons$math$ode$GillIntegratorTest : Class"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest" "org.apache.commons.math.stat.descriptive.moment.FourthMoment"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest.FourthMomentTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest" "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest.FourthMomentTest(String)"
call "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.FourthMoment()"
contain "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest" "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest.expectedValue()" "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest.fourthMoment : double"
contain "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest" "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest.expectedValue()"
reference "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest.stat : FourthMoment" "org.apache.commons.math.stat.descriptive.moment.FourthMoment"
contain "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest" "org.apache.commons.math.stat.descriptive.moment.FourthMomentTest.stat : FourthMoment"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler" "junit.framework.Assert"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.pb : TestProblem3"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.reset()"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.reset()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.nbSteps : int"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.reset()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.maxError : double"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.reset()"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.nbSteps : int"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.pb : TestProblem3"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.maxError : double"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.nbSteps : int"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.maxError : double"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.pb : TestProblem3" "org.apache.commons.math.ode.TestProblem3"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.pb : TestProblem3"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile" "org.apache.commons.math.stat.descriptive.rank.Percentile"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile.subPercentile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile.subPercentile()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile.this$0 : DescriptiveStatisticsTest"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile.subPercentile()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile.getQuantile()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile.evaluate(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile.evaluate(double[])" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile.getQuantile()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile.evaluate(double[])"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile.this$0 : DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile.this$0 : DescriptiveStatisticsTest"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "junit.framework.TestCase"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.CertifiedDataAbstractTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.CertifiedDataAbstractTest()"
call "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.setUp()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance()"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.setUp()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.descriptives : DescriptiveStatistics"
call "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.setUp()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.setUp()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.summaries : SummaryStatistics"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.setUp()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.certifiedValues : Map"
call "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.setUp()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.loadData()"
contain "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.setUp()"
call "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.loadData()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.getResourceName()"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.loadData()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.descriptives : DescriptiveStatistics"
call "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.loadData()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.loadData()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.summaries : SummaryStatistics"
call "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.loadData()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.loadData()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.certifiedValues : Map"
contain "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.loadData()"
contain "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.getResourceName()"
contain "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.getMaximumAbsoluteError()"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.tearDown()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.descriptives : DescriptiveStatistics"
call "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.tearDown()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.clear()"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.tearDown()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.summaries : SummaryStatistics"
call "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.tearDown()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.clear()"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.tearDown()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.certifiedValues : Map"
contain "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.tearDown()"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.testCertifiedValues()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.certifiedValues : Map"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.testCertifiedValues()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.summaries : SummaryStatistics"
call "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.testCertifiedValues()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.getProperty(Object,String)"
call "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.testCertifiedValues()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.getMaximumAbsoluteError()"
call "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.testCertifiedValues()" "org.apache.commons.math.TestUtils.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.testCertifiedValues()" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.descriptives : DescriptiveStatistics"
contain "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.testCertifiedValues()"
contain "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.getProperty(Object,String)"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.descriptives : DescriptiveStatistics" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics"
contain "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.descriptives : DescriptiveStatistics"
reference "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.summaries : SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
contain "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.summaries : SummaryStatistics"
contain "org.apache.commons.math.stat.data.CertifiedDataAbstractTest" "org.apache.commons.math.stat.data.CertifiedDataAbstractTest.certifiedValues : Map"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler" "junit.framework.Assert"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.VariableHandler()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.firstTime : boolean"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.VariableHandler()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.minStep : double"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.VariableHandler()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.maxStep : double"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.VariableHandler()"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.reset()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.firstTime : boolean"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.reset()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.minStep : double"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.reset()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.maxStep : double"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.reset()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.firstTime : boolean"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.minStep : double"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.maxStep : double"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.handleStep(StepInterpolator,boolean)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.firstTime : boolean"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.minStep : double"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.maxStep : double"
reference "org.apache.commons.math.stat.descriptive.summary.ProductTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.summary.ProductTest" "org.apache.commons.math.stat.descriptive.summary.Product"
reference "org.apache.commons.math.stat.descriptive.summary.ProductTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.summary.ProductTest.ProductTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.summary.ProductTest" "org.apache.commons.math.stat.descriptive.summary.ProductTest.ProductTest(String)"
reference "org.apache.commons.math.stat.descriptive.summary.ProductTest.suite()" "org.apache.commons.math.stat.descriptive.summary.ProductTest.class$org$apache$commons$math$stat$descriptive$summary$ProductTest : Class"
call "org.apache.commons.math.stat.descriptive.summary.ProductTest.suite()" "org.apache.commons.math.stat.descriptive.summary.ProductTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.summary.ProductTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.summary.ProductTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.summary.ProductTest" "org.apache.commons.math.stat.descriptive.summary.ProductTest.suite()"
call "org.apache.commons.math.stat.descriptive.summary.ProductTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.summary.Product.Product()"
contain "org.apache.commons.math.stat.descriptive.summary.ProductTest" "org.apache.commons.math.stat.descriptive.summary.ProductTest.getUnivariateStatistic()"
contain "org.apache.commons.math.stat.descriptive.summary.ProductTest" "org.apache.commons.math.stat.descriptive.summary.ProductTest.getTolerance()"
reference "org.apache.commons.math.stat.descriptive.summary.ProductTest.expectedValue()" "org.apache.commons.math.stat.descriptive.summary.ProductTest.product : double"
contain "org.apache.commons.math.stat.descriptive.summary.ProductTest" "org.apache.commons.math.stat.descriptive.summary.ProductTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.summary.ProductTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.Product.Product()"
call "org.apache.commons.math.stat.descriptive.summary.ProductTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.Product.getResult()"
call "org.apache.commons.math.stat.descriptive.summary.ProductTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.ProductTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.summary.ProductTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.Product.increment(double)"
call "org.apache.commons.math.stat.descriptive.summary.ProductTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.ProductTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.summary.ProductTest" "org.apache.commons.math.stat.descriptive.summary.ProductTest.testSpecialValues()"
contain "org.apache.commons.math.stat.descriptive.summary.ProductTest" "org.apache.commons.math.stat.descriptive.summary.ProductTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.summary.ProductTest.stat : Product" "org.apache.commons.math.stat.descriptive.summary.Product"
contain "org.apache.commons.math.stat.descriptive.summary.ProductTest" "org.apache.commons.math.stat.descriptive.summary.ProductTest.stat : Product"
contain "org.apache.commons.math.stat.descriptive.summary.ProductTest" "org.apache.commons.math.stat.descriptive.summary.ProductTest.class$org$apache$commons$math$stat$descriptive$summary$ProductTest : Class"
reference "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.Fraction"
reference "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.fraction.FractionTest" "junit.framework.TestCase"
call "org.apache.commons.math.fraction.FractionTest.FractionTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.FractionTest()"
call "org.apache.commons.math.fraction.FractionTest.assertFraction(int,int,Fraction)" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionTest.assertFraction(int,int,Fraction)" "org.apache.commons.math.fraction.FractionTest.assertEquals(int,int)"
call "org.apache.commons.math.fraction.FractionTest.assertFraction(int,int,Fraction)" "org.apache.commons.math.fraction.Fraction.getDenominator()"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.assertFraction(int,int,Fraction)"
call "org.apache.commons.math.fraction.FractionTest.testConstructor()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testConstructor()" "org.apache.commons.math.fraction.FractionTest.assertFraction(int,int,Fraction)"
call "org.apache.commons.math.fraction.FractionTest.testConstructor()" "org.apache.commons.math.fraction.FractionTest.fail()"
call "org.apache.commons.math.fraction.FractionTest.testConstructor()" "org.apache.commons.math.fraction.Fraction.Fraction(double)"
call "org.apache.commons.math.fraction.FractionTest.testConstructor()" "org.apache.commons.math.ConvergenceException.getMessage()"
call "org.apache.commons.math.fraction.FractionTest.testConstructor()" "org.apache.commons.math.fraction.FractionTest.fail(String)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testConstructor()"
call "org.apache.commons.math.fraction.FractionTest.testCompareTo()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testCompareTo()" "org.apache.commons.math.fraction.Fraction.compareTo(Object)"
call "org.apache.commons.math.fraction.FractionTest.testCompareTo()" "org.apache.commons.math.fraction.FractionTest.assertEquals(int,int)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testCompareTo()"
call "org.apache.commons.math.fraction.FractionTest.testDoubleValue()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testDoubleValue()" "org.apache.commons.math.fraction.Fraction.doubleValue()"
call "org.apache.commons.math.fraction.FractionTest.testDoubleValue()" "org.apache.commons.math.fraction.FractionTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testDoubleValue()"
call "org.apache.commons.math.fraction.FractionTest.testFloatValue()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testFloatValue()" "org.apache.commons.math.fraction.Fraction.floatValue()"
call "org.apache.commons.math.fraction.FractionTest.testFloatValue()" "org.apache.commons.math.fraction.FractionTest.assertEquals(float,float,float)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testFloatValue()"
call "org.apache.commons.math.fraction.FractionTest.testIntValue()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testIntValue()" "org.apache.commons.math.fraction.Fraction.intValue()"
call "org.apache.commons.math.fraction.FractionTest.testIntValue()" "org.apache.commons.math.fraction.FractionTest.assertEquals(int,int)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testIntValue()"
call "org.apache.commons.math.fraction.FractionTest.testLongValue()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testLongValue()" "org.apache.commons.math.fraction.Fraction.longValue()"
call "org.apache.commons.math.fraction.FractionTest.testLongValue()" "org.apache.commons.math.fraction.FractionTest.assertEquals(long,long)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testLongValue()"
call "org.apache.commons.math.fraction.FractionTest.testConstructorDouble()" "org.apache.commons.math.fraction.Fraction.Fraction(double)"
call "org.apache.commons.math.fraction.FractionTest.testConstructorDouble()" "org.apache.commons.math.fraction.FractionTest.assertFraction(int,int,Fraction)"
call "org.apache.commons.math.fraction.FractionTest.testConstructorDouble()" "org.apache.commons.math.ConvergenceException.getMessage()"
call "org.apache.commons.math.fraction.FractionTest.testConstructorDouble()" "org.apache.commons.math.fraction.FractionTest.fail(String)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testConstructorDouble()"
call "org.apache.commons.math.fraction.FractionTest.testAbs()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testAbs()" "org.apache.commons.math.fraction.Fraction.abs()"
call "org.apache.commons.math.fraction.FractionTest.testAbs()" "org.apache.commons.math.fraction.FractionTest.assertFraction(int,int,Fraction)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testAbs()"
call "org.apache.commons.math.fraction.FractionTest.testReciprocal()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testReciprocal()" "org.apache.commons.math.fraction.Fraction.reciprocal()"
call "org.apache.commons.math.fraction.FractionTest.testReciprocal()" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionTest.testReciprocal()" "org.apache.commons.math.fraction.FractionTest.assertEquals(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testReciprocal()" "org.apache.commons.math.fraction.Fraction.getDenominator()"
call "org.apache.commons.math.fraction.FractionTest.testReciprocal()" "org.apache.commons.math.fraction.FractionTest.fail(String)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testReciprocal()"
call "org.apache.commons.math.fraction.FractionTest.testNegate()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testNegate()" "org.apache.commons.math.fraction.Fraction.negate()"
call "org.apache.commons.math.fraction.FractionTest.testNegate()" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionTest.testNegate()" "org.apache.commons.math.fraction.FractionTest.assertEquals(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testNegate()" "org.apache.commons.math.fraction.Fraction.getDenominator()"
call "org.apache.commons.math.fraction.FractionTest.testNegate()" "org.apache.commons.math.fraction.FractionTest.fail(String)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testNegate()"
call "org.apache.commons.math.fraction.FractionTest.testAdd()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testAdd()" "org.apache.commons.math.fraction.Fraction.add(Fraction)"
call "org.apache.commons.math.fraction.FractionTest.testAdd()" "org.apache.commons.math.fraction.FractionTest.assertFraction(int,int,Fraction)"
reference "org.apache.commons.math.fraction.FractionTest.testAdd()" "org.apache.commons.math.fraction.Fraction.ONE : Fraction"
call "org.apache.commons.math.fraction.FractionTest.testAdd()" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionTest.testAdd()" "org.apache.commons.math.fraction.FractionTest.assertEquals(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testAdd()" "org.apache.commons.math.fraction.Fraction.getDenominator()"
call "org.apache.commons.math.fraction.FractionTest.testAdd()" "org.apache.commons.math.fraction.FractionTest.fail(String)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testAdd()"
call "org.apache.commons.math.fraction.FractionTest.testDivide()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testDivide()" "org.apache.commons.math.fraction.Fraction.divide(Fraction)"
call "org.apache.commons.math.fraction.FractionTest.testDivide()" "org.apache.commons.math.fraction.FractionTest.assertFraction(int,int,Fraction)"
reference "org.apache.commons.math.fraction.FractionTest.testDivide()" "org.apache.commons.math.fraction.Fraction.ZERO : Fraction"
call "org.apache.commons.math.fraction.FractionTest.testDivide()" "org.apache.commons.math.fraction.FractionTest.fail(String)"
call "org.apache.commons.math.fraction.FractionTest.testDivide()" "org.apache.commons.math.fraction.FractionTest.assertSame(Object,Object)"
reference "org.apache.commons.math.fraction.FractionTest.testDivide()" "org.apache.commons.math.fraction.Fraction.ONE : Fraction"
call "org.apache.commons.math.fraction.FractionTest.testDivide()" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionTest.testDivide()" "org.apache.commons.math.fraction.FractionTest.assertEquals(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testDivide()" "org.apache.commons.math.fraction.Fraction.getDenominator()"
call "org.apache.commons.math.fraction.FractionTest.testDivide()" "org.apache.commons.math.fraction.Fraction.reciprocal()"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testDivide()"
call "org.apache.commons.math.fraction.FractionTest.testMultiply()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testMultiply()" "org.apache.commons.math.fraction.Fraction.multiply(Fraction)"
call "org.apache.commons.math.fraction.FractionTest.testMultiply()" "org.apache.commons.math.fraction.FractionTest.assertFraction(int,int,Fraction)"
call "org.apache.commons.math.fraction.FractionTest.testMultiply()" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionTest.testMultiply()" "org.apache.commons.math.fraction.FractionTest.assertEquals(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testMultiply()" "org.apache.commons.math.fraction.Fraction.getDenominator()"
call "org.apache.commons.math.fraction.FractionTest.testMultiply()" "org.apache.commons.math.fraction.FractionTest.fail(String)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testMultiply()"
call "org.apache.commons.math.fraction.FractionTest.testSubtract()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testSubtract()" "org.apache.commons.math.fraction.Fraction.subtract(Fraction)"
call "org.apache.commons.math.fraction.FractionTest.testSubtract()" "org.apache.commons.math.fraction.FractionTest.assertFraction(int,int,Fraction)"
call "org.apache.commons.math.fraction.FractionTest.testSubtract()" "org.apache.commons.math.fraction.FractionTest.fail(String)"
call "org.apache.commons.math.fraction.FractionTest.testSubtract()" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionTest.testSubtract()" "org.apache.commons.math.fraction.FractionTest.assertEquals(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testSubtract()" "org.apache.commons.math.fraction.Fraction.getDenominator()"
call "org.apache.commons.math.fraction.FractionTest.testSubtract()" "org.apache.commons.math.fraction.Fraction.negate()"
reference "org.apache.commons.math.fraction.FractionTest.testSubtract()" "org.apache.commons.math.fraction.Fraction.ONE : Fraction"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testSubtract()"
call "org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode()" "org.apache.commons.math.fraction.Fraction.equals(Object)"
call "org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode()" "org.apache.commons.math.fraction.FractionTest.assertTrue(boolean)"
call "org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode()" "org.apache.commons.math.fraction.FractionTest.assertFalse(boolean)"
call "org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode()" "org.apache.commons.math.fraction.Fraction.hashCode()"
call "org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode()" "org.apache.commons.math.fraction.FractionTest.assertEquals(int,int)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode()"
call "org.apache.commons.math.fraction.FractionTest.testGetReducedFraction()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testGetReducedFraction()" "org.apache.commons.math.fraction.Fraction.getReducedFraction(int,int)"
call "org.apache.commons.math.fraction.FractionTest.testGetReducedFraction()" "org.apache.commons.math.fraction.Fraction.equals(Object)"
call "org.apache.commons.math.fraction.FractionTest.testGetReducedFraction()" "org.apache.commons.math.fraction.FractionTest.assertTrue(boolean)"
reference "org.apache.commons.math.fraction.FractionTest.testGetReducedFraction()" "org.apache.commons.math.fraction.Fraction.ZERO : Fraction"
call "org.apache.commons.math.fraction.FractionTest.testGetReducedFraction()" "org.apache.commons.math.fraction.FractionTest.fail(String)"
call "org.apache.commons.math.fraction.FractionTest.testGetReducedFraction()" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionTest.testGetReducedFraction()" "org.apache.commons.math.fraction.FractionTest.assertEquals(int,int)"
contain "org.apache.commons.math.fraction.FractionTest" "org.apache.commons.math.fraction.FractionTest.testGetReducedFraction()"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest" "org.apache.commons.math.ode.ContinuousOutputModel"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest" "org.apache.commons.math.ode.IntegratorException"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.ClassicalRungeKuttaStepInterpolatorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.ClassicalRungeKuttaStepInterpolatorTest(String)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.getStepHandler()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.testSerialization()"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.suite()" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.class$org$apache$commons$math$ode$ClassicalRungeKuttaStepInterpolatorTest : Class"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.suite()" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.class$(String)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.suite()"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.class$(String)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest.class$org$apache$commons$math$ode$ClassicalRungeKuttaStepInterpolatorTest : Class"
reference "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.Box3DimensionalFunction(int,double[],double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction" "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.Box3DimensionalFunction(int,double[],double)"
reference "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.m : int"
contain "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction" "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.m : int"
contain "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction" "org.apache.commons.math.estimation.MinpackTest.Box3DimensionalFunction.getResiduals()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.WeightedMeasurement"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.PointModel(GaussNewtonEstimatorTest.Circle,double,double)" "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.PointModel(GaussNewtonEstimatorTest.Circle,double,double)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.this$0 : Circle"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.PointModel(GaussNewtonEstimatorTest.Circle,double,double)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.px : double"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.PointModel(GaussNewtonEstimatorTest.Circle,double,double)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.py : double"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.PointModel(GaussNewtonEstimatorTest.Circle,double,double)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.this$0 : Circle"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.access$000(GaussNewtonEstimatorTest.Circle)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiX()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getPartialRadiusX()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.access$100(GaussNewtonEstimatorTest.Circle)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiY()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getPartialRadiusY()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getCenterDistance()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.px : double"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getCenterDistance()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.this$0 : Circle"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getCenterDistance()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.access$000(GaussNewtonEstimatorTest.Circle)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getCenterDistance()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getCenterDistance()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.py : double"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getCenterDistance()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.access$100(GaussNewtonEstimatorTest.Circle)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getCenterDistance()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiX()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.this$0 : Circle"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiX()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.access$000(GaussNewtonEstimatorTest.Circle)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiX()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiX()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.px : double"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiX()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getCenterDistance()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiX()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiY()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.this$0 : Circle"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiY()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.access$100(GaussNewtonEstimatorTest.Circle)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiY()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiY()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.py : double"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiY()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getCenterDistance()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiY()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getTheoreticalValue()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getCenterDistance()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getTheoreticalValue()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.this$0 : Circle"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getTheoreticalValue()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getRadius()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getTheoreticalValue()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.px : double"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.py : double"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.serialVersionUID : long"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.this$0 : Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.this$0 : Circle"
reference "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.optimization.NelderMead"
reference "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker"
reference "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.optimization.CostException"
reference "org.apache.commons.math.optimization.NelderMeadTest" "double[]"
reference "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.random.JDKRandomGenerator"
reference "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator"
reference "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.random.UniformRandomGenerator"
reference "org.apache.commons.math.optimization.NelderMeadTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.optimization.NelderMeadTest" "junit.framework.TestCase"
reference "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.random.NotPositiveDefiniteMatrixException"
reference "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.optimization.PointCostPair"
reference "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.random.RandomGenerator"
call "org.apache.commons.math.optimization.NelderMeadTest.NelderMeadTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.optimization.NelderMeadTest.NelderMeadTest(String)"
call "org.apache.commons.math.optimization.NelderMeadTest.testCostExceptions()" "org.apache.commons.math.optimization.NelderMeadTest.1.{...}"
call "org.apache.commons.math.optimization.NelderMeadTest.testCostExceptions()" "org.apache.commons.math.optimization.NelderMead.NelderMead(double,double,double,double)"
call "org.apache.commons.math.optimization.NelderMeadTest.testCostExceptions()" "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker.ValueChecker(double)"
call "org.apache.commons.math.optimization.NelderMeadTest.testCostExceptions()" "org.apache.commons.math.optimization.NelderMead.minimizes(CostFunction,int,ConvergenceChecker,double[],double[])"
call "org.apache.commons.math.optimization.NelderMeadTest.testCostExceptions()" "org.apache.commons.math.optimization.NelderMeadTest.fail(String)"
call "org.apache.commons.math.optimization.NelderMeadTest.testCostExceptions()" "org.apache.commons.math.optimization.CostException.getCause()"
call "org.apache.commons.math.optimization.NelderMeadTest.testCostExceptions()" "org.apache.commons.math.optimization.NelderMeadTest.assertNull(Object)"
call "org.apache.commons.math.optimization.NelderMeadTest.testCostExceptions()" "org.apache.commons.math.optimization.NelderMeadTest.assertNotNull(Object)"
contain "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.optimization.NelderMeadTest.testCostExceptions()"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMeadTest.2.{...}"
reference "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMeadTest.count : int"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMead.NelderMead()"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker.ValueChecker(double)"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMead.minimizes(CostFunction,int,ConvergenceChecker,double[][],int,long)"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMeadTest.fail(String)"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMeadTest.assertTrue(boolean)"
reference "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.PointCostPair.cost : double"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMeadTest.assertEquals(double,double,double)"
reference "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.PointCostPair.point : double[]"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMead.getMinima()"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMeadTest.assertEquals(int,int)"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMeadTest.assertNotNull(Object)"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMeadTest.assertNull(Object)"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.random.JDKRandomGenerator.JDKRandomGenerator()"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.random.RandomGenerator.setSeed(long)"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.random.UniformRandomGenerator.UniformRandomGenerator(RandomGenerator)"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.UncorrelatedRandomVectorGenerator(double[],double[],NormalizedRandomGenerator)"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMead.minimizes(CostFunction,int,ConvergenceChecker,RandomVectorGenerator)"
call "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()" "org.apache.commons.math.optimization.NelderMead.minimizes(CostFunction,int,ConvergenceChecker,RandomVectorGenerator,int)"
contain "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.optimization.NelderMeadTest.testRosenbrock()"
call "org.apache.commons.math.optimization.NelderMeadTest.testPowell()" "org.apache.commons.math.optimization.NelderMeadTest.3.{...}"
reference "org.apache.commons.math.optimization.NelderMeadTest.testPowell()" "org.apache.commons.math.optimization.NelderMeadTest.count : int"
call "org.apache.commons.math.optimization.NelderMeadTest.testPowell()" "org.apache.commons.math.optimization.NelderMead.NelderMead()"
call "org.apache.commons.math.optimization.NelderMeadTest.testPowell()" "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker.ValueChecker(double)"
call "org.apache.commons.math.optimization.NelderMeadTest.testPowell()" "org.apache.commons.math.optimization.NelderMead.minimizes(CostFunction,int,ConvergenceChecker,double[],double[],int,long)"
call "org.apache.commons.math.optimization.NelderMeadTest.testPowell()" "org.apache.commons.math.optimization.NelderMeadTest.assertTrue(boolean)"
reference "org.apache.commons.math.optimization.NelderMeadTest.testPowell()" "org.apache.commons.math.optimization.PointCostPair.cost : double"
call "org.apache.commons.math.optimization.NelderMeadTest.testPowell()" "org.apache.commons.math.optimization.NelderMeadTest.assertEquals(double,double,double)"
reference "org.apache.commons.math.optimization.NelderMeadTest.testPowell()" "org.apache.commons.math.optimization.PointCostPair.point : double[]"
contain "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.optimization.NelderMeadTest.testPowell()"
reference "org.apache.commons.math.optimization.NelderMeadTest.suite()" "org.apache.commons.math.optimization.NelderMeadTest.class$org$apache$commons$math$optimization$NelderMeadTest : Class"
call "org.apache.commons.math.optimization.NelderMeadTest.suite()" "org.apache.commons.math.optimization.NelderMeadTest.class$(String)"
call "org.apache.commons.math.optimization.NelderMeadTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.optimization.NelderMeadTest.suite()"
reference "org.apache.commons.math.optimization.NelderMeadTest.access$004(NelderMeadTest)" "org.apache.commons.math.optimization.NelderMeadTest.count : int"
contain "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.optimization.NelderMeadTest.access$004(NelderMeadTest)"
contain "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.optimization.NelderMeadTest.class$(String)"
contain "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.optimization.NelderMeadTest.count : int"
contain "org.apache.commons.math.optimization.NelderMeadTest" "org.apache.commons.math.optimization.NelderMeadTest.class$org$apache$commons$math$optimization$NelderMeadTest : Class"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest" "org.apache.commons.math.analysis.PolynomialFunction"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest" "org.apache.commons.math.analysis.PolynomialSplineFunction"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest" "org.apache.commons.math.analysis.UnivariateRealFunction"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.PolynomialSplineFunctionTest()" "junit.framework.TestCase.TestCase()"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.PolynomialSplineFunctionTest()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.tolerance : double"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.PolynomialSplineFunctionTest()" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.PolynomialSplineFunctionTest()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.polynomials : PolynomialFunction[]"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.PolynomialSplineFunctionTest()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.knots : double[]"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.PolynomialSplineFunctionTest()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.dp : PolynomialFunction"
contain "org.apache.commons.math.analysis.PolynomialSplineFunctionTest" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.PolynomialSplineFunctionTest()"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testConstructor()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.knots : double[]"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testConstructor()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.polynomials : PolynomialFunction[]"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testConstructor()" "org.apache.commons.math.analysis.PolynomialSplineFunction.PolynomialSplineFunction(double[],PolynomialFunction[])"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testConstructor()" "org.apache.commons.math.analysis.PolynomialSplineFunction.getKnots()"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testConstructor()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.assertTrue(boolean)"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testConstructor()" "org.apache.commons.math.analysis.PolynomialSplineFunction.getPolynomials()"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testConstructor()" "org.apache.commons.math.analysis.PolynomialFunction.getCoefficients()"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testConstructor()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testConstructor()" "org.apache.commons.math.analysis.PolynomialSplineFunction.getN()"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testConstructor()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.assertEquals(int,int)"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testConstructor()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.fail(String)"
contain "org.apache.commons.math.analysis.PolynomialSplineFunctionTest" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testConstructor()"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.knots : double[]"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.polynomials : PolynomialFunction[]"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues()" "org.apache.commons.math.analysis.PolynomialSplineFunction.PolynomialSplineFunction(double[],PolynomialFunction[])"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues()" "org.apache.commons.math.analysis.PolynomialSplineFunction.derivative()"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.findKnot(double[],double)"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues()" "org.apache.commons.math.analysis.PolynomialFunction.value(double)"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues()" "org.apache.commons.math.analysis.PolynomialSplineFunction.value(double)"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.tolerance : double"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.dp : PolynomialFunction"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues()" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.fail(String)"
contain "org.apache.commons.math.analysis.PolynomialSplineFunctionTest" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.testValues()"
contain "org.apache.commons.math.analysis.PolynomialSplineFunctionTest" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.findKnot(double[],double)"
contain "org.apache.commons.math.analysis.PolynomialSplineFunctionTest" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.tolerance : double"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.polynomials : PolynomialFunction[]" "org.apache.commons.math.analysis.PolynomialFunction[]"
contain "org.apache.commons.math.analysis.PolynomialSplineFunctionTest" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.polynomials : PolynomialFunction[]"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.knots : double[]" "double[]"
contain "org.apache.commons.math.analysis.PolynomialSplineFunctionTest" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.knots : double[]"
reference "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.dp : PolynomialFunction" "org.apache.commons.math.analysis.PolynomialFunction"
contain "org.apache.commons.math.analysis.PolynomialSplineFunctionTest" "org.apache.commons.math.analysis.PolynomialSplineFunctionTest.dp : PolynomialFunction"
reference "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.MidpointIntegrator"
reference "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.TestProblemAbstract"
reference "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.TestProblemHandler"
reference "org.apache.commons.math.ode.MidpointIntegratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.MidpointIntegratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.TestProblemFactory"
reference "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.FirstOrderIntegrator"
call "org.apache.commons.math.ode.MidpointIntegratorTest.MidpointIntegratorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.MidpointIntegratorTest.MidpointIntegratorTest(String)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.MidpointIntegrator.MidpointIntegrator(double)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.MidpointIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.MidpointIntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.MidpointIntegratorTest.testDimensionCheck()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemFactory.getProblems()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.clone()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getFinalTime()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getInitialTime()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.MidpointIntegrator.MidpointIntegrator(double)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getSwitchingFunctions()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getInitialState()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getDimension()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.MidpointIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.MidpointIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.MidpointIntegratorTest.testDecreasingSteps()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.MidpointIntegrator.MidpointIntegrator(double)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getLastError()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.MidpointIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.MidpointIntegratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.getName()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.MidpointIntegratorTest.assertEquals(String,String)"
contain "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.MidpointIntegratorTest.testSmallStep()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.MidpointIntegrator.MidpointIntegrator(double)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getLastError()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.MidpointIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()" "org.apache.commons.math.ode.MidpointIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.MidpointIntegratorTest.testBigStep()"
reference "org.apache.commons.math.ode.MidpointIntegratorTest.suite()" "org.apache.commons.math.ode.MidpointIntegratorTest.class$org$apache$commons$math$ode$MidpointIntegratorTest : Class"
call "org.apache.commons.math.ode.MidpointIntegratorTest.suite()" "org.apache.commons.math.ode.MidpointIntegratorTest.class$(String)"
call "org.apache.commons.math.ode.MidpointIntegratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.MidpointIntegratorTest.suite()"
contain "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.MidpointIntegratorTest.class$(String)"
contain "org.apache.commons.math.ode.MidpointIntegratorTest" "org.apache.commons.math.ode.MidpointIntegratorTest.class$org$apache$commons$math$ode$MidpointIntegratorTest : Class"
reference "org.apache.commons.math.util.ContinuedFractionTest.1" "org.apache.commons.math.util.ContinuedFraction"
call "org.apache.commons.math.util.ContinuedFractionTest.1.{...}" "org.apache.commons.math.util.ContinuedFraction.ContinuedFraction()"
reference "org.apache.commons.math.util.ContinuedFractionTest.1.{...}" "org.apache.commons.math.util.ContinuedFractionTest.1.this$0 : ContinuedFractionTest"
contain "org.apache.commons.math.util.ContinuedFractionTest.1" "org.apache.commons.math.util.ContinuedFractionTest.1.{...}"
contain "org.apache.commons.math.util.ContinuedFractionTest.1" "org.apache.commons.math.util.ContinuedFractionTest.1.getA(int,double)"
contain "org.apache.commons.math.util.ContinuedFractionTest.1" "org.apache.commons.math.util.ContinuedFractionTest.1.getB(int,double)"
contain "org.apache.commons.math.util.ContinuedFractionTest.1" "org.apache.commons.math.util.ContinuedFractionTest.1.serialVersionUID : long"
reference "org.apache.commons.math.util.ContinuedFractionTest.1.this$0 : ContinuedFractionTest" "org.apache.commons.math.util.ContinuedFractionTest"
contain "org.apache.commons.math.util.ContinuedFractionTest.1" "org.apache.commons.math.util.ContinuedFractionTest.1.this$0 : ContinuedFractionTest"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest" "org.apache.commons.math.stat.descriptive.moment.GeometricMean"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.GeometricMeanTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.GeometricMeanTest(String)"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.suite()" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.class$org$apache$commons$math$stat$descriptive$moment$GeometricMeanTest : Class"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.suite()" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.suite()"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.GeometricMean()"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.expectedValue()" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.geoMean : double"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.GeometricMean()"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.increment(double)"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.assertFalse(boolean)"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.moment.GeometricMean.clear()"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.testSpecialValues()"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.stat : GeometricMean" "org.apache.commons.math.stat.descriptive.moment.GeometricMean"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.stat : GeometricMean"
contain "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest" "org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest.class$org$apache$commons$math$stat$descriptive$moment$GeometricMeanTest : Class"
reference "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker" "org.apache.commons.math.optimization.ConvergenceChecker"
reference "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker" "org.apache.commons.math.optimization.PointCostPair"
reference "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker" "org.apache.commons.math.optimization.NelderMeadTest"
reference "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker.ValueChecker(double)" "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker.threshold : double"
contain "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker" "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker.ValueChecker(double)"
reference "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker.converged(PointCostPair[])" "org.apache.commons.math.optimization.PointCostPair.cost : double"
reference "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker.converged(PointCostPair[])" "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker.threshold : double"
contain "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker" "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker.converged(PointCostPair[])"
contain "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker" "org.apache.commons.math.optimization.NelderMeadTest.ValueChecker.threshold : double"
reference "org.apache.commons.math.RetryTestCase" "junit.framework.AssertionFailedError"
reference "org.apache.commons.math.RetryTestCase" "junit.framework.TestCase"
call "org.apache.commons.math.RetryTestCase.RetryTestCase()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.RetryTestCase" "org.apache.commons.math.RetryTestCase.RetryTestCase()"
call "org.apache.commons.math.RetryTestCase.RetryTestCase(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.RetryTestCase" "org.apache.commons.math.RetryTestCase.RetryTestCase(String)"
call "org.apache.commons.math.RetryTestCase.runTest()" "junit.framework.TestCase.runTest()"
contain "org.apache.commons.math.RetryTestCase" "org.apache.commons.math.RetryTestCase.runTest()"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.stat.descriptive.moment.VectorialMean"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.linear.RealMatrixImpl"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.JDKRandomGenerator"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.GaussianRandomGenerator"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.DimensionMismatchException"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.NotPositiveDefiniteMatrixException"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.linear.RealMatrix"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.RandomGenerator"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.CorrelatedRandomVectorGeneratorTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.CorrelatedRandomVectorGeneratorTest(String)" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.mean : double[]"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.CorrelatedRandomVectorGeneratorTest(String)" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.covariance : RealMatrixImpl"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.CorrelatedRandomVectorGeneratorTest(String)" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.generator : CorrelatedRandomVectorGenerator"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.CorrelatedRandomVectorGeneratorTest(String)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRank()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.generator : CorrelatedRandomVectorGenerator"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRank()" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.getRank()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRank()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.assertEquals(int,int)"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRank()"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRootMatrix()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.generator : CorrelatedRandomVectorGenerator"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRootMatrix()" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.getRootMatrix()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRootMatrix()" "org.apache.commons.math.linear.RealMatrix.transpose()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRootMatrix()" "org.apache.commons.math.linear.RealMatrix.multiply(RealMatrix)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRootMatrix()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.covariance : RealMatrixImpl"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRootMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRootMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRootMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.getEntry(int,int)"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRootMatrix()" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRootMatrix()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testRootMatrix()"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.mean : double[]"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.VectorialMean(int)"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.VectorialCovariance(int)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.generator : CorrelatedRandomVectorGenerator"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.nextVector()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.increment(double[])"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.increment(double[])"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.getResult()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getResult()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.assertEquals(double,double,double)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.covariance : RealMatrixImpl"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()" "org.apache.commons.math.linear.RealMatrixImpl.getEntry(int,int)"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.testMeanAndCovariance()"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.mean : double[]"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(int,int)"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.linear.RealMatrixImpl.getDataRef()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.linear.RealMatrixImpl.transpose()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.linear.RealMatrixImpl.multiply(RealMatrix)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.covariance : RealMatrixImpl"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.JDKRandomGenerator.JDKRandomGenerator()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.RandomGenerator.setSeed(long)"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.GaussianRandomGenerator.GaussianRandomGenerator(RandomGenerator)"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.linear.RealMatrixImpl.getNorm()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(double[],RealMatrix,double,NormalizedRandomGenerator)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.generator : CorrelatedRandomVectorGenerator"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.DimensionMismatchException.getMessage()"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.fail(String)"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.setUp()"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.tearDown()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.mean : double[]"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.tearDown()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.covariance : RealMatrixImpl"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.tearDown()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.generator : CorrelatedRandomVectorGenerator"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.tearDown()"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.suite()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.class$org$apache$commons$math$random$CorrelatedRandomVectorGeneratorTest : Class"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.suite()" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.class$(String)"
call "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.suite()"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.class$(String)"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.mean : double[]" "double[]"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.mean : double[]"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.covariance : RealMatrixImpl" "org.apache.commons.math.linear.RealMatrixImpl"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.covariance : RealMatrixImpl"
reference "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.generator : CorrelatedRandomVectorGenerator" "org.apache.commons.math.random.CorrelatedRandomVectorGenerator"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.generator : CorrelatedRandomVectorGenerator"
contain "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest.class$org$apache$commons$math$random$CorrelatedRandomVectorGeneratorTest : Class"
reference "org.apache.commons.math.analysis.LaguerreSolverTest" "org.apache.commons.math.analysis.PolynomialFunction"
reference "org.apache.commons.math.analysis.LaguerreSolverTest" "org.apache.commons.math.analysis.LaguerreSolver"
reference "org.apache.commons.math.analysis.LaguerreSolverTest" "org.apache.commons.math.complex.Complex"
reference "org.apache.commons.math.analysis.LaguerreSolverTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.analysis.LaguerreSolverTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.LaguerreSolverTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.LaguerreSolverTest" "org.apache.commons.math.analysis.UnivariateRealSolver"
reference "org.apache.commons.math.analysis.LaguerreSolverTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.analysis.LaguerreSolverTest.LaguerreSolverTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.analysis.LaguerreSolverTest" "org.apache.commons.math.analysis.LaguerreSolverTest.LaguerreSolverTest()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testLinearFunction()" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testLinearFunction()" "org.apache.commons.math.analysis.LaguerreSolver.LaguerreSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testLinearFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testLinearFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testLinearFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testLinearFunction()" "org.apache.commons.math.analysis.LaguerreSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.LaguerreSolverTest" "org.apache.commons.math.analysis.LaguerreSolverTest.testLinearFunction()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuadraticFunction()" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuadraticFunction()" "org.apache.commons.math.analysis.LaguerreSolver.LaguerreSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuadraticFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuadraticFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuadraticFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuadraticFunction()" "org.apache.commons.math.analysis.LaguerreSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.LaguerreSolverTest" "org.apache.commons.math.analysis.LaguerreSolverTest.testQuadraticFunction()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.LaguerreSolver.LaguerreSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.LaguerreSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.LaguerreSolverTest" "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2()" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2()" "org.apache.commons.math.analysis.LaguerreSolver.LaguerreSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2()" "org.apache.commons.math.analysis.LaguerreSolver.solveAll(double[],double)"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2()" "org.apache.commons.math.analysis.LaguerreSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2()" "org.apache.commons.math.complex.Complex.abs()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2()" "org.apache.commons.math.analysis.LaguerreSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2()" "org.apache.commons.math.TestUtils.assertContains(Complex[],Complex,double)"
contain "org.apache.commons.math.analysis.LaguerreSolverTest" "org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2()"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testParameters()" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testParameters()" "org.apache.commons.math.analysis.LaguerreSolver.LaguerreSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testParameters()" "org.apache.commons.math.analysis.LaguerreSolverTest.fail(String)"
call "org.apache.commons.math.analysis.LaguerreSolverTest.testParameters()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
contain "org.apache.commons.math.analysis.LaguerreSolverTest" "org.apache.commons.math.analysis.LaguerreSolverTest.testParameters()"
reference "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3D"
reference "org.apache.commons.math.geometry.Vector3DTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.geometry.Vector3DTest" "junit.framework.TestCase"
call "org.apache.commons.math.geometry.Vector3DTest.Vector3DTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.Vector3DTest(String)"
call "org.apache.commons.math.geometry.Vector3DTest.testConstructors()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testConstructors()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D)"
call "org.apache.commons.math.geometry.Vector3DTest.testConstructors()" "org.apache.commons.math.geometry.Vector3DTest.checkVector(Vector3D,double,double,double)"
reference "org.apache.commons.math.geometry.Vector3DTest.testConstructors()" "org.apache.commons.math.geometry.Vector3D.plusI : Vector3D"
reference "org.apache.commons.math.geometry.Vector3DTest.testConstructors()" "org.apache.commons.math.geometry.Vector3D.minusK : Vector3D"
call "org.apache.commons.math.geometry.Vector3DTest.testConstructors()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D)"
reference "org.apache.commons.math.geometry.Vector3DTest.testConstructors()" "org.apache.commons.math.geometry.Vector3D.plusJ : Vector3D"
call "org.apache.commons.math.geometry.Vector3DTest.testConstructors()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D,double,Vector3D)"
reference "org.apache.commons.math.geometry.Vector3DTest.testConstructors()" "org.apache.commons.math.geometry.Vector3D.minusJ : Vector3D"
call "org.apache.commons.math.geometry.Vector3DTest.testConstructors()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,Vector3D,double,Vector3D,double,Vector3D,double,Vector3D)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.testConstructors()"
call "org.apache.commons.math.geometry.Vector3DTest.testCoordinates()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testCoordinates()" "org.apache.commons.math.geometry.Vector3D.getX()"
call "org.apache.commons.math.geometry.Vector3DTest.testCoordinates()" "org.apache.commons.math.geometry.Vector3DTest.assertTrue(boolean)"
call "org.apache.commons.math.geometry.Vector3DTest.testCoordinates()" "org.apache.commons.math.geometry.Vector3D.getY()"
call "org.apache.commons.math.geometry.Vector3DTest.testCoordinates()" "org.apache.commons.math.geometry.Vector3D.getZ()"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.testCoordinates()"
call "org.apache.commons.math.geometry.Vector3DTest.testNorm()" "org.apache.commons.math.geometry.Vector3D.Vector3D()"
call "org.apache.commons.math.geometry.Vector3DTest.testNorm()" "org.apache.commons.math.geometry.Vector3D.getNorm()"
call "org.apache.commons.math.geometry.Vector3DTest.testNorm()" "org.apache.commons.math.geometry.Vector3DTest.assertTrue(boolean)"
call "org.apache.commons.math.geometry.Vector3DTest.testNorm()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.testNorm()"
call "org.apache.commons.math.geometry.Vector3DTest.testSubtract()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testSubtract()" "org.apache.commons.math.geometry.Vector3D.subtract(Vector3D)"
call "org.apache.commons.math.geometry.Vector3DTest.testSubtract()" "org.apache.commons.math.geometry.Vector3DTest.checkVector(Vector3D,double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testSubtract()" "org.apache.commons.math.geometry.Vector3D.subtract(double,Vector3D)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.testSubtract()"
call "org.apache.commons.math.geometry.Vector3DTest.testAdd()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testAdd()" "org.apache.commons.math.geometry.Vector3D.add(Vector3D)"
call "org.apache.commons.math.geometry.Vector3DTest.testAdd()" "org.apache.commons.math.geometry.Vector3DTest.checkVector(Vector3D,double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testAdd()" "org.apache.commons.math.geometry.Vector3D.add(double,Vector3D)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.testAdd()"
call "org.apache.commons.math.geometry.Vector3DTest.testScalarProduct()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testScalarProduct()" "org.apache.commons.math.geometry.Vector3D.multiply(double)"
call "org.apache.commons.math.geometry.Vector3DTest.testScalarProduct()" "org.apache.commons.math.geometry.Vector3DTest.checkVector(Vector3D,double,double,double)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.testScalarProduct()"
call "org.apache.commons.math.geometry.Vector3DTest.testVectorialProducts()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testVectorialProducts()" "org.apache.commons.math.geometry.Vector3D.dotProduct(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.Vector3DTest.testVectorialProducts()" "org.apache.commons.math.geometry.Vector3DTest.assertTrue(boolean)"
call "org.apache.commons.math.geometry.Vector3DTest.testVectorialProducts()" "org.apache.commons.math.geometry.Vector3D.crossProduct(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.Vector3DTest.testVectorialProducts()" "org.apache.commons.math.geometry.Vector3DTest.checkVector(Vector3D,double,double,double)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.testVectorialProducts()"
reference "org.apache.commons.math.geometry.Vector3DTest.testAngular()" "org.apache.commons.math.geometry.Vector3D.plusI : Vector3D"
call "org.apache.commons.math.geometry.Vector3DTest.testAngular()" "org.apache.commons.math.geometry.Vector3D.getAlpha()"
call "org.apache.commons.math.geometry.Vector3DTest.testAngular()" "org.apache.commons.math.geometry.Vector3DTest.assertEquals(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testAngular()" "org.apache.commons.math.geometry.Vector3D.getDelta()"
reference "org.apache.commons.math.geometry.Vector3DTest.testAngular()" "org.apache.commons.math.geometry.Vector3D.plusJ : Vector3D"
reference "org.apache.commons.math.geometry.Vector3DTest.testAngular()" "org.apache.commons.math.geometry.Vector3D.plusK : Vector3D"
call "org.apache.commons.math.geometry.Vector3DTest.testAngular()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.testAngular()"
call "org.apache.commons.math.geometry.Vector3DTest.testAngularSeparation()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testAngularSeparation()" "org.apache.commons.math.geometry.Vector3D.normalize()"
call "org.apache.commons.math.geometry.Vector3DTest.testAngularSeparation()" "org.apache.commons.math.geometry.Vector3D.orthogonal()"
call "org.apache.commons.math.geometry.Vector3DTest.testAngularSeparation()" "org.apache.commons.math.geometry.Vector3D.multiply(double)"
call "org.apache.commons.math.geometry.Vector3DTest.testAngularSeparation()" "org.apache.commons.math.geometry.Vector3D.add(Vector3D)"
call "org.apache.commons.math.geometry.Vector3DTest.testAngularSeparation()" "org.apache.commons.math.geometry.Vector3D.angle(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.Vector3DTest.testAngularSeparation()" "org.apache.commons.math.geometry.Vector3DTest.assertTrue(boolean)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.testAngularSeparation()"
call "org.apache.commons.math.geometry.Vector3DTest.testNormalize()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testNormalize()" "org.apache.commons.math.geometry.Vector3D.normalize()"
call "org.apache.commons.math.geometry.Vector3DTest.testNormalize()" "org.apache.commons.math.geometry.Vector3D.getNorm()"
call "org.apache.commons.math.geometry.Vector3DTest.testNormalize()" "org.apache.commons.math.geometry.Vector3DTest.assertEquals(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testNormalize()" "org.apache.commons.math.geometry.Vector3D.Vector3D()"
call "org.apache.commons.math.geometry.Vector3DTest.testNormalize()" "org.apache.commons.math.geometry.Vector3DTest.fail(String)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.testNormalize()"
call "org.apache.commons.math.geometry.Vector3DTest.testOrthogonal()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testOrthogonal()" "org.apache.commons.math.geometry.Vector3D.orthogonal()"
call "org.apache.commons.math.geometry.Vector3DTest.testOrthogonal()" "org.apache.commons.math.geometry.Vector3D.dotProduct(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.Vector3DTest.testOrthogonal()" "org.apache.commons.math.geometry.Vector3DTest.assertEquals(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testOrthogonal()" "org.apache.commons.math.geometry.Vector3DTest.fail(String)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.testOrthogonal()"
call "org.apache.commons.math.geometry.Vector3DTest.testAngle()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testAngle()" "org.apache.commons.math.geometry.Vector3D.angle(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.Vector3DTest.testAngle()" "org.apache.commons.math.geometry.Vector3DTest.assertEquals(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.testAngle()" "org.apache.commons.math.geometry.Vector3D.Vector3D()"
reference "org.apache.commons.math.geometry.Vector3DTest.testAngle()" "org.apache.commons.math.geometry.Vector3D.plusI : Vector3D"
call "org.apache.commons.math.geometry.Vector3DTest.testAngle()" "org.apache.commons.math.geometry.Vector3DTest.fail(String)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.testAngle()"
call "org.apache.commons.math.geometry.Vector3DTest.checkVector(Vector3D,double,double,double)" "org.apache.commons.math.geometry.Vector3D.getX()"
call "org.apache.commons.math.geometry.Vector3DTest.checkVector(Vector3D,double,double,double)" "org.apache.commons.math.geometry.Vector3DTest.assertEquals(double,double,double)"
call "org.apache.commons.math.geometry.Vector3DTest.checkVector(Vector3D,double,double,double)" "org.apache.commons.math.geometry.Vector3D.getY()"
call "org.apache.commons.math.geometry.Vector3DTest.checkVector(Vector3D,double,double,double)" "org.apache.commons.math.geometry.Vector3D.getZ()"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.checkVector(Vector3D,double,double,double)"
reference "org.apache.commons.math.geometry.Vector3DTest.suite()" "org.apache.commons.math.geometry.Vector3DTest.class$org$apache$commons$math$geometry$Vector3DTest : Class"
call "org.apache.commons.math.geometry.Vector3DTest.suite()" "org.apache.commons.math.geometry.Vector3DTest.class$(String)"
call "org.apache.commons.math.geometry.Vector3DTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.suite()"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.class$(String)"
contain "org.apache.commons.math.geometry.Vector3DTest" "org.apache.commons.math.geometry.Vector3DTest.class$org$apache$commons$math$geometry$Vector3DTest : Class"
reference "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler" "junit.framework.Assert"
reference "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GillIntegratorTest"
reference "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.KeplerStepHandler(TestProblem3)" "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.pb : TestProblem3"
call "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.KeplerStepHandler(TestProblem3)" "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.reset()"
contain "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.KeplerStepHandler(TestProblem3)"
contain "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.reset()" "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.maxError : double"
contain "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.reset()"
call "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
reference "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.pb : TestProblem3"
call "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
reference "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.maxError : double"
call "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
contain "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)"
contain "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.maxError : double"
reference "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.pb : TestProblem3" "org.apache.commons.math.ode.TestProblem3"
contain "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GillIntegratorTest.KeplerStepHandler.pb : TestProblem3"
reference "org.apache.commons.math.stat.descriptive.rank.MinTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.rank.MinTest" "org.apache.commons.math.stat.descriptive.rank.Min"
reference "org.apache.commons.math.stat.descriptive.rank.MinTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.MinTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.rank.MinTest" "org.apache.commons.math.stat.descriptive.rank.MinTest.MinTest(String)"
reference "org.apache.commons.math.stat.descriptive.rank.MinTest.suite()" "org.apache.commons.math.stat.descriptive.rank.MinTest.class$org$apache$commons$math$stat$descriptive$rank$MinTest : Class"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.suite()" "org.apache.commons.math.stat.descriptive.rank.MinTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.rank.MinTest" "org.apache.commons.math.stat.descriptive.rank.MinTest.suite()"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.rank.Min.Min()"
contain "org.apache.commons.math.stat.descriptive.rank.MinTest" "org.apache.commons.math.stat.descriptive.rank.MinTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.rank.MinTest.expectedValue()" "org.apache.commons.math.stat.descriptive.rank.MinTest.min : double"
contain "org.apache.commons.math.stat.descriptive.rank.MinTest" "org.apache.commons.math.stat.descriptive.rank.MinTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.Min.Min()"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.Min.getResult()"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.MinTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.Min.increment(double)"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.MinTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.Min.evaluate(double[])"
contain "org.apache.commons.math.stat.descriptive.rank.MinTest" "org.apache.commons.math.stat.descriptive.rank.MinTest.testSpecialValues()"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.testNaNs()" "org.apache.commons.math.stat.descriptive.rank.Min.Min()"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.testNaNs()" "org.apache.commons.math.stat.descriptive.rank.Min.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.testNaNs()" "org.apache.commons.math.stat.descriptive.rank.MinTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.rank.MinTest.testNaNs()" "org.apache.commons.math.stat.descriptive.rank.MinTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.descriptive.rank.MinTest" "org.apache.commons.math.stat.descriptive.rank.MinTest.testNaNs()"
contain "org.apache.commons.math.stat.descriptive.rank.MinTest" "org.apache.commons.math.stat.descriptive.rank.MinTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.rank.MinTest.stat : Min" "org.apache.commons.math.stat.descriptive.rank.Min"
contain "org.apache.commons.math.stat.descriptive.rank.MinTest" "org.apache.commons.math.stat.descriptive.rank.MinTest.stat : Min"
contain "org.apache.commons.math.stat.descriptive.rank.MinTest" "org.apache.commons.math.stat.descriptive.rank.MinTest.class$org$apache$commons$math$stat$descriptive$rank$MinTest : Class"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest.1" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest.1" "org.apache.commons.math.ode.DummyStepInterpolator"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.1.{...}" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(double[],boolean)"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest.1.{...}" "org.apache.commons.math.ode.DummyStepInterpolatorTest.1.this$0 : DummyStepInterpolatorTest"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest.1" "org.apache.commons.math.ode.DummyStepInterpolatorTest.1.{...}"
call "org.apache.commons.math.ode.DummyStepInterpolatorTest.1.doFinalize()" "org.apache.commons.math.ode.DerivativeException.DerivativeException(Throwable)"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest.1" "org.apache.commons.math.ode.DummyStepInterpolatorTest.1.doFinalize()"
reference "org.apache.commons.math.ode.DummyStepInterpolatorTest.1.this$0 : DummyStepInterpolatorTest" "org.apache.commons.math.ode.DummyStepInterpolatorTest"
contain "org.apache.commons.math.ode.DummyStepInterpolatorTest.1" "org.apache.commons.math.ode.DummyStepInterpolatorTest.1.this$0 : DummyStepInterpolatorTest"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853Integrator"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.TestProblemHandler"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.TestProblem4"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.StepProblem"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.FirstOrderIntegrator"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DummyStepHandler"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.DormandPrince853IntegratorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.DormandPrince853IntegratorTest(String)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.DormandPrince853Integrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testDimensionCheck()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNullIntervalCheck()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNullIntervalCheck()" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNullIntervalCheck()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNullIntervalCheck()" "org.apache.commons.math.ode.DormandPrince853Integrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNullIntervalCheck()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNullIntervalCheck()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testMinStep()" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double[],double[])"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testMinStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testMinStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testMinStep()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testMinStep()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getCalls()"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testIncreasingTolerance()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.TestProblem4()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getSwitchingFunctions()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getDimension()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.getLastTime()"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testSwitchingFunctions()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testKepler()" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testKepler()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getCalls()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testKepler()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testKepler()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.VariableHandler.VariableHandler()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.getName()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.assertEquals(String,String)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testVariableSteps()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()" "org.apache.commons.math.ode.TestProblem1.clone()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()" "org.apache.commons.math.ode.DummyStepHandler.getInstance()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()" "org.apache.commons.math.ode.TestProblem1.getCalls()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler.InterpolatingStepHandler(DormandPrince853IntegratorTest.1)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testNoDenseOutput()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.StepProblem.StepProblem(double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testUnstableDerivative()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.testUnstableDerivative()"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.suite()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.class$org$apache$commons$math$ode$DormandPrince853IntegratorTest : Class"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.suite()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.class$(String)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.suite()"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.class$(String)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.class$org$apache$commons$math$ode$DormandPrince853IntegratorTest : Class"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest" "org.apache.commons.math.MathException"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.PolynomialFunctionLagrangeFormTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.PolynomialFunctionLagrangeFormTest()"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testLinearFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.PolynomialFunctionLagrangeForm(double[],double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testLinearFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.value(double)"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testLinearFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testLinearFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.degree()"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testLinearFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.assertEquals(int,int)"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testLinearFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.getCoefficients()"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testLinearFunction()"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuadraticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.PolynomialFunctionLagrangeForm(double[],double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuadraticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.value(double)"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuadraticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuadraticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.degree()"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuadraticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.assertEquals(int,int)"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuadraticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.getCoefficients()"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuadraticFunction()"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuinticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.PolynomialFunctionLagrangeForm(double[],double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuinticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.value(double)"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuinticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuinticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.degree()"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuinticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.assertEquals(int,int)"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuinticFunction()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.getCoefficients()"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testQuinticFunction()"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testParameters()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm.PolynomialFunctionLagrangeForm(double[],double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testParameters()" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.fail(String)"
contain "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest" "org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest.testParameters()"
reference "org.apache.commons.math.random.RandomAdaptorTest.1" "org.apache.commons.math.random.RandomAdaptorTest"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "double[][]"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "org.apache.commons.math.DimensionMismatchException"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "double[]"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "junit.framework.TestCase"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "org.apache.commons.math.linear.RealMatrix"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.VectorialCovarianceTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.VectorialCovarianceTest(String)" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.points : double[][]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.VectorialCovarianceTest(String)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testMismatch()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.VectorialCovariance(int)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testMismatch()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.increment(double[])"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testMismatch()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.fail(String)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testMismatch()" "org.apache.commons.math.DimensionMismatchException.getDimension1()"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testMismatch()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.assertEquals(int,int)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testMismatch()" "org.apache.commons.math.DimensionMismatchException.getDimension2()"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testMismatch()"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testSimplistic()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.VectorialCovariance(int)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testSimplistic()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.increment(double[])"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testSimplistic()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testSimplistic()" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testSimplistic()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testSimplistic()"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.points : double[][]"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.VectorialCovariance(int)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.increment(double[])"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getN()"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.assertEquals(long,long)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testBasicStats()" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testBasicStats()" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.testBasicStats()"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.setUp()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.points : double[][]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.setUp()"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.tearDown()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.points : double[][]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.tearDown()"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.suite()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.class$org$apache$commons$math$stat$descriptive$moment$VectorialCovarianceTest : Class"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.suite()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.suite()"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.points : double[][]" "double[][]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.points : double[][]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest" "org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest.class$org$apache$commons$math$stat$descriptive$moment$VectorialCovarianceTest : Class"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler.InterpolatingStepHandler()"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler.requiresDenseOutput()"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler.reset()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler.handleStep(StepInterpolator,boolean)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler.InterpolatingStepHandler(DormandPrince853IntegratorTest.1)" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler.InterpolatingStepHandler()"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.InterpolatingStepHandler.InterpolatingStepHandler(DormandPrince853IntegratorTest.1)"
reference "org.apache.commons.math.random.GaussianRandomGeneratorTest" "org.apache.commons.math.random.JDKRandomGenerator"
reference "org.apache.commons.math.random.GaussianRandomGeneratorTest" "org.apache.commons.math.random.GaussianRandomGenerator"
reference "org.apache.commons.math.random.GaussianRandomGeneratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.random.GaussianRandomGeneratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.random.GaussianRandomGeneratorTest" "org.apache.commons.math.random.RandomGenerator"
reference "org.apache.commons.math.random.GaussianRandomGeneratorTest" "org.apache.commons.math.stat.StatUtils"
call "org.apache.commons.math.random.GaussianRandomGeneratorTest.GaussianRandomGeneratorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.random.GaussianRandomGeneratorTest" "org.apache.commons.math.random.GaussianRandomGeneratorTest.GaussianRandomGeneratorTest(String)"
call "org.apache.commons.math.random.GaussianRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.random.JDKRandomGenerator.JDKRandomGenerator()"
call "org.apache.commons.math.random.GaussianRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.random.RandomGenerator.setSeed(long)"
call "org.apache.commons.math.random.GaussianRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.random.GaussianRandomGenerator.GaussianRandomGenerator(RandomGenerator)"
call "org.apache.commons.math.random.GaussianRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.random.GaussianRandomGenerator.nextNormalizedDouble()"
call "org.apache.commons.math.random.GaussianRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.stat.StatUtils.mean(double[])"
call "org.apache.commons.math.random.GaussianRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.random.GaussianRandomGeneratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.random.GaussianRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.stat.StatUtils.variance(double[])"
contain "org.apache.commons.math.random.GaussianRandomGeneratorTest" "org.apache.commons.math.random.GaussianRandomGeneratorTest.testMeanAndStandardDeviation()"
reference "org.apache.commons.math.random.GaussianRandomGeneratorTest.suite()" "org.apache.commons.math.random.GaussianRandomGeneratorTest.class$org$apache$commons$math$random$GaussianRandomGeneratorTest : Class"
call "org.apache.commons.math.random.GaussianRandomGeneratorTest.suite()" "org.apache.commons.math.random.GaussianRandomGeneratorTest.class$(String)"
call "org.apache.commons.math.random.GaussianRandomGeneratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.random.GaussianRandomGeneratorTest" "org.apache.commons.math.random.GaussianRandomGeneratorTest.suite()"
contain "org.apache.commons.math.random.GaussianRandomGeneratorTest" "org.apache.commons.math.random.GaussianRandomGeneratorTest.class$(String)"
contain "org.apache.commons.math.random.GaussianRandomGeneratorTest" "org.apache.commons.math.random.GaussianRandomGeneratorTest.class$org$apache$commons$math$random$GaussianRandomGeneratorTest : Class"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler" "junit.framework.Assert"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.maxError : double"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.pb : TestProblem3"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.reset()"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.reset()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.maxError : double"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.reset()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.pb : TestProblem3"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.maxError : double"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.maxError : double"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.pb : TestProblem3" "org.apache.commons.math.ode.TestProblem3"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.pb : TestProblem3"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest.ThirdMomentTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest" "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest.ThirdMomentTest(String)"
call "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.ThirdMoment()"
contain "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest" "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest.expectedValue()" "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest.thirdMoment : double"
contain "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest" "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest.expectedValue()"
reference "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest.stat : ThirdMoment" "org.apache.commons.math.stat.descriptive.moment.ThirdMoment"
contain "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest" "org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest.stat : ThirdMoment"
reference "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.LinearFullRankFunction(int,int,double,double,double)" "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.buildArray(int,double)"
call "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.LinearFullRankFunction(int,int,double,double,double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction" "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.LinearFullRankFunction(int,int,double,double,double)"
reference "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.n : int"
contain "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction" "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.n : int"
reference "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.m : int"
contain "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction" "org.apache.commons.math.estimation.MinpackTest.LinearFullRankFunction.getResiduals()"
reference "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemAbstract"
reference "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.FirstOrderIntegrator"
reference "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)" "org.apache.commons.math.ode.TestProblemHandler.problem : TestProblemAbstract"
reference "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)" "org.apache.commons.math.ode.TestProblemHandler.integrator : FirstOrderIntegrator"
call "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)" "org.apache.commons.math.ode.TestProblemHandler.reset()"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.TestProblemHandler.reset()" "org.apache.commons.math.ode.TestProblemHandler.maxValueError : double"
reference "org.apache.commons.math.ode.TestProblemHandler.reset()" "org.apache.commons.math.ode.TestProblemHandler.maxTimeError : double"
reference "org.apache.commons.math.ode.TestProblemHandler.reset()" "org.apache.commons.math.ode.TestProblemHandler.lastError : double"
reference "org.apache.commons.math.ode.TestProblemHandler.reset()" "org.apache.commons.math.ode.TestProblemHandler.problem : TestProblemAbstract"
call "org.apache.commons.math.ode.TestProblemHandler.reset()" "org.apache.commons.math.ode.TestProblemAbstract.getInitialTime()"
reference "org.apache.commons.math.ode.TestProblemHandler.reset()" "org.apache.commons.math.ode.TestProblemHandler.expectedStepStart : double"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.reset()"
reference "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblemHandler.integrator : FirstOrderIntegrator"
call "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.FirstOrderIntegrator.getCurrentStepStart()"
reference "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblemHandler.maxTimeError : double"
reference "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblemHandler.expectedStepStart : double"
call "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.FirstOrderIntegrator.getCurrentSignedStepsize()"
call "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
reference "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblemHandler.problem : TestProblemAbstract"
call "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblemAbstract.getErrorScale()"
call "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
call "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblemAbstract.computeTheoreticalState(double)"
reference "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblemHandler.lastError : double"
reference "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblemHandler.lastTime : double"
call "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedTime()"
reference "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblemHandler.maxValueError : double"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.handleStep(StepInterpolator,boolean)"
reference "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()" "org.apache.commons.math.ode.TestProblemHandler.maxValueError : double"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
reference "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()" "org.apache.commons.math.ode.TestProblemHandler.maxTimeError : double"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
reference "org.apache.commons.math.ode.TestProblemHandler.getLastError()" "org.apache.commons.math.ode.TestProblemHandler.lastError : double"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.getLastError()"
reference "org.apache.commons.math.ode.TestProblemHandler.getLastTime()" "org.apache.commons.math.ode.TestProblemHandler.lastTime : double"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.getLastTime()"
reference "org.apache.commons.math.ode.TestProblemHandler.problem : TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.problem : TestProblemAbstract"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.maxValueError : double"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.maxTimeError : double"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.lastError : double"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.lastTime : double"
reference "org.apache.commons.math.ode.TestProblemHandler.integrator : FirstOrderIntegrator" "org.apache.commons.math.ode.FirstOrderIntegrator"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.integrator : FirstOrderIntegrator"
contain "org.apache.commons.math.ode.TestProblemHandler" "org.apache.commons.math.ode.TestProblemHandler.expectedStepStart : double"
reference "org.apache.commons.math.TestUtils" "junit.framework.AssertionFailedError"
reference "org.apache.commons.math.TestUtils" "junit.framework.Assert"
reference "org.apache.commons.math.TestUtils" "org.apache.commons.math.complex.Complex"
reference "org.apache.commons.math.TestUtils" "org.apache.commons.math.complex.ComplexFormat"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.TestUtils()"
call "org.apache.commons.math.TestUtils.assertEquals(double,double,double)" "org.apache.commons.math.TestUtils.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
call "org.apache.commons.math.TestUtils.assertEquals(String,double,double,double)" "junit.framework.Assert.assertTrue(String,boolean)"
call "org.apache.commons.math.TestUtils.assertEquals(String,double,double,double)" "junit.framework.Assert.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.assertEquals(String,double,double,double)"
call "org.apache.commons.math.TestUtils.assertSame(double,double)" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.assertSame(double,double)"
call "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)" "org.apache.commons.math.TestUtils.assertSame(double,double)"
call "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)" "org.apache.commons.math.complex.Complex.getImaginary()"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
call "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
call "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)" "org.apache.commons.math.complex.Complex.getImaginary()"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
call "org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" "junit.framework.Assert.assertEquals(int,int)"
call "org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" "junit.framework.Assert.assertEquals(double,double,double)"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.serializeAndRecover(Object)"
call "org.apache.commons.math.TestUtils.checkSerializedEquality(Object)" "org.apache.commons.math.TestUtils.serializeAndRecover(Object)"
call "org.apache.commons.math.TestUtils.checkSerializedEquality(Object)" "junit.framework.Assert.assertEquals(String,Object,Object)"
call "org.apache.commons.math.TestUtils.checkSerializedEquality(Object)" "junit.framework.Assert.assertEquals(String,int,int)"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.checkSerializedEquality(Object)"
call "org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)" "org.apache.commons.math.TestUtils.assertRelativelyEquals(String,double,double,double)"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)"
call "org.apache.commons.math.TestUtils.assertRelativelyEquals(String,double,double,double)" "junit.framework.Assert.assertTrue(String,boolean)"
call "org.apache.commons.math.TestUtils.assertRelativelyEquals(String,double,double,double)" "junit.framework.Assert.assertEquals(double,double,double)"
call "org.apache.commons.math.TestUtils.assertRelativelyEquals(String,double,double,double)" "junit.framework.Assert.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.assertRelativelyEquals(String,double,double,double)"
call "org.apache.commons.math.TestUtils.assertContains(String,Complex[],Complex,double)" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
call "org.apache.commons.math.TestUtils.assertContains(String,Complex[],Complex,double)" "org.apache.commons.math.complex.ComplexFormat.formatComplex(Complex)"
call "org.apache.commons.math.TestUtils.assertContains(String,Complex[],Complex,double)" "junit.framework.Assert.fail(String)"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.assertContains(String,Complex[],Complex,double)"
call "org.apache.commons.math.TestUtils.assertContains(Complex[],Complex,double)" "org.apache.commons.math.TestUtils.assertContains(String,Complex[],Complex,double)"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.assertContains(Complex[],Complex,double)"
call "org.apache.commons.math.TestUtils.assertContains(String,double[],double,double)" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
call "org.apache.commons.math.TestUtils.assertContains(String,double[],double,double)" "junit.framework.Assert.fail(String)"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.assertContains(String,double[],double,double)"
call "org.apache.commons.math.TestUtils.assertContains(double[],double,double)" "org.apache.commons.math.TestUtils.assertContains(String,double[],double,double)"
contain "org.apache.commons.math.TestUtils" "org.apache.commons.math.TestUtils.assertContains(double[],double,double)"
reference "org.apache.commons.math.util.ContinuedFractionTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.util.ContinuedFractionTest" "junit.framework.TestCase"
reference "org.apache.commons.math.util.ContinuedFractionTest" "org.apache.commons.math.util.ContinuedFraction"
call "org.apache.commons.math.util.ContinuedFractionTest.ContinuedFractionTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.util.ContinuedFractionTest" "org.apache.commons.math.util.ContinuedFractionTest.ContinuedFractionTest(String)"
call "org.apache.commons.math.util.ContinuedFractionTest.testGoldenRatio()" "org.apache.commons.math.util.ContinuedFractionTest.1.{...}"
call "org.apache.commons.math.util.ContinuedFractionTest.testGoldenRatio()" "org.apache.commons.math.util.ContinuedFraction.evaluate(double,double)"
call "org.apache.commons.math.util.ContinuedFractionTest.testGoldenRatio()" "org.apache.commons.math.util.ContinuedFractionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.util.ContinuedFractionTest.testGoldenRatio()" "org.apache.commons.math.MathException.getMessage()"
call "org.apache.commons.math.util.ContinuedFractionTest.testGoldenRatio()" "org.apache.commons.math.util.ContinuedFractionTest.fail(String)"
contain "org.apache.commons.math.util.ContinuedFractionTest" "org.apache.commons.math.util.ContinuedFractionTest.testGoldenRatio()"
reference "org.apache.commons.math.util.TransformerMapTest" "org.apache.commons.math.util.DefaultTransformer"
reference "org.apache.commons.math.util.TransformerMapTest" "org.apache.commons.math.util.TransformerMap"
reference "org.apache.commons.math.util.TransformerMapTest" "junit.framework.TestCase"
call "org.apache.commons.math.util.TransformerMapTest.TransformerMapTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.util.TransformerMapTest" "org.apache.commons.math.util.TransformerMapTest.TransformerMapTest()"
call "org.apache.commons.math.util.TransformerMapTest.testPutTransformer()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.TransformerMapTest.testPutTransformer()" "org.apache.commons.math.util.TransformerMap.TransformerMap()"
reference "org.apache.commons.math.util.TransformerMapTest.testPutTransformer()" "org.apache.commons.math.util.TransformerMapTest.class$org$apache$commons$math$util$TransformerMapTest : Class"
call "org.apache.commons.math.util.TransformerMapTest.testPutTransformer()" "org.apache.commons.math.util.TransformerMapTest.class$(String)"
call "org.apache.commons.math.util.TransformerMapTest.testPutTransformer()" "org.apache.commons.math.util.TransformerMap.putTransformer(Class,NumberTransformer)"
call "org.apache.commons.math.util.TransformerMapTest.testPutTransformer()" "org.apache.commons.math.util.TransformerMap.getTransformer(Class)"
call "org.apache.commons.math.util.TransformerMapTest.testPutTransformer()" "org.apache.commons.math.util.TransformerMapTest.assertEquals(Object,Object)"
contain "org.apache.commons.math.util.TransformerMapTest" "org.apache.commons.math.util.TransformerMapTest.testPutTransformer()"
call "org.apache.commons.math.util.TransformerMapTest.testContainsClass()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.TransformerMapTest.testContainsClass()" "org.apache.commons.math.util.TransformerMap.TransformerMap()"
reference "org.apache.commons.math.util.TransformerMapTest.testContainsClass()" "org.apache.commons.math.util.TransformerMapTest.class$org$apache$commons$math$util$TransformerMapTest : Class"
call "org.apache.commons.math.util.TransformerMapTest.testContainsClass()" "org.apache.commons.math.util.TransformerMapTest.class$(String)"
call "org.apache.commons.math.util.TransformerMapTest.testContainsClass()" "org.apache.commons.math.util.TransformerMap.putTransformer(Class,NumberTransformer)"
call "org.apache.commons.math.util.TransformerMapTest.testContainsClass()" "org.apache.commons.math.util.TransformerMap.containsClass(Class)"
call "org.apache.commons.math.util.TransformerMapTest.testContainsClass()" "org.apache.commons.math.util.TransformerMapTest.assertTrue(boolean)"
contain "org.apache.commons.math.util.TransformerMapTest" "org.apache.commons.math.util.TransformerMapTest.testContainsClass()"
call "org.apache.commons.math.util.TransformerMapTest.testContainsTransformer()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.TransformerMapTest.testContainsTransformer()" "org.apache.commons.math.util.TransformerMap.TransformerMap()"
reference "org.apache.commons.math.util.TransformerMapTest.testContainsTransformer()" "org.apache.commons.math.util.TransformerMapTest.class$org$apache$commons$math$util$TransformerMapTest : Class"
call "org.apache.commons.math.util.TransformerMapTest.testContainsTransformer()" "org.apache.commons.math.util.TransformerMapTest.class$(String)"
call "org.apache.commons.math.util.TransformerMapTest.testContainsTransformer()" "org.apache.commons.math.util.TransformerMap.putTransformer(Class,NumberTransformer)"
call "org.apache.commons.math.util.TransformerMapTest.testContainsTransformer()" "org.apache.commons.math.util.TransformerMap.containsTransformer(NumberTransformer)"
call "org.apache.commons.math.util.TransformerMapTest.testContainsTransformer()" "org.apache.commons.math.util.TransformerMapTest.assertTrue(boolean)"
contain "org.apache.commons.math.util.TransformerMapTest" "org.apache.commons.math.util.TransformerMapTest.testContainsTransformer()"
call "org.apache.commons.math.util.TransformerMapTest.testRemoveTransformer()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.TransformerMapTest.testRemoveTransformer()" "org.apache.commons.math.util.TransformerMap.TransformerMap()"
reference "org.apache.commons.math.util.TransformerMapTest.testRemoveTransformer()" "org.apache.commons.math.util.TransformerMapTest.class$org$apache$commons$math$util$TransformerMapTest : Class"
call "org.apache.commons.math.util.TransformerMapTest.testRemoveTransformer()" "org.apache.commons.math.util.TransformerMapTest.class$(String)"
call "org.apache.commons.math.util.TransformerMapTest.testRemoveTransformer()" "org.apache.commons.math.util.TransformerMap.putTransformer(Class,NumberTransformer)"
call "org.apache.commons.math.util.TransformerMapTest.testRemoveTransformer()" "org.apache.commons.math.util.TransformerMap.containsClass(Class)"
call "org.apache.commons.math.util.TransformerMapTest.testRemoveTransformer()" "org.apache.commons.math.util.TransformerMapTest.assertTrue(boolean)"
call "org.apache.commons.math.util.TransformerMapTest.testRemoveTransformer()" "org.apache.commons.math.util.TransformerMap.containsTransformer(NumberTransformer)"
call "org.apache.commons.math.util.TransformerMapTest.testRemoveTransformer()" "org.apache.commons.math.util.TransformerMap.removeTransformer(Class)"
call "org.apache.commons.math.util.TransformerMapTest.testRemoveTransformer()" "org.apache.commons.math.util.TransformerMapTest.assertFalse(boolean)"
contain "org.apache.commons.math.util.TransformerMapTest" "org.apache.commons.math.util.TransformerMapTest.testRemoveTransformer()"
call "org.apache.commons.math.util.TransformerMapTest.testClear()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.TransformerMapTest.testClear()" "org.apache.commons.math.util.TransformerMap.TransformerMap()"
reference "org.apache.commons.math.util.TransformerMapTest.testClear()" "org.apache.commons.math.util.TransformerMapTest.class$org$apache$commons$math$util$TransformerMapTest : Class"
call "org.apache.commons.math.util.TransformerMapTest.testClear()" "org.apache.commons.math.util.TransformerMapTest.class$(String)"
call "org.apache.commons.math.util.TransformerMapTest.testClear()" "org.apache.commons.math.util.TransformerMap.putTransformer(Class,NumberTransformer)"
call "org.apache.commons.math.util.TransformerMapTest.testClear()" "org.apache.commons.math.util.TransformerMap.containsClass(Class)"
call "org.apache.commons.math.util.TransformerMapTest.testClear()" "org.apache.commons.math.util.TransformerMapTest.assertTrue(boolean)"
call "org.apache.commons.math.util.TransformerMapTest.testClear()" "org.apache.commons.math.util.TransformerMap.clear()"
call "org.apache.commons.math.util.TransformerMapTest.testClear()" "org.apache.commons.math.util.TransformerMapTest.assertFalse(boolean)"
contain "org.apache.commons.math.util.TransformerMapTest" "org.apache.commons.math.util.TransformerMapTest.testClear()"
call "org.apache.commons.math.util.TransformerMapTest.testClasses()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.TransformerMapTest.testClasses()" "org.apache.commons.math.util.TransformerMap.TransformerMap()"
reference "org.apache.commons.math.util.TransformerMapTest.testClasses()" "org.apache.commons.math.util.TransformerMapTest.class$org$apache$commons$math$util$TransformerMapTest : Class"
call "org.apache.commons.math.util.TransformerMapTest.testClasses()" "org.apache.commons.math.util.TransformerMapTest.class$(String)"
call "org.apache.commons.math.util.TransformerMapTest.testClasses()" "org.apache.commons.math.util.TransformerMap.putTransformer(Class,NumberTransformer)"
call "org.apache.commons.math.util.TransformerMapTest.testClasses()" "org.apache.commons.math.util.TransformerMap.classes()"
call "org.apache.commons.math.util.TransformerMapTest.testClasses()" "org.apache.commons.math.util.TransformerMapTest.assertTrue(boolean)"
contain "org.apache.commons.math.util.TransformerMapTest" "org.apache.commons.math.util.TransformerMapTest.testClasses()"
call "org.apache.commons.math.util.TransformerMapTest.testTransformers()" "org.apache.commons.math.util.DefaultTransformer.DefaultTransformer()"
call "org.apache.commons.math.util.TransformerMapTest.testTransformers()" "org.apache.commons.math.util.TransformerMap.TransformerMap()"
reference "org.apache.commons.math.util.TransformerMapTest.testTransformers()" "org.apache.commons.math.util.TransformerMapTest.class$org$apache$commons$math$util$TransformerMapTest : Class"
call "org.apache.commons.math.util.TransformerMapTest.testTransformers()" "org.apache.commons.math.util.TransformerMapTest.class$(String)"
call "org.apache.commons.math.util.TransformerMapTest.testTransformers()" "org.apache.commons.math.util.TransformerMap.putTransformer(Class,NumberTransformer)"
call "org.apache.commons.math.util.TransformerMapTest.testTransformers()" "org.apache.commons.math.util.TransformerMap.transformers()"
call "org.apache.commons.math.util.TransformerMapTest.testTransformers()" "org.apache.commons.math.util.TransformerMapTest.assertTrue(boolean)"
contain "org.apache.commons.math.util.TransformerMapTest" "org.apache.commons.math.util.TransformerMapTest.testTransformers()"
contain "org.apache.commons.math.util.TransformerMapTest" "org.apache.commons.math.util.TransformerMapTest.class$(String)"
contain "org.apache.commons.math.util.TransformerMapTest" "org.apache.commons.math.util.TransformerMapTest.class$org$apache$commons$math$util$TransformerMapTest : Class"
reference "org.apache.commons.math.analysis.RiddersSolverTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.analysis.RiddersSolverTest" "org.apache.commons.math.analysis.RiddersSolver"
reference "org.apache.commons.math.analysis.RiddersSolverTest" "org.apache.commons.math.analysis.QuinticFunction"
reference "org.apache.commons.math.analysis.RiddersSolverTest" "org.apache.commons.math.analysis.Expm1Function"
reference "org.apache.commons.math.analysis.RiddersSolverTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.RiddersSolverTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.RiddersSolverTest" "org.apache.commons.math.analysis.UnivariateRealSolver"
call "org.apache.commons.math.analysis.RiddersSolverTest.RiddersSolverTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.analysis.RiddersSolverTest" "org.apache.commons.math.analysis.RiddersSolverTest.RiddersSolverTest()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testSinFunction()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testSinFunction()" "org.apache.commons.math.analysis.RiddersSolver.RiddersSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.RiddersSolverTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.RiddersSolverTest.testSinFunction()" "org.apache.commons.math.analysis.RiddersSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.RiddersSolverTest" "org.apache.commons.math.analysis.RiddersSolverTest.testSinFunction()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.RiddersSolver.RiddersSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.RiddersSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.RiddersSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.RiddersSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.RiddersSolverTest" "org.apache.commons.math.analysis.RiddersSolverTest.testQuinticFunction()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testExpm1Function()" "org.apache.commons.math.analysis.Expm1Function.Expm1Function()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testExpm1Function()" "org.apache.commons.math.analysis.RiddersSolver.RiddersSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.RiddersSolverTest.testExpm1Function()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testExpm1Function()" "org.apache.commons.math.analysis.UnivariateRealSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testExpm1Function()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.RiddersSolverTest.testExpm1Function()" "org.apache.commons.math.analysis.RiddersSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.RiddersSolverTest" "org.apache.commons.math.analysis.RiddersSolverTest.testExpm1Function()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testParameters()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.RiddersSolverTest.testParameters()" "org.apache.commons.math.analysis.RiddersSolver.RiddersSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.RiddersSolverTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.RiddersSolverTest.testParameters()" "org.apache.commons.math.analysis.RiddersSolverTest.fail(String)"
contain "org.apache.commons.math.analysis.RiddersSolverTest" "org.apache.commons.math.analysis.RiddersSolverTest.testParameters()"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest.1" "org.apache.commons.math.ode.EulerStepInterpolatorTest"
reference "org.apache.commons.math.ode.TestProblem2" "double[]"
reference "org.apache.commons.math.ode.TestProblem2" "org.apache.commons.math.ode.TestProblemAbstract"
call "org.apache.commons.math.ode.TestProblem2.TestProblem2()" "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract()"
call "org.apache.commons.math.ode.TestProblem2.TestProblem2()" "org.apache.commons.math.ode.TestProblem2.setInitialConditions(double,double[])"
call "org.apache.commons.math.ode.TestProblem2.TestProblem2()" "org.apache.commons.math.ode.TestProblem2.setFinalConditions(double)"
call "org.apache.commons.math.ode.TestProblem2.TestProblem2()" "org.apache.commons.math.ode.TestProblem2.setErrorScale(double[])"
reference "org.apache.commons.math.ode.TestProblem2.TestProblem2()" "org.apache.commons.math.ode.TestProblem2.y : double[]"
contain "org.apache.commons.math.ode.TestProblem2" "org.apache.commons.math.ode.TestProblem2.TestProblem2()"
call "org.apache.commons.math.ode.TestProblem2.TestProblem2(TestProblem2)" "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(TestProblemAbstract)"
reference "org.apache.commons.math.ode.TestProblem2.TestProblem2(TestProblem2)" "org.apache.commons.math.ode.TestProblem2.y : double[]"
contain "org.apache.commons.math.ode.TestProblem2" "org.apache.commons.math.ode.TestProblem2.TestProblem2(TestProblem2)"
call "org.apache.commons.math.ode.TestProblem2.clone()" "org.apache.commons.math.ode.TestProblem2.TestProblem2(TestProblem2)"
contain "org.apache.commons.math.ode.TestProblem2" "org.apache.commons.math.ode.TestProblem2.clone()"
reference "org.apache.commons.math.ode.TestProblem2.doComputeDerivatives(double,double[],double[])" "org.apache.commons.math.ode.TestProblem2.n : int"
contain "org.apache.commons.math.ode.TestProblem2" "org.apache.commons.math.ode.TestProblem2.doComputeDerivatives(double,double[],double[])"
reference "org.apache.commons.math.ode.TestProblem2.computeTheoreticalState(double)" "org.apache.commons.math.ode.TestProblem2.n : int"
reference "org.apache.commons.math.ode.TestProblem2.computeTheoreticalState(double)" "org.apache.commons.math.ode.TestProblem2.y : double[]"
contain "org.apache.commons.math.ode.TestProblem2" "org.apache.commons.math.ode.TestProblem2.computeTheoreticalState(double)"
reference "org.apache.commons.math.ode.TestProblem2.y : double[]" "double[]"
contain "org.apache.commons.math.ode.TestProblem2" "org.apache.commons.math.ode.TestProblem2.y : double[]"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolator"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.PolynomialSplineFunction"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.UnivariateRealInterpolator"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.PolynomialFunction"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.TestUtils"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.UnivariateRealFunction"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.SplineInterpolatorTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest.SplineInterpolatorTest(String)" "org.apache.commons.math.analysis.SplineInterpolatorTest.knotTolerance : double"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest.SplineInterpolatorTest(String)" "org.apache.commons.math.analysis.SplineInterpolatorTest.coefficientTolerance : double"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest.SplineInterpolatorTest(String)" "org.apache.commons.math.analysis.SplineInterpolatorTest.interpolationTolerance : double"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.SplineInterpolatorTest(String)"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest.suite()" "org.apache.commons.math.analysis.SplineInterpolatorTest.class$org$apache$commons$math$analysis$SplineInterpolatorTest : Class"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.suite()" "org.apache.commons.math.analysis.SplineInterpolatorTest.class$(String)"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.suite()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment()" "org.apache.commons.math.analysis.SplineInterpolator.SplineInterpolator()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment()" "org.apache.commons.math.analysis.UnivariateRealInterpolator.interpolate(double[],double[])"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment()" "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyInterpolation(UnivariateRealFunction,double[],double[])"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment()" "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyConsistency(PolynomialSplineFunction,double[])"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment()" "org.apache.commons.math.analysis.PolynomialSplineFunction.getPolynomials()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment()" "org.apache.commons.math.analysis.PolynomialFunction.getCoefficients()"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment()" "org.apache.commons.math.analysis.SplineInterpolatorTest.coefficientTolerance : double"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment()" "org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment()" "org.apache.commons.math.analysis.SplineInterpolatorTest.interpolationTolerance : double"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment()" "org.apache.commons.math.analysis.SplineInterpolatorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateThreeSegment()" "org.apache.commons.math.analysis.SplineInterpolator.SplineInterpolator()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateThreeSegment()" "org.apache.commons.math.analysis.UnivariateRealInterpolator.interpolate(double[],double[])"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateThreeSegment()" "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyInterpolation(UnivariateRealFunction,double[],double[])"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateThreeSegment()" "org.apache.commons.math.analysis.PolynomialSplineFunction.getPolynomials()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateThreeSegment()" "org.apache.commons.math.analysis.PolynomialFunction.getCoefficients()"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateThreeSegment()" "org.apache.commons.math.analysis.SplineInterpolatorTest.coefficientTolerance : double"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateThreeSegment()" "org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateThreeSegment()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateThreeSegment()" "org.apache.commons.math.analysis.SplineInterpolatorTest.interpolationTolerance : double"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateThreeSegment()" "org.apache.commons.math.analysis.SplineInterpolatorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinearDegenerateThreeSegment()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinear()" "org.apache.commons.math.analysis.SplineInterpolator.SplineInterpolator()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinear()" "org.apache.commons.math.analysis.UnivariateRealInterpolator.interpolate(double[],double[])"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinear()" "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyInterpolation(UnivariateRealFunction,double[],double[])"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinear()" "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyConsistency(PolynomialSplineFunction,double[])"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinear()" "org.apache.commons.math.analysis.PolynomialSplineFunction.getPolynomials()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinear()" "org.apache.commons.math.analysis.PolynomialFunction.getCoefficients()"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinear()" "org.apache.commons.math.analysis.SplineInterpolatorTest.coefficientTolerance : double"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinear()" "org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateLinear()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateSin()" "org.apache.commons.math.analysis.SplineInterpolator.SplineInterpolator()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateSin()" "org.apache.commons.math.analysis.UnivariateRealInterpolator.interpolate(double[],double[])"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateSin()" "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyInterpolation(UnivariateRealFunction,double[],double[])"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateSin()" "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyConsistency(PolynomialSplineFunction,double[])"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateSin()" "org.apache.commons.math.analysis.PolynomialSplineFunction.getPolynomials()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateSin()" "org.apache.commons.math.analysis.PolynomialFunction.getCoefficients()"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateSin()" "org.apache.commons.math.analysis.SplineInterpolatorTest.coefficientTolerance : double"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateSin()" "org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateSin()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateSin()" "org.apache.commons.math.analysis.SplineInterpolatorTest.interpolationTolerance : double"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateSin()" "org.apache.commons.math.analysis.SplineInterpolatorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.testInterpolateSin()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testIllegalArguments()" "org.apache.commons.math.analysis.SplineInterpolator.SplineInterpolator()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testIllegalArguments()" "org.apache.commons.math.analysis.UnivariateRealInterpolator.interpolate(double[],double[])"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.testIllegalArguments()" "org.apache.commons.math.analysis.SplineInterpolatorTest.fail(String)"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.testIllegalArguments()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyInterpolation(UnivariateRealFunction,double[],double[])" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
reference "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyInterpolation(UnivariateRealFunction,double[],double[])" "org.apache.commons.math.analysis.SplineInterpolatorTest.knotTolerance : double"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyInterpolation(UnivariateRealFunction,double[],double[])" "org.apache.commons.math.analysis.SplineInterpolatorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyInterpolation(UnivariateRealFunction,double[],double[])"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyConsistency(PolynomialSplineFunction,double[])" "org.apache.commons.math.analysis.PolynomialSplineFunction.getPolynomials()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyConsistency(PolynomialSplineFunction,double[])" "org.apache.commons.math.analysis.PolynomialFunction.value(double)"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyConsistency(PolynomialSplineFunction,double[])" "org.apache.commons.math.analysis.SplineInterpolatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyConsistency(PolynomialSplineFunction,double[])" "org.apache.commons.math.analysis.PolynomialFunction.derivative()"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyConsistency(PolynomialSplineFunction,double[])" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyConsistency(PolynomialSplineFunction,double[])" "org.apache.commons.math.analysis.PolynomialFunction.polynomialDerivative()"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.verifyConsistency(PolynomialSplineFunction,double[])"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.class$(String)"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.knotTolerance : double"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.coefficientTolerance : double"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.interpolationTolerance : double"
contain "org.apache.commons.math.analysis.SplineInterpolatorTest" "org.apache.commons.math.analysis.SplineInterpolatorTest.class$org$apache$commons$math$analysis$SplineInterpolatorTest : Class"
reference "org.apache.commons.math.ode.TestProblem1" "double[]"
reference "org.apache.commons.math.ode.TestProblem1" "org.apache.commons.math.ode.TestProblemAbstract"
call "org.apache.commons.math.ode.TestProblem1.TestProblem1()" "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract()"
call "org.apache.commons.math.ode.TestProblem1.TestProblem1()" "org.apache.commons.math.ode.TestProblem1.setInitialConditions(double,double[])"
call "org.apache.commons.math.ode.TestProblem1.TestProblem1()" "org.apache.commons.math.ode.TestProblem1.setFinalConditions(double)"
call "org.apache.commons.math.ode.TestProblem1.TestProblem1()" "org.apache.commons.math.ode.TestProblem1.setErrorScale(double[])"
reference "org.apache.commons.math.ode.TestProblem1.TestProblem1()" "org.apache.commons.math.ode.TestProblem1.y : double[]"
contain "org.apache.commons.math.ode.TestProblem1" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.TestProblem1.TestProblem1(TestProblem1)" "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(TestProblemAbstract)"
reference "org.apache.commons.math.ode.TestProblem1.TestProblem1(TestProblem1)" "org.apache.commons.math.ode.TestProblem1.y : double[]"
contain "org.apache.commons.math.ode.TestProblem1" "org.apache.commons.math.ode.TestProblem1.TestProblem1(TestProblem1)"
call "org.apache.commons.math.ode.TestProblem1.clone()" "org.apache.commons.math.ode.TestProblem1.TestProblem1(TestProblem1)"
contain "org.apache.commons.math.ode.TestProblem1" "org.apache.commons.math.ode.TestProblem1.clone()"
reference "org.apache.commons.math.ode.TestProblem1.doComputeDerivatives(double,double[],double[])" "org.apache.commons.math.ode.TestProblem1.n : int"
contain "org.apache.commons.math.ode.TestProblem1" "org.apache.commons.math.ode.TestProblem1.doComputeDerivatives(double,double[],double[])"
reference "org.apache.commons.math.ode.TestProblem1.computeTheoreticalState(double)" "org.apache.commons.math.ode.TestProblem1.t0 : double"
reference "org.apache.commons.math.ode.TestProblem1.computeTheoreticalState(double)" "org.apache.commons.math.ode.TestProblem1.n : int"
reference "org.apache.commons.math.ode.TestProblem1.computeTheoreticalState(double)" "org.apache.commons.math.ode.TestProblem1.y : double[]"
reference "org.apache.commons.math.ode.TestProblem1.computeTheoreticalState(double)" "org.apache.commons.math.ode.TestProblem1.y0 : double[]"
contain "org.apache.commons.math.ode.TestProblem1" "org.apache.commons.math.ode.TestProblem1.computeTheoreticalState(double)"
reference "org.apache.commons.math.ode.TestProblem1.y : double[]" "double[]"
contain "org.apache.commons.math.ode.TestProblem1" "org.apache.commons.math.ode.TestProblem1.y : double[]"
reference "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.PowellSingularFunction(double[],double)" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.buildArray(int,double)"
call "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.PowellSingularFunction(double[],double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.PowellSingularFunction(double[],double)"
reference "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.sqrt5 : double"
reference "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.sqrt10 : double"
contain "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.sqrt5 : double"
reference "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.sqrt10 : double"
contain "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.getResiduals()"
reference "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.static {...}" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.sqrt5 : double"
reference "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.static {...}" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.sqrt10 : double"
contain "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.static {...}"
contain "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.sqrt5 : double"
contain "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction" "org.apache.commons.math.estimation.MinpackTest.PowellSingularFunction.sqrt10 : double"
reference "org.apache.commons.math.ode.TestProblem4" "double[]"
reference "org.apache.commons.math.ode.TestProblem4" "org.apache.commons.math.ode.SwitchingFunction"
reference "org.apache.commons.math.ode.TestProblem4" "org.apache.commons.math.ode.TestProblem4.Bounce"
reference "org.apache.commons.math.ode.TestProblem4" "org.apache.commons.math.ode.TestProblem4.Stop"
reference "org.apache.commons.math.ode.TestProblem4" "org.apache.commons.math.ode.TestProblemAbstract"
call "org.apache.commons.math.ode.TestProblem4.TestProblem4()" "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract()"
reference "org.apache.commons.math.ode.TestProblem4.TestProblem4()" "org.apache.commons.math.ode.TestProblem4.a : double"
call "org.apache.commons.math.ode.TestProblem4.TestProblem4()" "org.apache.commons.math.ode.TestProblem4.setInitialConditions(double,double[])"
call "org.apache.commons.math.ode.TestProblem4.TestProblem4()" "org.apache.commons.math.ode.TestProblem4.setFinalConditions(double)"
call "org.apache.commons.math.ode.TestProblem4.TestProblem4()" "org.apache.commons.math.ode.TestProblem4.setErrorScale(double[])"
reference "org.apache.commons.math.ode.TestProblem4.TestProblem4()" "org.apache.commons.math.ode.TestProblem4.y : double[]"
contain "org.apache.commons.math.ode.TestProblem4" "org.apache.commons.math.ode.TestProblem4.TestProblem4()"
call "org.apache.commons.math.ode.TestProblem4.TestProblem4(TestProblem4)" "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(TestProblemAbstract)"
reference "org.apache.commons.math.ode.TestProblem4.TestProblem4(TestProblem4)" "org.apache.commons.math.ode.TestProblem4.a : double"
reference "org.apache.commons.math.ode.TestProblem4.TestProblem4(TestProblem4)" "org.apache.commons.math.ode.TestProblem4.y : double[]"
contain "org.apache.commons.math.ode.TestProblem4" "org.apache.commons.math.ode.TestProblem4.TestProblem4(TestProblem4)"
call "org.apache.commons.math.ode.TestProblem4.clone()" "org.apache.commons.math.ode.TestProblem4.TestProblem4(TestProblem4)"
contain "org.apache.commons.math.ode.TestProblem4" "org.apache.commons.math.ode.TestProblem4.clone()"
call "org.apache.commons.math.ode.TestProblem4.getSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.Bounce.Bounce()"
call "org.apache.commons.math.ode.TestProblem4.getSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.Stop.Stop()"
contain "org.apache.commons.math.ode.TestProblem4" "org.apache.commons.math.ode.TestProblem4.getSwitchingFunctions()"
contain "org.apache.commons.math.ode.TestProblem4" "org.apache.commons.math.ode.TestProblem4.doComputeDerivatives(double,double[],double[])"
reference "org.apache.commons.math.ode.TestProblem4.computeTheoreticalState(double)" "org.apache.commons.math.ode.TestProblem4.a : double"
reference "org.apache.commons.math.ode.TestProblem4.computeTheoreticalState(double)" "org.apache.commons.math.ode.TestProblem4.y : double[]"
contain "org.apache.commons.math.ode.TestProblem4" "org.apache.commons.math.ode.TestProblem4.computeTheoreticalState(double)"
contain "org.apache.commons.math.ode.TestProblem4" "org.apache.commons.math.ode.TestProblem4.a : double"
reference "org.apache.commons.math.ode.TestProblem4.y : double[]" "double[]"
contain "org.apache.commons.math.ode.TestProblem4" "org.apache.commons.math.ode.TestProblem4.y : double[]"
reference "org.apache.commons.math.ode.TestProblem3" "double[]"
reference "org.apache.commons.math.ode.TestProblem3" "org.apache.commons.math.ode.TestProblemAbstract"
call "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)" "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract()"
reference "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)" "org.apache.commons.math.ode.TestProblem3.e : double"
call "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)" "org.apache.commons.math.ode.TestProblem3.setInitialConditions(double,double[])"
call "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)" "org.apache.commons.math.ode.TestProblem3.setFinalConditions(double)"
call "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)" "org.apache.commons.math.ode.TestProblem3.setErrorScale(double[])"
reference "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)" "org.apache.commons.math.ode.TestProblem3.y : double[]"
contain "org.apache.commons.math.ode.TestProblem3" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.TestProblem3.TestProblem3()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
contain "org.apache.commons.math.ode.TestProblem3" "org.apache.commons.math.ode.TestProblem3.TestProblem3()"
call "org.apache.commons.math.ode.TestProblem3.TestProblem3(TestProblem3)" "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(TestProblemAbstract)"
reference "org.apache.commons.math.ode.TestProblem3.TestProblem3(TestProblem3)" "org.apache.commons.math.ode.TestProblem3.e : double"
reference "org.apache.commons.math.ode.TestProblem3.TestProblem3(TestProblem3)" "org.apache.commons.math.ode.TestProblem3.y : double[]"
contain "org.apache.commons.math.ode.TestProblem3" "org.apache.commons.math.ode.TestProblem3.TestProblem3(TestProblem3)"
call "org.apache.commons.math.ode.TestProblem3.clone()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(TestProblem3)"
contain "org.apache.commons.math.ode.TestProblem3" "org.apache.commons.math.ode.TestProblem3.clone()"
contain "org.apache.commons.math.ode.TestProblem3" "org.apache.commons.math.ode.TestProblem3.doComputeDerivatives(double,double[],double[])"
reference "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)" "org.apache.commons.math.ode.TestProblem3.e : double"
reference "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)" "org.apache.commons.math.ode.TestProblem3.y : double[]"
contain "org.apache.commons.math.ode.TestProblem3" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
contain "org.apache.commons.math.ode.TestProblem3" "org.apache.commons.math.ode.TestProblem3.e : double"
reference "org.apache.commons.math.ode.TestProblem3.y : double[]" "double[]"
contain "org.apache.commons.math.ode.TestProblem3" "org.apache.commons.math.ode.TestProblem3.y : double[]"
reference "org.apache.commons.math.ode.TestProblem5" "org.apache.commons.math.ode.TestProblem1"
call "org.apache.commons.math.ode.TestProblem5.TestProblem5()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
reference "org.apache.commons.math.ode.TestProblem5.TestProblem5()" "org.apache.commons.math.ode.TestProblem5.t0 : double"
reference "org.apache.commons.math.ode.TestProblem5.TestProblem5()" "org.apache.commons.math.ode.TestProblem5.t1 : double"
call "org.apache.commons.math.ode.TestProblem5.TestProblem5()" "org.apache.commons.math.ode.TestProblem5.setFinalConditions(double)"
contain "org.apache.commons.math.ode.TestProblem5" "org.apache.commons.math.ode.TestProblem5.TestProblem5()"
reference "org.apache.commons.math.distribution.TDistributionTest" "org.apache.commons.math.distribution.TDistributionImpl"
reference "org.apache.commons.math.distribution.TDistributionTest" "org.apache.commons.math.distribution.TDistribution"
reference "org.apache.commons.math.distribution.TDistributionTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest"
call "org.apache.commons.math.distribution.TDistributionTest.TDistributionTest(String)" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(String)"
contain "org.apache.commons.math.distribution.TDistributionTest" "org.apache.commons.math.distribution.TDistributionTest.TDistributionTest(String)"
call "org.apache.commons.math.distribution.TDistributionTest.makeDistribution()" "org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double)"
contain "org.apache.commons.math.distribution.TDistributionTest" "org.apache.commons.math.distribution.TDistributionTest.makeDistribution()"
contain "org.apache.commons.math.distribution.TDistributionTest" "org.apache.commons.math.distribution.TDistributionTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.TDistributionTest" "org.apache.commons.math.distribution.TDistributionTest.makeCumulativeTestValues()"
call "org.apache.commons.math.distribution.TDistributionTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()"
call "org.apache.commons.math.distribution.TDistributionTest.setUp()" "org.apache.commons.math.distribution.TDistributionTest.setTolerance(double)"
contain "org.apache.commons.math.distribution.TDistributionTest" "org.apache.commons.math.distribution.TDistributionTest.setUp()"
call "org.apache.commons.math.distribution.TDistributionTest.testCumulativeProbabilityAgaintStackOverflow()" "org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double)"
call "org.apache.commons.math.distribution.TDistributionTest.testCumulativeProbabilityAgaintStackOverflow()" "org.apache.commons.math.distribution.TDistributionImpl.cumulativeProbability(double)"
contain "org.apache.commons.math.distribution.TDistributionTest" "org.apache.commons.math.distribution.TDistributionTest.testCumulativeProbabilityAgaintStackOverflow()"
call "org.apache.commons.math.distribution.TDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double)"
call "org.apache.commons.math.distribution.TDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.TDistributionTest.setDistribution(ContinuousDistribution)"
call "org.apache.commons.math.distribution.TDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.TDistributionTest.setTolerance(double)"
call "org.apache.commons.math.distribution.TDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.TDistributionTest.setCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.TDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.TDistributionTest.getCumulativeTestPoints()"
call "org.apache.commons.math.distribution.TDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.TDistributionTest.setInverseCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.TDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.TDistributionTest.verifyCumulativeProbabilities()"
call "org.apache.commons.math.distribution.TDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.TDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.TDistributionTest" "org.apache.commons.math.distribution.TDistributionTest.testSmallDf()"
call "org.apache.commons.math.distribution.TDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.TDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.TDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.TDistributionTest.setInverseCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.TDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.TDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.TDistributionTest" "org.apache.commons.math.distribution.TDistributionTest.testInverseCumulativeProbabilityExtremes()"
call "org.apache.commons.math.distribution.TDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.TDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.TDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.TDistribution.getDegreesOfFreedom()"
call "org.apache.commons.math.distribution.TDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.TDistributionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.distribution.TDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.TDistribution.setDegreesOfFreedom(double)"
call "org.apache.commons.math.distribution.TDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.TDistributionTest.fail(String)"
contain "org.apache.commons.math.distribution.TDistributionTest" "org.apache.commons.math.distribution.TDistributionTest.testDfAccessors()"
reference "org.apache.commons.math.linear.InvalidMatrixExceptionTest" "org.apache.commons.math.linear.InvalidMatrixException"
reference "org.apache.commons.math.linear.InvalidMatrixExceptionTest" "junit.framework.TestCase"
call "org.apache.commons.math.linear.InvalidMatrixExceptionTest.InvalidMatrixExceptionTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.linear.InvalidMatrixExceptionTest" "org.apache.commons.math.linear.InvalidMatrixExceptionTest.InvalidMatrixExceptionTest()"
call "org.apache.commons.math.linear.InvalidMatrixExceptionTest.testConstructor()" "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException()"
call "org.apache.commons.math.linear.InvalidMatrixExceptionTest.testConstructor()" "org.apache.commons.math.linear.InvalidMatrixException.getMessage()"
call "org.apache.commons.math.linear.InvalidMatrixExceptionTest.testConstructor()" "org.apache.commons.math.linear.InvalidMatrixExceptionTest.assertNull(Object)"
contain "org.apache.commons.math.linear.InvalidMatrixExceptionTest" "org.apache.commons.math.linear.InvalidMatrixExceptionTest.testConstructor()"
call "org.apache.commons.math.linear.InvalidMatrixExceptionTest.testConstructorMessage()" "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(String)"
call "org.apache.commons.math.linear.InvalidMatrixExceptionTest.testConstructorMessage()" "org.apache.commons.math.linear.InvalidMatrixException.getMessage()"
call "org.apache.commons.math.linear.InvalidMatrixExceptionTest.testConstructorMessage()" "org.apache.commons.math.linear.InvalidMatrixExceptionTest.assertEquals(String,String)"
contain "org.apache.commons.math.linear.InvalidMatrixExceptionTest" "org.apache.commons.math.linear.InvalidMatrixExceptionTest.testConstructorMessage()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "junit.framework.TestCase"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistribution"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(String)" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tolerance : double"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(String)"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeDistribution()"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeDensityTestPoints()"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeDensityTestValues()"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeCumulativeTestValues()"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeInverseCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeInverseCumulativeTestValues()"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "junit.framework.TestCase.setUp()"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeDistribution()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.distribution : IntegerDistribution"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeDensityTestPoints()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestPoints : int[]"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeDensityTestValues()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestValues : double[]"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeCumulativeTestPoints()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestPoints : int[]"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeCumulativeTestValues()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestValues : double[]"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeInverseCumulativeTestPoints()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestPoints : double[]"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeInverseCumulativeTestValues()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestValues : int[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown()" "junit.framework.TestCase.tearDown()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.distribution : IntegerDistribution"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestPoints : int[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestValues : double[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestPoints : int[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestValues : double[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestPoints : double[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestValues : int[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyDensities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestPoints : int[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyDensities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestValues : double[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyDensities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.distribution : IntegerDistribution"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyDensities()" "org.apache.commons.math.distribution.IntegerDistribution.probability(int)"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyDensities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tolerance : double"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyDensities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyDensities()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyCumulativeProbabilities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestPoints : int[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyCumulativeProbabilities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestValues : double[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyCumulativeProbabilities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.distribution : IntegerDistribution"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyCumulativeProbabilities()" "org.apache.commons.math.distribution.IntegerDistribution.cumulativeProbability(int)"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyCumulativeProbabilities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tolerance : double"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyCumulativeProbabilities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyCumulativeProbabilities()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyInverseCumulativeProbabilities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestPoints : double[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyInverseCumulativeProbabilities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestValues : int[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyInverseCumulativeProbabilities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.distribution : IntegerDistribution"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyInverseCumulativeProbabilities()" "org.apache.commons.math.distribution.IntegerDistribution.inverseCumulativeProbability(double)"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyInverseCumulativeProbabilities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.assertEquals(String,int,int)"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyInverseCumulativeProbabilities()"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testDensities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyDensities()"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testDensities()"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testCumulativeProbabilities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testCumulativeProbabilities()"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testInverseCumulativeProbabilities()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testInverseCumulativeProbabilities()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testIllegalArguments()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.distribution : IntegerDistribution"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testIllegalArguments()" "org.apache.commons.math.distribution.IntegerDistribution.cumulativeProbability(int,int)"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testIllegalArguments()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.fail(String)"
call "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testIllegalArguments()" "org.apache.commons.math.distribution.IntegerDistribution.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testIllegalArguments()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getCumulativeTestPoints()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestPoints : int[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getCumulativeTestPoints()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setCumulativeTestPoints(int[])" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestPoints : int[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setCumulativeTestPoints(int[])"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getCumulativeTestValues()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestValues : double[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getCumulativeTestValues()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setCumulativeTestValues(double[])" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestValues : double[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setCumulativeTestValues(double[])"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getDensityTestPoints()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestPoints : int[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getDensityTestPoints()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setDensityTestPoints(int[])" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestPoints : int[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setDensityTestPoints(int[])"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getDensityTestValues()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestValues : double[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getDensityTestValues()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setDensityTestValues(double[])" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestValues : double[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setDensityTestValues(double[])"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getDistribution()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.distribution : IntegerDistribution"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getDistribution()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setDistribution(IntegerDistribution)" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.distribution : IntegerDistribution"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setDistribution(IntegerDistribution)"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getInverseCumulativeTestPoints()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestPoints : double[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getInverseCumulativeTestPoints()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setInverseCumulativeTestPoints(double[])" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestPoints : double[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setInverseCumulativeTestPoints(double[])"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getInverseCumulativeTestValues()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestValues : int[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getInverseCumulativeTestValues()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setInverseCumulativeTestValues(int[])" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestValues : int[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setInverseCumulativeTestValues(int[])"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getTolerance()" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tolerance : double"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getTolerance()"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setTolerance(double)" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tolerance : double"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setTolerance(double)"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.distribution : IntegerDistribution" "org.apache.commons.math.distribution.IntegerDistribution"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.distribution : IntegerDistribution"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tolerance : double"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestPoints : int[]" "int[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestPoints : int[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestValues : double[]" "double[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.densityTestValues : double[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestPoints : int[]" "int[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestPoints : int[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestValues : double[]" "double[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.cumulativeTestValues : double[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestPoints : double[]" "double[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestPoints : double[]"
reference "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestValues : int[]" "int[]"
contain "org.apache.commons.math.distribution.IntegerDistributionAbstractTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.inverseCumulativeTestValues : int[]"
reference "org.apache.commons.math.distribution.BinomialDistributionTest" "org.apache.commons.math.distribution.BinomialDistributionImpl"
reference "org.apache.commons.math.distribution.BinomialDistributionTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest"
call "org.apache.commons.math.distribution.BinomialDistributionTest.BinomialDistributionTest(String)" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(String)"
contain "org.apache.commons.math.distribution.BinomialDistributionTest" "org.apache.commons.math.distribution.BinomialDistributionTest.BinomialDistributionTest(String)"
call "org.apache.commons.math.distribution.BinomialDistributionTest.makeDistribution()" "org.apache.commons.math.distribution.BinomialDistributionImpl.BinomialDistributionImpl(int,double)"
contain "org.apache.commons.math.distribution.BinomialDistributionTest" "org.apache.commons.math.distribution.BinomialDistributionTest.makeDistribution()"
contain "org.apache.commons.math.distribution.BinomialDistributionTest" "org.apache.commons.math.distribution.BinomialDistributionTest.makeDensityTestPoints()"
contain "org.apache.commons.math.distribution.BinomialDistributionTest" "org.apache.commons.math.distribution.BinomialDistributionTest.makeDensityTestValues()"
call "org.apache.commons.math.distribution.BinomialDistributionTest.makeCumulativeTestPoints()" "org.apache.commons.math.distribution.BinomialDistributionTest.makeDensityTestPoints()"
contain "org.apache.commons.math.distribution.BinomialDistributionTest" "org.apache.commons.math.distribution.BinomialDistributionTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.BinomialDistributionTest" "org.apache.commons.math.distribution.BinomialDistributionTest.makeCumulativeTestValues()"
contain "org.apache.commons.math.distribution.BinomialDistributionTest" "org.apache.commons.math.distribution.BinomialDistributionTest.makeInverseCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.BinomialDistributionTest" "org.apache.commons.math.distribution.BinomialDistributionTest.makeInverseCumulativeTestValues()"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.BinomialDistributionImpl.BinomialDistributionImpl(int,double)"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.BinomialDistributionTest.setDistribution(IntegerDistribution)"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.BinomialDistributionTest.setCumulativeTestPoints(int[])"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.BinomialDistributionTest.setCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.BinomialDistributionTest.setDensityTestPoints(int[])"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.BinomialDistributionTest.setDensityTestValues(double[])"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.BinomialDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.BinomialDistributionTest.setInverseCumulativeTestValues(int[])"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.BinomialDistributionTest.verifyDensities()"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.BinomialDistributionTest.verifyCumulativeProbabilities()"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.BinomialDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.BinomialDistributionTest" "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0()"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.BinomialDistributionImpl.BinomialDistributionImpl(int,double)"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.BinomialDistributionTest.setDistribution(IntegerDistribution)"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.BinomialDistributionTest.setCumulativeTestPoints(int[])"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.BinomialDistributionTest.setCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.BinomialDistributionTest.setDensityTestPoints(int[])"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.BinomialDistributionTest.setDensityTestValues(double[])"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.BinomialDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.BinomialDistributionTest.setInverseCumulativeTestValues(int[])"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.BinomialDistributionTest.verifyDensities()"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.BinomialDistributionTest.verifyCumulativeProbabilities()"
call "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.BinomialDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.BinomialDistributionTest" "org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate1()"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54Integrator"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.TestProblemHandler"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.TestProblem5"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.TestProblem4"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.FirstOrderIntegrator"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.TestProblemAbstract"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DormandPrince54IntegratorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DormandPrince54IntegratorTest(String)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.DormandPrince54Integrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testDimensionCheck()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double[],double[])"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testMinStep()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testMinStep()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.TestProblem5.TestProblem5()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.TestProblemAbstract.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.TestProblemAbstract.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.DP54SmallLastHandler(double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.setInitialStepSize(double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.TestProblemAbstract.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.TestProblemAbstract.getDimension()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.DP54SmallLastHandler.wasLastSeen()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getName()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.assertEquals(String,String)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSmallLastStep()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setSafety(double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setMinReduction(double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getSafety()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getMaxGrowth()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.EmbeddedRungeKuttaIntegrator.getMinReduction()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()" "org.apache.commons.math.ode.TestProblem1.getCalls()"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testIncreasingTolerance()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.TestProblem4()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getSwitchingFunctions()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblem4.getDimension()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()" "org.apache.commons.math.ode.TestProblemHandler.getLastTime()"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testSwitchingFunctions()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testKepler()" "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testKepler()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getCalls()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testKepler()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testKepler()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.VariableHandler.VariableHandler()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testVariableSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.testVariableSteps()"
reference "org.apache.commons.math.ode.DormandPrince54IntegratorTest.suite()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.class$org$apache$commons$math$ode$DormandPrince54IntegratorTest : Class"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.suite()" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.class$(String)"
call "org.apache.commons.math.ode.DormandPrince54IntegratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.suite()"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.class$(String)"
contain "org.apache.commons.math.ode.DormandPrince54IntegratorTest" "org.apache.commons.math.ode.DormandPrince54IntegratorTest.class$org$apache$commons$math$ode$DormandPrince54IntegratorTest : Class"
reference "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestImpl"
reference "org.apache.commons.math.stat.inference.TTestTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.inference.TTestTest" "double[]"
reference "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
reference "org.apache.commons.math.stat.inference.TTestTest" "junit.framework.TestCase"
reference "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTest"
call "org.apache.commons.math.stat.inference.TTestTest.TTestTest(String)" "junit.framework.TestCase.TestCase(String)"
call "org.apache.commons.math.stat.inference.TTestTest.TTestTest(String)" "org.apache.commons.math.stat.inference.TTestImpl.TTestImpl()"
reference "org.apache.commons.math.stat.inference.TTestTest.TTestTest(String)" "org.apache.commons.math.stat.inference.TTestTest.testStatistic : TTest"
reference "org.apache.commons.math.stat.inference.TTestTest.TTestTest(String)" "org.apache.commons.math.stat.inference.TTestTest.tooShortObs : double[]"
reference "org.apache.commons.math.stat.inference.TTestTest.TTestTest(String)" "org.apache.commons.math.stat.inference.TTestTest.emptyObs : double[]"
call "org.apache.commons.math.stat.inference.TTestTest.TTestTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
reference "org.apache.commons.math.stat.inference.TTestTest.TTestTest(String)" "org.apache.commons.math.stat.inference.TTestTest.emptyStats : SummaryStatistics"
reference "org.apache.commons.math.stat.inference.TTestTest.TTestTest(String)" "org.apache.commons.math.stat.inference.TTestTest.tooShortStats : SummaryStatistics"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.TTestTest(String)"
call "org.apache.commons.math.stat.inference.TTestTest.setUp()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
reference "org.apache.commons.math.stat.inference.TTestTest.setUp()" "org.apache.commons.math.stat.inference.TTestTest.tooShortStats : SummaryStatistics"
call "org.apache.commons.math.stat.inference.TTestTest.setUp()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.setUp()"
reference "org.apache.commons.math.stat.inference.TTestTest.suite()" "org.apache.commons.math.stat.inference.TTestTest.class$org$apache$commons$math$stat$inference$TTestTest : Class"
call "org.apache.commons.math.stat.inference.TTestTest.suite()" "org.apache.commons.math.stat.inference.TTestTest.class$(String)"
call "org.apache.commons.math.stat.inference.TTestTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.inference.TTestTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.suite()"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
reference "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TTestTest.testStatistic : TTest"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TTest.t(double,double[])"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TTestTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TTest.t(double,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TTest.tTest(double,double[])"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TTest.tTest(double,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TTestTest.fail(String)"
reference "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TTestTest.emptyObs : double[]"
reference "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TTestTest.emptyStats : SummaryStatistics"
reference "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TTestTest.tooShortObs : double[]"
reference "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()" "org.apache.commons.math.stat.inference.TTestTest.tooShortStats : SummaryStatistics"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.testOneSampleT()"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
reference "org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TTestTest.testStatistic : TTest"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TTest.t(double,double[])"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TTestTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TTest.t(double,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TTest.tTest(double,double[])"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TTest.tTest(double,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TTest.tTest(double,double[],double)"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TTestTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TTest.tTest(double,StatisticalSummary,double)"
call "org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest()" "org.apache.commons.math.stat.inference.TTestTest.fail(String)"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.testOneSampleTTest()"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
reference "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TTestTest.testStatistic : TTest"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TTest.t(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TTestTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TTest.t(StatisticalSummary,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TTest.tTest(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TTest.tTest(StatisticalSummary,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TTest.tTest(double[],double[],double)"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TTestTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TTest.tTest(StatisticalSummary,StatisticalSummary,double)"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TTestTest.fail(String)"
reference "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TTestTest.tooShortObs : double[]"
reference "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()" "org.apache.commons.math.stat.inference.TTestTest.tooShortStats : SummaryStatistics"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHeterscedastic()"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
reference "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.inference.TTestTest.testStatistic : TTest"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.inference.TTest.homoscedasticT(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.inference.TTestTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.inference.TTest.homoscedasticTTest(StatisticalSummary,StatisticalSummary)"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.inference.TTest.homoscedasticTTest(double[],double[],double)"
call "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHomoscedastic()" "org.apache.commons.math.stat.inference.TTestTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.testTwoSampleTHomoscedastic()"
reference "org.apache.commons.math.stat.inference.TTestTest.testSmallSamples()" "org.apache.commons.math.stat.inference.TTestTest.testStatistic : TTest"
call "org.apache.commons.math.stat.inference.TTestTest.testSmallSamples()" "org.apache.commons.math.stat.inference.TTest.t(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestTest.testSmallSamples()" "org.apache.commons.math.stat.inference.TTestTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.inference.TTestTest.testSmallSamples()" "org.apache.commons.math.stat.inference.TTest.tTest(double[],double[])"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.testSmallSamples()"
reference "org.apache.commons.math.stat.inference.TTestTest.testPaired()" "org.apache.commons.math.stat.inference.TTestTest.testStatistic : TTest"
call "org.apache.commons.math.stat.inference.TTestTest.testPaired()" "org.apache.commons.math.stat.inference.TTest.pairedT(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestTest.testPaired()" "org.apache.commons.math.stat.inference.TTestTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.inference.TTestTest.testPaired()" "org.apache.commons.math.stat.inference.TTest.pairedTTest(double[],double[])"
call "org.apache.commons.math.stat.inference.TTestTest.testPaired()" "org.apache.commons.math.stat.inference.TTest.pairedTTest(double[],double[],double)"
call "org.apache.commons.math.stat.inference.TTestTest.testPaired()" "org.apache.commons.math.stat.inference.TTestTest.assertFalse(boolean)"
call "org.apache.commons.math.stat.inference.TTestTest.testPaired()" "org.apache.commons.math.stat.inference.TTestTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.testPaired()"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.class$(String)"
reference "org.apache.commons.math.stat.inference.TTestTest.testStatistic : TTest" "org.apache.commons.math.stat.inference.TTest"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.testStatistic : TTest"
reference "org.apache.commons.math.stat.inference.TTestTest.tooShortObs : double[]" "double[]"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.tooShortObs : double[]"
reference "org.apache.commons.math.stat.inference.TTestTest.emptyObs : double[]" "double[]"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.emptyObs : double[]"
reference "org.apache.commons.math.stat.inference.TTestTest.emptyStats : SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.emptyStats : SummaryStatistics"
reference "org.apache.commons.math.stat.inference.TTestTest.tooShortStats : SummaryStatistics" "org.apache.commons.math.stat.descriptive.SummaryStatistics"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.tooShortStats : SummaryStatistics"
contain "org.apache.commons.math.stat.inference.TTestTest" "org.apache.commons.math.stat.inference.TTestTest.class$org$apache$commons$math$stat$inference$TTestTest : Class"
reference "org.apache.commons.math.random.UniformRandomGeneratorTest" "org.apache.commons.math.random.JDKRandomGenerator"
reference "org.apache.commons.math.random.UniformRandomGeneratorTest" "org.apache.commons.math.random.UniformRandomGenerator"
reference "org.apache.commons.math.random.UniformRandomGeneratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.random.UniformRandomGeneratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.random.UniformRandomGeneratorTest" "org.apache.commons.math.random.RandomGenerator"
reference "org.apache.commons.math.random.UniformRandomGeneratorTest" "org.apache.commons.math.stat.StatUtils"
call "org.apache.commons.math.random.UniformRandomGeneratorTest.UniformRandomGeneratorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.random.UniformRandomGeneratorTest" "org.apache.commons.math.random.UniformRandomGeneratorTest.UniformRandomGeneratorTest(String)"
call "org.apache.commons.math.random.UniformRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.random.JDKRandomGenerator.JDKRandomGenerator()"
call "org.apache.commons.math.random.UniformRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.random.RandomGenerator.setSeed(long)"
call "org.apache.commons.math.random.UniformRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.random.UniformRandomGenerator.UniformRandomGenerator(RandomGenerator)"
call "org.apache.commons.math.random.UniformRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.random.UniformRandomGenerator.nextNormalizedDouble()"
call "org.apache.commons.math.random.UniformRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.stat.StatUtils.mean(double[])"
call "org.apache.commons.math.random.UniformRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.random.UniformRandomGeneratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.random.UniformRandomGeneratorTest.testMeanAndStandardDeviation()" "org.apache.commons.math.stat.StatUtils.variance(double[])"
contain "org.apache.commons.math.random.UniformRandomGeneratorTest" "org.apache.commons.math.random.UniformRandomGeneratorTest.testMeanAndStandardDeviation()"
reference "org.apache.commons.math.random.UniformRandomGeneratorTest.suite()" "org.apache.commons.math.random.UniformRandomGeneratorTest.class$org$apache$commons$math$random$UniformRandomGeneratorTest : Class"
call "org.apache.commons.math.random.UniformRandomGeneratorTest.suite()" "org.apache.commons.math.random.UniformRandomGeneratorTest.class$(String)"
call "org.apache.commons.math.random.UniformRandomGeneratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.random.UniformRandomGeneratorTest" "org.apache.commons.math.random.UniformRandomGeneratorTest.suite()"
contain "org.apache.commons.math.random.UniformRandomGeneratorTest" "org.apache.commons.math.random.UniformRandomGeneratorTest.class$(String)"
contain "org.apache.commons.math.random.UniformRandomGeneratorTest" "org.apache.commons.math.random.UniformRandomGeneratorTest.class$org$apache$commons$math$random$UniformRandomGeneratorTest : Class"
reference "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.Percentile"
reference "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.PercentileTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.PercentileTest(String)"
reference "org.apache.commons.math.stat.descriptive.rank.PercentileTest.suite()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.class$org$apache$commons$math$stat$descriptive$rank$PercentileTest : Class"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.suite()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.suite()"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.rank.PercentileTest.expectedValue()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.percentile95 : double"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testHighPercentile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testHighPercentile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testHighPercentile()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testHighPercentile()"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testPercentile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testPercentile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testPercentile()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testPercentile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.setQuantile(double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testPercentile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int,double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testPercentile()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.fail()"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testPercentile()"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testNISTExample()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testNISTExample()" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testNISTExample()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testNISTExample()" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int,double)"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testNISTExample()"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.test5()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)"
reference "org.apache.commons.math.stat.descriptive.rank.PercentileTest.test5()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.percentile5 : double"
reference "org.apache.commons.math.stat.descriptive.rank.PercentileTest.test5()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testArray : double[]"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.test5()" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.test5()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.getTolerance()"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.test5()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.test5()"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testNullEmpty()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testNullEmpty()" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testNullEmpty()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.fail(String)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testNullEmpty()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testNullEmpty()"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSingleton()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSingleton()" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSingleton()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSingleton()" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSingleton()" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int,double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSingleton()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSingleton()"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSpecialValues()"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSetQuantile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile(double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSetQuantile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.setQuantile(double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSetQuantile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.getQuantile()"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSetQuantile()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSetQuantile()" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.fail(String)"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.testSetQuantile()"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.rank.PercentileTest.stat : Percentile" "org.apache.commons.math.stat.descriptive.rank.Percentile"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.stat : Percentile"
contain "org.apache.commons.math.stat.descriptive.rank.PercentileTest" "org.apache.commons.math.stat.descriptive.rank.PercentileTest.class$org$apache$commons$math$stat$descriptive$rank$PercentileTest : Class"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "junit.framework.TestCase"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistribution"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(String)" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tolerance : double"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(String)"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeDistribution()"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeCumulativeTestValues()"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeCumulativeTestValues()"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints()"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues()"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()" "junit.framework.TestCase.setUp()"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeDistribution()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.distribution : ContinuousDistribution"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeCumulativeTestPoints()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestPoints : double[]"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeCumulativeTestValues()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestValues : double[]"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestPoints : double[]"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestValues : double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown()" "junit.framework.TestCase.tearDown()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.distribution : ContinuousDistribution"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestPoints : double[]"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestValues : double[]"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestPoints : double[]"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestValues : double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestPoints : double[]"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestValues : double[]"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.distribution : ContinuousDistribution"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities()" "org.apache.commons.math.distribution.ContinuousDistribution.cumulativeProbability(double)"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getTolerance()"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities()" "org.apache.commons.math.TestUtils.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestPoints : double[]"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestValues : double[]"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.distribution : ContinuousDistribution"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities()" "org.apache.commons.math.distribution.ContinuousDistribution.inverseCumulativeProbability(double)"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getTolerance()"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities()" "org.apache.commons.math.TestUtils.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities()"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testCumulativeProbabilities()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testCumulativeProbabilities()"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testInverseCumulativeProbabilities()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testInverseCumulativeProbabilities()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testConsistency()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestPoints : double[]"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testConsistency()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.distribution : ContinuousDistribution"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testConsistency()" "org.apache.commons.math.distribution.ContinuousDistribution.cumulativeProbability(double,double)"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testConsistency()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tolerance : double"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testConsistency()" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testConsistency()" "org.apache.commons.math.distribution.ContinuousDistribution.cumulativeProbability(double)"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testConsistency()" "org.apache.commons.math.TestUtils.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testConsistency()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testIllegalArguments()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.distribution : ContinuousDistribution"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testIllegalArguments()" "org.apache.commons.math.distribution.ContinuousDistribution.cumulativeProbability(double,double)"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testIllegalArguments()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.fail(String)"
call "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testIllegalArguments()" "org.apache.commons.math.distribution.ContinuousDistribution.inverseCumulativeProbability(double)"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testIllegalArguments()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestPoints()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestPoints : double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestPoints()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestPoints(double[])" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestPoints : double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestPoints(double[])"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestValues()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestValues : double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestValues()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestValues(double[])" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestValues : double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestValues(double[])"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getDistribution()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.distribution : ContinuousDistribution"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getDistribution()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setDistribution(ContinuousDistribution)" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.distribution : ContinuousDistribution"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setDistribution(ContinuousDistribution)"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getInverseCumulativeTestPoints()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestPoints : double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getInverseCumulativeTestPoints()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestPoints(double[])" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestPoints : double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestPoints(double[])"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getInverseCumulativeTestValues()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestValues : double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getInverseCumulativeTestValues()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestValues(double[])" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestValues : double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestValues(double[])"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getTolerance()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tolerance : double"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getTolerance()"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double)" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tolerance : double"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double)"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.distribution : ContinuousDistribution" "org.apache.commons.math.distribution.ContinuousDistribution"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.distribution : ContinuousDistribution"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tolerance : double"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestPoints : double[]" "double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestPoints : double[]"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestValues : double[]" "double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.cumulativeTestValues : double[]"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestPoints : double[]" "double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestPoints : double[]"
reference "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestValues : double[]" "double[]"
contain "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.inverseCumulativeTestValues : double[]"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModel"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.DormandPrince853Integrator"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.DummyStepInterpolator"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.DormandPrince54Integrator"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.FirstOrderIntegrator"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.ContinuousOutputModelTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.ContinuousOutputModelTest(String)" "org.apache.commons.math.ode.ContinuousOutputModelTest.pb : TestProblem3"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.ContinuousOutputModelTest(String)" "org.apache.commons.math.ode.ContinuousOutputModelTest.integ : FirstOrderIntegrator"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.ContinuousOutputModelTest(String)"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries()" "org.apache.commons.math.ode.ContinuousOutputModelTest.integ : FirstOrderIntegrator"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries()" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries()" "org.apache.commons.math.ode.ContinuousOutputModelTest.pb : TestProblem3"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries()" "org.apache.commons.math.ode.FirstOrderIntegrator.getStepHandler()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries()" "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()" "org.apache.commons.math.ode.ContinuousOutputModelTest.integ : FirstOrderIntegrator"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()" "org.apache.commons.math.ode.ContinuousOutputModelTest.pb : TestProblem3"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()" "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()" "org.apache.commons.math.ode.ContinuousOutputModelTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging()" "org.apache.commons.math.ode.ContinuousOutputModelTest.1.{...}"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging()" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging()" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging()" "org.apache.commons.math.ode.ContinuousOutputModel.append(ContinuousOutputModel)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging()" "org.apache.commons.math.ode.ContinuousOutputModel.getInitialTime()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging()" "org.apache.commons.math.ode.ContinuousOutputModelTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging()" "org.apache.commons.math.ode.ContinuousOutputModel.getFinalTime()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging()" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedTime()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging()" "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging()" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testErrorConditions()" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testErrorConditions()" "org.apache.commons.math.ode.ContinuousOutputModelTest.buildInterpolator(double,double[],double)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testErrorConditions()" "org.apache.commons.math.ode.ContinuousOutputModel.handleStep(StepInterpolator,boolean)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testErrorConditions()" "org.apache.commons.math.ode.ContinuousOutputModelTest.checkAppendError(ContinuousOutputModel,double,double[],double)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testErrorConditions()" "org.apache.commons.math.ode.ContinuousOutputModelTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.testErrorConditions()" "org.apache.commons.math.ode.ContinuousOutputModelTest.assertFalse(boolean)"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.testErrorConditions()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.checkAppendError(ContinuousOutputModel,double,double[],double)" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.checkAppendError(ContinuousOutputModel,double,double[],double)" "org.apache.commons.math.ode.ContinuousOutputModelTest.buildInterpolator(double,double[],double)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.checkAppendError(ContinuousOutputModel,double,double[],double)" "org.apache.commons.math.ode.ContinuousOutputModel.handleStep(StepInterpolator,boolean)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.checkAppendError(ContinuousOutputModel,double,double[],double)" "org.apache.commons.math.ode.ContinuousOutputModel.append(ContinuousOutputModel)"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.checkAppendError(ContinuousOutputModel,double,double[],double)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.buildInterpolator(double,double[],double)" "org.apache.commons.math.ode.DummyStepInterpolator.DummyStepInterpolator(double[],boolean)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.buildInterpolator(double,double[],double)" "org.apache.commons.math.ode.DummyStepInterpolator.storeTime(double)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.buildInterpolator(double,double[],double)" "org.apache.commons.math.ode.DummyStepInterpolator.shift()"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.buildInterpolator(double,double[],double)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.checkValue(double,double)" "org.apache.commons.math.ode.ContinuousOutputModelTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.checkValue(double,double)"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.suite()" "org.apache.commons.math.ode.ContinuousOutputModelTest.class$org$apache$commons$math$ode$ContinuousOutputModelTest : Class"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.suite()" "org.apache.commons.math.ode.ContinuousOutputModelTest.class$(String)"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.suite()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.setUp()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.setUp()" "org.apache.commons.math.ode.ContinuousOutputModelTest.pb : TestProblem3"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.setUp()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.setUp()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.ContinuousOutputModelTest.setUp()" "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.setUp()" "org.apache.commons.math.ode.ContinuousOutputModelTest.integ : FirstOrderIntegrator"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.setUp()"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.tearDown()" "org.apache.commons.math.ode.ContinuousOutputModelTest.pb : TestProblem3"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.tearDown()" "org.apache.commons.math.ode.ContinuousOutputModelTest.integ : FirstOrderIntegrator"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.tearDown()"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.class$(String)"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.pb : TestProblem3" "org.apache.commons.math.ode.TestProblem3"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.pb : TestProblem3"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.integ : FirstOrderIntegrator" "org.apache.commons.math.ode.FirstOrderIntegrator"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.integ : FirstOrderIntegrator"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest.class$org$apache$commons$math$ode$ContinuousOutputModelTest : Class"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest.SummaryStatisticsImplTest(String)" "org.apache.commons.math.stat.descriptive.SummaryStatisticsAbstractTest.SummaryStatisticsAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest.SummaryStatisticsImplTest(String)"
reference "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest.suite()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest.class$org$apache$commons$math$stat$descriptive$SummaryStatisticsImplTest : Class"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest.suite()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest.suite()"
call "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest.createSummaryStatistics()" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl.SummaryStatisticsImpl()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest.createSummaryStatistics()"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest.class$(String)"
contain "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest" "org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest.class$org$apache$commons$math$stat$descriptive$SummaryStatisticsImplTest : Class"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.stat.descriptive.moment.VectorialMean"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.JDKRandomGenerator"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.GaussianRandomGenerator"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.DimensionMismatchException"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.linear.RealMatrix"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.RandomGenerator"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.UncorrelatedRandomVectorGeneratorTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.UncorrelatedRandomVectorGeneratorTest(String)" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.mean : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.UncorrelatedRandomVectorGeneratorTest(String)" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.standardDeviation : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.UncorrelatedRandomVectorGeneratorTest(String)" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.generator : UncorrelatedRandomVectorGenerator"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.UncorrelatedRandomVectorGeneratorTest(String)"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.testMeanAndCorrelation()" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.mean : double[]"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.testMeanAndCorrelation()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.VectorialMean(int)"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.testMeanAndCorrelation()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.VectorialCovariance(int)"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.testMeanAndCorrelation()" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.generator : UncorrelatedRandomVectorGenerator"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.testMeanAndCorrelation()" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.nextVector()"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.testMeanAndCorrelation()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.increment(double[])"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.testMeanAndCorrelation()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.increment(double[])"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.testMeanAndCorrelation()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.getResult()"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.testMeanAndCorrelation()" "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.getResult()"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.testMeanAndCorrelation()" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.assertEquals(double,double,double)"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.testMeanAndCorrelation()" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.standardDeviation : double[]"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.testMeanAndCorrelation()" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.testMeanAndCorrelation()"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.mean : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.standardDeviation : double[]"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.JDKRandomGenerator.JDKRandomGenerator()"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.RandomGenerator.setSeed(long)"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.GaussianRandomGenerator.GaussianRandomGenerator(RandomGenerator)"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.UncorrelatedRandomVectorGenerator(double[],double[],NormalizedRandomGenerator)"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.setUp()" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.generator : UncorrelatedRandomVectorGenerator"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.setUp()"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.tearDown()" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.mean : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.tearDown()" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.standardDeviation : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.tearDown()" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.generator : UncorrelatedRandomVectorGenerator"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.tearDown()"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.suite()" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.class$org$apache$commons$math$random$UncorrelatedRandomVectorGeneratorTest : Class"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.suite()" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.class$(String)"
call "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.suite()"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.class$(String)"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.mean : double[]" "double[]"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.mean : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.standardDeviation : double[]" "double[]"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.standardDeviation : double[]"
reference "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.generator : UncorrelatedRandomVectorGenerator" "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.generator : UncorrelatedRandomVectorGenerator"
contain "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest" "org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest.class$org$apache$commons$math$random$UncorrelatedRandomVectorGeneratorTest : Class"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.WeightedMeasurement"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.PointModel(LevenbergMarquardtEstimatorTest.Circle,double,double)" "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.PointModel(LevenbergMarquardtEstimatorTest.Circle,double,double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.this$0 : Circle"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.PointModel(LevenbergMarquardtEstimatorTest.Circle,double,double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.px : double"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.PointModel(LevenbergMarquardtEstimatorTest.Circle,double,double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.py : double"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.PointModel(LevenbergMarquardtEstimatorTest.Circle,double,double)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.this$0 : Circle"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.access$000(LevenbergMarquardtEstimatorTest.Circle)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiX()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getPartialRadiusX()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.access$100(LevenbergMarquardtEstimatorTest.Circle)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiY()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getPartialRadiusY()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartial(EstimatedParameter)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getCenterDistance()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.px : double"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getCenterDistance()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.this$0 : Circle"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getCenterDistance()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.access$000(LevenbergMarquardtEstimatorTest.Circle)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getCenterDistance()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getCenterDistance()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.py : double"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getCenterDistance()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.access$100(LevenbergMarquardtEstimatorTest.Circle)"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getCenterDistance()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiX()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.this$0 : Circle"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiX()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.access$000(LevenbergMarquardtEstimatorTest.Circle)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiX()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiX()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.px : double"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiX()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getCenterDistance()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiX()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiY()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.this$0 : Circle"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiY()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.access$100(LevenbergMarquardtEstimatorTest.Circle)"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiY()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiY()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.py : double"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiY()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getCenterDistance()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiY()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getTheoreticalValue()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getCenterDistance()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getTheoreticalValue()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.this$0 : Circle"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getTheoreticalValue()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getRadius()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getTheoreticalValue()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.px : double"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.py : double"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.serialVersionUID : long"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.this$0 : Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.this$0 : Circle"
reference "org.apache.commons.math.ConvergenceExceptionTest" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.ConvergenceExceptionTest" "junit.framework.TestCase"
call "org.apache.commons.math.ConvergenceExceptionTest.ConvergenceExceptionTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.ConvergenceExceptionTest" "org.apache.commons.math.ConvergenceExceptionTest.ConvergenceExceptionTest()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructor()" "org.apache.commons.math.ConvergenceException.ConvergenceException()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructor()" "org.apache.commons.math.ConvergenceException.getCause()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructor()" "org.apache.commons.math.ConvergenceExceptionTest.assertNull(Object)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructor()" "org.apache.commons.math.ConvergenceException.getMessage()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructor()" "org.apache.commons.math.ConvergenceExceptionTest.assertNotNull(Object)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructor()" "org.apache.commons.math.ConvergenceException.getMessage(Locale)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructor()" "org.apache.commons.math.ConvergenceExceptionTest.assertFalse(boolean)"
contain "org.apache.commons.math.ConvergenceExceptionTest" "org.apache.commons.math.ConvergenceExceptionTest.testConstructor()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.ConvergenceException.ConvergenceException(String,Object[])"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.ConvergenceException.getCause()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.ConvergenceExceptionTest.assertNull(Object)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.ConvergenceException.getPattern()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.ConvergenceExceptionTest.assertEquals(String,String)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.ConvergenceException.getArguments()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.ConvergenceExceptionTest.assertEquals(int,int)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.ConvergenceExceptionTest.assertEquals(Object,Object)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.ConvergenceException.getMessage()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.ConvergenceExceptionTest.assertFalse(boolean)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.ConvergenceException.getMessage(Locale)"
contain "org.apache.commons.math.ConvergenceExceptionTest" "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArguments()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorCause()" "org.apache.commons.math.ConvergenceException.ConvergenceException(Throwable)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorCause()" "org.apache.commons.math.ConvergenceException.getCause()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorCause()" "org.apache.commons.math.ConvergenceExceptionTest.assertEquals(Object,Object)"
contain "org.apache.commons.math.ConvergenceExceptionTest" "org.apache.commons.math.ConvergenceExceptionTest.testConstructorCause()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.ConvergenceException.ConvergenceException(String,Object[],Throwable)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.ConvergenceException.getCause()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.ConvergenceExceptionTest.assertEquals(Object,Object)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.ConvergenceException.getPattern()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.ConvergenceExceptionTest.assertEquals(String,String)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.ConvergenceException.getArguments()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.ConvergenceExceptionTest.assertEquals(int,int)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.ConvergenceException.getMessage()"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.ConvergenceExceptionTest.assertFalse(boolean)"
call "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.ConvergenceException.getMessage(Locale)"
contain "org.apache.commons.math.ConvergenceExceptionTest" "org.apache.commons.math.ConvergenceExceptionTest.testConstructorPatternArgumentsCause()"
reference "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectional"
reference "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker"
reference "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.optimization.CostException"
reference "org.apache.commons.math.optimization.MultiDirectionalTest" "double[]"
reference "org.apache.commons.math.optimization.MultiDirectionalTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.optimization.MultiDirectionalTest" "junit.framework.TestCase"
reference "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.ConvergenceException"
reference "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.optimization.PointCostPair"
call "org.apache.commons.math.optimization.MultiDirectionalTest.MultiDirectionalTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectionalTest.MultiDirectionalTest(String)"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testCostExceptions()" "org.apache.commons.math.optimization.MultiDirectionalTest.1.{...}"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testCostExceptions()" "org.apache.commons.math.optimization.MultiDirectional.MultiDirectional(double,double)"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testCostExceptions()" "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker.ValueChecker(double)"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testCostExceptions()" "org.apache.commons.math.optimization.MultiDirectional.minimizes(CostFunction,int,ConvergenceChecker,double[],double[])"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testCostExceptions()" "org.apache.commons.math.optimization.MultiDirectionalTest.fail(String)"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testCostExceptions()" "org.apache.commons.math.optimization.CostException.getCause()"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testCostExceptions()" "org.apache.commons.math.optimization.MultiDirectionalTest.assertNull(Object)"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testCostExceptions()" "org.apache.commons.math.optimization.MultiDirectionalTest.assertNotNull(Object)"
contain "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectionalTest.testCostExceptions()"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testRosenbrock()" "org.apache.commons.math.optimization.MultiDirectionalTest.2.{...}"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.testRosenbrock()" "org.apache.commons.math.optimization.MultiDirectionalTest.count : int"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testRosenbrock()" "org.apache.commons.math.optimization.MultiDirectional.MultiDirectional()"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testRosenbrock()" "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker.ValueChecker(double)"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testRosenbrock()" "org.apache.commons.math.optimization.MultiDirectional.minimizes(CostFunction,int,ConvergenceChecker,double[][])"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testRosenbrock()" "org.apache.commons.math.optimization.MultiDirectionalTest.assertTrue(boolean)"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.testRosenbrock()" "org.apache.commons.math.optimization.PointCostPair.cost : double"
contain "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectionalTest.testRosenbrock()"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testPowell()" "org.apache.commons.math.optimization.MultiDirectionalTest.3.{...}"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.testPowell()" "org.apache.commons.math.optimization.MultiDirectionalTest.count : int"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testPowell()" "org.apache.commons.math.optimization.MultiDirectional.MultiDirectional()"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testPowell()" "org.apache.commons.math.optimization.MultiDirectionalTest.ValueChecker.ValueChecker(double)"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testPowell()" "org.apache.commons.math.optimization.MultiDirectional.minimizes(CostFunction,int,ConvergenceChecker,double[],double[])"
call "org.apache.commons.math.optimization.MultiDirectionalTest.testPowell()" "org.apache.commons.math.optimization.MultiDirectionalTest.assertTrue(boolean)"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.testPowell()" "org.apache.commons.math.optimization.PointCostPair.cost : double"
contain "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectionalTest.testPowell()"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.suite()" "org.apache.commons.math.optimization.MultiDirectionalTest.class$org$apache$commons$math$optimization$MultiDirectionalTest : Class"
call "org.apache.commons.math.optimization.MultiDirectionalTest.suite()" "org.apache.commons.math.optimization.MultiDirectionalTest.class$(String)"
call "org.apache.commons.math.optimization.MultiDirectionalTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectionalTest.suite()"
reference "org.apache.commons.math.optimization.MultiDirectionalTest.access$004(MultiDirectionalTest)" "org.apache.commons.math.optimization.MultiDirectionalTest.count : int"
contain "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectionalTest.access$004(MultiDirectionalTest)"
contain "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectionalTest.class$(String)"
contain "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectionalTest.count : int"
contain "org.apache.commons.math.optimization.MultiDirectionalTest" "org.apache.commons.math.optimization.MultiDirectionalTest.class$org$apache$commons$math$optimization$MultiDirectionalTest : Class"
reference "org.apache.commons.math.ode.TestProblem4.Bounce" "org.apache.commons.math.ode.SwitchingFunction"
reference "org.apache.commons.math.ode.TestProblem4.Bounce" "org.apache.commons.math.ode.TestProblem4"
reference "org.apache.commons.math.ode.TestProblem4.Bounce.Bounce()" "org.apache.commons.math.ode.TestProblem4.Bounce.sign : int"
contain "org.apache.commons.math.ode.TestProblem4.Bounce" "org.apache.commons.math.ode.TestProblem4.Bounce.Bounce()"
reference "org.apache.commons.math.ode.TestProblem4.Bounce.g(double,double[])" "org.apache.commons.math.ode.TestProblem4.Bounce.sign : int"
contain "org.apache.commons.math.ode.TestProblem4.Bounce" "org.apache.commons.math.ode.TestProblem4.Bounce.g(double,double[])"
reference "org.apache.commons.math.ode.TestProblem4.Bounce.eventOccurred(double,double[])" "org.apache.commons.math.ode.TestProblem4.Bounce.sign : int"
contain "org.apache.commons.math.ode.TestProblem4.Bounce" "org.apache.commons.math.ode.TestProblem4.Bounce.eventOccurred(double,double[])"
contain "org.apache.commons.math.ode.TestProblem4.Bounce" "org.apache.commons.math.ode.TestProblem4.Bounce.resetState(double,double[])"
contain "org.apache.commons.math.ode.TestProblem4.Bounce" "org.apache.commons.math.ode.TestProblem4.Bounce.serialVersionUID : long"
contain "org.apache.commons.math.ode.TestProblem4.Bounce" "org.apache.commons.math.ode.TestProblem4.Bounce.sign : int"
reference "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.JennrichSampsonFunction(int,double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction" "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.JennrichSampsonFunction(int,double[],double,double,double[])"
reference "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.m : int"
contain "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction" "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.m : int"
contain "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction" "org.apache.commons.math.estimation.MinpackTest.JennrichSampsonFunction.getResiduals()"
reference "org.apache.commons.math.complex.ComplexFormatTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest"
call "org.apache.commons.math.complex.ComplexFormatTest.ComplexFormatTest()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.ComplexFormatAbstractTest()"
contain "org.apache.commons.math.complex.ComplexFormatTest" "org.apache.commons.math.complex.ComplexFormatTest.ComplexFormatTest()"
contain "org.apache.commons.math.complex.ComplexFormatTest" "org.apache.commons.math.complex.ComplexFormatTest.getDecimalCharacter()"
contain "org.apache.commons.math.complex.ComplexFormatTest" "org.apache.commons.math.complex.ComplexFormatTest.getLocale()"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.ResizableDoubleArray"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.random.RandomDataImpl"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.DoubleArrayAbstractTest"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.DoubleArray"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.random.RandomData"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.ResizableDoubleArrayTest(String)" "org.apache.commons.math.util.DoubleArrayAbstractTest.DoubleArrayAbstractTest(String)"
contain "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.ResizableDoubleArrayTest.ResizableDoubleArrayTest(String)"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest.tearDown()" "org.apache.commons.math.util.ResizableDoubleArrayTest.da : DoubleArray"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest.tearDown()" "org.apache.commons.math.util.ResizableDoubleArrayTest.ra : DoubleArray"
contain "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.ResizableDoubleArrayTest.tearDown()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.setUp()" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray()"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest.setUp()" "org.apache.commons.math.util.ResizableDoubleArrayTest.da : DoubleArray"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest.setUp()" "org.apache.commons.math.util.ResizableDoubleArrayTest.ra : DoubleArray"
contain "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.ResizableDoubleArrayTest.setUp()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()" "org.apache.commons.math.util.ResizableDoubleArray.getNumElements()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(int,int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()" "org.apache.commons.math.util.ResizableDoubleArray.getInternalLength()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()" "org.apache.commons.math.util.ResizableDoubleArray.getExpansionFactor()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(float,float,float)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()" "org.apache.commons.math.util.ResizableDoubleArray.getContractionCriteria()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()" "org.apache.commons.math.util.ResizableDoubleArray.getExpansionMode()"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()" "org.apache.commons.math.util.ResizableDoubleArrayTest.da : DoubleArray"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()" "org.apache.commons.math.util.ResizableDoubleArrayTest.fail(String)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)"
contain "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.ResizableDoubleArrayTest.testConstructors()"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()" "org.apache.commons.math.util.ResizableDoubleArrayTest.da : DoubleArray"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()" "org.apache.commons.math.util.DoubleArray.addElement(double)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()" "org.apache.commons.math.util.DoubleArray.setElement(int,double)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()" "org.apache.commons.math.util.DoubleArray.getNumElements()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(String,int,int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()" "org.apache.commons.math.util.DoubleArray.getElement(int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()" "org.apache.commons.math.util.DoubleArray.clear()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()" "org.apache.commons.math.util.ResizableDoubleArray.getInternalLength()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(int,int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()" "org.apache.commons.math.util.ResizableDoubleArrayTest.fail(String)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()" "org.apache.commons.math.util.ResizableDoubleArray.addElement(double)"
contain "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAdd1000()" "org.apache.commons.math.util.DoubleArrayAbstractTest.testAdd1000()"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest.testAdd1000()" "org.apache.commons.math.util.ResizableDoubleArrayTest.da : DoubleArray"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAdd1000()" "org.apache.commons.math.util.ResizableDoubleArray.getInternalLength()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAdd1000()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(String,int,int)"
contain "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.ResizableDoubleArrayTest.testAdd1000()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.DoubleArrayAbstractTest.testAddElementRolling()"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.ResizableDoubleArrayTest.da : DoubleArray"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.DoubleArray.clear()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.DoubleArray.addElement(double)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.DoubleArray.addElementRolling(double)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.DoubleArray.getElement(int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(double,double,double)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.ResizableDoubleArray.getInternalLength()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(int,int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.ResizableDoubleArray.addElement(double)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.ResizableDoubleArray.getElement(int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.ResizableDoubleArray.getNumElements()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.ResizableDoubleArray.addElementRolling(double)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()" "org.apache.commons.math.util.ResizableDoubleArrayTest.fail(String)"
contain "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.ResizableDoubleArrayTest.testAddElementRolling()"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetNumberOfElements()" "org.apache.commons.math.util.ResizableDoubleArrayTest.da : DoubleArray"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetNumberOfElements()" "org.apache.commons.math.util.DoubleArray.addElement(double)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetNumberOfElements()" "org.apache.commons.math.util.DoubleArray.getNumElements()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetNumberOfElements()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(String,int,int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetNumberOfElements()" "org.apache.commons.math.util.ResizableDoubleArray.setNumElements(int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetNumberOfElements()" "org.apache.commons.math.util.ResizableDoubleArrayTest.fail(String)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetNumberOfElements()" "org.apache.commons.math.util.DoubleArray.getElement(int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetNumberOfElements()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.ResizableDoubleArrayTest.testSetNumberOfElements()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacity()" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacity()" "org.apache.commons.math.util.ResizableDoubleArray.getNumElements()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacity()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(String,int,int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacity()" "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacity()" "org.apache.commons.math.random.RandomData.nextInt(int,int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacity()" "org.apache.commons.math.util.ResizableDoubleArray.addElement(double)"
contain "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacity()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor()" "org.apache.commons.math.util.ResizableDoubleArray.ResizableDoubleArray(int,float,float)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor()" "org.apache.commons.math.util.ResizableDoubleArray.getNumElements()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(String,int,int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor()" "org.apache.commons.math.random.RandomDataImpl.RandomDataImpl()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor()" "org.apache.commons.math.random.RandomData.nextInt(int,int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor()" "org.apache.commons.math.util.ResizableDoubleArray.addElement(double)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor()" "org.apache.commons.math.util.ResizableDoubleArray.getExpansionFactor()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor()"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest.testDiscard()" "org.apache.commons.math.util.ResizableDoubleArrayTest.da : DoubleArray"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testDiscard()" "org.apache.commons.math.util.DoubleArray.addElement(double)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testDiscard()" "org.apache.commons.math.util.DoubleArray.getNumElements()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testDiscard()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(String,int,int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testDiscard()" "org.apache.commons.math.util.ResizableDoubleArray.discardFrontElements(int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testDiscard()" "org.apache.commons.math.util.ResizableDoubleArrayTest.fail(String)"
contain "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.ResizableDoubleArrayTest.testDiscard()"
reference "org.apache.commons.math.util.ResizableDoubleArrayTest.testMutators()" "org.apache.commons.math.util.ResizableDoubleArrayTest.da : DoubleArray"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testMutators()" "org.apache.commons.math.util.ResizableDoubleArray.setContractionCriteria(float)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testMutators()" "org.apache.commons.math.util.ResizableDoubleArray.getContractionCriteria()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testMutators()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(float,float,float)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testMutators()" "org.apache.commons.math.util.ResizableDoubleArray.setExpansionFactor(float)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testMutators()" "org.apache.commons.math.util.ResizableDoubleArray.getExpansionFactor()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testMutators()" "org.apache.commons.math.util.ResizableDoubleArrayTest.fail(String)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testMutators()" "org.apache.commons.math.util.ResizableDoubleArray.setExpansionMode(int)"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testMutators()" "org.apache.commons.math.util.ResizableDoubleArray.getExpansionMode()"
call "org.apache.commons.math.util.ResizableDoubleArrayTest.testMutators()" "org.apache.commons.math.util.ResizableDoubleArrayTest.assertEquals(int,int)"
contain "org.apache.commons.math.util.ResizableDoubleArrayTest" "org.apache.commons.math.util.ResizableDoubleArrayTest.testMutators()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile" "org.apache.commons.math.stat.descriptive.rank.Percentile"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.badPercentile()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.this$0 : DescriptiveStatisticsTest"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.badPercentile()" "org.apache.commons.math.stat.descriptive.rank.Percentile.Percentile()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.badPercentile()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.percentile : Percentile"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.badPercentile()"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.percentile : Percentile"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.evaluate(double[],int,int)" "org.apache.commons.math.stat.descriptive.rank.Percentile.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.evaluate(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.evaluate(double[])" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.evaluate(double[])"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.evaluate(double[])"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.percentile : Percentile" "org.apache.commons.math.stat.descriptive.rank.Percentile"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.percentile : Percentile"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.this$0 : DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.this$0 : DescriptiveStatisticsTest"
reference "org.apache.commons.math.linear.RealMatrixImplTest" "double[]"
reference "org.apache.commons.math.linear.RealMatrixImplTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImpl"
reference "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.InvalidMatrixException"
reference "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.MatrixIndexException"
reference "org.apache.commons.math.linear.RealMatrixImplTest" "double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest" "junit.framework.TestCase"
reference "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrix"
reference "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.MatrixUtils"
call "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.id : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.testDataLU : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.testDataPlus2 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.testDataMinus : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.testDataRow1 : double[]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.testDataCol3 : double[]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.testDataInv : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.preMultTest : double[]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.testData2T : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.testDataPlusInv : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.luData : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.luDataLUDecomposition : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.singular : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.bigSingular : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.detData : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.detData2 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.testVector : double[]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.testVector2 : double[]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.subTestData : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.subRows02Cols13 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.subRows03Cols12 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.subRows03Cols123 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.subRows20Cols123 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.subRows31Cols31 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.subRows01Cols23 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.subRows23Cols00 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.subRows00Cols33 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.subRow0 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.subRow3 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.subColumn1 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.subColumn3 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.entryTolerance : double"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.normTolerance : double"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.d3 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.d4 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)" "org.apache.commons.math.linear.RealMatrixImplTest.d5 : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.setUp()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.suite()" "org.apache.commons.math.linear.RealMatrixImplTest.class$org$apache$commons$math$linear$RealMatrixImplTest : Class"
call "org.apache.commons.math.linear.RealMatrixImplTest.suite()" "org.apache.commons.math.linear.RealMatrixImplTest.class$(String)"
call "org.apache.commons.math.linear.RealMatrixImplTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.linear.RealMatrixImplTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.suite()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(String,int,int)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.RealMatrixImpl.isSquare()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.RealMatrixImplTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testDimensions()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testCopyFunctions()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testCopyFunctions()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testCopyFunctions()" "org.apache.commons.math.linear.RealMatrixImpl.getData()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testCopyFunctions()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(Object,Object)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testCopyFunctions()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testAdd()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testAdd()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testAdd()" "org.apache.commons.math.linear.RealMatrixImplTest.testDataInv : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testAdd()" "org.apache.commons.math.linear.RealMatrixImpl.add(RealMatrix)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testAdd()" "org.apache.commons.math.linear.RealMatrixImpl.getData()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testAdd()" "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testAdd()" "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testAdd()" "org.apache.commons.math.linear.RealMatrixImplTest.testDataPlusInv : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testAdd()" "org.apache.commons.math.linear.RealMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testAdd()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testAdd()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testAddFail()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testAddFail()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testAddFail()" "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testAddFail()" "org.apache.commons.math.linear.RealMatrixImpl.add(RealMatrix)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testAddFail()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testAddFail()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testNorm()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testNorm()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testNorm()" "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testNorm()" "org.apache.commons.math.linear.RealMatrixImpl.getNorm()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testNorm()" "org.apache.commons.math.linear.RealMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testNorm()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testNorm()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.RealMatrixImplTest.testDataInv : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.RealMatrixImpl.subtract(RealMatrix)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.RealMatrixImpl.scalarMultiply(double)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.RealMatrix.add(RealMatrix)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.RealMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,RealMatrix,RealMatrix,double)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testPlusMinus()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.testDataInv : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.id : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.RealMatrixImpl.multiply(RealMatrix)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,RealMatrix,RealMatrix,double)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.RealMatrixImplTest.d3 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.RealMatrixImplTest.d4 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.RealMatrixImplTest.d5 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.RealMatrix.multiply(RealMatrix)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.RealMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,RealMatrix,RealMatrix,double)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply2()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.RealMatrixImplTest.singular : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.RealMatrixImpl.isSingular()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.RealMatrixImplTest.assertTrue(String,boolean)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.RealMatrixImplTest.bigSingular : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.RealMatrixImplTest.id : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testIsSingular()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testInverse()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testInverse()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testInverse()" "org.apache.commons.math.linear.RealMatrixImplTest.testDataInv : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testInverse()" "org.apache.commons.math.linear.RealMatrixImpl.inverse()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testInverse()" "org.apache.commons.math.linear.RealMatrixImplTest.normTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testInverse()" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,RealMatrix,RealMatrix,double)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testInverse()" "org.apache.commons.math.linear.RealMatrix.inverse()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testInverse()" "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testInverse()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testInverse()" "org.apache.commons.math.linear.RealMatrixImplTest.singular : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testInverse()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrixImplTest.testDataInv : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrixImplTest.testVector : double[]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrix.operate(double[])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrixImpl.solve(double[])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrixImplTest.normTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,double[],double[],double)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrixImplTest.testVector2 : double[]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrix.solve(RealMatrix)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrixImpl.solve(RealMatrix)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()" "org.apache.commons.math.linear.RealMatrixImpl.luDecompose()"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.RealMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.RealMatrix.getDeterminant()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.RealMatrixImplTest.detData : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.RealMatrixImplTest.normTolerance : double"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.RealMatrixImplTest.detData2 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.RealMatrixImpl.getDeterminant()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testDeterminant()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testTrace()" "org.apache.commons.math.linear.RealMatrixImplTest.id : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testTrace()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testTrace()" "org.apache.commons.math.linear.RealMatrix.getTrace()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testTrace()" "org.apache.commons.math.linear.RealMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testTrace()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testTrace()" "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testTrace()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testTrace()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testScalarAdd()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testScalarAdd()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testScalarAdd()" "org.apache.commons.math.linear.RealMatrixImplTest.testDataPlus2 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testScalarAdd()" "org.apache.commons.math.linear.RealMatrix.scalarAdd(double)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testScalarAdd()" "org.apache.commons.math.linear.RealMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testScalarAdd()" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,RealMatrix,RealMatrix,double)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testScalarAdd()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testOperate()" "org.apache.commons.math.linear.RealMatrixImplTest.id : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testOperate()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testOperate()" "org.apache.commons.math.linear.RealMatrixImplTest.testVector : double[]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testOperate()" "org.apache.commons.math.linear.RealMatrix.operate(double[])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testOperate()" "org.apache.commons.math.linear.RealMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testOperate()" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,double[],double[],double)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testOperate()" "org.apache.commons.math.linear.RealMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testOperate()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testOperate()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.RealMatrix.inverse()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.RealMatrix.transpose()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.RealMatrixImplTest.normTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,RealMatrix,RealMatrix,double)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.RealMatrixImplTest.testData2T : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testTranspose()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.RealMatrixImplTest.testVector : double[]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.RealMatrix.preMultiply(double[])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.RealMatrixImplTest.preMultTest : double[]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.RealMatrixImplTest.normTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,double[],double[],double)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.RealMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiplyVector()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.d3 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.d4 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.d5 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.RealMatrix.preMultiply(RealMatrix)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,RealMatrix,RealMatrix,double)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.testDataInv : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.id : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.RealMatrixImpl.preMultiply(RealMatrix)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.RealMatrix.getRow(int)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.RealMatrixImplTest.testDataRow1 : double[]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.RealMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,double[],double[],double)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.RealMatrix.getColumn(int)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.RealMatrixImplTest.testDataCol3 : double[]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testGetVectors()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testGetEntry()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetEntry()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetEntry()" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testGetEntry()" "org.apache.commons.math.linear.RealMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetEntry()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetEntry()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testGetEntry()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImpl.getLUMatrix()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImplTest.testDataLU : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImplTest.normTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,RealMatrix,RealMatrix,double)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImplTest.verifyDecomposition(RealMatrix,RealMatrix)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImplTest.luData : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImplTest.luDataLUDecomposition : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImplTest.testDataMinus : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImplTest.id : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testExamples()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testExamples()" "org.apache.commons.math.linear.RealMatrix.multiply(RealMatrix)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testExamples()" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testExamples()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(int,int)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testExamples()" "org.apache.commons.math.linear.RealMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testExamples()" "org.apache.commons.math.linear.RealMatrix.inverse()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testExamples()" "org.apache.commons.math.linear.RealMatrix.solve(double[])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testExamples()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testExamples()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subTestData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subRows23Cols00 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subRows00Cols33 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subRows01Cols23 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subRows02Cols13 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subRows03Cols12 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subRows03Cols123 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subRows20Cols123 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subRows31Cols31 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrix.getSubMatrix(int,int,int,int)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(String,Object,Object)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrix.getSubMatrix(int[],int[])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subTestData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subRow0 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subRow3 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.RealMatrix.getRowMatrix(int)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(String,Object,Object)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testGetRowMatrix()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subTestData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subColumn1 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.subColumn3 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.RealMatrix.getColumnMatrix(int)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(String,Object,Object)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testGetColumnMatrix()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.RealMatrixImpl.copy()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.RealMatrixImpl.transpose()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.RealMatrixImpl.hashCode()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.RealMatrixImplTest.assertTrue(boolean)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(int,int)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(Object,Object)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.RealMatrixImpl.equals(Object)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.RealMatrixImplTest.assertFalse(boolean)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.RealMatrixImplTest.bigSingular : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testToString()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testToString()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testToString()" "org.apache.commons.math.linear.RealMatrixImpl.toString()"
call "org.apache.commons.math.linear.RealMatrixImplTest.testToString()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(String,String)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testToString()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl()"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testToString()"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.detData2 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.setSubMatrix(double[][],int,int)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(Object,Object)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.testDataPlus2 : double[][]"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
call "org.apache.commons.math.linear.RealMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl()"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testSetSubMatrix()"
call "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,RealMatrix,RealMatrix,double)" "org.apache.commons.math.linear.RealMatrix.subtract(RealMatrix)"
call "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,RealMatrix,RealMatrix,double)" "org.apache.commons.math.linear.RealMatrix.getNorm()"
call "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,RealMatrix,RealMatrix,double)" "org.apache.commons.math.linear.RealMatrixImplTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,RealMatrix,RealMatrix,double)"
call "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,double[],double[],double)" "org.apache.commons.math.linear.RealMatrixImplTest.fail(String)"
call "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,double[],double[],double)" "org.apache.commons.math.linear.RealMatrixImplTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,double[],double[],double)"
call "org.apache.commons.math.linear.RealMatrixImplTest.splitLU(RealMatrix,double[][],double[][])" "org.apache.commons.math.linear.RealMatrix.isSquare()"
call "org.apache.commons.math.linear.RealMatrixImplTest.splitLU(RealMatrix,double[][],double[][])" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImplTest.splitLU(RealMatrix,double[][],double[][])" "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(String)"
call "org.apache.commons.math.linear.RealMatrixImplTest.splitLU(RealMatrix,double[][],double[][])" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.splitLU(RealMatrix,double[][],double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.permuteRows(RealMatrix,int[])" "org.apache.commons.math.linear.RealMatrix.isSquare()"
call "org.apache.commons.math.linear.RealMatrixImplTest.permuteRows(RealMatrix,int[])" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImplTest.permuteRows(RealMatrix,int[])" "org.apache.commons.math.linear.RealMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImplTest.permuteRows(RealMatrix,int[])" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
call "org.apache.commons.math.linear.RealMatrixImplTest.permuteRows(RealMatrix,int[])" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.permuteRows(RealMatrix,int[])"
call "org.apache.commons.math.linear.RealMatrixImplTest.verifyDecomposition(RealMatrix,RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImplTest.verifyDecomposition(RealMatrix,RealMatrix)" "org.apache.commons.math.linear.RealMatrixImplTest.splitLU(RealMatrix,double[][],double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.verifyDecomposition(RealMatrix,RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.RealMatrixImplTest.verifyDecomposition(RealMatrix,RealMatrix)" "org.apache.commons.math.linear.RealMatrixImpl.getPermutation()"
call "org.apache.commons.math.linear.RealMatrixImplTest.verifyDecomposition(RealMatrix,RealMatrix)" "org.apache.commons.math.linear.RealMatrixImplTest.permuteRows(RealMatrix,int[])"
call "org.apache.commons.math.linear.RealMatrixImplTest.verifyDecomposition(RealMatrix,RealMatrix)" "org.apache.commons.math.linear.RealMatrix.multiply(RealMatrix)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.verifyDecomposition(RealMatrix,RealMatrix)" "org.apache.commons.math.linear.RealMatrixImplTest.normTolerance : double"
call "org.apache.commons.math.linear.RealMatrixImplTest.verifyDecomposition(RealMatrix,RealMatrix)" "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(String,RealMatrix,RealMatrix,double)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.verifyDecomposition(RealMatrix,RealMatrix)"
call "org.apache.commons.math.linear.RealMatrixImplTest.dumpMatrix(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
call "org.apache.commons.math.linear.RealMatrixImplTest.dumpMatrix(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.RealMatrixImplTest.dumpMatrix(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.dumpMatrix(RealMatrix)"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.class$(String)"
reference "org.apache.commons.math.linear.RealMatrixImplTest.id : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.id : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testData : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDataLU : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testDataLU : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDataPlus2 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testDataPlus2 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDataMinus : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testDataMinus : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDataRow1 : double[]" "double[]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testDataRow1 : double[]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDataCol3 : double[]" "double[]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testDataCol3 : double[]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDataInv : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testDataInv : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.preMultTest : double[]" "double[]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.preMultTest : double[]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testData2 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testData2T : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testData2T : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testDataPlusInv : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testDataPlusInv : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.luData : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.luData : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.luDataLUDecomposition : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.luDataLUDecomposition : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.singular : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.singular : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.bigSingular : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.bigSingular : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.detData : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.detData : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.detData2 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.detData2 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testVector : double[]" "double[]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testVector : double[]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.testVector2 : double[]" "double[]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.testVector2 : double[]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.subTestData : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.subTestData : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.subRows02Cols13 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.subRows02Cols13 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.subRows03Cols12 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.subRows03Cols12 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.subRows03Cols123 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.subRows03Cols123 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.subRows20Cols123 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.subRows20Cols123 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.subRows31Cols31 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.subRows31Cols31 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.subRows01Cols23 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.subRows01Cols23 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.subRows23Cols00 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.subRows23Cols00 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.subRows00Cols33 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.subRows00Cols33 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.subRow0 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.subRow0 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.subRow3 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.subRow3 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.subColumn1 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.subColumn1 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.subColumn3 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.subColumn3 : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.entryTolerance : double"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.normTolerance : double"
reference "org.apache.commons.math.linear.RealMatrixImplTest.d3 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.d3 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.d4 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.d4 : double[][]"
reference "org.apache.commons.math.linear.RealMatrixImplTest.d5 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.d5 : double[][]"
contain "org.apache.commons.math.linear.RealMatrixImplTest" "org.apache.commons.math.linear.RealMatrixImplTest.class$org$apache$commons$math$linear$RealMatrixImplTest : Class"
reference "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction.RosenbrockFunction(double[],double)" "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction.buildArray(int,double)"
call "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction.RosenbrockFunction(double[],double)" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction" "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction.RosenbrockFunction(double[],double)"
reference "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction" "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction" "org.apache.commons.math.estimation.MinpackTest.RosenbrockFunction.getResiduals()"
reference "org.apache.commons.math.stat.descriptive.summary.SumTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.summary.SumTest" "org.apache.commons.math.stat.descriptive.summary.Sum"
reference "org.apache.commons.math.stat.descriptive.summary.SumTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.summary.SumTest.SumTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.summary.SumTest" "org.apache.commons.math.stat.descriptive.summary.SumTest.SumTest(String)"
reference "org.apache.commons.math.stat.descriptive.summary.SumTest.suite()" "org.apache.commons.math.stat.descriptive.summary.SumTest.class$org$apache$commons$math$stat$descriptive$summary$SumTest : Class"
call "org.apache.commons.math.stat.descriptive.summary.SumTest.suite()" "org.apache.commons.math.stat.descriptive.summary.SumTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.summary.SumTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.summary.SumTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.summary.SumTest" "org.apache.commons.math.stat.descriptive.summary.SumTest.suite()"
call "org.apache.commons.math.stat.descriptive.summary.SumTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.summary.Sum.Sum()"
contain "org.apache.commons.math.stat.descriptive.summary.SumTest" "org.apache.commons.math.stat.descriptive.summary.SumTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.summary.SumTest.expectedValue()" "org.apache.commons.math.stat.descriptive.summary.SumTest.sum : double"
contain "org.apache.commons.math.stat.descriptive.summary.SumTest" "org.apache.commons.math.stat.descriptive.summary.SumTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.summary.SumTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.Sum.Sum()"
call "org.apache.commons.math.stat.descriptive.summary.SumTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.Sum.getResult()"
call "org.apache.commons.math.stat.descriptive.summary.SumTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.summary.SumTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.Sum.increment(double)"
call "org.apache.commons.math.stat.descriptive.summary.SumTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.summary.SumTest" "org.apache.commons.math.stat.descriptive.summary.SumTest.testSpecialValues()"
contain "org.apache.commons.math.stat.descriptive.summary.SumTest" "org.apache.commons.math.stat.descriptive.summary.SumTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.summary.SumTest.stat : Sum" "org.apache.commons.math.stat.descriptive.summary.Sum"
contain "org.apache.commons.math.stat.descriptive.summary.SumTest" "org.apache.commons.math.stat.descriptive.summary.SumTest.stat : Sum"
contain "org.apache.commons.math.stat.descriptive.summary.SumTest" "org.apache.commons.math.stat.descriptive.summary.SumTest.class$org$apache$commons$math$stat$descriptive$summary$SumTest : Class"
reference "org.apache.commons.math.analysis.QuinticFunction.1" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.analysis.QuinticFunction.1" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.QuinticFunction.1.{...}" "org.apache.commons.math.analysis.QuinticFunction.1.this$0 : QuinticFunction"
contain "org.apache.commons.math.analysis.QuinticFunction.1" "org.apache.commons.math.analysis.QuinticFunction.1.{...}"
contain "org.apache.commons.math.analysis.QuinticFunction.1" "org.apache.commons.math.analysis.QuinticFunction.1.value(double)"
reference "org.apache.commons.math.analysis.QuinticFunction.1.this$0 : QuinticFunction" "org.apache.commons.math.analysis.QuinticFunction"
contain "org.apache.commons.math.analysis.QuinticFunction.1" "org.apache.commons.math.analysis.QuinticFunction.1.this$0 : QuinticFunction"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.KowalikOsborneFunction(double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
call "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.KowalikOsborneFunction(double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.setCostAccuracy(double)"
call "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.KowalikOsborneFunction(double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.setParamsAccuracy(double)"
contain "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.KowalikOsborneFunction(double[],double,double,double[])"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.v : double[]"
contain "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.y : double[]"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.v : double[]"
contain "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.getResiduals()"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.static {...}" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.v : double[]"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.static {...}" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.y : double[]"
contain "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.static {...}"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.v : double[]" "double[]"
contain "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.v : double[]"
reference "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.y : double[]" "double[]"
contain "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction" "org.apache.commons.math.estimation.MinpackTest.KowalikOsborneFunction.y : double[]"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince853Integrator"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest" "org.apache.commons.math.ode.ContinuousOutputModel"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest" "org.apache.commons.math.ode.IntegratorException"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.DormandPrince853StepInterpolatorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.DormandPrince853StepInterpolatorTest(String)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DormandPrince853Integrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DormandPrince853Integrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DormandPrince853Integrator.getStepHandler()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testSerialization()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.1.{...}"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.DormandPrince853Integrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.DormandPrince853Integrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.testClone()"
reference "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.suite()" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.class$org$apache$commons$math$ode$DormandPrince853StepInterpolatorTest : Class"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.suite()" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.class$(String)"
call "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.suite()"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.class$(String)"
contain "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest.class$org$apache$commons$math$ode$DormandPrince853StepInterpolatorTest : Class"
reference "org.apache.commons.math.stat.descriptive.summary.SumSqTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.summary.SumSqTest" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares"
reference "org.apache.commons.math.stat.descriptive.summary.SumSqTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.summary.SumSqTest.SumSqTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.summary.SumSqTest" "org.apache.commons.math.stat.descriptive.summary.SumSqTest.SumSqTest(String)"
reference "org.apache.commons.math.stat.descriptive.summary.SumSqTest.suite()" "org.apache.commons.math.stat.descriptive.summary.SumSqTest.class$org$apache$commons$math$stat$descriptive$summary$SumSqTest : Class"
call "org.apache.commons.math.stat.descriptive.summary.SumSqTest.suite()" "org.apache.commons.math.stat.descriptive.summary.SumSqTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.summary.SumSqTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.summary.SumSqTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.summary.SumSqTest" "org.apache.commons.math.stat.descriptive.summary.SumSqTest.suite()"
call "org.apache.commons.math.stat.descriptive.summary.SumSqTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.SumOfSquares()"
contain "org.apache.commons.math.stat.descriptive.summary.SumSqTest" "org.apache.commons.math.stat.descriptive.summary.SumSqTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.summary.SumSqTest.expectedValue()" "org.apache.commons.math.stat.descriptive.summary.SumSqTest.sumSq : double"
contain "org.apache.commons.math.stat.descriptive.summary.SumSqTest" "org.apache.commons.math.stat.descriptive.summary.SumSqTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.summary.SumSqTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.SumOfSquares()"
call "org.apache.commons.math.stat.descriptive.summary.SumSqTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.getResult()"
call "org.apache.commons.math.stat.descriptive.summary.SumSqTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumSqTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.summary.SumSqTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.increment(double)"
call "org.apache.commons.math.stat.descriptive.summary.SumSqTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumSqTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.summary.SumSqTest" "org.apache.commons.math.stat.descriptive.summary.SumSqTest.testSpecialValues()"
contain "org.apache.commons.math.stat.descriptive.summary.SumSqTest" "org.apache.commons.math.stat.descriptive.summary.SumSqTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.summary.SumSqTest.stat : SumOfSquares" "org.apache.commons.math.stat.descriptive.summary.SumOfSquares"
contain "org.apache.commons.math.stat.descriptive.summary.SumSqTest" "org.apache.commons.math.stat.descriptive.summary.SumSqTest.stat : SumOfSquares"
contain "org.apache.commons.math.stat.descriptive.summary.SumSqTest" "org.apache.commons.math.stat.descriptive.summary.SumSqTest.class$org$apache$commons$math$stat$descriptive$summary$SumSqTest : Class"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "junit.framework.TestCase"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
call "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.mean : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.geoMean : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.var : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.std : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.skew : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.kurt : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.min : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.max : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.median : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.percentile5 : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.percentile95 : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.product : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.sumLog : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.sumSq : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.sum : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.secondMoment : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.thirdMoment : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.fourthMoment : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.tolerance : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testArray : double[]"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.getUnivariateStatistic()"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.expectedValue()"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.getTolerance()" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.tolerance : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.getTolerance()"
call "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testEvaluation()" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testEvaluation()" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testEvaluation()" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testArray : double[]"
call "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testEvaluation()" "org.apache.commons.math.stat.descriptive.UnivariateStatistic.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testEvaluation()" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.getTolerance()"
call "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testEvaluation()" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testEvaluation()"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.mean : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.geoMean : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.var : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.std : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.skew : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.kurt : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.min : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.max : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.median : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.percentile5 : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.percentile95 : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.product : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.sumLog : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.sumSq : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.sum : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.secondMoment : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.thirdMoment : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.fourthMoment : double"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.tolerance : double"
reference "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testArray : double[]" "double[]"
contain "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testArray : double[]"
reference "org.apache.commons.math.analysis.Expm1Function.1" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.analysis.Expm1Function.1" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.Expm1Function.1.{...}" "org.apache.commons.math.analysis.Expm1Function.1.this$0 : Expm1Function"
contain "org.apache.commons.math.analysis.Expm1Function.1" "org.apache.commons.math.analysis.Expm1Function.1.{...}"
contain "org.apache.commons.math.analysis.Expm1Function.1" "org.apache.commons.math.analysis.Expm1Function.1.value(double)"
reference "org.apache.commons.math.analysis.Expm1Function.1.this$0 : Expm1Function" "org.apache.commons.math.analysis.Expm1Function"
contain "org.apache.commons.math.analysis.Expm1Function.1" "org.apache.commons.math.analysis.Expm1Function.1.this$0 : Expm1Function"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.WeightedMeasurement[]"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.EstimationProblem"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.Circle(double,double)" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.Circle(double,double)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cx : EstimatedParameter"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.Circle(double,double)" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(EstimatedParameter)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.Circle(double,double)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cy : EstimatedParameter"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.Circle(double,double)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.points : ArrayList"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.Circle(double,double)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.addPoint(double,double)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.points : ArrayList"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.addPoint(double,double)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.PointModel(GaussNewtonEstimatorTest.Circle,double,double)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.addPoint(double,double)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getM()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.points : ArrayList"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getM()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getMeasurements()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.points : ArrayList"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getMeasurements()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getAllParameters()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cx : EstimatedParameter"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getAllParameters()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cy : EstimatedParameter"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getAllParameters()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getUnboundParameters()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cx : EstimatedParameter"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getUnboundParameters()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cy : EstimatedParameter"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getUnboundParameters()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getPartialRadiusX()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.points : ArrayList"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getPartialRadiusX()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiX()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getPartialRadiusX()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getPartialRadiusY()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.points : ArrayList"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getPartialRadiusY()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getPartialDiY()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getPartialRadiusY()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getRadius()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.points : ArrayList"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getRadius()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.PointModel.getCenterDistance()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getRadius()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getX()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cx : EstimatedParameter"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getX()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getX()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getY()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cy : EstimatedParameter"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getY()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getY()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.access$000(GaussNewtonEstimatorTest.Circle)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cx : EstimatedParameter"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.access$000(GaussNewtonEstimatorTest.Circle)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.access$100(GaussNewtonEstimatorTest.Circle)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cy : EstimatedParameter"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.access$100(GaussNewtonEstimatorTest.Circle)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cx : EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cx : EstimatedParameter"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cy : EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.cy : EstimatedParameter"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.points : ArrayList"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.TestProblemAbstract"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.TestProblemHandler"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.TestProblemFactory"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.FirstOrderIntegrator"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.ClassicalRungeKuttaIntegratorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.ClassicalRungeKuttaIntegratorTest(String)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSanityChecks()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSanityChecks()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSanityChecks()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSanityChecks()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSanityChecks()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSanityChecks()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemFactory.getProblems()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.clone()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getFinalTime()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getInitialTime()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getSwitchingFunctions()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getInitialState()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getDimension()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getLastError()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.getName()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.assertEquals(String,String)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testSmallStep()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getLastError()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testBigStep()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testKepler()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testKepler()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.testKepler()"
reference "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.suite()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.class$org$apache$commons$math$ode$ClassicalRungeKuttaIntegratorTest : Class"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.suite()" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.class$(String)"
call "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.suite()"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.class$(String)"
contain "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest" "org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest.class$org$apache$commons$math$ode$ClassicalRungeKuttaIntegratorTest : Class"
reference "org.apache.commons.math.estimation.MinpackTest.MeyerFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.MeyerFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.MeyerFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.MeyerFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.MeyerFunction(double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
call "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.MeyerFunction(double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.setCostAccuracy(double)"
call "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.MeyerFunction(double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.setParamsAccuracy(double)"
contain "org.apache.commons.math.estimation.MinpackTest.MeyerFunction" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.MeyerFunction(double[],double,double,double[])"
reference "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.m : int"
contain "org.apache.commons.math.estimation.MinpackTest.MeyerFunction" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.y : double[]"
contain "org.apache.commons.math.estimation.MinpackTest.MeyerFunction" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.getResiduals()"
reference "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.static {...}" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.y : double[]"
contain "org.apache.commons.math.estimation.MinpackTest.MeyerFunction" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.static {...}"
reference "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.y : double[]" "double[]"
contain "org.apache.commons.math.estimation.MinpackTest.MeyerFunction" "org.apache.commons.math.estimation.MinpackTest.MeyerFunction.y : double[]"
reference "org.apache.commons.math.ode.TestProblemFactory" "org.apache.commons.math.ode.TestProblemAbstract"
reference "org.apache.commons.math.ode.TestProblemFactory" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.TestProblemFactory" "org.apache.commons.math.ode.TestProblem2"
reference "org.apache.commons.math.ode.TestProblemFactory" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.TestProblemFactory" "org.apache.commons.math.ode.TestProblem4"
reference "org.apache.commons.math.ode.TestProblemFactory" "org.apache.commons.math.ode.TestProblem5"
contain "org.apache.commons.math.ode.TestProblemFactory" "org.apache.commons.math.ode.TestProblemFactory.TestProblemFactory()"
reference "org.apache.commons.math.ode.TestProblemFactory.getProblems()" "org.apache.commons.math.ode.TestProblemFactory.pool : TestProblemAbstract[]"
contain "org.apache.commons.math.ode.TestProblemFactory" "org.apache.commons.math.ode.TestProblemFactory.getProblems()"
call "org.apache.commons.math.ode.TestProblemFactory.static {...}" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.TestProblemFactory.static {...}" "org.apache.commons.math.ode.TestProblem2.TestProblem2()"
call "org.apache.commons.math.ode.TestProblemFactory.static {...}" "org.apache.commons.math.ode.TestProblem3.TestProblem3()"
call "org.apache.commons.math.ode.TestProblemFactory.static {...}" "org.apache.commons.math.ode.TestProblem4.TestProblem4()"
call "org.apache.commons.math.ode.TestProblemFactory.static {...}" "org.apache.commons.math.ode.TestProblem5.TestProblem5()"
reference "org.apache.commons.math.ode.TestProblemFactory.static {...}" "org.apache.commons.math.ode.TestProblemFactory.pool : TestProblemAbstract[]"
contain "org.apache.commons.math.ode.TestProblemFactory" "org.apache.commons.math.ode.TestProblemFactory.static {...}"
reference "org.apache.commons.math.ode.TestProblemFactory.pool : TestProblemAbstract[]" "org.apache.commons.math.ode.TestProblemAbstract[]"
contain "org.apache.commons.math.ode.TestProblemFactory" "org.apache.commons.math.ode.TestProblemFactory.pool : TestProblemAbstract[]"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.ThreeEighthesIntegrator"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.TestProblemAbstract"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.TestProblemHandler"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.TestProblemFactory"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.FirstOrderIntegrator"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.ThreeEighthesIntegratorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.ThreeEighthesIntegratorTest(String)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.ThreeEighthesIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDimensionCheck()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemFactory.getProblems()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.clone()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getFinalTime()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getInitialTime()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getSwitchingFunctions()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getInitialState()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getDimension()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testDecreasingSteps()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getLastError()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.getName()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.assertEquals(String,String)"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testSmallStep()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getLastError()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testBigStep()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testKepler()" "org.apache.commons.math.ode.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testKepler()" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testKepler()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testKepler()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.testKepler()"
reference "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.suite()" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.class$org$apache$commons$math$ode$ThreeEighthesIntegratorTest : Class"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.suite()" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.class$(String)"
call "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.suite()"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.class$(String)"
contain "org.apache.commons.math.ode.ThreeEighthesIntegratorTest" "org.apache.commons.math.ode.ThreeEighthesIntegratorTest.class$org$apache$commons$math$ode$ThreeEighthesIntegratorTest : Class"
reference "org.apache.commons.math.stat.descriptive.moment.KurtosisTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.moment.KurtosisTest" "org.apache.commons.math.stat.descriptive.moment.Kurtosis"
reference "org.apache.commons.math.stat.descriptive.moment.KurtosisTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.KurtosisTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.moment.KurtosisTest" "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.KurtosisTest(String)"
reference "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.suite()" "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.class$org$apache$commons$math$stat$descriptive$moment$KurtosisTest : Class"
call "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.suite()" "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.moment.KurtosisTest" "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.suite()"
call "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis()"
contain "org.apache.commons.math.stat.descriptive.moment.KurtosisTest" "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.expectedValue()" "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.kurt : double"
contain "org.apache.commons.math.stat.descriptive.moment.KurtosisTest" "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis()"
call "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.increment(double)"
call "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.testNaN()" "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.assertFalse(boolean)"
contain "org.apache.commons.math.stat.descriptive.moment.KurtosisTest" "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.testNaN()"
contain "org.apache.commons.math.stat.descriptive.moment.KurtosisTest" "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.stat : Kurtosis" "org.apache.commons.math.stat.descriptive.moment.Kurtosis"
contain "org.apache.commons.math.stat.descriptive.moment.KurtosisTest" "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.stat : Kurtosis"
contain "org.apache.commons.math.stat.descriptive.moment.KurtosisTest" "org.apache.commons.math.stat.descriptive.moment.KurtosisTest.class$org$apache$commons$math$stat$descriptive$moment$KurtosisTest : Class"
reference "org.apache.commons.math.transform.FastFourierTransformerTest" "org.apache.commons.math.transform.FastFourierTransformer"
reference "org.apache.commons.math.transform.FastFourierTransformerTest" "org.apache.commons.math.complex.Complex"
reference "org.apache.commons.math.transform.FastFourierTransformerTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.transform.FastFourierTransformerTest" "junit.framework.TestCase"
reference "org.apache.commons.math.transform.FastFourierTransformerTest" "org.apache.commons.math.MathException"
call "org.apache.commons.math.transform.FastFourierTransformerTest.FastFourierTransformerTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.transform.FastFourierTransformerTest" "org.apache.commons.math.transform.FastFourierTransformerTest.FastFourierTransformerTest()"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastFourierTransformer.FastFourierTransformer()"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastFourierTransformer.transform(double[])"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData()" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastFourierTransformerTest.assertEquals(double,double,double)"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData()" "org.apache.commons.math.complex.Complex.getImaginary()"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastFourierTransformer.inversetransform(Complex[])"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[],double)"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastFourierTransformer.transform2(Complex[])"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(double[])"
contain "org.apache.commons.math.transform.FastFourierTransformerTest" "org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData()"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testSinFunction()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testSinFunction()" "org.apache.commons.math.transform.FastFourierTransformer.FastFourierTransformer()"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testSinFunction()" "org.apache.commons.math.transform.FastFourierTransformer.transform(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testSinFunction()" "org.apache.commons.math.complex.Complex.getReal()"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testSinFunction()" "org.apache.commons.math.transform.FastFourierTransformerTest.assertEquals(double,double,double)"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testSinFunction()" "org.apache.commons.math.complex.Complex.getImaginary()"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testSinFunction()" "org.apache.commons.math.transform.FastFourierTransformer.inversetransform(UnivariateRealFunction,double,double,int)"
contain "org.apache.commons.math.transform.FastFourierTransformerTest" "org.apache.commons.math.transform.FastFourierTransformerTest.testSinFunction()"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testParameters()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testParameters()" "org.apache.commons.math.transform.FastFourierTransformer.FastFourierTransformer()"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testParameters()" "org.apache.commons.math.transform.FastFourierTransformer.transform(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastFourierTransformerTest.testParameters()" "org.apache.commons.math.transform.FastFourierTransformerTest.fail(String)"
contain "org.apache.commons.math.transform.FastFourierTransformerTest" "org.apache.commons.math.transform.FastFourierTransformerTest.testParameters()"
reference "org.apache.commons.math.analysis.BrentSolverTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.BrentSolver"
reference "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.SecantSolver"
reference "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.QuinticFunction"
reference "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.MonitoredFunction"
reference "org.apache.commons.math.analysis.BrentSolverTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.UnivariateRealSolver"
reference "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.UnivariateRealSolverUtils"
call "org.apache.commons.math.analysis.BrentSolverTest.BrentSolverTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.BrentSolverTest.BrentSolverTest(String)"
reference "org.apache.commons.math.analysis.BrentSolverTest.suite()" "org.apache.commons.math.analysis.BrentSolverTest.class$org$apache$commons$math$analysis$BrentSolverTest : Class"
call "org.apache.commons.math.analysis.BrentSolverTest.suite()" "org.apache.commons.math.analysis.BrentSolverTest.class$(String)"
call "org.apache.commons.math.analysis.BrentSolverTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.analysis.BrentSolverTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.BrentSolverTest.suite()"
call "org.apache.commons.math.analysis.BrentSolverTest.testSinZero()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.BrentSolverTest.testSinZero()" "org.apache.commons.math.analysis.BrentSolver.BrentSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BrentSolverTest.testSinZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.BrentSolverTest.testSinZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.BrentSolverTest.testSinZero()" "org.apache.commons.math.analysis.BrentSolverTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.BrentSolverTest.testSinZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.getIterationCount()"
call "org.apache.commons.math.analysis.BrentSolverTest.testSinZero()" "org.apache.commons.math.analysis.BrentSolverTest.assertTrue(boolean)"
call "org.apache.commons.math.analysis.BrentSolverTest.testSinZero()" "org.apache.commons.math.analysis.SecantSolver.SecantSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BrentSolverTest.testSinZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.getResult()"
contain "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.BrentSolverTest.testSinZero()"
call "org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.BrentSolver.BrentSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.BrentSolverTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.getIterationCount()"
call "org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.BrentSolverTest.assertTrue(boolean)"
call "org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.SecantSolver.SecantSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealFunction,double,double)"
contain "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero()"
call "org.apache.commons.math.analysis.BrentSolverTest.testBadEndpoints()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.BrentSolverTest.testBadEndpoints()" "org.apache.commons.math.analysis.BrentSolver.BrentSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BrentSolverTest.testBadEndpoints()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.BrentSolverTest.testBadEndpoints()" "org.apache.commons.math.analysis.BrentSolverTest.fail(String)"
contain "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.BrentSolverTest.testBadEndpoints()"
call "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()" "org.apache.commons.math.analysis.MonitoredFunction.MonitoredFunction(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()" "org.apache.commons.math.analysis.BrentSolver.BrentSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()" "org.apache.commons.math.analysis.BrentSolverTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()" "org.apache.commons.math.analysis.MonitoredFunction.getCallsCount()"
call "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()" "org.apache.commons.math.analysis.BrentSolverTest.assertTrue(boolean)"
call "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double,double)"
call "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()" "org.apache.commons.math.analysis.BrentSolverTest.fail(String)"
call "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()" "org.apache.commons.math.analysis.MonitoredFunction.setCallsCount(int)"
call "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()" "org.apache.commons.math.analysis.UnivariateRealSolver.getIterationCount()"
call "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()" "org.apache.commons.math.analysis.BrentSolverTest.assertEquals(int,int)"
contain "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()"
contain "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.BrentSolverTest.class$(String)"
contain "org.apache.commons.math.analysis.BrentSolverTest" "org.apache.commons.math.analysis.BrentSolverTest.class$org$apache$commons$math$analysis$BrentSolverTest : Class"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "double[][]"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "org.apache.commons.math.stat.descriptive.moment.VectorialMean"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "org.apache.commons.math.DimensionMismatchException"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "double[]"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "junit.framework.TestCase"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.VectorialMeanTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.VectorialMeanTest(String)" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.points : double[][]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.VectorialMeanTest(String)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testMismatch()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.VectorialMean(int)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testMismatch()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.increment(double[])"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testMismatch()" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.fail(String)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testMismatch()" "org.apache.commons.math.DimensionMismatchException.getDimension1()"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testMismatch()" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.assertEquals(int,int)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testMismatch()" "org.apache.commons.math.DimensionMismatchException.getDimension2()"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testMismatch()"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testSimplistic()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.VectorialMean(int)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testSimplistic()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.increment(double[])"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testSimplistic()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testSimplistic()" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testSimplistic()"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.points : double[][]"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.VectorialMean(int)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.increment(double[])"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.getN()"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.assertEquals(long,long)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialMean.getResult()"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testBasicStats()" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.testBasicStats()"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.setUp()" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.points : double[][]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.setUp()"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.tearDown()" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.points : double[][]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.tearDown()"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.suite()" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.class$org$apache$commons$math$stat$descriptive$moment$VectorialMeanTest : Class"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.suite()" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.suite()"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.points : double[][]" "double[][]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.points : double[][]"
contain "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest" "org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest.class$org$apache$commons$math$stat$descriptive$moment$VectorialMeanTest : Class"
reference "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionImpl"
reference "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistribution"
reference "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest"
call "org.apache.commons.math.distribution.NormalDistributionTest.NormalDistributionTest(String)" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(String)"
contain "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionTest.NormalDistributionTest(String)"
call "org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution()" "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double)"
contain "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution()"
contain "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestValues()"
call "org.apache.commons.math.distribution.NormalDistributionTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()"
call "org.apache.commons.math.distribution.NormalDistributionTest.setUp()" "org.apache.commons.math.distribution.NormalDistributionTest.setTolerance(double)"
contain "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionTest.setUp()"
call "org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles()" "org.apache.commons.math.distribution.NormalDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles()" "org.apache.commons.math.distribution.NormalDistribution.getMean()"
call "org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles()" "org.apache.commons.math.distribution.NormalDistribution.getStandardDeviation()"
call "org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles()" "org.apache.commons.math.distribution.NormalDistributionTest.setCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles()" "org.apache.commons.math.distribution.NormalDistributionTest.setCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles()" "org.apache.commons.math.distribution.NormalDistributionTest.verifyCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles()" "org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles()" "org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double)"
call "org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles()" "org.apache.commons.math.distribution.NormalDistributionTest.setDistribution(ContinuousDistribution)"
contain "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.NormalDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.NormalDistributionTest.setInverseCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.NormalDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testGetMean()" "org.apache.commons.math.distribution.NormalDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testGetMean()" "org.apache.commons.math.distribution.NormalDistribution.getMean()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testGetMean()" "org.apache.commons.math.distribution.NormalDistributionTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionTest.testGetMean()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testSetMean()" "org.apache.commons.math.distribution.NormalDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testSetMean()" "org.apache.commons.math.distribution.NormalDistribution.setMean(double)"
call "org.apache.commons.math.distribution.NormalDistributionTest.testSetMean()" "org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles()"
contain "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionTest.testSetMean()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testGetStandardDeviation()" "org.apache.commons.math.distribution.NormalDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testGetStandardDeviation()" "org.apache.commons.math.distribution.NormalDistribution.getStandardDeviation()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testGetStandardDeviation()" "org.apache.commons.math.distribution.NormalDistributionTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionTest.testGetStandardDeviation()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testSetStandardDeviation()" "org.apache.commons.math.distribution.NormalDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testSetStandardDeviation()" "org.apache.commons.math.distribution.NormalDistribution.setStandardDeviation(double)"
call "org.apache.commons.math.distribution.NormalDistributionTest.testSetStandardDeviation()" "org.apache.commons.math.distribution.NormalDistribution.getStandardDeviation()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testSetStandardDeviation()" "org.apache.commons.math.distribution.NormalDistributionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.distribution.NormalDistributionTest.testSetStandardDeviation()" "org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testSetStandardDeviation()" "org.apache.commons.math.distribution.NormalDistributionTest.fail(String)"
contain "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionTest.testSetStandardDeviation()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues()" "org.apache.commons.math.distribution.NormalDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues()" "org.apache.commons.math.distribution.NormalDistribution.setMean(double)"
call "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues()" "org.apache.commons.math.distribution.NormalDistribution.setStandardDeviation(double)"
call "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues()" "org.apache.commons.math.distribution.NormalDistribution.cumulativeProbability(double)"
call "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues()" "org.apache.commons.math.distribution.NormalDistributionTest.assertTrue(boolean)"
contain "org.apache.commons.math.distribution.NormalDistributionTest" "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues()"
reference "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionImpl"
reference "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest"
reference "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistribution"
call "org.apache.commons.math.distribution.PoissonDistributionTest.PoissonDistributionTest(String)" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(String)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.PoissonDistributionTest(String)" "org.apache.commons.math.distribution.PoissonDistributionTest.setTolerance(double)"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.PoissonDistributionTest(String)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.makeDistribution()" "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double)"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.makeDistribution()"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestPoints()"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestValues()"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestValues()"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestValues()"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testNormalApproximateProbability()" "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testNormalApproximateProbability()" "org.apache.commons.math.distribution.PoissonDistribution.normalApproximateProbability(int)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testNormalApproximateProbability()" "org.apache.commons.math.distribution.PoissonDistributionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testNormalApproximateProbability()" "org.apache.commons.math.distribution.PoissonDistribution.setMean(double)"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.testNormalApproximateProbability()"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability()" "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability()" "org.apache.commons.math.distribution.PoissonDistribution.inverseCumulativeProbability(double)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability()" "org.apache.commons.math.distribution.PoissonDistributionTest.assertEquals(int,int)"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability()"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testMean()" "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testMean()" "org.apache.commons.math.distribution.PoissonDistribution.setMean(double)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testMean()" "org.apache.commons.math.distribution.PoissonDistributionTest.fail(String)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testMean()" "org.apache.commons.math.distribution.PoissonDistribution.getMean()"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testMean()" "org.apache.commons.math.distribution.PoissonDistributionTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.testMean()"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability()" "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability()" "org.apache.commons.math.distribution.PoissonDistribution.setMean(double)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability()" "org.apache.commons.math.distribution.PoissonDistribution.cumulativeProbability(double)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability()" "org.apache.commons.math.MathException.getMessage()"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability()" "org.apache.commons.math.distribution.PoissonDistributionTest.fail(String)"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability()"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability()" "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability()" "org.apache.commons.math.distribution.PoissonDistribution.setMean(double)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability()" "org.apache.commons.math.distribution.PoissonDistribution.inverseCumulativeProbability(double)"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability()" "org.apache.commons.math.MathException.getMessage()"
call "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability()" "org.apache.commons.math.distribution.PoissonDistributionTest.fail(String)"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability()"
contain "org.apache.commons.math.distribution.PoissonDistributionTest" "org.apache.commons.math.distribution.PoissonDistributionTest.DEFAULT_TEST_POISSON_PARAMETER : double"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement" "org.apache.commons.math.estimation.WeightedMeasurementTest"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.MyMeasurement(double,double)" "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double)"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.MyMeasurement(double,double)" "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.testInstance : WeightedMeasurementTest"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement" "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.MyMeasurement(double,double)"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.getTheoreticalValue()" "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.testInstance : WeightedMeasurementTest"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.getTheoreticalValue()" "org.apache.commons.math.estimation.WeightedMeasurementTest.access$000(WeightedMeasurementTest)"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement" "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.getTheoreticalValue()"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.testInstance : WeightedMeasurementTest"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.WeightedMeasurementTest.access$100(WeightedMeasurementTest,EstimatedParameter)"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement" "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.getPartial(EstimatedParameter)"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.testInstance : WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement" "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.testInstance : WeightedMeasurementTest"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement" "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.serialVersionUID : long"
reference "org.apache.commons.math.analysis.NewtonSolverTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.analysis.NewtonSolverTest" "org.apache.commons.math.analysis.NewtonSolver"
reference "org.apache.commons.math.analysis.NewtonSolverTest" "org.apache.commons.math.analysis.QuinticFunction"
reference "org.apache.commons.math.analysis.NewtonSolverTest" "org.apache.commons.math.analysis.BisectionSolver"
reference "org.apache.commons.math.analysis.NewtonSolverTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.NewtonSolverTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.NewtonSolverTest" "org.apache.commons.math.analysis.UnivariateRealSolver"
reference "org.apache.commons.math.analysis.NewtonSolverTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.analysis.NewtonSolverTest.NewtonSolverTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.analysis.NewtonSolverTest" "org.apache.commons.math.analysis.NewtonSolverTest.NewtonSolverTest()"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSinZero()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSinZero()" "org.apache.commons.math.analysis.NewtonSolver.NewtonSolver(DifferentiableUnivariateRealFunction)"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSinZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSinZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSinZero()" "org.apache.commons.math.analysis.NewtonSolverTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSinZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.getResult()"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSinZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.getIterationCount()"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSinZero()" "org.apache.commons.math.analysis.NewtonSolverTest.assertTrue(boolean)"
contain "org.apache.commons.math.analysis.NewtonSolverTest" "org.apache.commons.math.analysis.NewtonSolverTest.testSinZero()"
call "org.apache.commons.math.analysis.NewtonSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.NewtonSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.BisectionSolver.BisectionSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.NewtonSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.NewtonSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.NewtonSolverTest.testQuinticZero()" "org.apache.commons.math.analysis.NewtonSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.NewtonSolverTest" "org.apache.commons.math.analysis.NewtonSolverTest.testQuinticZero()"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSerialization()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSerialization()" "org.apache.commons.math.analysis.NewtonSolver.NewtonSolver(DifferentiableUnivariateRealFunction)"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSerialization()" "org.apache.commons.math.TestUtils.serializeAndRecover(Object)"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSerialization()" "org.apache.commons.math.analysis.NewtonSolver.solve(double,double)"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSerialization()" "org.apache.commons.math.analysis.NewtonSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSerialization()" "org.apache.commons.math.analysis.NewtonSolverTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSerialization()" "org.apache.commons.math.analysis.NewtonSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSerialization()" "org.apache.commons.math.analysis.NewtonSolver.setRelativeAccuracy(double)"
call "org.apache.commons.math.analysis.NewtonSolverTest.testSerialization()" "org.apache.commons.math.analysis.NewtonSolver.resetRelativeAccuracy()"
contain "org.apache.commons.math.analysis.NewtonSolverTest" "org.apache.commons.math.analysis.NewtonSolverTest.testSerialization()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)" "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.factors : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.parameters : EstimatedParameter[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.getTheoreticalValue()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.factors : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.getTheoreticalValue()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.getTheoreticalValue()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.getTheoreticalValue()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.parameters : EstimatedParameter[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.factors : double[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.getPartial(EstimatedParameter)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.getParameters()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.parameters : EstimatedParameter[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.getParameters()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.factors : double[]" "double[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.factors : double[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.parameters : EstimatedParameter[]" "org.apache.commons.math.estimation.EstimatedParameter[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.parameters : EstimatedParameter[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest" "org.apache.commons.math.stat.descriptive.moment.Mean"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest" "junit.framework.TestCase"
call "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.AbstractUnivariateStatisticTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.AbstractUnivariateStatisticTest(String)" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testArray : double[]"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.AbstractUnivariateStatisticTest(String)" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.nullArray : double[]"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.AbstractUnivariateStatisticTest(String)" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.singletonArray : double[]"
call "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.AbstractUnivariateStatisticTest(String)" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.AbstractUnivariateStatisticTest(String)" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testStatistic : Mean"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.AbstractUnivariateStatisticTest(String)"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.suite()" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.class$org$apache$commons$math$stat$descriptive$AbstractUnivariateStatisticTest : Class"
call "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.suite()" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.suite()"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestPositive()" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testStatistic : Mean"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestPositive()" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testArray : double[]"
call "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestPositive()" "org.apache.commons.math.stat.descriptive.moment.Mean.test(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestPositive()" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.assertTrue(boolean)"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestPositive()" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.singletonArray : double[]"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestPositive()"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestNegative()" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testStatistic : Mean"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestNegative()" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.singletonArray : double[]"
call "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestNegative()" "org.apache.commons.math.stat.descriptive.moment.Mean.test(double[],int,int)"
call "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestNegative()" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.assertFalse(boolean)"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestNegative()" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testArray : double[]"
call "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestNegative()" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.fail(String)"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestNegative()" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.nullArray : double[]"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testTestNegative()"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testArray : double[]" "double[]"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testArray : double[]"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.nullArray : double[]" "double[]"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.nullArray : double[]"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.singletonArray : double[]" "double[]"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.singletonArray : double[]"
reference "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testStatistic : Mean" "org.apache.commons.math.stat.descriptive.moment.Mean"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.testStatistic : Mean"
contain "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest" "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest.class$org$apache$commons$math$stat$descriptive$AbstractUnivariateStatisticTest : Class"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean" "org.apache.commons.math.stat.descriptive.UnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean.deepMean()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean.this$0 : DescriptiveStatisticsTest"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean.deepMean()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean.evaluate(double[],int,int)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean.evaluate(double[])"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean.this$0 : DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean.this$0 : DescriptiveStatisticsTest"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest" "junit.framework.TestCase"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurement"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.WeightedMeasurementTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.WeightedMeasurementTest(String)" "org.apache.commons.math.estimation.WeightedMeasurementTest.p1 : EstimatedParameter"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.WeightedMeasurementTest(String)" "org.apache.commons.math.estimation.WeightedMeasurementTest.p2 : EstimatedParameter"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.WeightedMeasurementTest(String)"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testConstruction()" "org.apache.commons.math.estimation.WeightedMeasurementTest.theoretical()"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testConstruction()" "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.MyMeasurement(double,double)"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testConstruction()" "org.apache.commons.math.estimation.WeightedMeasurement.getWeight()"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testConstruction()" "org.apache.commons.math.estimation.WeightedMeasurementTest.checkValue(double,double)"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testConstruction()" "org.apache.commons.math.estimation.WeightedMeasurement.getMeasuredValue()"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.testConstruction()"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testIgnored()" "org.apache.commons.math.estimation.WeightedMeasurementTest.theoretical()"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testIgnored()" "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.MyMeasurement(double,double)"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testIgnored()" "org.apache.commons.math.estimation.WeightedMeasurement.isIgnored()"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testIgnored()" "org.apache.commons.math.estimation.WeightedMeasurementTest.assertTrue(boolean)"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testIgnored()" "org.apache.commons.math.estimation.WeightedMeasurement.setIgnored(boolean)"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.testIgnored()"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testTheory()" "org.apache.commons.math.estimation.WeightedMeasurementTest.theoretical()"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testTheory()" "org.apache.commons.math.estimation.WeightedMeasurementTest.MyMeasurement.MyMeasurement(double,double)"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testTheory()" "org.apache.commons.math.estimation.WeightedMeasurement.getTheoreticalValue()"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testTheory()" "org.apache.commons.math.estimation.WeightedMeasurementTest.checkValue(double,double)"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testTheory()" "org.apache.commons.math.estimation.WeightedMeasurement.getResidual()"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.testTheory()" "org.apache.commons.math.estimation.WeightedMeasurementTest.p1 : EstimatedParameter"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testTheory()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testTheory()" "org.apache.commons.math.estimation.WeightedMeasurement.getPartial(EstimatedParameter)"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.testTheory()" "org.apache.commons.math.estimation.EstimatedParameter.setEstimate(double)"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.testTheory()" "org.apache.commons.math.estimation.WeightedMeasurementTest.p2 : EstimatedParameter"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.testTheory()"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.suite()" "org.apache.commons.math.estimation.WeightedMeasurementTest.class$org$apache$commons$math$estimation$WeightedMeasurementTest : Class"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.suite()" "org.apache.commons.math.estimation.WeightedMeasurementTest.class$(String)"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.suite()"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.setUp()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.setUp()" "org.apache.commons.math.estimation.WeightedMeasurementTest.p1 : EstimatedParameter"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.setUp()" "org.apache.commons.math.estimation.WeightedMeasurementTest.p2 : EstimatedParameter"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.setUp()"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.tearDown()" "org.apache.commons.math.estimation.WeightedMeasurementTest.p1 : EstimatedParameter"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.tearDown()" "org.apache.commons.math.estimation.WeightedMeasurementTest.p2 : EstimatedParameter"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.tearDown()"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.checkValue(double,double)" "org.apache.commons.math.estimation.WeightedMeasurementTest.assertTrue(boolean)"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.checkValue(double,double)"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.theoretical()" "org.apache.commons.math.estimation.WeightedMeasurementTest.p1 : EstimatedParameter"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.theoretical()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.theoretical()" "org.apache.commons.math.estimation.WeightedMeasurementTest.p2 : EstimatedParameter"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.theoretical()"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.partial(EstimatedParameter)" "org.apache.commons.math.estimation.WeightedMeasurementTest.p1 : EstimatedParameter"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.partial(EstimatedParameter)" "org.apache.commons.math.estimation.WeightedMeasurementTest.p2 : EstimatedParameter"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.partial(EstimatedParameter)"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.class$(String)"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.access$000(WeightedMeasurementTest)" "org.apache.commons.math.estimation.WeightedMeasurementTest.theoretical()"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.access$000(WeightedMeasurementTest)"
call "org.apache.commons.math.estimation.WeightedMeasurementTest.access$100(WeightedMeasurementTest,EstimatedParameter)" "org.apache.commons.math.estimation.WeightedMeasurementTest.partial(EstimatedParameter)"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.access$100(WeightedMeasurementTest,EstimatedParameter)"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.p1 : EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.p1 : EstimatedParameter"
reference "org.apache.commons.math.estimation.WeightedMeasurementTest.p2 : EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.p2 : EstimatedParameter"
contain "org.apache.commons.math.estimation.WeightedMeasurementTest" "org.apache.commons.math.estimation.WeightedMeasurementTest.class$org$apache$commons$math$estimation$WeightedMeasurementTest : Class"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestImpl"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest" "long[]"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest" "junit.framework.TestCase"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.ChiSquareTestTest(String)" "junit.framework.TestCase.TestCase(String)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.ChiSquareTestTest(String)" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl()"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest.ChiSquareTestTest(String)" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testStatistic : UnknownDistributionChiSquareTest"
contain "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest.ChiSquareTestTest(String)"
contain "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest.setUp()"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest.suite()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.class$org$apache$commons$math$stat$inference$ChiSquareTestTest : Class"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.suite()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.class$(String)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest.suite()"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testStatistic : UnknownDistributionChiSquareTest"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquare(double[],long[])"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTest(double[],long[])"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTest(double[],long[],double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.fail(String)"
contain "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare()"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareIndependence()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testStatistic : UnknownDistributionChiSquareTest"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareIndependence()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquare(long[][])"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareIndependence()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareIndependence()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTest(long[][])"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareIndependence()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTest(long[][],double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareIndependence()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareIndependence()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.fail(String)"
contain "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareIndependence()"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl()"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic()" "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[],long[])"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testStatistic : UnknownDistributionChiSquareTest"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquare(double[],long[])"
contain "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic()"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareZeroCount()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testStatistic : UnknownDistributionChiSquareTest"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareZeroCount()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquare(long[][])"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareZeroCount()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareZeroCount()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTest(long[][])"
contain "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareZeroCount()"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testStatistic : UnknownDistributionChiSquareTest"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(long[],long[])"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareDataSetsComparison(long[],long[])"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(long[],long[],double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.assertFalse(String,boolean)"
contain "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts()"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testStatistic : UnknownDistributionChiSquareTest"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(long[],long[])"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareDataSetsComparison(long[],long[])"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(long[],long[],double)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.assertFalse(String,boolean)"
contain "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts()"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonBadCounts()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testStatistic : UnknownDistributionChiSquareTest"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonBadCounts()" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(long[],long[])"
call "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonBadCounts()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.fail(String)"
contain "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonBadCounts()"
contain "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest.class$(String)"
reference "org.apache.commons.math.stat.inference.ChiSquareTestTest.testStatistic : UnknownDistributionChiSquareTest" "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest"
contain "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest.testStatistic : UnknownDistributionChiSquareTest"
contain "org.apache.commons.math.stat.inference.ChiSquareTestTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest.class$org$apache$commons$math$stat$inference$ChiSquareTestTest : Class"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler" "junit.framework.Assert"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.KeplerStepHandler(TestProblem3)" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.pb : TestProblem3"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.KeplerStepHandler(TestProblem3)" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.reset()"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.KeplerStepHandler(TestProblem3)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.reset()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.nbSteps : int"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.reset()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.maxError : double"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.reset()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.nbSteps : int"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.pb : TestProblem3"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.maxError : double"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.handleStep(StepInterpolator,boolean)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.nbSteps : int"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.maxError : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.pb : TestProblem3" "org.apache.commons.math.ode.TestProblem3"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.KeplerStepHandler.pb : TestProblem3"
reference "org.apache.commons.math.linear.MatrixIndexExceptionTest" "org.apache.commons.math.linear.MatrixIndexException"
reference "org.apache.commons.math.linear.MatrixIndexExceptionTest" "junit.framework.TestCase"
call "org.apache.commons.math.linear.MatrixIndexExceptionTest.MatrixIndexExceptionTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.linear.MatrixIndexExceptionTest" "org.apache.commons.math.linear.MatrixIndexExceptionTest.MatrixIndexExceptionTest()"
call "org.apache.commons.math.linear.MatrixIndexExceptionTest.testConstructorMessage()" "org.apache.commons.math.linear.MatrixIndexException.MatrixIndexException(String)"
call "org.apache.commons.math.linear.MatrixIndexExceptionTest.testConstructorMessage()" "org.apache.commons.math.linear.MatrixIndexException.getMessage()"
call "org.apache.commons.math.linear.MatrixIndexExceptionTest.testConstructorMessage()" "org.apache.commons.math.linear.MatrixIndexExceptionTest.assertEquals(String,String)"
contain "org.apache.commons.math.linear.MatrixIndexExceptionTest" "org.apache.commons.math.linear.MatrixIndexExceptionTest.testConstructorMessage()"
reference "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.Fraction"
reference "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.ProperFractionFormat"
reference "org.apache.commons.math.fraction.FractionFormatTest" "junit.framework.TestCase"
reference "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.FractionFormatTest()" "junit.framework.TestCase.TestCase()"
reference "org.apache.commons.math.fraction.FractionFormatTest.FractionFormatTest()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
reference "org.apache.commons.math.fraction.FractionFormatTest.FractionFormatTest()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.FractionFormatTest()"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.getLocale()"
call "org.apache.commons.math.fraction.FractionFormatTest.setUp()" "org.apache.commons.math.fraction.FractionFormatTest.getLocale()"
call "org.apache.commons.math.fraction.FractionFormatTest.setUp()" "org.apache.commons.math.fraction.FractionFormat.getProperInstance(Locale)"
reference "org.apache.commons.math.fraction.FractionFormatTest.setUp()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.setUp()" "org.apache.commons.math.fraction.FractionFormat.getImproperInstance(Locale)"
reference "org.apache.commons.math.fraction.FractionFormatTest.setUp()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.setUp()"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormat()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testFormat()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormat()" "org.apache.commons.math.fraction.FractionFormat.format(Object)"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormat()" "org.apache.commons.math.fraction.FractionFormatTest.assertEquals(String,String)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testFormat()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testFormat()"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormatNegative()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testFormatNegative()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormatNegative()" "org.apache.commons.math.fraction.FractionFormat.format(Object)"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormatNegative()" "org.apache.commons.math.fraction.FractionFormatTest.assertEquals(String,String)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testFormatNegative()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testFormatNegative()"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormatZero()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testFormatZero()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormatZero()" "org.apache.commons.math.fraction.FractionFormat.format(Object)"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormatZero()" "org.apache.commons.math.fraction.FractionFormatTest.assertEquals(String,String)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testFormatZero()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testFormatZero()"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproper()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproper()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproper()" "org.apache.commons.math.fraction.FractionFormat.format(Object)"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproper()" "org.apache.commons.math.fraction.FractionFormatTest.assertEquals(String,String)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproper()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproper()"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative()" "org.apache.commons.math.fraction.Fraction.Fraction(int,int)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative()" "org.apache.commons.math.fraction.FractionFormat.format(Object)"
call "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative()" "org.apache.commons.math.fraction.FractionFormatTest.assertEquals(String,String)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative()"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParse()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testParse()" "org.apache.commons.math.fraction.FractionFormat.parse(String)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParse()" "org.apache.commons.math.fraction.FractionFormatTest.assertNotNull(Object)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParse()" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionFormatTest.testParse()" "org.apache.commons.math.fraction.FractionFormatTest.assertEquals(int,int)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParse()" "org.apache.commons.math.fraction.Fraction.getDenominator()"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParse()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testParse()" "org.apache.commons.math.fraction.FractionFormatTest.fail(String)"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testParse()"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParseInteger()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseInteger()" "org.apache.commons.math.fraction.FractionFormat.parse(String)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseInteger()" "org.apache.commons.math.fraction.FractionFormatTest.assertNotNull(Object)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseInteger()" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseInteger()" "org.apache.commons.math.fraction.FractionFormatTest.assertEquals(int,int)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseInteger()" "org.apache.commons.math.fraction.Fraction.getDenominator()"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseInteger()" "org.apache.commons.math.fraction.FractionFormatTest.fail(String)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParseInteger()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testParseInteger()"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParseInvalid()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseInvalid()" "org.apache.commons.math.fraction.FractionFormat.parse(String)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseInvalid()" "org.apache.commons.math.fraction.FractionFormatTest.fail(String)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParseInvalid()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testParseInvalid()"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParseInvalidDenominator()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseInvalidDenominator()" "org.apache.commons.math.fraction.FractionFormat.parse(String)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseInvalidDenominator()" "org.apache.commons.math.fraction.FractionFormatTest.fail(String)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParseInvalidDenominator()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testParseInvalidDenominator()"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParseNegative()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseNegative()" "org.apache.commons.math.fraction.FractionFormat.parse(String)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseNegative()" "org.apache.commons.math.fraction.FractionFormatTest.assertNotNull(Object)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseNegative()" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseNegative()" "org.apache.commons.math.fraction.FractionFormatTest.assertEquals(int,int)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseNegative()" "org.apache.commons.math.fraction.Fraction.getDenominator()"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParseNegative()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseNegative()" "org.apache.commons.math.fraction.FractionFormatTest.fail(String)"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testParseNegative()"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParseProper()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProper()" "org.apache.commons.math.fraction.FractionFormat.parse(String)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProper()" "org.apache.commons.math.fraction.FractionFormatTest.assertNotNull(Object)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProper()" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProper()" "org.apache.commons.math.fraction.FractionFormatTest.assertEquals(int,int)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProper()" "org.apache.commons.math.fraction.Fraction.getDenominator()"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProper()" "org.apache.commons.math.fraction.FractionFormatTest.fail(String)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParseProper()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testParseProper()"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParseProperNegative()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProperNegative()" "org.apache.commons.math.fraction.FractionFormat.parse(String)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProperNegative()" "org.apache.commons.math.fraction.FractionFormatTest.assertNotNull(Object)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProperNegative()" "org.apache.commons.math.fraction.Fraction.getNumerator()"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProperNegative()" "org.apache.commons.math.fraction.FractionFormatTest.assertEquals(int,int)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProperNegative()" "org.apache.commons.math.fraction.Fraction.getDenominator()"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProperNegative()" "org.apache.commons.math.fraction.FractionFormatTest.fail(String)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParseProperNegative()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testParseProperNegative()"
reference "org.apache.commons.math.fraction.FractionFormatTest.testParseProperInvalidMinus()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProperInvalidMinus()" "org.apache.commons.math.fraction.FractionFormat.parse(String)"
call "org.apache.commons.math.fraction.FractionFormatTest.testParseProperInvalidMinus()" "org.apache.commons.math.fraction.FractionFormatTest.fail(String)"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testParseProperInvalidMinus()"
reference "org.apache.commons.math.fraction.FractionFormatTest.testNumeratorFormat()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testNumeratorFormat()" "org.apache.commons.math.fraction.FractionFormat.getNumeratorFormat()"
call "org.apache.commons.math.fraction.FractionFormatTest.testNumeratorFormat()" "org.apache.commons.math.fraction.FractionFormat.setNumeratorFormat(NumberFormat)"
call "org.apache.commons.math.fraction.FractionFormatTest.testNumeratorFormat()" "org.apache.commons.math.fraction.FractionFormatTest.assertEquals(Object,Object)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testNumeratorFormat()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testNumeratorFormat()"
reference "org.apache.commons.math.fraction.FractionFormatTest.testDenominatorFormat()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testDenominatorFormat()" "org.apache.commons.math.fraction.FractionFormat.getDenominatorFormat()"
call "org.apache.commons.math.fraction.FractionFormatTest.testDenominatorFormat()" "org.apache.commons.math.fraction.FractionFormat.setDenominatorFormat(NumberFormat)"
call "org.apache.commons.math.fraction.FractionFormatTest.testDenominatorFormat()" "org.apache.commons.math.fraction.FractionFormatTest.assertEquals(Object,Object)"
reference "org.apache.commons.math.fraction.FractionFormatTest.testDenominatorFormat()" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testDenominatorFormat()"
reference "org.apache.commons.math.fraction.FractionFormatTest.testWholeFormat()" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
call "org.apache.commons.math.fraction.FractionFormatTest.testWholeFormat()" "org.apache.commons.math.fraction.ProperFractionFormat.getWholeFormat()"
call "org.apache.commons.math.fraction.FractionFormatTest.testWholeFormat()" "org.apache.commons.math.fraction.ProperFractionFormat.setWholeFormat(NumberFormat)"
call "org.apache.commons.math.fraction.FractionFormatTest.testWholeFormat()" "org.apache.commons.math.fraction.FractionFormatTest.assertEquals(Object,Object)"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.testWholeFormat()"
reference "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat" "org.apache.commons.math.fraction.FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.properFormat : FractionFormat"
reference "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat" "org.apache.commons.math.fraction.FractionFormat"
contain "org.apache.commons.math.fraction.FractionFormatTest" "org.apache.commons.math.fraction.FractionFormatTest.improperFormat : FractionFormat"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.Complex"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormat"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest" "junit.framework.TestCase"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.ComplexFormatAbstractTest()" "junit.framework.TestCase.TestCase()"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.ComplexFormatAbstractTest()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.ComplexFormatAbstractTest()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormatJ : ComplexFormat"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.ComplexFormatAbstractTest()"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getLocale()"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.setUp()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getLocale()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.setUp()" "org.apache.commons.math.complex.ComplexFormat.getInstance(Locale)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.setUp()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.setUp()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormatJ : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.setUp()" "org.apache.commons.math.complex.ComplexFormat.setImaginaryCharacter(String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.setUp()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleNoDecimals()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleNoDecimals()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleNoDecimals()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleNoDecimals()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleNoDecimals()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimals()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimals()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimals()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimals()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimals()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimals()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimalsTrunc()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimalsTrunc()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimalsTrunc()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimalsTrunc()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimalsTrunc()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSimpleWithDecimalsTrunc()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeReal()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeReal()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeReal()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeImaginary()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeImaginary()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeImaginary()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeBoth()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeBoth()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeBoth()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeBoth()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeBoth()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeBoth()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroReal()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroReal()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroReal()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroImaginary()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroImaginary()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testZeroImaginary()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testDifferentImaginaryChar()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testDifferentImaginaryChar()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormatJ : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testDifferentImaginaryChar()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testDifferentImaginaryChar()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testDifferentImaginaryChar()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testStaticFormatComplex()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getLocale()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testStaticFormatComplex()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testStaticFormatComplex()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testStaticFormatComplex()" "org.apache.commons.math.complex.ComplexFormat.formatComplex(Complex)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testStaticFormatComplex()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testStaticFormatComplex()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNan()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNan()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNan()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNan()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNan()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testPositiveInfinity()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testPositiveInfinity()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testPositiveInfinity()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testPositiveInfinity()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testPositiveInfinity()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeInfinity()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeInfinity()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeInfinity()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeInfinity()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testNegativeInfinity()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleNoDecimals()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleNoDecimals()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleNoDecimals()" "org.apache.commons.math.complex.ComplexFormat.parseObject(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleNoDecimals()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleNoDecimals()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleNoDecimals()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimals()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimals()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimals()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimals()" "org.apache.commons.math.complex.ComplexFormat.parseObject(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimals()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimals()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimals()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimalsTrunc()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimalsTrunc()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimalsTrunc()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimalsTrunc()" "org.apache.commons.math.complex.ComplexFormat.parseObject(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimalsTrunc()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimalsTrunc()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseSimpleWithDecimalsTrunc()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeReal()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeReal()" "org.apache.commons.math.complex.ComplexFormat.parseObject(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeReal()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeImaginary()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeImaginary()" "org.apache.commons.math.complex.ComplexFormat.parseObject(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeImaginary()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeBoth()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeBoth()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeBoth()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeBoth()" "org.apache.commons.math.complex.ComplexFormat.parseObject(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeBoth()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeBoth()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNegativeBoth()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroReal()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroReal()" "org.apache.commons.math.complex.ComplexFormat.parseObject(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroReal()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroReal()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroImaginary()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroImaginary()" "org.apache.commons.math.complex.ComplexFormat.parseObject(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroImaginary()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseZeroImaginary()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseDifferentImaginaryChar()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseDifferentImaginaryChar()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseDifferentImaginaryChar()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormatJ : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseDifferentImaginaryChar()" "org.apache.commons.math.complex.ComplexFormat.parseObject(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseDifferentImaginaryChar()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseDifferentImaginaryChar()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseDifferentImaginaryChar()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNan()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNan()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNan()" "org.apache.commons.math.complex.ComplexFormat.parseObject(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNan()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNan()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParseNan()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParsePositiveInfinity()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParsePositiveInfinity()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParsePositiveInfinity()" "org.apache.commons.math.complex.ComplexFormat.parseObject(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParsePositiveInfinity()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParsePositiveInfinity()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testParsePositiveInfinity()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testPaseNegativeInfinity()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.testPaseNegativeInfinity()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testPaseNegativeInfinity()" "org.apache.commons.math.complex.ComplexFormat.parseObject(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testPaseNegativeInfinity()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testPaseNegativeInfinity()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testPaseNegativeInfinity()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testConstructorSingleFormat()" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat(NumberFormat)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testConstructorSingleFormat()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertNotNull(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testConstructorSingleFormat()" "org.apache.commons.math.complex.ComplexFormat.getRealFormat()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testConstructorSingleFormat()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(Object,Object)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testConstructorSingleFormat()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetImaginaryFormat()" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetImaginaryFormat()" "org.apache.commons.math.complex.ComplexFormat.getImaginaryFormat()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetImaginaryFormat()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertNotSame(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetImaginaryFormat()" "org.apache.commons.math.complex.ComplexFormat.setImaginaryFormat(NumberFormat)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetImaginaryFormat()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertSame(Object,Object)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetImaginaryFormat()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryFormatNull()" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryFormatNull()" "org.apache.commons.math.complex.ComplexFormat.setImaginaryFormat(NumberFormat)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryFormatNull()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail()"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryFormatNull()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetRealFormatNull()" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetRealFormatNull()" "org.apache.commons.math.complex.ComplexFormat.setRealFormat(NumberFormat)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetRealFormatNull()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail()"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetRealFormatNull()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetRealFormat()" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetRealFormat()" "org.apache.commons.math.complex.ComplexFormat.getRealFormat()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetRealFormat()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertNotSame(Object,Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetRealFormat()" "org.apache.commons.math.complex.ComplexFormat.setRealFormat(NumberFormat)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetRealFormat()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertSame(Object,Object)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testGetRealFormat()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryCharacterNull()" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryCharacterNull()" "org.apache.commons.math.complex.ComplexFormat.setImaginaryCharacter(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryCharacterNull()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail()"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryCharacterNull()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryCharacterEmpty()" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryCharacterEmpty()" "org.apache.commons.math.complex.ComplexFormat.setImaginaryCharacter(String)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryCharacterEmpty()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail()"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testSetImaginaryCharacterEmpty()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testFormatNumber()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getLocale()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testFormatNumber()" "org.apache.commons.math.complex.ComplexFormat.getInstance(Locale)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testFormatNumber()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testFormatNumber()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.getDecimalCharacter()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testFormatNumber()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.assertEquals(String,String)"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testFormatNumber()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testFormatObject()" "org.apache.commons.math.complex.ComplexFormat.ComplexFormat()"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testFormatObject()" "org.apache.commons.math.complex.ComplexFormat.format(Object)"
call "org.apache.commons.math.complex.ComplexFormatAbstractTest.testFormatObject()" "org.apache.commons.math.complex.ComplexFormatAbstractTest.fail()"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.testFormatObject()"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat" "org.apache.commons.math.complex.ComplexFormat"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormat : ComplexFormat"
reference "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormatJ : ComplexFormat" "org.apache.commons.math.complex.ComplexFormat"
contain "org.apache.commons.math.complex.ComplexFormatAbstractTest" "org.apache.commons.math.complex.ComplexFormatAbstractTest.complexFormatJ : ComplexFormat"
reference "org.apache.commons.math.analysis.Expm1Function" "org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction"
reference "org.apache.commons.math.analysis.Expm1Function" "org.apache.commons.math.FunctionEvaluationException"
contain "org.apache.commons.math.analysis.Expm1Function" "org.apache.commons.math.analysis.Expm1Function.Expm1Function()"
contain "org.apache.commons.math.analysis.Expm1Function" "org.apache.commons.math.analysis.Expm1Function.value(double)"
call "org.apache.commons.math.analysis.Expm1Function.derivative()" "org.apache.commons.math.analysis.Expm1Function.1.{...}"
contain "org.apache.commons.math.analysis.Expm1Function" "org.apache.commons.math.analysis.Expm1Function.derivative()"
reference "org.apache.commons.math.distribution.PascalDistributionTest" "org.apache.commons.math.distribution.PascalDistributionImpl"
reference "org.apache.commons.math.distribution.PascalDistributionTest" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest"
call "org.apache.commons.math.distribution.PascalDistributionTest.PascalDistributionTest(String)" "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(String)"
contain "org.apache.commons.math.distribution.PascalDistributionTest" "org.apache.commons.math.distribution.PascalDistributionTest.PascalDistributionTest(String)"
call "org.apache.commons.math.distribution.PascalDistributionTest.makeDistribution()" "org.apache.commons.math.distribution.PascalDistributionImpl.PascalDistributionImpl(int,double)"
contain "org.apache.commons.math.distribution.PascalDistributionTest" "org.apache.commons.math.distribution.PascalDistributionTest.makeDistribution()"
contain "org.apache.commons.math.distribution.PascalDistributionTest" "org.apache.commons.math.distribution.PascalDistributionTest.makeDensityTestPoints()"
contain "org.apache.commons.math.distribution.PascalDistributionTest" "org.apache.commons.math.distribution.PascalDistributionTest.makeDensityTestValues()"
call "org.apache.commons.math.distribution.PascalDistributionTest.makeCumulativeTestPoints()" "org.apache.commons.math.distribution.PascalDistributionTest.makeDensityTestPoints()"
contain "org.apache.commons.math.distribution.PascalDistributionTest" "org.apache.commons.math.distribution.PascalDistributionTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.PascalDistributionTest" "org.apache.commons.math.distribution.PascalDistributionTest.makeCumulativeTestValues()"
contain "org.apache.commons.math.distribution.PascalDistributionTest" "org.apache.commons.math.distribution.PascalDistributionTest.makeInverseCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.PascalDistributionTest" "org.apache.commons.math.distribution.PascalDistributionTest.makeInverseCumulativeTestValues()"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.PascalDistributionImpl.PascalDistributionImpl(int,double)"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.PascalDistributionTest.setDistribution(IntegerDistribution)"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.PascalDistributionTest.setCumulativeTestPoints(int[])"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.PascalDistributionTest.setCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.PascalDistributionTest.setDensityTestPoints(int[])"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.PascalDistributionTest.setDensityTestValues(double[])"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.PascalDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.PascalDistributionTest.setInverseCumulativeTestValues(int[])"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.PascalDistributionTest.verifyDensities()"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.PascalDistributionTest.verifyCumulativeProbabilities()"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate0()" "org.apache.commons.math.distribution.PascalDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.PascalDistributionTest" "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate0()"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.PascalDistributionImpl.PascalDistributionImpl(int,double)"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.PascalDistributionTest.setDistribution(IntegerDistribution)"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.PascalDistributionTest.setCumulativeTestPoints(int[])"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.PascalDistributionTest.setCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.PascalDistributionTest.setDensityTestPoints(int[])"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.PascalDistributionTest.setDensityTestValues(double[])"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.PascalDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.PascalDistributionTest.setInverseCumulativeTestValues(int[])"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.PascalDistributionTest.verifyDensities()"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.PascalDistributionTest.verifyCumulativeProbabilities()"
call "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate1()" "org.apache.commons.math.distribution.PascalDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.PascalDistributionTest" "org.apache.commons.math.distribution.PascalDistributionTest.testDegenerate1()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.WeightedMeasurement[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.EstimationProblem"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.Circle(double,double)" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.Circle(double,double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cx : EstimatedParameter"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.Circle(double,double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cy : EstimatedParameter"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.Circle(double,double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.points : ArrayList"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.Circle(double,double)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.addPoint(double,double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.points : ArrayList"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.addPoint(double,double)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.PointModel(LevenbergMarquardtEstimatorTest.Circle,double,double)"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.addPoint(double,double)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getM()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.points : ArrayList"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getM()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getMeasurements()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.points : ArrayList"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getMeasurements()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getAllParameters()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cx : EstimatedParameter"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getAllParameters()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cy : EstimatedParameter"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getAllParameters()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getUnboundParameters()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cx : EstimatedParameter"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getUnboundParameters()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cy : EstimatedParameter"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getUnboundParameters()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getPartialRadiusX()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.points : ArrayList"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getPartialRadiusX()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiX()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getPartialRadiusX()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getPartialRadiusY()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.points : ArrayList"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getPartialRadiusY()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getPartialDiY()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getPartialRadiusY()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getRadius()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.points : ArrayList"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getRadius()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.PointModel.getCenterDistance()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getRadius()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getX()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cx : EstimatedParameter"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getX()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getX()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getY()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cy : EstimatedParameter"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getY()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.getY()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.access$000(LevenbergMarquardtEstimatorTest.Circle)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cx : EstimatedParameter"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.access$000(LevenbergMarquardtEstimatorTest.Circle)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.access$100(LevenbergMarquardtEstimatorTest.Circle)" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cy : EstimatedParameter"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.access$100(LevenbergMarquardtEstimatorTest.Circle)"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cx : EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cx : EstimatedParameter"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cy : EstimatedParameter" "org.apache.commons.math.estimation.EstimatedParameter"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.cy : EstimatedParameter"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.Circle.points : ArrayList"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.3" "org.apache.commons.math.ode.SwitchingFunction"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.3" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.{...}" "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.this$0 : HighamHall54IntegratorTest"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.{...}" "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.val$pb : TestProblem1"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.3" "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.{...}"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.3" "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.eventOccurred(double,double[])"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.g(double,double[])" "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.val$pb : TestProblem1"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.g(double,double[])" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.g(double,double[])" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.3" "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.g(double,double[])"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.3" "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.resetState(double,double[])"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.3" "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.serialVersionUID : long"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.val$pb : TestProblem1" "org.apache.commons.math.ode.TestProblem1"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.3" "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.val$pb : TestProblem1"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.this$0 : HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.3" "org.apache.commons.math.ode.HighamHall54IntegratorTest.3.this$0 : HighamHall54IntegratorTest"
reference "org.apache.commons.math.ode.GillStepInterpolatorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.GillStepInterpolatorTest" "org.apache.commons.math.ode.GillIntegrator"
reference "org.apache.commons.math.ode.GillStepInterpolatorTest" "org.apache.commons.math.ode.ContinuousOutputModel"
reference "org.apache.commons.math.ode.GillStepInterpolatorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.GillStepInterpolatorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.GillStepInterpolatorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.GillStepInterpolatorTest" "org.apache.commons.math.ode.IntegratorException"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.GillStepInterpolatorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.GillStepInterpolatorTest" "org.apache.commons.math.ode.GillStepInterpolatorTest.GillStepInterpolatorTest(String)"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.GillIntegrator.GillIntegrator(double)"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.GillIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.GillIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.GillIntegrator.getStepHandler()"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.GillStepInterpolatorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
contain "org.apache.commons.math.ode.GillStepInterpolatorTest" "org.apache.commons.math.ode.GillStepInterpolatorTest.testSerialization()"
reference "org.apache.commons.math.ode.GillStepInterpolatorTest.suite()" "org.apache.commons.math.ode.GillStepInterpolatorTest.class$org$apache$commons$math$ode$GillStepInterpolatorTest : Class"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.suite()" "org.apache.commons.math.ode.GillStepInterpolatorTest.class$(String)"
call "org.apache.commons.math.ode.GillStepInterpolatorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.GillStepInterpolatorTest" "org.apache.commons.math.ode.GillStepInterpolatorTest.suite()"
contain "org.apache.commons.math.ode.GillStepInterpolatorTest" "org.apache.commons.math.ode.GillStepInterpolatorTest.class$(String)"
contain "org.apache.commons.math.ode.GillStepInterpolatorTest" "org.apache.commons.math.ode.GillStepInterpolatorTest.class$org$apache$commons$math$ode$GillStepInterpolatorTest : Class"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.2" "org.apache.commons.math.ode.SwitchingFunction"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.2" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.2" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.{...}" "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.this$0 : HighamHall54IntegratorTest"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.{...}" "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.val$pb : TestProblem1"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.2" "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.{...}"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.2" "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.eventOccurred(double,double[])"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.g(double,double[])" "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.val$pb : TestProblem1"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.g(double,double[])" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.g(double,double[])" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.g(double,double[])" "org.apache.commons.math.FunctionEvaluationException.FunctionEvaluationException(double)"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.2" "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.g(double,double[])"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.2" "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.resetState(double,double[])"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.2" "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.serialVersionUID : long"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.val$pb : TestProblem1" "org.apache.commons.math.ode.TestProblem1"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.2" "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.val$pb : TestProblem1"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.this$0 : HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.2" "org.apache.commons.math.ode.HighamHall54IntegratorTest.2.this$0 : HighamHall54IntegratorTest"
reference "org.apache.commons.math.random.TestRandomGenerator" "org.apache.commons.math.random.AbstractRandomGenerator"
call "org.apache.commons.math.random.TestRandomGenerator.TestRandomGenerator()" "org.apache.commons.math.random.AbstractRandomGenerator.AbstractRandomGenerator()"
reference "org.apache.commons.math.random.TestRandomGenerator.TestRandomGenerator()" "org.apache.commons.math.random.TestRandomGenerator.random : Random"
contain "org.apache.commons.math.random.TestRandomGenerator" "org.apache.commons.math.random.TestRandomGenerator.TestRandomGenerator()"
call "org.apache.commons.math.random.TestRandomGenerator.setSeed(long)" "org.apache.commons.math.random.TestRandomGenerator.clear()"
reference "org.apache.commons.math.random.TestRandomGenerator.setSeed(long)" "org.apache.commons.math.random.TestRandomGenerator.random : Random"
contain "org.apache.commons.math.random.TestRandomGenerator" "org.apache.commons.math.random.TestRandomGenerator.setSeed(long)"
reference "org.apache.commons.math.random.TestRandomGenerator.nextDouble()" "org.apache.commons.math.random.TestRandomGenerator.random : Random"
contain "org.apache.commons.math.random.TestRandomGenerator" "org.apache.commons.math.random.TestRandomGenerator.nextDouble()"
contain "org.apache.commons.math.random.TestRandomGenerator" "org.apache.commons.math.random.TestRandomGenerator.random : Random"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.1" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.1" "org.apache.commons.math.ode.FirstOrderDifferentialEquations"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.1.{...}" "org.apache.commons.math.ode.HighamHall54IntegratorTest.1.this$0 : HighamHall54IntegratorTest"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.1" "org.apache.commons.math.ode.HighamHall54IntegratorTest.1.{...}"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.1.computeDerivatives(double,double[],double[])" "org.apache.commons.math.ode.DerivativeException.DerivativeException(String,String[])"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.1.computeDerivatives(double,double[],double[])" "org.apache.commons.math.ode.DerivativeException.DerivativeException(Throwable)"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.1" "org.apache.commons.math.ode.HighamHall54IntegratorTest.1.computeDerivatives(double,double[],double[])"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.1" "org.apache.commons.math.ode.HighamHall54IntegratorTest.1.getDimension()"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.1.this$0 : HighamHall54IntegratorTest" "org.apache.commons.math.ode.HighamHall54IntegratorTest"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.1" "org.apache.commons.math.ode.HighamHall54IntegratorTest.1.this$0 : HighamHall54IntegratorTest"
reference "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest" "junit.framework.TestCase"
reference "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtils"
reference "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "junit.framework.TestCase.TestCase()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.inf : double"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.negInf : double"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.nan : double"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.pi : double"
call "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.infNaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.nanInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.nanNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.zeroNaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.nanZero : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.infZero : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.zeroInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfZero : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.ComplexUtilsTest()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAcos()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAcos()" "org.apache.commons.math.complex.ComplexUtils.acos(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAcos()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAcos()" "org.apache.commons.math.complex.Complex.ZERO : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testAcos()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAcosInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAcosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAcosInf()" "org.apache.commons.math.complex.ComplexUtils.acos(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAcosInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAcosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAcosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAcosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAcosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAcosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAcosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAcosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testAcosInf()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAcosNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAcosNaN()" "org.apache.commons.math.complex.ComplexUtils.acos(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAcosNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAcosNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testAcosNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAcosNull()" "org.apache.commons.math.complex.ComplexUtils.acos(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAcosNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testAcosNull()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAsin()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAsin()" "org.apache.commons.math.complex.ComplexUtils.asin(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAsin()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testAsin()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAsinNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAsinNaN()" "org.apache.commons.math.complex.ComplexUtils.asin(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAsinNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAsinNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testAsinNaN()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAsinInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAsinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAsinInf()" "org.apache.commons.math.complex.ComplexUtils.asin(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAsinInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAsinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAsinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAsinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAsinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAsinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAsinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAsinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testAsinInf()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAsinNull()" "org.apache.commons.math.complex.ComplexUtils.asin(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAsinNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testAsinNull()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAtan()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAtan()" "org.apache.commons.math.complex.ComplexUtils.atan(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAtan()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testAtan()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAtanInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAtanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAtanInf()" "org.apache.commons.math.complex.ComplexUtils.atan(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAtanInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAtanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAtanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAtanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAtanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAtanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAtanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAtanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testAtanInf()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAtanNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAtanNaN()" "org.apache.commons.math.complex.ComplexUtils.atan(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAtanNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAtanNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testAtanNaN()" "org.apache.commons.math.complex.Complex.I : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testAtanNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAtanNull()" "org.apache.commons.math.complex.ComplexUtils.atan(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testAtanNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testAtanNull()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCos()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCos()" "org.apache.commons.math.complex.ComplexUtils.cos(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCos()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testCos()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCosNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCosNaN()" "org.apache.commons.math.complex.ComplexUtils.cos(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCosNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCosNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testCosNaN()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCosInf()" "org.apache.commons.math.complex.ComplexUtils.cos(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCosInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCosInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCosInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testCosInf()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCosNull()" "org.apache.commons.math.complex.ComplexUtils.cos(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCosNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testCosNull()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCosh()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCosh()" "org.apache.commons.math.complex.ComplexUtils.cosh(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCosh()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testCosh()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCoshNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCoshNaN()" "org.apache.commons.math.complex.ComplexUtils.cosh(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCoshNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCoshNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testCoshNaN()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCoshInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCoshInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCoshInf()" "org.apache.commons.math.complex.ComplexUtils.cosh(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCoshInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCoshInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCoshInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCoshInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCoshInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCoshInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCoshInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testCoshInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testCoshInf()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCoshNull()" "org.apache.commons.math.complex.ComplexUtils.cosh(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testCoshNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testCoshNull()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testExp()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testExp()" "org.apache.commons.math.complex.ComplexUtils.exp(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testExp()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExp()" "org.apache.commons.math.complex.Complex.ONE : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExp()" "org.apache.commons.math.complex.Complex.ZERO : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExp()" "org.apache.commons.math.complex.Complex.I : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExp()" "org.apache.commons.math.complex.ComplexUtilsTest.pi : double"
call "org.apache.commons.math.complex.ComplexUtilsTest.testExp()" "org.apache.commons.math.complex.Complex.multiply(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testExp()" "org.apache.commons.math.complex.Complex.negate()"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testExp()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExpNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testExpNaN()" "org.apache.commons.math.complex.ComplexUtils.exp(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testExpNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testExpNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testExpNaN()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExpInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExpInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testExpInf()" "org.apache.commons.math.complex.ComplexUtils.exp(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testExpInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExpInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExpInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExpInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExpInf()" "org.apache.commons.math.complex.Complex.ZERO : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExpInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExpInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExpInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testExpInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testExpInf()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testExpNull()" "org.apache.commons.math.complex.ComplexUtils.exp(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testExpNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testExpNull()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testLog()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testLog()" "org.apache.commons.math.complex.ComplexUtils.log(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testLog()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testLog()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testLogNaN()" "org.apache.commons.math.complex.ComplexUtils.log(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testLogNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testLogNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testLogNaN()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.complex.ComplexUtilsTest.inf : double"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.complex.ComplexUtilsTest.pi : double"
call "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.complex.ComplexUtils.log(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infZero : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testLogInf()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogZero()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfZero : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testLogZero()" "org.apache.commons.math.complex.Complex.ZERO : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testLogZero()" "org.apache.commons.math.complex.ComplexUtils.log(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testLogZero()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testLogZero()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testlogNull()" "org.apache.commons.math.complex.ComplexUtils.log(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testlogNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testlogNull()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2Complex()" "org.apache.commons.math.complex.Complex.ONE : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2Complex()" "org.apache.commons.math.complex.ComplexUtils.polar2Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2Complex()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2Complex()" "org.apache.commons.math.complex.Complex.ZERO : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2Complex()" "org.apache.commons.math.complex.Complex.I : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2Complex()" "org.apache.commons.math.complex.ComplexUtilsTest.pi : double"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2Complex()" "org.apache.commons.math.complex.Complex.negate()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2Complex()" "org.apache.commons.math.complex.ComplexUtilsTest.altPolar(double,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2Complex()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.altPolar(double,double)" "org.apache.commons.math.complex.Complex.I : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.altPolar(double,double)" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.altPolar(double,double)" "org.apache.commons.math.complex.Complex.multiply(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.altPolar(double,double)" "org.apache.commons.math.complex.ComplexUtils.exp(Complex)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.altPolar(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexIllegalModulus()" "org.apache.commons.math.complex.ComplexUtils.polar2Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexIllegalModulus()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexIllegalModulus()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.nan : double"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexNaN()" "org.apache.commons.math.complex.ComplexUtils.polar2Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexNaN()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexNaN()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexInf()" "org.apache.commons.math.complex.ComplexUtilsTest.inf : double"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexInf()" "org.apache.commons.math.complex.ComplexUtils.polar2Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInf : double"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexInf()" "org.apache.commons.math.complex.ComplexUtilsTest.pi : double"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testPolar2ComplexInf()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPow()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPow()" "org.apache.commons.math.complex.ComplexUtils.pow(Complex,Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPow()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testPow()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowNaNBase()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowNaNBase()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowNaNBase()" "org.apache.commons.math.complex.ComplexUtils.pow(Complex,Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowNaNBase()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowNaNBase()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testPowNaNBase()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowNaNExponent()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowNaNExponent()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowNaNExponent()" "org.apache.commons.math.complex.ComplexUtils.pow(Complex,Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowNaNExponent()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowNaNExponent()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testPowNaNExponent()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowInf()" "org.apache.commons.math.complex.Complex.ONE : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowInf()" "org.apache.commons.math.complex.ComplexUtils.pow(Complex,Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testPowInf()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowZero()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowZero()" "org.apache.commons.math.complex.Complex.ZERO : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowZero()" "org.apache.commons.math.complex.Complex.ONE : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowZero()" "org.apache.commons.math.complex.ComplexUtils.pow(Complex,Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowZero()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testPowZero()" "org.apache.commons.math.complex.Complex.I : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowZero()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testPowZero()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testPowZero()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testpowNull()" "org.apache.commons.math.complex.Complex.ONE : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testpowNull()" "org.apache.commons.math.complex.ComplexUtils.pow(Complex,Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testpowNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testpowNull()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSin()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSin()" "org.apache.commons.math.complex.ComplexUtils.sin(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSin()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSin()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinInf()" "org.apache.commons.math.complex.ComplexUtils.sin(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSinInf()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinNaN()" "org.apache.commons.math.complex.ComplexUtils.sin(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSinNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinNull()" "org.apache.commons.math.complex.ComplexUtils.sin(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSinNull()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinh()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinh()" "org.apache.commons.math.complex.ComplexUtils.sinh(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinh()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSinh()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinhNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinhNaN()" "org.apache.commons.math.complex.ComplexUtils.sinh(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinhNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinhNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSinhNaN()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinhInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinhInf()" "org.apache.commons.math.complex.ComplexUtils.sinh(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSinhInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSinhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSinhInf()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testsinhNull()" "org.apache.commons.math.complex.ComplexUtils.sinh(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testsinhNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testsinhNull()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtRealPositive()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtRealPositive()" "org.apache.commons.math.complex.ComplexUtils.sqrt(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtRealPositive()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtRealPositive()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtRealZero()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtRealZero()" "org.apache.commons.math.complex.ComplexUtils.sqrt(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtRealZero()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtRealZero()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtRealNegative()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtRealNegative()" "org.apache.commons.math.complex.ComplexUtils.sqrt(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtRealNegative()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtRealNegative()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtImaginaryZero()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtImaginaryZero()" "org.apache.commons.math.complex.ComplexUtils.sqrt(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtImaginaryZero()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtImaginaryZero()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtImaginaryNegative()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtImaginaryNegative()" "org.apache.commons.math.complex.ComplexUtils.sqrt(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtImaginaryNegative()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtImaginaryNegative()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtPolar()" "org.apache.commons.math.complex.ComplexUtilsTest.pi : double"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtPolar()" "org.apache.commons.math.complex.ComplexUtils.polar2Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtPolar()" "org.apache.commons.math.complex.ComplexUtils.sqrt(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtPolar()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtPolar()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtNaN()" "org.apache.commons.math.complex.ComplexUtils.sqrt(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtNaN()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtils.sqrt(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infZero : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtilsTest.zeroInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtilsTest.nanInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtilsTest.nanNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtInf()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtNull()" "org.apache.commons.math.complex.ComplexUtils.sqrt(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSqrtNull()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrt1z()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrt1z()" "org.apache.commons.math.complex.ComplexUtils.sqrt1z(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrt1z()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSqrt1z()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testSqrt1zNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrt1zNaN()" "org.apache.commons.math.complex.ComplexUtils.sqrt1z(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrt1zNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrt1zNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSqrt1zNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrt1zNull()" "org.apache.commons.math.complex.ComplexUtils.sqrt1z(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testSqrt1zNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testSqrt1zNull()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTan()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTan()" "org.apache.commons.math.complex.ComplexUtils.tan(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTan()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testTan()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanNaN()" "org.apache.commons.math.complex.ComplexUtils.tan(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testTanNaN()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.zeroNaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanInf()" "org.apache.commons.math.complex.ComplexUtils.tan(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testTanInf()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanCritical()" "org.apache.commons.math.complex.ComplexUtilsTest.infNaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanCritical()" "org.apache.commons.math.complex.ComplexUtilsTest.pi : double"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanCritical()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanCritical()" "org.apache.commons.math.complex.ComplexUtils.tan(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanCritical()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanCritical()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNaN : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testTanCritical()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanNull()" "org.apache.commons.math.complex.ComplexUtils.tan(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testTanNull()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanh()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanh()" "org.apache.commons.math.complex.ComplexUtils.tanh(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanh()" "org.apache.commons.math.TestUtils.assertEquals(Complex,Complex,double)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testTanh()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanhNaN()" "org.apache.commons.math.complex.Complex.NaN : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanhNaN()" "org.apache.commons.math.complex.ComplexUtils.tanh(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanhNaN()" "org.apache.commons.math.complex.Complex.isNaN()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanhNaN()" "org.apache.commons.math.complex.ComplexUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testTanhNaN()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanhInf()" "org.apache.commons.math.complex.Complex.NaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanhInf()" "org.apache.commons.math.complex.ComplexUtils.tanh(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanhInf()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.nanZero : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanhInf()" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testTanhInf()"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanhCritical()" "org.apache.commons.math.complex.ComplexUtilsTest.nanInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.testTanhCritical()" "org.apache.commons.math.complex.ComplexUtilsTest.pi : double"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanhCritical()" "org.apache.commons.math.complex.Complex.Complex(double,double)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanhCritical()" "org.apache.commons.math.complex.ComplexUtils.tanh(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanhCritical()" "org.apache.commons.math.TestUtils.assertSame(Complex,Complex)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testTanhCritical()"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanhNull()" "org.apache.commons.math.complex.ComplexUtils.tanh(Complex)"
call "org.apache.commons.math.complex.ComplexUtilsTest.testTanhNull()" "org.apache.commons.math.complex.ComplexUtilsTest.fail(String)"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.testTanhNull()"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.inf : double"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.negInf : double"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.nan : double"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.pi : double"
reference "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.oneInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.oneNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.infOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.negInfOne : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.negInfInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.infNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.infInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.infNaN : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.infNaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.negInfNaN : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.negInfNaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.nanInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.nanInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.nanNegInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.nanNegInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.zeroNaN : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.zeroNaN : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.nanZero : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.nanZero : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.infZero : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.infZero : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.zeroInf : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.zeroInf : Complex"
reference "org.apache.commons.math.complex.ComplexUtilsTest.negInfZero : Complex" "org.apache.commons.math.complex.Complex"
contain "org.apache.commons.math.complex.ComplexUtilsTest" "org.apache.commons.math.complex.ComplexUtilsTest.negInfZero : Complex"
reference "org.apache.commons.math.util.MathUtilsTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.util.MathUtilsTest" "junit.framework.TestCase"
reference "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtils"
reference "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.util.MathUtilsTest.MathUtilsTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.MathUtilsTest(String)"
reference "org.apache.commons.math.util.MathUtilsTest.suite()" "org.apache.commons.math.util.MathUtilsTest.class$org$apache$commons$math$util$MathUtilsTest : Class"
call "org.apache.commons.math.util.MathUtilsTest.suite()" "org.apache.commons.math.util.MathUtilsTest.class$(String)"
call "org.apache.commons.math.util.MathUtilsTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.util.MathUtilsTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.suite()"
call "org.apache.commons.math.util.MathUtilsTest.binomialCoefficient(int,int)" "org.apache.commons.math.util.MathUtilsTest.binomialCoefficient(int,int)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.binomialCoefficient(int,int)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.factorial(int)"
call "org.apache.commons.math.util.MathUtilsTest.test0Choose0()" "org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.test0Choose0()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(double,double,double)"
call "org.apache.commons.math.util.MathUtilsTest.test0Choose0()" "org.apache.commons.math.util.MathUtils.binomialCoefficientLog(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.test0Choose0()" "org.apache.commons.math.util.MathUtils.binomialCoefficient(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.test0Choose0()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(long,long)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.test0Choose0()"
call "org.apache.commons.math.util.MathUtilsTest.testAddAndCheck()" "org.apache.commons.math.util.MathUtils.addAndCheck(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testAddAndCheck()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testAddAndCheck()" "org.apache.commons.math.util.MathUtilsTest.fail(String)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testAddAndCheck()"
call "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLong()" "org.apache.commons.math.util.MathUtils.addAndCheck(long,long)"
call "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLong()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(long,long)"
call "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLong()" "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLongFailure(long,long)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLong()"
call "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLongFailure(long,long)" "org.apache.commons.math.util.MathUtils.addAndCheck(long,long)"
call "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLongFailure(long,long)" "org.apache.commons.math.util.MathUtilsTest.fail(String)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLongFailure(long,long)"
call "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficient()" "org.apache.commons.math.util.MathUtils.binomialCoefficient(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficient()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(String,long,long)"
call "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficient()" "org.apache.commons.math.util.MathUtilsTest.binomialCoefficient(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficient()" "org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficient()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficient()" "org.apache.commons.math.util.MathUtils.binomialCoefficientLog(int,int)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficient()"
call "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientFail()" "org.apache.commons.math.util.MathUtils.binomialCoefficient(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientFail()" "org.apache.commons.math.util.MathUtilsTest.fail(String)"
call "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientFail()" "org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientFail()" "org.apache.commons.math.util.MathUtils.binomialCoefficientLog(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientFail()" "org.apache.commons.math.util.MathUtilsTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientFail()"
call "org.apache.commons.math.util.MathUtilsTest.testCosh()" "org.apache.commons.math.util.MathUtils.cosh(double)"
call "org.apache.commons.math.util.MathUtilsTest.testCosh()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testCosh()"
call "org.apache.commons.math.util.MathUtilsTest.testCoshNaN()" "org.apache.commons.math.util.MathUtils.cosh(double)"
call "org.apache.commons.math.util.MathUtilsTest.testCoshNaN()" "org.apache.commons.math.util.MathUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testCoshNaN()"
call "org.apache.commons.math.util.MathUtilsTest.testEquals()" "org.apache.commons.math.util.MathUtils.equals(double,double)"
call "org.apache.commons.math.util.MathUtilsTest.testEquals()" "org.apache.commons.math.util.MathUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testEquals()"
call "org.apache.commons.math.util.MathUtilsTest.testFactorial()" "org.apache.commons.math.util.MathUtilsTest.factorial(int)"
call "org.apache.commons.math.util.MathUtilsTest.testFactorial()" "org.apache.commons.math.util.MathUtils.factorial(int)"
call "org.apache.commons.math.util.MathUtilsTest.testFactorial()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(String,long,long)"
call "org.apache.commons.math.util.MathUtilsTest.testFactorial()" "org.apache.commons.math.util.MathUtils.factorialDouble(int)"
call "org.apache.commons.math.util.MathUtilsTest.testFactorial()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.util.MathUtilsTest.testFactorial()" "org.apache.commons.math.util.MathUtils.factorialLog(int)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testFactorial()"
call "org.apache.commons.math.util.MathUtilsTest.testFactorialFail()" "org.apache.commons.math.util.MathUtils.factorial(int)"
call "org.apache.commons.math.util.MathUtilsTest.testFactorialFail()" "org.apache.commons.math.util.MathUtilsTest.fail(String)"
call "org.apache.commons.math.util.MathUtilsTest.testFactorialFail()" "org.apache.commons.math.util.MathUtils.factorialDouble(int)"
call "org.apache.commons.math.util.MathUtilsTest.testFactorialFail()" "org.apache.commons.math.util.MathUtils.factorialLog(int)"
call "org.apache.commons.math.util.MathUtilsTest.testFactorialFail()" "org.apache.commons.math.util.MathUtilsTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testFactorialFail()"
call "org.apache.commons.math.util.MathUtilsTest.testGcd()" "org.apache.commons.math.util.MathUtils.gcd(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testGcd()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(int,int)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testGcd()"
call "org.apache.commons.math.util.MathUtilsTest.testHash()" "org.apache.commons.math.util.MathUtils.hash(double)"
call "org.apache.commons.math.util.MathUtilsTest.testHash()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testHash()" "org.apache.commons.math.util.MathUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testHash()"
call "org.apache.commons.math.util.MathUtilsTest.testIndicatorByte()" "org.apache.commons.math.util.MathUtils.indicator(byte)"
call "org.apache.commons.math.util.MathUtilsTest.testIndicatorByte()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(byte,byte)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testIndicatorByte()"
call "org.apache.commons.math.util.MathUtilsTest.testIndicatorDouble()" "org.apache.commons.math.util.MathUtils.indicator(double)"
call "org.apache.commons.math.util.MathUtilsTest.testIndicatorDouble()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testIndicatorDouble()"
call "org.apache.commons.math.util.MathUtilsTest.testIndicatorFloat()" "org.apache.commons.math.util.MathUtils.indicator(float)"
call "org.apache.commons.math.util.MathUtilsTest.testIndicatorFloat()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(float,float,float)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testIndicatorFloat()"
call "org.apache.commons.math.util.MathUtilsTest.testIndicatorInt()" "org.apache.commons.math.util.MathUtils.indicator(int)"
call "org.apache.commons.math.util.MathUtilsTest.testIndicatorInt()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(int,int)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testIndicatorInt()"
call "org.apache.commons.math.util.MathUtilsTest.testIndicatorLong()" "org.apache.commons.math.util.MathUtils.indicator(long)"
call "org.apache.commons.math.util.MathUtilsTest.testIndicatorLong()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(long,long)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testIndicatorLong()"
call "org.apache.commons.math.util.MathUtilsTest.testIndicatorShort()" "org.apache.commons.math.util.MathUtils.indicator(short)"
call "org.apache.commons.math.util.MathUtilsTest.testIndicatorShort()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(short,short)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testIndicatorShort()"
call "org.apache.commons.math.util.MathUtilsTest.testLcm()" "org.apache.commons.math.util.MathUtils.lcm(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testLcm()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testLcm()" "org.apache.commons.math.util.MathUtilsTest.fail(String)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testLcm()"
call "org.apache.commons.math.util.MathUtilsTest.testLog()" "org.apache.commons.math.util.MathUtils.log(double,double)"
call "org.apache.commons.math.util.MathUtilsTest.testLog()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(double,double,double)"
call "org.apache.commons.math.util.MathUtilsTest.testLog()" "org.apache.commons.math.util.MathUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testLog()"
call "org.apache.commons.math.util.MathUtilsTest.testMulAndCheck()" "org.apache.commons.math.util.MathUtils.mulAndCheck(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testMulAndCheck()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testMulAndCheck()" "org.apache.commons.math.util.MathUtilsTest.fail(String)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testMulAndCheck()"
call "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLong()" "org.apache.commons.math.util.MathUtils.mulAndCheck(long,long)"
call "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLong()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(long,long)"
call "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLong()" "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLongFailure(long,long)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLong()"
call "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLongFailure(long,long)" "org.apache.commons.math.util.MathUtils.mulAndCheck(long,long)"
call "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLongFailure(long,long)" "org.apache.commons.math.util.MathUtilsTest.fail(String)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLongFailure(long,long)"
call "org.apache.commons.math.util.MathUtilsTest.testNextAfter()" "org.apache.commons.math.util.MathUtils.nextAfter(double,double)"
call "org.apache.commons.math.util.MathUtilsTest.testNextAfter()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testNextAfter()"
call "org.apache.commons.math.util.MathUtilsTest.testNextAfterSpecialCases()" "org.apache.commons.math.util.MathUtils.nextAfter(double,double)"
call "org.apache.commons.math.util.MathUtilsTest.testNextAfterSpecialCases()" "org.apache.commons.math.util.MathUtilsTest.assertTrue(boolean)"
call "org.apache.commons.math.util.MathUtilsTest.testNextAfterSpecialCases()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testNextAfterSpecialCases()"
call "org.apache.commons.math.util.MathUtilsTest.testRoundDouble()" "org.apache.commons.math.util.MathUtils.round(double,int)"
call "org.apache.commons.math.util.MathUtilsTest.testRoundDouble()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(double,double,double)"
call "org.apache.commons.math.util.MathUtilsTest.testRoundDouble()" "org.apache.commons.math.util.MathUtils.round(double,int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testRoundDouble()" "org.apache.commons.math.util.MathUtilsTest.fail()"
call "org.apache.commons.math.util.MathUtilsTest.testRoundDouble()" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testRoundDouble()"
call "org.apache.commons.math.util.MathUtilsTest.testRoundFloat()" "org.apache.commons.math.util.MathUtils.round(float,int)"
call "org.apache.commons.math.util.MathUtilsTest.testRoundFloat()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(double,double,double)"
call "org.apache.commons.math.util.MathUtilsTest.testRoundFloat()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(float,float,float)"
call "org.apache.commons.math.util.MathUtilsTest.testRoundFloat()" "org.apache.commons.math.util.MathUtils.round(float,int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testRoundFloat()" "org.apache.commons.math.util.MathUtilsTest.fail()"
call "org.apache.commons.math.util.MathUtilsTest.testRoundFloat()" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testRoundFloat()"
call "org.apache.commons.math.util.MathUtilsTest.testSignByte()" "org.apache.commons.math.util.MathUtils.indicator(byte)"
call "org.apache.commons.math.util.MathUtilsTest.testSignByte()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(byte,byte)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testSignByte()"
call "org.apache.commons.math.util.MathUtilsTest.testSignDouble()" "org.apache.commons.math.util.MathUtils.indicator(double)"
call "org.apache.commons.math.util.MathUtilsTest.testSignDouble()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testSignDouble()"
call "org.apache.commons.math.util.MathUtilsTest.testSignFloat()" "org.apache.commons.math.util.MathUtils.indicator(float)"
call "org.apache.commons.math.util.MathUtilsTest.testSignFloat()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(float,float,float)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testSignFloat()"
call "org.apache.commons.math.util.MathUtilsTest.testSignInt()" "org.apache.commons.math.util.MathUtils.indicator(int)"
call "org.apache.commons.math.util.MathUtilsTest.testSignInt()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(int,int)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testSignInt()"
call "org.apache.commons.math.util.MathUtilsTest.testSignLong()" "org.apache.commons.math.util.MathUtils.indicator(long)"
call "org.apache.commons.math.util.MathUtilsTest.testSignLong()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(long,long)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testSignLong()"
call "org.apache.commons.math.util.MathUtilsTest.testSignShort()" "org.apache.commons.math.util.MathUtils.indicator(short)"
call "org.apache.commons.math.util.MathUtilsTest.testSignShort()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(short,short)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testSignShort()"
call "org.apache.commons.math.util.MathUtilsTest.testSinh()" "org.apache.commons.math.util.MathUtils.sinh(double)"
call "org.apache.commons.math.util.MathUtilsTest.testSinh()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testSinh()"
call "org.apache.commons.math.util.MathUtilsTest.testSinhNaN()" "org.apache.commons.math.util.MathUtils.sinh(double)"
call "org.apache.commons.math.util.MathUtilsTest.testSinhNaN()" "org.apache.commons.math.util.MathUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testSinhNaN()"
call "org.apache.commons.math.util.MathUtilsTest.testSubAndCheck()" "org.apache.commons.math.util.MathUtils.subAndCheck(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testSubAndCheck()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testSubAndCheck()" "org.apache.commons.math.util.MathUtilsTest.fail(String)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testSubAndCheck()"
call "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckErrorMessage()" "org.apache.commons.math.util.MathUtils.subAndCheck(int,int)"
call "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckErrorMessage()" "org.apache.commons.math.util.MathUtilsTest.fail(String)"
call "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckErrorMessage()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(String,String)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckErrorMessage()"
call "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLong()" "org.apache.commons.math.util.MathUtils.subAndCheck(long,long)"
call "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLong()" "org.apache.commons.math.util.MathUtilsTest.assertEquals(long,long)"
call "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLong()" "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLongFailure(long,long)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLong()"
call "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLongFailure(long,long)" "org.apache.commons.math.util.MathUtils.subAndCheck(long,long)"
call "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLongFailure(long,long)" "org.apache.commons.math.util.MathUtilsTest.fail(String)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLongFailure(long,long)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.class$(String)"
contain "org.apache.commons.math.util.MathUtilsTest" "org.apache.commons.math.util.MathUtilsTest.class$org$apache$commons$math$util$MathUtilsTest : Class"
reference "org.apache.commons.math.stat.inference.ChiSquareFactoryTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.inference.ChiSquareFactoryTest" "org.apache.commons.math.stat.inference.ChiSquareTestTest"
reference "org.apache.commons.math.stat.inference.ChiSquareFactoryTest" "org.apache.commons.math.stat.inference.TestUtils"
call "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.ChiSquareFactoryTest(String)" "org.apache.commons.math.stat.inference.ChiSquareTestTest.ChiSquareTestTest(String)"
contain "org.apache.commons.math.stat.inference.ChiSquareFactoryTest" "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.ChiSquareFactoryTest(String)"
call "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.setUp()" "org.apache.commons.math.stat.inference.ChiSquareTestTest.setUp()"
call "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.setUp()" "org.apache.commons.math.stat.inference.TestUtils.getUnknownDistributionChiSquareTest()"
reference "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.setUp()" "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testStatistic : UnknownDistributionChiSquareTest"
contain "org.apache.commons.math.stat.inference.ChiSquareFactoryTest" "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.setUp()"
reference "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.suite()" "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.class$org$apache$commons$math$stat$inference$ChiSquareFactoryTest : Class"
call "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.suite()" "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.class$(String)"
call "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.inference.ChiSquareFactoryTest" "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.suite()"
contain "org.apache.commons.math.stat.inference.ChiSquareFactoryTest" "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.class$(String)"
contain "org.apache.commons.math.stat.inference.ChiSquareFactoryTest" "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.class$org$apache$commons$math$stat$inference$ChiSquareFactoryTest : Class"
reference "org.apache.commons.math.linear.BigMatrixImplTest" "double[]"
reference "org.apache.commons.math.linear.BigMatrixImplTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.linear.BigMatrixImplTest" "double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImpl"
reference "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.InvalidMatrixException"
reference "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.MatrixIndexException"
reference "org.apache.commons.math.linear.BigMatrixImplTest" "junit.framework.TestCase"
reference "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrix"
reference "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.MatrixUtils"
call "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.testDataString : String[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.id : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.testDataLU : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.testDataPlus2 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.testDataMinus : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.testDataRow1 : double[]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.testDataCol3 : double[]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.testDataInv : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.preMultTest : double[]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.testData2T : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.testDataPlusInv : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.luData : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.luDataLUDecomposition : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.singular : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.bigSingular : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.detData : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.detData2 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.testVector : double[]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.testVector2 : double[]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.subTestData : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.subRows02Cols13 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.subRows03Cols12 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.subRows03Cols123 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.subRows20Cols123 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.subRows31Cols31 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.subRows01Cols23 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.subRows23Cols00 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.subRows00Cols33 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.subRow0 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.subRow3 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.subColumn1 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.subColumn3 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.entryTolerance : double"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.normTolerance : double"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.d3 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.d4 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)" "org.apache.commons.math.linear.BigMatrixImplTest.d5 : double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.setUp()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.suite()" "org.apache.commons.math.linear.BigMatrixImplTest.class$org$apache$commons$math$linear$BigMatrixImplTest : Class"
call "org.apache.commons.math.linear.BigMatrixImplTest.suite()" "org.apache.commons.math.linear.BigMatrixImplTest.class$(String)"
call "org.apache.commons.math.linear.BigMatrixImplTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.linear.BigMatrixImplTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.suite()"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.asDouble(BigDecimal[])"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.asDouble(BigDecimal[][])"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.asBigDecimal(double[])"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.asBigDecimal(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(String,int,int)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.BigMatrixImpl.isSquare()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testDimensions()" "org.apache.commons.math.linear.BigMatrixImplTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testDimensions()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testCopyFunctions()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testCopyFunctions()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testCopyFunctions()" "org.apache.commons.math.linear.BigMatrixImpl.getData()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testCopyFunctions()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testCopyFunctions()" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(Object,Object)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testCopyFunctions()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testConstructors()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testConstructors()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testConstructors()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataString : String[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testConstructors()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testConstructors()" "org.apache.commons.math.linear.BigMatrixImplTest.asBigDecimal(double[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testConstructors()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testConstructors()" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testConstructors()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testConstructors()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(int,int)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testConstructors()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testAdd()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testAdd()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testAdd()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataInv : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testAdd()" "org.apache.commons.math.linear.BigMatrixImpl.add(BigMatrix)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testAdd()" "org.apache.commons.math.linear.BigMatrixImpl.getData()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testAdd()" "org.apache.commons.math.linear.BigMatrixImplTest.asDouble(BigDecimal[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testAdd()" "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testAdd()" "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testAdd()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataPlusInv : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testAdd()" "org.apache.commons.math.linear.BigMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testAdd()" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testAdd()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testAddFail()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testAddFail()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testAddFail()" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testAddFail()" "org.apache.commons.math.linear.BigMatrixImpl.add(BigMatrix)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testAddFail()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testAddFail()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testNorm()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testNorm()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testNorm()" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testNorm()" "org.apache.commons.math.linear.BigMatrixImpl.getNorm()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testNorm()" "org.apache.commons.math.linear.BigMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testNorm()" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testNorm()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataInv : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.BigMatrixImpl.subtract(BigMatrix)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.BigMatrixImpl.scalarMultiply(BigDecimal)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.BigMatrix.add(BigMatrix)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.BigMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPlusMinus()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testPlusMinus()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataInv : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.id : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.BigMatrixImpl.multiply(BigMatrix)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.BigMatrixImplTest.d3 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.BigMatrixImplTest.d4 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.BigMatrixImplTest.d5 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.BigMatrix.multiply(BigMatrix)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.BigMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply2()" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply2()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.BigMatrixImplTest.singular : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.BigMatrixImpl.isSingular()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.BigMatrixImplTest.assertTrue(String,boolean)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.BigMatrixImplTest.bigSingular : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.BigMatrixImplTest.id : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testIsSingular()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testIsSingular()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testInverse()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testInverse()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testInverse()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataInv : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testInverse()" "org.apache.commons.math.linear.BigMatrixImpl.inverse()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testInverse()" "org.apache.commons.math.linear.BigMatrixImplTest.normTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testInverse()" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testInverse()" "org.apache.commons.math.linear.BigMatrix.inverse()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testInverse()" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testInverse()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testInverse()" "org.apache.commons.math.linear.BigMatrixImplTest.singular : double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testInverse()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataInv : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImplTest.testVector : double[]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImplTest.asBigDecimal(double[])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrix.operate(BigDecimal[])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImplTest.asDouble(BigDecimal[])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImpl.solve(BigDecimal[])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImplTest.normTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,double[],double[],double)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImplTest.testVector2 : double[]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrix.solve(BigMatrix)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImpl.solve(BigMatrix)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()" "org.apache.commons.math.linear.BigMatrixImpl.luDecompose()"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.BigMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.BigMatrix.getDeterminant()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.BigMatrixImplTest.detData : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.BigMatrixImplTest.normTolerance : double"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.BigMatrixImplTest.detData2 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.BigMatrixImpl.getDeterminant()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testTrace()" "org.apache.commons.math.linear.BigMatrixImplTest.id : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testTrace()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testTrace()" "org.apache.commons.math.linear.BigMatrix.getTrace()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testTrace()" "org.apache.commons.math.linear.BigMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testTrace()" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testTrace()" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testTrace()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testTrace()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testScalarAdd()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testScalarAdd()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testScalarAdd()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataPlus2 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testScalarAdd()" "org.apache.commons.math.linear.BigMatrix.scalarAdd(BigDecimal)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testScalarAdd()" "org.apache.commons.math.linear.BigMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testScalarAdd()" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testScalarAdd()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testOperate()" "org.apache.commons.math.linear.BigMatrixImplTest.id : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testOperate()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testOperate()" "org.apache.commons.math.linear.BigMatrixImplTest.testVector : double[]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testOperate()" "org.apache.commons.math.linear.BigMatrixImplTest.asBigDecimal(double[])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testOperate()" "org.apache.commons.math.linear.BigMatrix.operate(BigDecimal[])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testOperate()" "org.apache.commons.math.linear.BigMatrixImplTest.asDouble(BigDecimal[])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testOperate()" "org.apache.commons.math.linear.BigMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testOperate()" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,double[],double[],double)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testOperate()" "org.apache.commons.math.linear.BigMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testOperate()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testOperate()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.BigMatrix.inverse()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.BigMatrix.transpose()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.BigMatrixImplTest.normTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testTranspose()" "org.apache.commons.math.linear.BigMatrixImplTest.testData2T : double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testTranspose()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.BigMatrixImplTest.testVector : double[]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.BigMatrixImplTest.asBigDecimal(double[])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.BigMatrix.preMultiply(BigDecimal[])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.BigMatrixImplTest.asDouble(BigDecimal[])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.BigMatrixImplTest.preMultTest : double[]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.BigMatrixImplTest.normTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,double[],double[],double)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.BigMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.d3 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.d4 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.d5 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrix.preMultiply(BigMatrix)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataInv : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.id : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrixImpl.preMultiply(BigMatrix)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.BigMatrix.getRowAsDoubleArray(int)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataRow1 : double[]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.BigMatrixImplTest.entryTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,double[],double[],double)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.BigMatrix.getColumnAsDoubleArray(int)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataCol3 : double[]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testGetVectors()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testGetVectors()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImpl.getLUMatrix()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataLU : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImplTest.normTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImplTest.verifyDecomposition(BigMatrix,BigMatrix)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImplTest.luData : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImplTest.luDataLUDecomposition : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataMinus : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImplTest.id : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subTestData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subRows23Cols00 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subRows00Cols33 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subRows01Cols23 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subRows02Cols13 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subRows03Cols12 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subRows03Cols123 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subRows20Cols123 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subRows31Cols31 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrix.getSubMatrix(int,int,int,int)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(String,Object,Object)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrix.getSubMatrix(int[],int[])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subTestData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subColumn1 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subColumn3 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.BigMatrix.getColumnMatrix(int)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(String,Object,Object)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testGetColumnMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testGetColumnMatrix()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subTestData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subRow0 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.subRow3 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.BigMatrix.getRowMatrix(int)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(String,Object,Object)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testGetRowMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testGetRowMatrix()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.BigMatrixImpl.copy()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.BigMatrixImpl.transpose()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.BigMatrixImpl.hashCode()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.BigMatrixImplTest.assertTrue(boolean)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(int,int)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(Object,Object)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.BigMatrixImpl.equals(Object)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.BigMatrixImplTest.assertFalse(boolean)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.BigMatrixImplTest.bigSingular : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testToString()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testToString()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testToString()" "org.apache.commons.math.linear.BigMatrixImpl.toString()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testToString()" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(String,String)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testToString()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl()"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testToString()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.detData2 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.MatrixUtils.createBigMatrix(double[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.BigMatrix.getData()"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.setSubMatrix(BigDecimal[][],int,int)"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(Object,Object)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.testDataPlus2 : double[][]"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.MatrixUtils.createBigMatrix(BigDecimal[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.getData()"
call "org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix()" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix()"
call "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)" "org.apache.commons.math.linear.BigMatrix.subtract(BigMatrix)"
call "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)" "org.apache.commons.math.linear.BigMatrix.getNorm()"
call "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)" "org.apache.commons.math.linear.BigMatrixImplTest.assertTrue(String,boolean)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)"
call "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,double[],double[],double)" "org.apache.commons.math.linear.BigMatrixImplTest.fail(String)"
call "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,double[],double[],double)" "org.apache.commons.math.linear.BigMatrixImplTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,double[],double[],double)"
call "org.apache.commons.math.linear.BigMatrixImplTest.splitLU(BigMatrix,BigDecimal[][],BigDecimal[][])" "org.apache.commons.math.linear.BigMatrix.isSquare()"
call "org.apache.commons.math.linear.BigMatrixImplTest.splitLU(BigMatrix,BigDecimal[][],BigDecimal[][])" "org.apache.commons.math.linear.BigMatrix.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImplTest.splitLU(BigMatrix,BigDecimal[][],BigDecimal[][])" "org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(String)"
call "org.apache.commons.math.linear.BigMatrixImplTest.splitLU(BigMatrix,BigDecimal[][],BigDecimal[][])" "org.apache.commons.math.linear.BigMatrix.getEntry(int,int)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.splitLU(BigMatrix,BigDecimal[][],BigDecimal[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.permuteRows(BigMatrix,int[])" "org.apache.commons.math.linear.BigMatrix.isSquare()"
call "org.apache.commons.math.linear.BigMatrixImplTest.permuteRows(BigMatrix,int[])" "org.apache.commons.math.linear.BigMatrix.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImplTest.permuteRows(BigMatrix,int[])" "org.apache.commons.math.linear.BigMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImplTest.permuteRows(BigMatrix,int[])" "org.apache.commons.math.linear.BigMatrix.getEntry(int,int)"
call "org.apache.commons.math.linear.BigMatrixImplTest.permuteRows(BigMatrix,int[])" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.permuteRows(BigMatrix,int[])"
call "org.apache.commons.math.linear.BigMatrixImplTest.verifyDecomposition(BigMatrix,BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImplTest.verifyDecomposition(BigMatrix,BigMatrix)" "org.apache.commons.math.linear.BigMatrixImplTest.splitLU(BigMatrix,BigDecimal[][],BigDecimal[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.verifyDecomposition(BigMatrix,BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
call "org.apache.commons.math.linear.BigMatrixImplTest.verifyDecomposition(BigMatrix,BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.getPermutation()"
call "org.apache.commons.math.linear.BigMatrixImplTest.verifyDecomposition(BigMatrix,BigMatrix)" "org.apache.commons.math.linear.BigMatrixImplTest.permuteRows(BigMatrix,int[])"
call "org.apache.commons.math.linear.BigMatrixImplTest.verifyDecomposition(BigMatrix,BigMatrix)" "org.apache.commons.math.linear.BigMatrix.multiply(BigMatrix)"
reference "org.apache.commons.math.linear.BigMatrixImplTest.verifyDecomposition(BigMatrix,BigMatrix)" "org.apache.commons.math.linear.BigMatrixImplTest.normTolerance : double"
call "org.apache.commons.math.linear.BigMatrixImplTest.verifyDecomposition(BigMatrix,BigMatrix)" "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(String,BigMatrix,BigMatrix,double)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.verifyDecomposition(BigMatrix,BigMatrix)"
call "org.apache.commons.math.linear.BigMatrixImplTest.dumpMatrix(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getRowDimension()"
call "org.apache.commons.math.linear.BigMatrixImplTest.dumpMatrix(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.BigMatrixImplTest.dumpMatrix(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getEntry(int,int)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.dumpMatrix(BigMatrix)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.class$(String)"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testDataString : String[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.id : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.id : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testData : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDataLU : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testDataLU : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDataPlus2 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testDataPlus2 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDataMinus : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testDataMinus : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDataRow1 : double[]" "double[]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testDataRow1 : double[]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDataCol3 : double[]" "double[]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testDataCol3 : double[]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDataInv : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testDataInv : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.preMultTest : double[]" "double[]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.preMultTest : double[]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testData2 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testData2T : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testData2T : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testDataPlusInv : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testDataPlusInv : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.luData : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.luData : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.luDataLUDecomposition : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.luDataLUDecomposition : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.singular : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.singular : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.bigSingular : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.bigSingular : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.detData : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.detData : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.detData2 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.detData2 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testVector : double[]" "double[]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testVector : double[]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.testVector2 : double[]" "double[]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.testVector2 : double[]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.subTestData : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.subTestData : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.subRows02Cols13 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.subRows02Cols13 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.subRows03Cols12 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.subRows03Cols12 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.subRows03Cols123 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.subRows03Cols123 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.subRows20Cols123 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.subRows20Cols123 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.subRows31Cols31 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.subRows31Cols31 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.subRows01Cols23 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.subRows01Cols23 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.subRows23Cols00 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.subRows23Cols00 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.subRows00Cols33 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.subRows00Cols33 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.subRow0 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.subRow0 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.subRow3 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.subRow3 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.subColumn1 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.subColumn1 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.subColumn3 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.subColumn3 : double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.entryTolerance : double"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.normTolerance : double"
reference "org.apache.commons.math.linear.BigMatrixImplTest.d3 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.d3 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.d4 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.d4 : double[][]"
reference "org.apache.commons.math.linear.BigMatrixImplTest.d5 : double[][]" "double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.d5 : double[][]"
contain "org.apache.commons.math.linear.BigMatrixImplTest" "org.apache.commons.math.linear.BigMatrixImplTest.class$org$apache$commons$math$linear$BigMatrixImplTest : Class"
reference "org.apache.commons.math.stat.descriptive.InteractionTest" "org.apache.commons.math.stat.descriptive.moment.FourthMoment"
reference "org.apache.commons.math.stat.descriptive.InteractionTest" "org.apache.commons.math.stat.descriptive.moment.Mean"
reference "org.apache.commons.math.stat.descriptive.InteractionTest" "org.apache.commons.math.stat.descriptive.moment.Variance"
reference "org.apache.commons.math.stat.descriptive.InteractionTest" "org.apache.commons.math.stat.descriptive.moment.Skewness"
reference "org.apache.commons.math.stat.descriptive.InteractionTest" "org.apache.commons.math.stat.descriptive.moment.Kurtosis"
reference "org.apache.commons.math.stat.descriptive.InteractionTest" "junit.framework.TestCase"
call "org.apache.commons.math.stat.descriptive.InteractionTest.InteractionTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.descriptive.InteractionTest.InteractionTest(String)" "org.apache.commons.math.stat.descriptive.InteractionTest.mean : double"
reference "org.apache.commons.math.stat.descriptive.InteractionTest.InteractionTest(String)" "org.apache.commons.math.stat.descriptive.InteractionTest.var : double"
reference "org.apache.commons.math.stat.descriptive.InteractionTest.InteractionTest(String)" "org.apache.commons.math.stat.descriptive.InteractionTest.skew : double"
reference "org.apache.commons.math.stat.descriptive.InteractionTest.InteractionTest(String)" "org.apache.commons.math.stat.descriptive.InteractionTest.kurt : double"
reference "org.apache.commons.math.stat.descriptive.InteractionTest.InteractionTest(String)" "org.apache.commons.math.stat.descriptive.InteractionTest.tolerance : double"
reference "org.apache.commons.math.stat.descriptive.InteractionTest.InteractionTest(String)" "org.apache.commons.math.stat.descriptive.InteractionTest.testArray : double[]"
contain "org.apache.commons.math.stat.descriptive.InteractionTest" "org.apache.commons.math.stat.descriptive.InteractionTest.InteractionTest(String)"
call "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.FourthMoment()"
call "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.moment.Mean.Mean(FirstMoment)"
call "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.moment.Variance.Variance(SecondMoment)"
call "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.moment.Skewness.Skewness(ThirdMoment)"
call "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.Kurtosis(FourthMoment)"
reference "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.InteractionTest.testArray : double[]"
call "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.moment.FourthMoment.increment(double)"
reference "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.InteractionTest.mean : double"
call "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.moment.Mean.getResult()"
reference "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.InteractionTest.tolerance : double"
call "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.InteractionTest.assertEquals(double,double,double)"
reference "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.InteractionTest.var : double"
call "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.moment.Variance.getResult()"
reference "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.InteractionTest.skew : double"
call "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.moment.Skewness.getResult()"
reference "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.InteractionTest.kurt : double"
call "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()" "org.apache.commons.math.stat.descriptive.moment.Kurtosis.getResult()"
contain "org.apache.commons.math.stat.descriptive.InteractionTest" "org.apache.commons.math.stat.descriptive.InteractionTest.testInteraction()"
contain "org.apache.commons.math.stat.descriptive.InteractionTest" "org.apache.commons.math.stat.descriptive.InteractionTest.mean : double"
contain "org.apache.commons.math.stat.descriptive.InteractionTest" "org.apache.commons.math.stat.descriptive.InteractionTest.var : double"
contain "org.apache.commons.math.stat.descriptive.InteractionTest" "org.apache.commons.math.stat.descriptive.InteractionTest.skew : double"
contain "org.apache.commons.math.stat.descriptive.InteractionTest" "org.apache.commons.math.stat.descriptive.InteractionTest.kurt : double"
contain "org.apache.commons.math.stat.descriptive.InteractionTest" "org.apache.commons.math.stat.descriptive.InteractionTest.tolerance : double"
reference "org.apache.commons.math.stat.descriptive.InteractionTest.testArray : double[]" "double[]"
contain "org.apache.commons.math.stat.descriptive.InteractionTest" "org.apache.commons.math.stat.descriptive.InteractionTest.testArray : double[]"
reference "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.BrownDennisFunction(int,double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction" "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.BrownDennisFunction(int,double[],double,double,double[])"
reference "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.m : int"
contain "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction" "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.m : int"
contain "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction" "org.apache.commons.math.estimation.MinpackTest.BrownDennisFunction.getResiduals()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Bar" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Bar" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Bar.Bar()"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Bar" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Bar.heresBar()"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne1Function" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne1Function" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne1Function" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne1Function" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.Osborne1Function(double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.Osborne1Function" "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.Osborne1Function(double[],double,double,double[])"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.m : int"
contain "org.apache.commons.math.estimation.MinpackTest.Osborne1Function" "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.y : double[]"
contain "org.apache.commons.math.estimation.MinpackTest.Osborne1Function" "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.getResiduals()"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.static {...}" "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.y : double[]"
contain "org.apache.commons.math.estimation.MinpackTest.Osborne1Function" "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.static {...}"
reference "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.y : double[]" "double[]"
contain "org.apache.commons.math.estimation.MinpackTest.Osborne1Function" "org.apache.commons.math.estimation.MinpackTest.Osborne1Function.y : double[]"
reference "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest" "org.apache.commons.math.analysis.DividedDifferenceInterpolator"
reference "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest" "org.apache.commons.math.analysis.Expm1Function"
reference "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest" "org.apache.commons.math.analysis.UnivariateRealInterpolator"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.DividedDifferenceInterpolatorTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest" "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.DividedDifferenceInterpolatorTest()"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testSinFunction()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testSinFunction()" "org.apache.commons.math.analysis.DividedDifferenceInterpolator.DividedDifferenceInterpolator()"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealInterpolator.interpolate(double[],double[])"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testSinFunction()" "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.partialerror(double[],double)"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testSinFunction()" "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest" "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testSinFunction()"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testExpm1Function()" "org.apache.commons.math.analysis.Expm1Function.Expm1Function()"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testExpm1Function()" "org.apache.commons.math.analysis.DividedDifferenceInterpolator.DividedDifferenceInterpolator()"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testExpm1Function()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testExpm1Function()" "org.apache.commons.math.analysis.UnivariateRealInterpolator.interpolate(double[],double[])"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testExpm1Function()" "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.partialerror(double[],double)"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testExpm1Function()" "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest" "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testExpm1Function()"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testParameters()" "org.apache.commons.math.analysis.DividedDifferenceInterpolator.DividedDifferenceInterpolator()"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealInterpolator.interpolate(double[],double[])"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testParameters()" "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.fail(String)"
contain "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest" "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.testParameters()"
contain "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest" "org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest.partialerror(double[],double)"
reference "org.apache.commons.math.ode.TestProblemAbstract" "double[]"
reference "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.SwitchingFunction"
reference "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.FirstOrderDifferentialEquations"
reference "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract()" "org.apache.commons.math.ode.TestProblemAbstract.n : int"
reference "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract()" "org.apache.commons.math.ode.TestProblemAbstract.calls : int"
reference "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract()" "org.apache.commons.math.ode.TestProblemAbstract.t0 : double"
reference "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract()" "org.apache.commons.math.ode.TestProblemAbstract.y0 : double[]"
reference "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract()" "org.apache.commons.math.ode.TestProblemAbstract.t1 : double"
reference "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract()" "org.apache.commons.math.ode.TestProblemAbstract.errorScale : double[]"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract()"
reference "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(TestProblemAbstract)" "org.apache.commons.math.ode.TestProblemAbstract.n : int"
reference "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(TestProblemAbstract)" "org.apache.commons.math.ode.TestProblemAbstract.calls : int"
reference "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(TestProblemAbstract)" "org.apache.commons.math.ode.TestProblemAbstract.t0 : double"
reference "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(TestProblemAbstract)" "org.apache.commons.math.ode.TestProblemAbstract.y0 : double[]"
reference "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(TestProblemAbstract)" "org.apache.commons.math.ode.TestProblemAbstract.errorScale : double[]"
reference "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(TestProblemAbstract)" "org.apache.commons.math.ode.TestProblemAbstract.t1 : double"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(TestProblemAbstract)"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.clone()"
reference "org.apache.commons.math.ode.TestProblemAbstract.setInitialConditions(double,double[])" "org.apache.commons.math.ode.TestProblemAbstract.calls : int"
reference "org.apache.commons.math.ode.TestProblemAbstract.setInitialConditions(double,double[])" "org.apache.commons.math.ode.TestProblemAbstract.n : int"
reference "org.apache.commons.math.ode.TestProblemAbstract.setInitialConditions(double,double[])" "org.apache.commons.math.ode.TestProblemAbstract.t0 : double"
reference "org.apache.commons.math.ode.TestProblemAbstract.setInitialConditions(double,double[])" "org.apache.commons.math.ode.TestProblemAbstract.y0 : double[]"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.setInitialConditions(double,double[])"
reference "org.apache.commons.math.ode.TestProblemAbstract.setFinalConditions(double)" "org.apache.commons.math.ode.TestProblemAbstract.t1 : double"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.setFinalConditions(double)"
reference "org.apache.commons.math.ode.TestProblemAbstract.setErrorScale(double[])" "org.apache.commons.math.ode.TestProblemAbstract.errorScale : double[]"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.setErrorScale(double[])"
reference "org.apache.commons.math.ode.TestProblemAbstract.getDimension()" "org.apache.commons.math.ode.TestProblemAbstract.n : int"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.getDimension()"
reference "org.apache.commons.math.ode.TestProblemAbstract.getInitialTime()" "org.apache.commons.math.ode.TestProblemAbstract.t0 : double"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.getInitialTime()"
reference "org.apache.commons.math.ode.TestProblemAbstract.getInitialState()" "org.apache.commons.math.ode.TestProblemAbstract.y0 : double[]"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.getInitialState()"
reference "org.apache.commons.math.ode.TestProblemAbstract.getFinalTime()" "org.apache.commons.math.ode.TestProblemAbstract.t1 : double"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.getFinalTime()"
reference "org.apache.commons.math.ode.TestProblemAbstract.getErrorScale()" "org.apache.commons.math.ode.TestProblemAbstract.errorScale : double[]"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.getErrorScale()"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.getSwitchingFunctions()"
reference "org.apache.commons.math.ode.TestProblemAbstract.getCalls()" "org.apache.commons.math.ode.TestProblemAbstract.calls : int"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.getCalls()"
reference "org.apache.commons.math.ode.TestProblemAbstract.computeDerivatives(double,double[],double[])" "org.apache.commons.math.ode.TestProblemAbstract.calls : int"
call "org.apache.commons.math.ode.TestProblemAbstract.computeDerivatives(double,double[],double[])" "org.apache.commons.math.ode.TestProblemAbstract.doComputeDerivatives(double,double[],double[])"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.computeDerivatives(double,double[],double[])"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.doComputeDerivatives(double,double[],double[])"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.computeTheoreticalState(double)"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.n : int"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.calls : int"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.t0 : double"
reference "org.apache.commons.math.ode.TestProblemAbstract.y0 : double[]" "double[]"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.y0 : double[]"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.t1 : double"
reference "org.apache.commons.math.ode.TestProblemAbstract.errorScale : double[]" "double[]"
contain "org.apache.commons.math.ode.TestProblemAbstract" "org.apache.commons.math.ode.TestProblemAbstract.errorScale : double[]"
reference "org.apache.commons.math.distribution.WeibullDistributionTest" "org.apache.commons.math.distribution.WeibullDistributionImpl"
reference "org.apache.commons.math.distribution.WeibullDistributionTest" "org.apache.commons.math.distribution.WeibullDistribution"
reference "org.apache.commons.math.distribution.WeibullDistributionTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest"
call "org.apache.commons.math.distribution.WeibullDistributionTest.WeibullDistributionTest(String)" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(String)"
contain "org.apache.commons.math.distribution.WeibullDistributionTest" "org.apache.commons.math.distribution.WeibullDistributionTest.WeibullDistributionTest(String)"
call "org.apache.commons.math.distribution.WeibullDistributionTest.makeDistribution()" "org.apache.commons.math.distribution.WeibullDistributionImpl.WeibullDistributionImpl(double,double)"
contain "org.apache.commons.math.distribution.WeibullDistributionTest" "org.apache.commons.math.distribution.WeibullDistributionTest.makeDistribution()"
contain "org.apache.commons.math.distribution.WeibullDistributionTest" "org.apache.commons.math.distribution.WeibullDistributionTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.WeibullDistributionTest" "org.apache.commons.math.distribution.WeibullDistributionTest.makeCumulativeTestValues()"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.WeibullDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.WeibullDistributionTest.setInverseCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.WeibullDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.WeibullDistributionTest" "org.apache.commons.math.distribution.WeibullDistributionTest.testInverseCumulativeProbabilityExtremes()"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testAlpha()" "org.apache.commons.math.distribution.WeibullDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testAlpha()" "org.apache.commons.math.distribution.WeibullDistribution.setShape(double)"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testAlpha()" "org.apache.commons.math.distribution.WeibullDistribution.getShape()"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testAlpha()" "org.apache.commons.math.distribution.WeibullDistributionTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.distribution.WeibullDistributionTest" "org.apache.commons.math.distribution.WeibullDistributionTest.testAlpha()"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testBeta()" "org.apache.commons.math.distribution.WeibullDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testBeta()" "org.apache.commons.math.distribution.WeibullDistribution.setScale(double)"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testBeta()" "org.apache.commons.math.distribution.WeibullDistribution.getScale()"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testBeta()" "org.apache.commons.math.distribution.WeibullDistributionTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.distribution.WeibullDistributionTest" "org.apache.commons.math.distribution.WeibullDistributionTest.testBeta()"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testSetAlpha()" "org.apache.commons.math.distribution.WeibullDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testSetAlpha()" "org.apache.commons.math.distribution.WeibullDistribution.setShape(double)"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testSetAlpha()" "org.apache.commons.math.distribution.WeibullDistributionTest.fail(String)"
contain "org.apache.commons.math.distribution.WeibullDistributionTest" "org.apache.commons.math.distribution.WeibullDistributionTest.testSetAlpha()"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testSetBeta()" "org.apache.commons.math.distribution.WeibullDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testSetBeta()" "org.apache.commons.math.distribution.WeibullDistribution.setScale(double)"
call "org.apache.commons.math.distribution.WeibullDistributionTest.testSetBeta()" "org.apache.commons.math.distribution.WeibullDistributionTest.fail(String)"
contain "org.apache.commons.math.distribution.WeibullDistributionTest" "org.apache.commons.math.distribution.WeibullDistributionTest.testSetBeta()"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Bar"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2" "org.apache.commons.math.util.NumberTransformer"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2.{...}" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2.this$0 : MixedListUnivariateImplTest"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2.{...}"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2.transform(Object)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Bar.heresBar()"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2.transform(Object)"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2.this$0 : MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.2.this$0 : MixedListUnivariateImplTest"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest" "double[]"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.EulerStepInterpolator"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.EulerIntegrator"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.ContinuousOutputModel"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.IntegratorException"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.EulerStepInterpolatorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.EulerStepInterpolatorTest.EulerStepInterpolatorTest(String)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testNoReset()" "org.apache.commons.math.ode.EulerStepInterpolator.EulerStepInterpolator()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testNoReset()" "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations.DummyEquations(EulerStepInterpolatorTest.1)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testNoReset()" "org.apache.commons.math.ode.EulerStepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testNoReset()" "org.apache.commons.math.ode.EulerStepInterpolator.storeTime(double)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testNoReset()" "org.apache.commons.math.ode.EulerStepInterpolator.shift()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testNoReset()" "org.apache.commons.math.ode.EulerStepInterpolator.getInterpolatedState()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testNoReset()" "org.apache.commons.math.ode.EulerStepInterpolatorTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.EulerStepInterpolatorTest.testNoReset()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationAtBounds()" "org.apache.commons.math.ode.EulerStepInterpolator.EulerStepInterpolator()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationAtBounds()" "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations.DummyEquations(EulerStepInterpolatorTest.1)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationAtBounds()" "org.apache.commons.math.ode.EulerStepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationAtBounds()" "org.apache.commons.math.ode.EulerStepInterpolator.storeTime(double)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationAtBounds()" "org.apache.commons.math.ode.EulerStepInterpolator.shift()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationAtBounds()" "org.apache.commons.math.ode.EulerStepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationAtBounds()" "org.apache.commons.math.ode.EulerStepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationAtBounds()" "org.apache.commons.math.ode.EulerStepInterpolator.getInterpolatedState()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationAtBounds()" "org.apache.commons.math.ode.EulerStepInterpolatorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationAtBounds()" "org.apache.commons.math.ode.EulerStepInterpolator.getCurrentTime()"
contain "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationAtBounds()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationInside()" "org.apache.commons.math.ode.EulerStepInterpolator.EulerStepInterpolator()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationInside()" "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations.DummyEquations(EulerStepInterpolatorTest.1)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationInside()" "org.apache.commons.math.ode.EulerStepInterpolator.reinitialize(FirstOrderDifferentialEquations,double[],double[][],boolean)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationInside()" "org.apache.commons.math.ode.EulerStepInterpolator.storeTime(double)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationInside()" "org.apache.commons.math.ode.EulerStepInterpolator.shift()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationInside()" "org.apache.commons.math.ode.EulerStepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationInside()" "org.apache.commons.math.ode.EulerStepInterpolator.getInterpolatedState()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationInside()" "org.apache.commons.math.ode.EulerStepInterpolatorTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.EulerStepInterpolatorTest.testInterpolationInside()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.EulerIntegrator.EulerIntegrator(double)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.EulerIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.EulerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.EulerIntegrator.getStepHandler()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.EulerStepInterpolatorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem1.computeTheoreticalState(double)"
contain "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.EulerStepInterpolatorTest.testSerialization()"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest.suite()" "org.apache.commons.math.ode.EulerStepInterpolatorTest.class$org$apache$commons$math$ode$EulerStepInterpolatorTest : Class"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.suite()" "org.apache.commons.math.ode.EulerStepInterpolatorTest.class$(String)"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.EulerStepInterpolatorTest.suite()"
contain "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.EulerStepInterpolatorTest.class$(String)"
contain "org.apache.commons.math.ode.EulerStepInterpolatorTest" "org.apache.commons.math.ode.EulerStepInterpolatorTest.class$org$apache$commons$math$ode$EulerStepInterpolatorTest : Class"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Foo"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1" "org.apache.commons.math.util.NumberTransformer"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1.{...}" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1.this$0 : MixedListUnivariateImplTest"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1.{...}"
call "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1.transform(Object)" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.Foo.heresFoo()"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1.transform(Object)"
reference "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1.this$0 : MixedListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest"
contain "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1" "org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest.1.this$0 : MixedListUnivariateImplTest"
reference "org.apache.commons.math.stat.StatUtilsTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.StatUtilsTest" "junit.framework.TestCase"
reference "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtils"
reference "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.stat.StatUtilsTest.StatUtilsTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.StatUtilsTest.StatUtilsTest(String)" "org.apache.commons.math.stat.StatUtilsTest.one : double"
reference "org.apache.commons.math.stat.StatUtilsTest.StatUtilsTest(String)" "org.apache.commons.math.stat.StatUtilsTest.two : float"
reference "org.apache.commons.math.stat.StatUtilsTest.StatUtilsTest(String)" "org.apache.commons.math.stat.StatUtilsTest.three : int"
reference "org.apache.commons.math.stat.StatUtilsTest.StatUtilsTest(String)" "org.apache.commons.math.stat.StatUtilsTest.mean : double"
reference "org.apache.commons.math.stat.StatUtilsTest.StatUtilsTest(String)" "org.apache.commons.math.stat.StatUtilsTest.sumSq : double"
reference "org.apache.commons.math.stat.StatUtilsTest.StatUtilsTest(String)" "org.apache.commons.math.stat.StatUtilsTest.sum : double"
reference "org.apache.commons.math.stat.StatUtilsTest.StatUtilsTest(String)" "org.apache.commons.math.stat.StatUtilsTest.var : double"
reference "org.apache.commons.math.stat.StatUtilsTest.StatUtilsTest(String)" "org.apache.commons.math.stat.StatUtilsTest.min : double"
reference "org.apache.commons.math.stat.StatUtilsTest.StatUtilsTest(String)" "org.apache.commons.math.stat.StatUtilsTest.max : double"
reference "org.apache.commons.math.stat.StatUtilsTest.StatUtilsTest(String)" "org.apache.commons.math.stat.StatUtilsTest.tolerance : double"
reference "org.apache.commons.math.stat.StatUtilsTest.StatUtilsTest(String)" "org.apache.commons.math.stat.StatUtilsTest.nan : double"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.StatUtilsTest(String)"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.setUp()"
reference "org.apache.commons.math.stat.StatUtilsTest.suite()" "org.apache.commons.math.stat.StatUtilsTest.class$org$apache$commons$math$stat$StatUtilsTest : Class"
call "org.apache.commons.math.stat.StatUtilsTest.suite()" "org.apache.commons.math.stat.StatUtilsTest.class$(String)"
call "org.apache.commons.math.stat.StatUtilsTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.StatUtilsTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.suite()"
reference "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtilsTest.one : double"
reference "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtilsTest.two : float"
reference "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtilsTest.three : int"
reference "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtilsTest.sum : double"
call "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtils.sum(double[])"
reference "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtilsTest.tolerance : double"
call "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtilsTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtilsTest.sumSq : double"
call "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtils.sumSq(double[])"
reference "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtilsTest.var : double"
call "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtils.variance(double[])"
reference "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtilsTest.mean : double"
call "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtils.variance(double[],double)"
call "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtils.mean(double[])"
reference "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtilsTest.min : double"
call "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtils.min(double[])"
reference "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtilsTest.max : double"
call "org.apache.commons.math.stat.StatUtilsTest.testStats()" "org.apache.commons.math.stat.StatUtils.max(double[])"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.testStats()"
call "org.apache.commons.math.stat.StatUtilsTest.testN0andN1Conditions()" "org.apache.commons.math.stat.StatUtils.mean(double[])"
call "org.apache.commons.math.stat.StatUtilsTest.testN0andN1Conditions()" "org.apache.commons.math.stat.StatUtilsTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.StatUtilsTest.testN0andN1Conditions()" "org.apache.commons.math.stat.StatUtils.variance(double[])"
reference "org.apache.commons.math.stat.StatUtilsTest.testN0andN1Conditions()" "org.apache.commons.math.stat.StatUtilsTest.one : double"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.testN0andN1Conditions()"
call "org.apache.commons.math.stat.StatUtilsTest.testArrayIndexConditions()" "org.apache.commons.math.stat.StatUtils.sum(double[],int,int)"
call "org.apache.commons.math.stat.StatUtilsTest.testArrayIndexConditions()" "org.apache.commons.math.stat.StatUtilsTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.StatUtilsTest.testArrayIndexConditions()" "org.apache.commons.math.stat.StatUtilsTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.StatUtilsTest.testArrayIndexConditions()" "org.apache.commons.math.stat.StatUtilsTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.testArrayIndexConditions()"
call "org.apache.commons.math.stat.StatUtilsTest.testSumSq()" "org.apache.commons.math.stat.StatUtils.sumSq(double[])"
call "org.apache.commons.math.stat.StatUtilsTest.testSumSq()" "org.apache.commons.math.stat.StatUtilsTest.fail(String)"
call "org.apache.commons.math.stat.StatUtilsTest.testSumSq()" "org.apache.commons.math.stat.StatUtils.sumSq(double[],int,int)"
reference "org.apache.commons.math.stat.StatUtilsTest.testSumSq()" "org.apache.commons.math.stat.StatUtilsTest.tolerance : double"
call "org.apache.commons.math.stat.StatUtilsTest.testSumSq()" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
reference "org.apache.commons.math.stat.StatUtilsTest.testSumSq()" "org.apache.commons.math.stat.StatUtilsTest.two : float"
reference "org.apache.commons.math.stat.StatUtilsTest.testSumSq()" "org.apache.commons.math.stat.StatUtilsTest.one : double"
reference "org.apache.commons.math.stat.StatUtilsTest.testSumSq()" "org.apache.commons.math.stat.StatUtilsTest.three : int"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.testSumSq()"
call "org.apache.commons.math.stat.StatUtilsTest.testProduct()" "org.apache.commons.math.stat.StatUtils.product(double[])"
call "org.apache.commons.math.stat.StatUtilsTest.testProduct()" "org.apache.commons.math.stat.StatUtilsTest.fail(String)"
call "org.apache.commons.math.stat.StatUtilsTest.testProduct()" "org.apache.commons.math.stat.StatUtils.product(double[],int,int)"
reference "org.apache.commons.math.stat.StatUtilsTest.testProduct()" "org.apache.commons.math.stat.StatUtilsTest.tolerance : double"
call "org.apache.commons.math.stat.StatUtilsTest.testProduct()" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
reference "org.apache.commons.math.stat.StatUtilsTest.testProduct()" "org.apache.commons.math.stat.StatUtilsTest.two : float"
reference "org.apache.commons.math.stat.StatUtilsTest.testProduct()" "org.apache.commons.math.stat.StatUtilsTest.one : double"
reference "org.apache.commons.math.stat.StatUtilsTest.testProduct()" "org.apache.commons.math.stat.StatUtilsTest.three : int"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.testProduct()"
call "org.apache.commons.math.stat.StatUtilsTest.testSumLog()" "org.apache.commons.math.stat.StatUtils.sumLog(double[])"
call "org.apache.commons.math.stat.StatUtilsTest.testSumLog()" "org.apache.commons.math.stat.StatUtilsTest.fail(String)"
call "org.apache.commons.math.stat.StatUtilsTest.testSumLog()" "org.apache.commons.math.stat.StatUtils.sumLog(double[],int,int)"
reference "org.apache.commons.math.stat.StatUtilsTest.testSumLog()" "org.apache.commons.math.stat.StatUtilsTest.tolerance : double"
call "org.apache.commons.math.stat.StatUtilsTest.testSumLog()" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
reference "org.apache.commons.math.stat.StatUtilsTest.testSumLog()" "org.apache.commons.math.stat.StatUtilsTest.two : float"
reference "org.apache.commons.math.stat.StatUtilsTest.testSumLog()" "org.apache.commons.math.stat.StatUtilsTest.one : double"
reference "org.apache.commons.math.stat.StatUtilsTest.testSumLog()" "org.apache.commons.math.stat.StatUtilsTest.three : int"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.testSumLog()"
call "org.apache.commons.math.stat.StatUtilsTest.testMean()" "org.apache.commons.math.stat.StatUtils.mean(double[],int,int)"
call "org.apache.commons.math.stat.StatUtilsTest.testMean()" "org.apache.commons.math.stat.StatUtilsTest.fail(String)"
reference "org.apache.commons.math.stat.StatUtilsTest.testMean()" "org.apache.commons.math.stat.StatUtilsTest.tolerance : double"
call "org.apache.commons.math.stat.StatUtilsTest.testMean()" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
reference "org.apache.commons.math.stat.StatUtilsTest.testMean()" "org.apache.commons.math.stat.StatUtilsTest.two : float"
reference "org.apache.commons.math.stat.StatUtilsTest.testMean()" "org.apache.commons.math.stat.StatUtilsTest.one : double"
reference "org.apache.commons.math.stat.StatUtilsTest.testMean()" "org.apache.commons.math.stat.StatUtilsTest.three : int"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.testMean()"
call "org.apache.commons.math.stat.StatUtilsTest.testVariance()" "org.apache.commons.math.stat.StatUtils.variance(double[],int,int)"
call "org.apache.commons.math.stat.StatUtilsTest.testVariance()" "org.apache.commons.math.stat.StatUtilsTest.fail(String)"
reference "org.apache.commons.math.stat.StatUtilsTest.testVariance()" "org.apache.commons.math.stat.StatUtilsTest.tolerance : double"
call "org.apache.commons.math.stat.StatUtilsTest.testVariance()" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
reference "org.apache.commons.math.stat.StatUtilsTest.testVariance()" "org.apache.commons.math.stat.StatUtilsTest.two : float"
reference "org.apache.commons.math.stat.StatUtilsTest.testVariance()" "org.apache.commons.math.stat.StatUtilsTest.one : double"
reference "org.apache.commons.math.stat.StatUtilsTest.testVariance()" "org.apache.commons.math.stat.StatUtilsTest.three : int"
call "org.apache.commons.math.stat.StatUtilsTest.testVariance()" "org.apache.commons.math.stat.StatUtils.variance(double[],double,int,int)"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.testVariance()"
call "org.apache.commons.math.stat.StatUtilsTest.testMax()" "org.apache.commons.math.stat.StatUtils.max(double[],int,int)"
call "org.apache.commons.math.stat.StatUtilsTest.testMax()" "org.apache.commons.math.stat.StatUtilsTest.fail(String)"
reference "org.apache.commons.math.stat.StatUtilsTest.testMax()" "org.apache.commons.math.stat.StatUtilsTest.tolerance : double"
call "org.apache.commons.math.stat.StatUtilsTest.testMax()" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
reference "org.apache.commons.math.stat.StatUtilsTest.testMax()" "org.apache.commons.math.stat.StatUtilsTest.two : float"
reference "org.apache.commons.math.stat.StatUtilsTest.testMax()" "org.apache.commons.math.stat.StatUtilsTest.one : double"
reference "org.apache.commons.math.stat.StatUtilsTest.testMax()" "org.apache.commons.math.stat.StatUtilsTest.three : int"
reference "org.apache.commons.math.stat.StatUtilsTest.testMax()" "org.apache.commons.math.stat.StatUtilsTest.nan : double"
call "org.apache.commons.math.stat.StatUtilsTest.testMax()" "org.apache.commons.math.stat.StatUtils.max(double[])"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.testMax()"
call "org.apache.commons.math.stat.StatUtilsTest.testMin()" "org.apache.commons.math.stat.StatUtils.min(double[],int,int)"
call "org.apache.commons.math.stat.StatUtilsTest.testMin()" "org.apache.commons.math.stat.StatUtilsTest.fail(String)"
reference "org.apache.commons.math.stat.StatUtilsTest.testMin()" "org.apache.commons.math.stat.StatUtilsTest.tolerance : double"
call "org.apache.commons.math.stat.StatUtilsTest.testMin()" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
reference "org.apache.commons.math.stat.StatUtilsTest.testMin()" "org.apache.commons.math.stat.StatUtilsTest.two : float"
reference "org.apache.commons.math.stat.StatUtilsTest.testMin()" "org.apache.commons.math.stat.StatUtilsTest.one : double"
reference "org.apache.commons.math.stat.StatUtilsTest.testMin()" "org.apache.commons.math.stat.StatUtilsTest.three : int"
reference "org.apache.commons.math.stat.StatUtilsTest.testMin()" "org.apache.commons.math.stat.StatUtilsTest.nan : double"
call "org.apache.commons.math.stat.StatUtilsTest.testMin()" "org.apache.commons.math.stat.StatUtils.min(double[])"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.testMin()"
call "org.apache.commons.math.stat.StatUtilsTest.testPercentile()" "org.apache.commons.math.stat.StatUtils.percentile(double[],double)"
call "org.apache.commons.math.stat.StatUtilsTest.testPercentile()" "org.apache.commons.math.stat.StatUtilsTest.fail(String)"
call "org.apache.commons.math.stat.StatUtilsTest.testPercentile()" "org.apache.commons.math.stat.StatUtils.percentile(double[],int,int,double)"
reference "org.apache.commons.math.stat.StatUtilsTest.testPercentile()" "org.apache.commons.math.stat.StatUtilsTest.tolerance : double"
call "org.apache.commons.math.stat.StatUtilsTest.testPercentile()" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
reference "org.apache.commons.math.stat.StatUtilsTest.testPercentile()" "org.apache.commons.math.stat.StatUtilsTest.two : float"
reference "org.apache.commons.math.stat.StatUtilsTest.testPercentile()" "org.apache.commons.math.stat.StatUtilsTest.one : double"
reference "org.apache.commons.math.stat.StatUtilsTest.testPercentile()" "org.apache.commons.math.stat.StatUtilsTest.three : int"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.testPercentile()"
call "org.apache.commons.math.stat.StatUtilsTest.testDifferenceStats()" "org.apache.commons.math.stat.StatUtils.meanDifference(double[],double[])"
call "org.apache.commons.math.stat.StatUtilsTest.testDifferenceStats()" "org.apache.commons.math.stat.StatUtils.sumDifference(double[],double[])"
call "org.apache.commons.math.stat.StatUtilsTest.testDifferenceStats()" "org.apache.commons.math.stat.StatUtils.sum(double[])"
reference "org.apache.commons.math.stat.StatUtilsTest.testDifferenceStats()" "org.apache.commons.math.stat.StatUtilsTest.tolerance : double"
call "org.apache.commons.math.stat.StatUtilsTest.testDifferenceStats()" "org.apache.commons.math.stat.StatUtilsTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.StatUtilsTest.testDifferenceStats()" "org.apache.commons.math.stat.StatUtils.mean(double[])"
call "org.apache.commons.math.stat.StatUtilsTest.testDifferenceStats()" "org.apache.commons.math.stat.StatUtils.varianceDifference(double[],double[],double)"
call "org.apache.commons.math.stat.StatUtilsTest.testDifferenceStats()" "org.apache.commons.math.stat.StatUtils.variance(double[])"
call "org.apache.commons.math.stat.StatUtilsTest.testDifferenceStats()" "org.apache.commons.math.stat.StatUtilsTest.fail(String)"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.testDifferenceStats()"
call "org.apache.commons.math.stat.StatUtilsTest.testGeometricMean()" "org.apache.commons.math.stat.StatUtils.geometricMean(double[])"
call "org.apache.commons.math.stat.StatUtilsTest.testGeometricMean()" "org.apache.commons.math.stat.StatUtilsTest.fail(String)"
call "org.apache.commons.math.stat.StatUtilsTest.testGeometricMean()" "org.apache.commons.math.stat.StatUtils.sumLog(double[])"
call "org.apache.commons.math.stat.StatUtilsTest.testGeometricMean()" "org.apache.commons.math.stat.StatUtilsTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.StatUtilsTest.testGeometricMean()" "org.apache.commons.math.stat.StatUtils.sumLog(double[],int,int)"
call "org.apache.commons.math.stat.StatUtilsTest.testGeometricMean()" "org.apache.commons.math.stat.StatUtils.geometricMean(double[],int,int)"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.testGeometricMean()"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.class$(String)"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.one : double"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.two : float"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.three : int"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.mean : double"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.sumSq : double"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.sum : double"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.var : double"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.min : double"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.max : double"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.tolerance : double"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.nan : double"
contain "org.apache.commons.math.stat.StatUtilsTest" "org.apache.commons.math.stat.StatUtilsTest.class$org$apache$commons$math$stat$StatUtilsTest : Class"
reference "org.apache.commons.math.analysis.SinFunction" "org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction"
reference "org.apache.commons.math.analysis.SinFunction" "org.apache.commons.math.FunctionEvaluationException"
contain "org.apache.commons.math.analysis.SinFunction" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
contain "org.apache.commons.math.analysis.SinFunction" "org.apache.commons.math.analysis.SinFunction.value(double)"
call "org.apache.commons.math.analysis.SinFunction.derivative()" "org.apache.commons.math.analysis.SinFunction.1.{...}"
contain "org.apache.commons.math.analysis.SinFunction" "org.apache.commons.math.analysis.SinFunction.derivative()"
reference "org.apache.commons.math.util.DoubleArrayAbstractTest" "junit.framework.TestCase"
reference "org.apache.commons.math.util.DoubleArrayAbstractTest" "org.apache.commons.math.util.DoubleArray"
reference "org.apache.commons.math.util.DoubleArrayAbstractTest" "org.apache.commons.math.stat.StatUtils"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.DoubleArrayAbstractTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.util.DoubleArrayAbstractTest.DoubleArrayAbstractTest(String)" "org.apache.commons.math.util.DoubleArrayAbstractTest.da : DoubleArray"
reference "org.apache.commons.math.util.DoubleArrayAbstractTest.DoubleArrayAbstractTest(String)" "org.apache.commons.math.util.DoubleArrayAbstractTest.ra : DoubleArray"
contain "org.apache.commons.math.util.DoubleArrayAbstractTest" "org.apache.commons.math.util.DoubleArrayAbstractTest.DoubleArrayAbstractTest(String)"
reference "org.apache.commons.math.util.DoubleArrayAbstractTest.testAdd1000()" "org.apache.commons.math.util.DoubleArrayAbstractTest.da : DoubleArray"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testAdd1000()" "org.apache.commons.math.util.DoubleArray.addElement(double)"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testAdd1000()" "org.apache.commons.math.util.DoubleArray.getNumElements()"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testAdd1000()" "org.apache.commons.math.util.DoubleArrayAbstractTest.assertEquals(String,int,int)"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testAdd1000()" "org.apache.commons.math.util.DoubleArray.getElement(int)"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testAdd1000()" "org.apache.commons.math.util.DoubleArrayAbstractTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.util.DoubleArrayAbstractTest" "org.apache.commons.math.util.DoubleArrayAbstractTest.testAdd1000()"
reference "org.apache.commons.math.util.DoubleArrayAbstractTest.testGetValues()" "org.apache.commons.math.util.DoubleArrayAbstractTest.da : DoubleArray"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testGetValues()" "org.apache.commons.math.util.DoubleArray.addElement(double)"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testGetValues()" "org.apache.commons.math.util.DoubleArray.getElements()"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testGetValues()" "org.apache.commons.math.util.DoubleArray.getNumElements()"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testGetValues()" "org.apache.commons.math.util.DoubleArrayAbstractTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.util.DoubleArrayAbstractTest" "org.apache.commons.math.util.DoubleArrayAbstractTest.testGetValues()"
reference "org.apache.commons.math.util.DoubleArrayAbstractTest.testAddElementRolling()" "org.apache.commons.math.util.DoubleArrayAbstractTest.ra : DoubleArray"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testAddElementRolling()" "org.apache.commons.math.util.DoubleArray.addElement(double)"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testAddElementRolling()" "org.apache.commons.math.util.DoubleArray.addElementRolling(double)"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testAddElementRolling()" "org.apache.commons.math.util.DoubleArray.getNumElements()"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testAddElementRolling()" "org.apache.commons.math.util.DoubleArrayAbstractTest.assertEquals(String,int,int)"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testAddElementRolling()" "org.apache.commons.math.util.DoubleArray.getElements()"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testAddElementRolling()" "org.apache.commons.math.stat.StatUtils.max(double[])"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testAddElementRolling()" "org.apache.commons.math.util.DoubleArrayAbstractTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testAddElementRolling()" "org.apache.commons.math.stat.StatUtils.min(double[])"
contain "org.apache.commons.math.util.DoubleArrayAbstractTest" "org.apache.commons.math.util.DoubleArrayAbstractTest.testAddElementRolling()"
reference "org.apache.commons.math.util.DoubleArrayAbstractTest.testMinMax()" "org.apache.commons.math.util.DoubleArrayAbstractTest.da : DoubleArray"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testMinMax()" "org.apache.commons.math.util.DoubleArray.addElement(double)"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testMinMax()" "org.apache.commons.math.util.DoubleArray.getElements()"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testMinMax()" "org.apache.commons.math.stat.StatUtils.min(double[])"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testMinMax()" "org.apache.commons.math.util.DoubleArrayAbstractTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.util.DoubleArrayAbstractTest.testMinMax()" "org.apache.commons.math.stat.StatUtils.max(double[])"
contain "org.apache.commons.math.util.DoubleArrayAbstractTest" "org.apache.commons.math.util.DoubleArrayAbstractTest.testMinMax()"
reference "org.apache.commons.math.util.DoubleArrayAbstractTest.da : DoubleArray" "org.apache.commons.math.util.DoubleArray"
contain "org.apache.commons.math.util.DoubleArrayAbstractTest" "org.apache.commons.math.util.DoubleArrayAbstractTest.da : DoubleArray"
reference "org.apache.commons.math.util.DoubleArrayAbstractTest.ra : DoubleArray" "org.apache.commons.math.util.DoubleArray"
contain "org.apache.commons.math.util.DoubleArrayAbstractTest" "org.apache.commons.math.util.DoubleArrayAbstractTest.ra : DoubleArray"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest" "org.apache.commons.math.ode.HighamHall54Integrator"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest" "org.apache.commons.math.ode.ContinuousOutputModel"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest" "org.apache.commons.math.ode.IntegratorException"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.HighamHall54StepInterpolatorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.HighamHall54StepInterpolatorTest(String)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.HighamHall54Integrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.HighamHall54Integrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.HighamHall54Integrator.getStepHandler()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testSerialization()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.1.{...}"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.HighamHall54Integrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testClone()" "org.apache.commons.math.ode.HighamHall54Integrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.testClone()"
reference "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.suite()" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.class$org$apache$commons$math$ode$HighamHall54StepInterpolatorTest : Class"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.suite()" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.class$(String)"
call "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.suite()"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.class$(String)"
contain "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest" "org.apache.commons.math.ode.HighamHall54StepInterpolatorTest.class$org$apache$commons$math$ode$HighamHall54StepInterpolatorTest : Class"
reference "org.apache.commons.math.distribution.ChiSquareDistributionTest" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl"
reference "org.apache.commons.math.distribution.ChiSquareDistributionTest" "org.apache.commons.math.distribution.ChiSquaredDistribution"
reference "org.apache.commons.math.distribution.ChiSquareDistributionTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.ChiSquareDistributionTest(String)" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(String)"
contain "org.apache.commons.math.distribution.ChiSquareDistributionTest" "org.apache.commons.math.distribution.ChiSquareDistributionTest.ChiSquareDistributionTest(String)"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.makeDistribution()" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double)"
contain "org.apache.commons.math.distribution.ChiSquareDistributionTest" "org.apache.commons.math.distribution.ChiSquareDistributionTest.makeDistribution()"
contain "org.apache.commons.math.distribution.ChiSquareDistributionTest" "org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.ChiSquareDistributionTest" "org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestValues()"
contain "org.apache.commons.math.distribution.ChiSquareDistributionTest" "org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.ChiSquareDistributionTest" "org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestValues()"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.setUp()" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp()"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.setUp()" "org.apache.commons.math.distribution.ChiSquareDistributionTest.setTolerance(double)"
contain "org.apache.commons.math.distribution.ChiSquareDistributionTest" "org.apache.commons.math.distribution.ChiSquareDistributionTest.setUp()"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double)"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.ChiSquareDistributionTest.setDistribution(ContinuousDistribution)"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.ChiSquareDistributionTest.setTolerance(double)"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.ChiSquareDistributionTest.setCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.ChiSquareDistributionTest.getCumulativeTestPoints()"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.ChiSquareDistributionTest.setInverseCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.ChiSquareDistributionTest.getCumulativeTestValues()"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.ChiSquareDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.ChiSquareDistributionTest.verifyCumulativeProbabilities()"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf()" "org.apache.commons.math.distribution.ChiSquareDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.ChiSquareDistributionTest" "org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf()"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.ChiSquareDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.ChiSquaredDistribution.getDegreesOfFreedom()"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.ChiSquareDistributionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.ChiSquaredDistribution.setDegreesOfFreedom(double)"
call "org.apache.commons.math.distribution.ChiSquareDistributionTest.testDfAccessors()" "org.apache.commons.math.distribution.ChiSquareDistributionTest.fail(String)"
contain "org.apache.commons.math.distribution.ChiSquareDistributionTest" "org.apache.commons.math.distribution.ChiSquareDistributionTest.testDfAccessors()"
reference "org.apache.commons.math.transform.FastSineTransformerTest" "org.apache.commons.math.transform.FastSineTransformer"
reference "org.apache.commons.math.transform.FastSineTransformerTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.transform.FastSineTransformerTest" "junit.framework.TestCase"
reference "org.apache.commons.math.transform.FastSineTransformerTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.transform.FastSineTransformerTest" "org.apache.commons.math.transform.FastFourierTransformer"
call "org.apache.commons.math.transform.FastSineTransformerTest.FastSineTransformerTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.transform.FastSineTransformerTest" "org.apache.commons.math.transform.FastSineTransformerTest.FastSineTransformerTest()"
call "org.apache.commons.math.transform.FastSineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastSineTransformer.FastSineTransformer()"
call "org.apache.commons.math.transform.FastSineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastSineTransformer.transform(double[])"
call "org.apache.commons.math.transform.FastSineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastSineTransformerTest.assertEquals(double,double,double)"
call "org.apache.commons.math.transform.FastSineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastSineTransformer.inversetransform(double[])"
call "org.apache.commons.math.transform.FastSineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[],double)"
call "org.apache.commons.math.transform.FastSineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastSineTransformer.transform2(double[])"
call "org.apache.commons.math.transform.FastSineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastSineTransformer.inversetransform2(double[])"
contain "org.apache.commons.math.transform.FastSineTransformerTest" "org.apache.commons.math.transform.FastSineTransformerTest.testAdHocData()"
call "org.apache.commons.math.transform.FastSineTransformerTest.testSinFunction()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.transform.FastSineTransformerTest.testSinFunction()" "org.apache.commons.math.transform.FastSineTransformer.FastSineTransformer()"
call "org.apache.commons.math.transform.FastSineTransformerTest.testSinFunction()" "org.apache.commons.math.transform.FastSineTransformer.transform(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastSineTransformerTest.testSinFunction()" "org.apache.commons.math.transform.FastSineTransformerTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.transform.FastSineTransformerTest" "org.apache.commons.math.transform.FastSineTransformerTest.testSinFunction()"
call "org.apache.commons.math.transform.FastSineTransformerTest.testParameters()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.transform.FastSineTransformerTest.testParameters()" "org.apache.commons.math.transform.FastSineTransformer.FastSineTransformer()"
call "org.apache.commons.math.transform.FastSineTransformerTest.testParameters()" "org.apache.commons.math.transform.FastSineTransformer.transform(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastSineTransformerTest.testParameters()" "org.apache.commons.math.transform.FastSineTransformerTest.fail(String)"
contain "org.apache.commons.math.transform.FastSineTransformerTest" "org.apache.commons.math.transform.FastSineTransformerTest.testParameters()"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.1" "org.apache.commons.math.ode.FirstOrderDifferentialEquations"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.1" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.1.{...}" "org.apache.commons.math.ode.ContinuousOutputModelTest.1.this$0 : ContinuousOutputModelTest"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest.1" "org.apache.commons.math.ode.ContinuousOutputModelTest.1.{...}"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest.1" "org.apache.commons.math.ode.ContinuousOutputModelTest.1.computeDerivatives(double,double[],double[])"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest.1" "org.apache.commons.math.ode.ContinuousOutputModelTest.1.getDimension()"
reference "org.apache.commons.math.ode.ContinuousOutputModelTest.1.this$0 : ContinuousOutputModelTest" "org.apache.commons.math.ode.ContinuousOutputModelTest"
contain "org.apache.commons.math.ode.ContinuousOutputModelTest.1" "org.apache.commons.math.ode.ContinuousOutputModelTest.1.this$0 : ContinuousOutputModelTest"
reference "org.apache.commons.math.transform.FastCosineTransformerTest" "org.apache.commons.math.transform.FastCosineTransformer"
reference "org.apache.commons.math.transform.FastCosineTransformerTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.transform.FastCosineTransformerTest" "junit.framework.TestCase"
reference "org.apache.commons.math.transform.FastCosineTransformerTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.transform.FastCosineTransformerTest" "org.apache.commons.math.transform.FastFourierTransformer"
call "org.apache.commons.math.transform.FastCosineTransformerTest.FastCosineTransformerTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.transform.FastCosineTransformerTest" "org.apache.commons.math.transform.FastCosineTransformerTest.FastCosineTransformerTest()"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastCosineTransformer.FastCosineTransformer()"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastCosineTransformer.transform(double[])"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastCosineTransformerTest.assertEquals(double,double,double)"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastCosineTransformer.inversetransform(double[])"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[],double)"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastCosineTransformer.transform2(double[])"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testAdHocData()" "org.apache.commons.math.transform.FastCosineTransformer.inversetransform2(double[])"
contain "org.apache.commons.math.transform.FastCosineTransformerTest" "org.apache.commons.math.transform.FastCosineTransformerTest.testAdHocData()"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testSinFunction()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testSinFunction()" "org.apache.commons.math.transform.FastCosineTransformer.FastCosineTransformer()"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testSinFunction()" "org.apache.commons.math.transform.FastCosineTransformer.transform(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testSinFunction()" "org.apache.commons.math.transform.FastCosineTransformerTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.transform.FastCosineTransformerTest" "org.apache.commons.math.transform.FastCosineTransformerTest.testSinFunction()"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testParameters()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testParameters()" "org.apache.commons.math.transform.FastCosineTransformer.FastCosineTransformer()"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testParameters()" "org.apache.commons.math.transform.FastCosineTransformer.transform(UnivariateRealFunction,double,double,int)"
call "org.apache.commons.math.transform.FastCosineTransformerTest.testParameters()" "org.apache.commons.math.transform.FastCosineTransformerTest.fail(String)"
contain "org.apache.commons.math.transform.FastCosineTransformerTest" "org.apache.commons.math.transform.FastCosineTransformerTest.testParameters()"
reference "org.apache.commons.math.analysis.NevilleInterpolatorTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.analysis.NevilleInterpolatorTest" "org.apache.commons.math.analysis.NevilleInterpolator"
reference "org.apache.commons.math.analysis.NevilleInterpolatorTest" "org.apache.commons.math.analysis.Expm1Function"
reference "org.apache.commons.math.analysis.NevilleInterpolatorTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.NevilleInterpolatorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.NevilleInterpolatorTest" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.analysis.NevilleInterpolatorTest" "org.apache.commons.math.analysis.UnivariateRealInterpolator"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.NevilleInterpolatorTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.analysis.NevilleInterpolatorTest" "org.apache.commons.math.analysis.NevilleInterpolatorTest.NevilleInterpolatorTest()"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testSinFunction()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testSinFunction()" "org.apache.commons.math.analysis.NevilleInterpolator.NevilleInterpolator()"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealInterpolator.interpolate(double[],double[])"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testSinFunction()" "org.apache.commons.math.analysis.NevilleInterpolatorTest.partialerror(double[],double)"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testSinFunction()" "org.apache.commons.math.analysis.NevilleInterpolatorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.NevilleInterpolatorTest" "org.apache.commons.math.analysis.NevilleInterpolatorTest.testSinFunction()"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testExpm1Function()" "org.apache.commons.math.analysis.Expm1Function.Expm1Function()"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testExpm1Function()" "org.apache.commons.math.analysis.NevilleInterpolator.NevilleInterpolator()"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testExpm1Function()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testExpm1Function()" "org.apache.commons.math.analysis.UnivariateRealInterpolator.interpolate(double[],double[])"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testExpm1Function()" "org.apache.commons.math.analysis.NevilleInterpolatorTest.partialerror(double[],double)"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testExpm1Function()" "org.apache.commons.math.analysis.NevilleInterpolatorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.NevilleInterpolatorTest" "org.apache.commons.math.analysis.NevilleInterpolatorTest.testExpm1Function()"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testParameters()" "org.apache.commons.math.analysis.NevilleInterpolator.NevilleInterpolator()"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealInterpolator.interpolate(double[],double[])"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.NevilleInterpolatorTest.testParameters()" "org.apache.commons.math.analysis.NevilleInterpolatorTest.fail(String)"
contain "org.apache.commons.math.analysis.NevilleInterpolatorTest" "org.apache.commons.math.analysis.NevilleInterpolatorTest.testParameters()"
contain "org.apache.commons.math.analysis.NevilleInterpolatorTest" "org.apache.commons.math.analysis.NevilleInterpolatorTest.partialerror(double[],double)"
reference "org.apache.commons.math.ArgumentOutsideDomainExceptionTest" "org.apache.commons.math.ArgumentOutsideDomainException"
reference "org.apache.commons.math.ArgumentOutsideDomainExceptionTest" "junit.framework.TestCase"
call "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.ArgumentOutsideDomainExceptionTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.ArgumentOutsideDomainExceptionTest" "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.ArgumentOutsideDomainExceptionTest()"
call "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.testConstructor()" "org.apache.commons.math.ArgumentOutsideDomainException.ArgumentOutsideDomainException(double,double,double)"
call "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.testConstructor()" "org.apache.commons.math.ArgumentOutsideDomainException.getCause()"
call "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.testConstructor()" "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.assertNull(Object)"
call "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.testConstructor()" "org.apache.commons.math.ArgumentOutsideDomainException.getMessage()"
call "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.testConstructor()" "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.assertNotNull(Object)"
call "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.testConstructor()" "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.assertTrue(boolean)"
call "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.testConstructor()" "org.apache.commons.math.ArgumentOutsideDomainException.getArgument()"
call "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.testConstructor()" "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.testConstructor()" "org.apache.commons.math.ArgumentOutsideDomainException.getMessage(Locale)"
call "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.testConstructor()" "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.assertFalse(boolean)"
contain "org.apache.commons.math.ArgumentOutsideDomainExceptionTest" "org.apache.commons.math.ArgumentOutsideDomainExceptionTest.testConstructor()"
reference "org.apache.commons.math.stat.descriptive.rank.MaxTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.rank.MaxTest" "org.apache.commons.math.stat.descriptive.rank.Max"
reference "org.apache.commons.math.stat.descriptive.rank.MaxTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.MaxTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.rank.MaxTest" "org.apache.commons.math.stat.descriptive.rank.MaxTest.MaxTest(String)"
reference "org.apache.commons.math.stat.descriptive.rank.MaxTest.suite()" "org.apache.commons.math.stat.descriptive.rank.MaxTest.class$org$apache$commons$math$stat$descriptive$rank$MaxTest : Class"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.suite()" "org.apache.commons.math.stat.descriptive.rank.MaxTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.rank.MaxTest" "org.apache.commons.math.stat.descriptive.rank.MaxTest.suite()"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.rank.Max.Max()"
contain "org.apache.commons.math.stat.descriptive.rank.MaxTest" "org.apache.commons.math.stat.descriptive.rank.MaxTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.rank.MaxTest.expectedValue()" "org.apache.commons.math.stat.descriptive.rank.MaxTest.max : double"
contain "org.apache.commons.math.stat.descriptive.rank.MaxTest" "org.apache.commons.math.stat.descriptive.rank.MaxTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.Max.Max()"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.Max.getResult()"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.MaxTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.Max.increment(double)"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.MaxTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.rank.Max.evaluate(double[])"
contain "org.apache.commons.math.stat.descriptive.rank.MaxTest" "org.apache.commons.math.stat.descriptive.rank.MaxTest.testSpecialValues()"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.testNaNs()" "org.apache.commons.math.stat.descriptive.rank.Max.Max()"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.testNaNs()" "org.apache.commons.math.stat.descriptive.rank.Max.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.testNaNs()" "org.apache.commons.math.stat.descriptive.rank.MaxTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.rank.MaxTest.testNaNs()" "org.apache.commons.math.stat.descriptive.rank.MaxTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.descriptive.rank.MaxTest" "org.apache.commons.math.stat.descriptive.rank.MaxTest.testNaNs()"
contain "org.apache.commons.math.stat.descriptive.rank.MaxTest" "org.apache.commons.math.stat.descriptive.rank.MaxTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.rank.MaxTest.stat : Max" "org.apache.commons.math.stat.descriptive.rank.Max"
contain "org.apache.commons.math.stat.descriptive.rank.MaxTest" "org.apache.commons.math.stat.descriptive.rank.MaxTest.stat : Max"
contain "org.apache.commons.math.stat.descriptive.rank.MaxTest" "org.apache.commons.math.stat.descriptive.rank.MaxTest.class$org$apache$commons$math$stat$descriptive$rank$MaxTest : Class"
reference "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction" "org.apache.commons.math.estimation.MinpackTest"
contain "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction" "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.buildChebyquadArray(int,double)"
call "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.ChebyquadFunction(int,int,double,double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.buildChebyquadArray(int,double)"
call "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.ChebyquadFunction(int,int,double,double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction" "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.ChebyquadFunction(int,int,double,double,double,double[])"
reference "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.n : int"
reference "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction" "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.n : int"
reference "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction" "org.apache.commons.math.estimation.MinpackTest.ChebyquadFunction.getResiduals()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "junit.framework.TestCase"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.one : double"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.two : float"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.three : int"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.mean : double"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.sumSq : double"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.sum : double"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.var : double"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.std : double"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.n : double"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.min : double"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.max : double"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.tolerance : double"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.ListUnivariateImplTest(String)"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.setUp()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.suite()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.class$org$apache$commons$math$stat$descriptive$ListUnivariateImplTest : Class"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.suite()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.suite()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getN()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.tolerance : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.one : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.two : float"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.three : int"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.n : double"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.sum : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSum()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.sumSq : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSumsq()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.var : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.std : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.mean : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.min : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMin()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.max : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMax()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.clear()"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testStats()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testN0andN1Conditions()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.one : double"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testN0andN1Conditions()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSkewness()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSkewAndKurtosis()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getKurtosis()"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSkewAndKurtosis()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.ListUnivariateImpl(List)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.setWindowSize(int)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.addValue(double)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.ListUnivariateImpl.getGeometricMean()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testProductAndGeometricMean()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.assertEquals(String,double,double,double)"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testProductAndGeometricMean()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.class$org$apache$commons$math$stat$descriptive$ListUnivariateImpl : Class"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance(Class)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.fail(String)"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getN()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.tolerance : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.one : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.two : float"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.TestUtils.serializeAndRecover(Object)"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.three : int"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.n : double"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.sum : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSum()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.sumSq : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getSumsq()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.var : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getVariance()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.std : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getStandardDeviation()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.mean : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.min : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMin()"
reference "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.max : double"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMax()"
call "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.clear()"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.testSerialization()"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.class$(String)"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.one : double"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.two : float"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.three : int"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.mean : double"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.sumSq : double"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.sum : double"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.var : double"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.std : double"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.n : double"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.min : double"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.max : double"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.tolerance : double"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.class$org$apache$commons$math$stat$descriptive$ListUnivariateImplTest : Class"
contain "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest" "org.apache.commons.math.stat.descriptive.ListUnivariateImplTest.class$org$apache$commons$math$stat$descriptive$ListUnivariateImpl : Class"
reference "org.apache.commons.math.MaxIterationsExceededExceptionTest" "org.apache.commons.math.MaxIterationsExceededException"
reference "org.apache.commons.math.MaxIterationsExceededExceptionTest" "junit.framework.TestCase"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.MaxIterationsExceededExceptionTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.MaxIterationsExceededExceptionTest" "org.apache.commons.math.MaxIterationsExceededExceptionTest.MaxIterationsExceededExceptionTest()"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testSimpleConstructor()" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int)"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testSimpleConstructor()" "org.apache.commons.math.MaxIterationsExceededException.getCause()"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testSimpleConstructor()" "org.apache.commons.math.MaxIterationsExceededExceptionTest.assertNull(Object)"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testSimpleConstructor()" "org.apache.commons.math.MaxIterationsExceededException.getMessage()"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testSimpleConstructor()" "org.apache.commons.math.MaxIterationsExceededExceptionTest.assertNotNull(Object)"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testSimpleConstructor()" "org.apache.commons.math.MaxIterationsExceededExceptionTest.assertTrue(boolean)"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testSimpleConstructor()" "org.apache.commons.math.MaxIterationsExceededException.getMaxIterations()"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testSimpleConstructor()" "org.apache.commons.math.MaxIterationsExceededExceptionTest.assertEquals(int,int)"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testSimpleConstructor()" "org.apache.commons.math.MaxIterationsExceededException.getMessage(Locale)"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testSimpleConstructor()" "org.apache.commons.math.MaxIterationsExceededExceptionTest.assertFalse(boolean)"
contain "org.apache.commons.math.MaxIterationsExceededExceptionTest" "org.apache.commons.math.MaxIterationsExceededExceptionTest.testSimpleConstructor()"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testComplexConstructor()" "org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int,String,Object[])"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testComplexConstructor()" "org.apache.commons.math.MaxIterationsExceededException.getCause()"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testComplexConstructor()" "org.apache.commons.math.MaxIterationsExceededExceptionTest.assertNull(Object)"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testComplexConstructor()" "org.apache.commons.math.MaxIterationsExceededException.getMessage()"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testComplexConstructor()" "org.apache.commons.math.MaxIterationsExceededExceptionTest.assertNotNull(Object)"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testComplexConstructor()" "org.apache.commons.math.MaxIterationsExceededExceptionTest.assertTrue(boolean)"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testComplexConstructor()" "org.apache.commons.math.MaxIterationsExceededException.getMaxIterations()"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testComplexConstructor()" "org.apache.commons.math.MaxIterationsExceededExceptionTest.assertEquals(int,int)"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testComplexConstructor()" "org.apache.commons.math.MaxIterationsExceededException.getMessage(Locale)"
call "org.apache.commons.math.MaxIterationsExceededExceptionTest.testComplexConstructor()" "org.apache.commons.math.MaxIterationsExceededExceptionTest.assertFalse(boolean)"
contain "org.apache.commons.math.MaxIterationsExceededExceptionTest" "org.apache.commons.math.MaxIterationsExceededExceptionTest.testComplexConstructor()"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1" "junit.framework.Assert"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.{...}" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.this$0 : DormandPrince54StepInterpolatorTest"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.{...}"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.copy()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedTime()"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
call "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.handleStep(StepInterpolator,boolean)"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.requiresDenseOutput()"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.reset()"
reference "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.this$0 : DormandPrince54StepInterpolatorTest" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest"
contain "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1" "org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest.1.this$0 : DormandPrince54StepInterpolatorTest"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.DescriptiveStatisticsTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.DescriptiveStatisticsTest(String)"
reference "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.suite()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.class$org$apache$commons$math$stat$descriptive$DescriptiveStatisticsTest : Class"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.suite()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.suite()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.createDescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.createDescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getMean()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.deepMean.deepMean()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testSetterInjection()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setMeanImpl(UnivariateStatistic)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testSetterInjection()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testPercentileSetter()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testPercentileSetter()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.addValue(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testPercentileSetter()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.getPercentile(double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testPercentileSetter()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testPercentileSetter()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.goodPercentile.goodPercentile()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testPercentileSetter()" "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.setPercentileImpl(UnivariateStatistic)"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testPercentileSetter()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.subPercentile.subPercentile()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testPercentileSetter()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.badPercentile.badPercentile()"
call "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testPercentileSetter()" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.fail(String)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.testPercentileSetter()"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.class$(String)"
contain "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest.class$org$apache$commons$math$stat$descriptive$DescriptiveStatisticsTest : Class"
reference "org.apache.commons.math.linear.MatrixUtilsTest" "double[]"
reference "org.apache.commons.math.linear.MatrixUtilsTest" "double[][]"
reference "org.apache.commons.math.linear.MatrixUtilsTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.RealMatrixImpl"
reference "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.BigMatrixImpl"
reference "org.apache.commons.math.linear.MatrixUtilsTest" "junit.framework.TestCase"
reference "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtils"
reference "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.RealMatrix"
reference "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.BigMatrix"
call "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.testData : double[][]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.nullMatrix : double[][]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.row : double[]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.bigRow : BigDecimal[]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.stringRow : String[]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.rowMatrix : double[][]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.bigRowMatrix : BigDecimal[][]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.stringRowMatrix : String[][]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.col : double[]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.bigCol : BigDecimal[]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.stringCol : String[]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.nullDoubleArray : double[]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.colMatrix : double[][]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.bigColMatrix : BigDecimal[][]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)" "org.apache.commons.math.linear.MatrixUtilsTest.stringColMatrix : String[][]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.MatrixUtilsTest(String)"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.setUp()"
reference "org.apache.commons.math.linear.MatrixUtilsTest.suite()" "org.apache.commons.math.linear.MatrixUtilsTest.class$org$apache$commons$math$linear$MatrixUtilsTest : Class"
call "org.apache.commons.math.linear.MatrixUtilsTest.suite()" "org.apache.commons.math.linear.MatrixUtilsTest.class$(String)"
call "org.apache.commons.math.linear.MatrixUtilsTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.linear.MatrixUtilsTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.suite()"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRealMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.testData : double[][]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRealMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRealMatrix()" "org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][])"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRealMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.assertEquals(Object,Object)"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRealMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.fail(String)"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRealMatrix()"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.testData : double[][]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix()" "org.apache.commons.math.linear.MatrixUtils.createBigMatrix(double[][])"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.assertEquals(Object,Object)"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.bigColMatrix : BigDecimal[][]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix()" "org.apache.commons.math.linear.MatrixUtils.createBigMatrix(BigDecimal[][])"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.stringColMatrix : String[][]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix()" "org.apache.commons.math.linear.MatrixUtils.createBigMatrix(String[][])"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.fail(String)"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.nullMatrix : double[][]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigMatrix()"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowRealMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.row : double[]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowRealMatrix()" "org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(double[])"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowRealMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.rowMatrix : double[][]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowRealMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowRealMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.assertEquals(Object,Object)"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowRealMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.fail(String)"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowRealMatrix()"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.row : double[]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(double[])"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.rowMatrix : double[][]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.assertEquals(Object,Object)"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.bigRow : BigDecimal[]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(BigDecimal[])"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.bigRowMatrix : BigDecimal[][]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.stringRow : String[]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(String[])"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.stringRowMatrix : String[][]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.fail(String)"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.nullDoubleArray : double[]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.testCreateRowBigMatrix()"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnRealMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.col : double[]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnRealMatrix()" "org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(double[])"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnRealMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.colMatrix : double[][]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnRealMatrix()" "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][])"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnRealMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.assertEquals(Object,Object)"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnRealMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.fail(String)"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnRealMatrix()"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.col : double[]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(double[])"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.colMatrix : double[][]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(double[][])"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.assertEquals(Object,Object)"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.bigCol : BigDecimal[]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(BigDecimal[])"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.bigColMatrix : BigDecimal[][]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(BigDecimal[][])"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.stringCol : String[]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(String[])"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.stringColMatrix : String[][]"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(String[][])"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.fail(String)"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.nullDoubleArray : double[]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.testCreateColumnBigMatrix()"
call "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityMatrix(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getRowDimension()"
call "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityMatrix(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityMatrix(RealMatrix)" "org.apache.commons.math.linear.RealMatrix.getEntry(int,int)"
call "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityMatrix(RealMatrix)" "org.apache.commons.math.linear.MatrixUtilsTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityMatrix(RealMatrix)"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateIdentityMatrix()" "org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(int)"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateIdentityMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityMatrix(RealMatrix)"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.testCreateIdentityMatrix()"
call "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityBigMatrix(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getRowDimension()"
call "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityBigMatrix(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getColumnDimension()"
call "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityBigMatrix(BigMatrix)" "org.apache.commons.math.linear.BigMatrix.getEntry(int,int)"
reference "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityBigMatrix(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.ONE : BigDecimal"
call "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityBigMatrix(BigMatrix)" "org.apache.commons.math.linear.MatrixUtilsTest.assertEquals(Object,Object)"
reference "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityBigMatrix(BigMatrix)" "org.apache.commons.math.linear.BigMatrixImpl.ZERO : BigDecimal"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityBigMatrix(BigMatrix)"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigIdentityMatrix()" "org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(int)"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigIdentityMatrix()" "org.apache.commons.math.linear.MatrixUtilsTest.checkIdentityBigMatrix(BigMatrix)"
call "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigIdentityMatrix()" "org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(int)"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.testCreateBigIdentityMatrix()"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.class$(String)"
reference "org.apache.commons.math.linear.MatrixUtilsTest.testData : double[][]" "double[][]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.testData : double[][]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.nullMatrix : double[][]" "double[][]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.nullMatrix : double[][]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.row : double[]" "double[]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.row : double[]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.bigRow : BigDecimal[]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.stringRow : String[]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.rowMatrix : double[][]" "double[][]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.rowMatrix : double[][]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.bigRowMatrix : BigDecimal[][]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.stringRowMatrix : String[][]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.col : double[]" "double[]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.col : double[]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.bigCol : BigDecimal[]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.stringCol : String[]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.nullDoubleArray : double[]" "double[]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.nullDoubleArray : double[]"
reference "org.apache.commons.math.linear.MatrixUtilsTest.colMatrix : double[][]" "double[][]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.colMatrix : double[][]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.bigColMatrix : BigDecimal[][]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.stringColMatrix : String[][]"
contain "org.apache.commons.math.linear.MatrixUtilsTest" "org.apache.commons.math.linear.MatrixUtilsTest.class$org$apache$commons$math$linear$MatrixUtilsTest : Class"
reference "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.Rotation"
reference "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.Vector3D"
reference "org.apache.commons.math.geometry.RotationTest" "double[]"
reference "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.NotARotationMatrixException"
reference "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.CardanEulerSingularityException"
reference "org.apache.commons.math.geometry.RotationTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.geometry.RotationTest" "junit.framework.TestCase"
call "org.apache.commons.math.geometry.RotationTest.RotationTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.RotationTest(String)"
call "org.apache.commons.math.geometry.RotationTest.testIdentity()" "org.apache.commons.math.geometry.Rotation.Rotation()"
reference "org.apache.commons.math.geometry.RotationTest.testIdentity()" "org.apache.commons.math.geometry.Vector3D.plusI : Vector3D"
call "org.apache.commons.math.geometry.RotationTest.testIdentity()" "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.testIdentity()" "org.apache.commons.math.geometry.RotationTest.checkVector(Vector3D,Vector3D)"
reference "org.apache.commons.math.geometry.RotationTest.testIdentity()" "org.apache.commons.math.geometry.Vector3D.plusJ : Vector3D"
reference "org.apache.commons.math.geometry.RotationTest.testIdentity()" "org.apache.commons.math.geometry.Vector3D.plusK : Vector3D"
call "org.apache.commons.math.geometry.RotationTest.testIdentity()" "org.apache.commons.math.geometry.Rotation.getAngle()"
call "org.apache.commons.math.geometry.RotationTest.testIdentity()" "org.apache.commons.math.geometry.RotationTest.checkAngle(double,double)"
call "org.apache.commons.math.geometry.RotationTest.testIdentity()" "org.apache.commons.math.geometry.Rotation.Rotation(double,double,double,double,boolean)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.testIdentity()"
call "org.apache.commons.math.geometry.RotationTest.testAxisAngle()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.RotationTest.testAxisAngle()" "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)"
reference "org.apache.commons.math.geometry.RotationTest.testAxisAngle()" "org.apache.commons.math.geometry.Vector3D.plusI : Vector3D"
call "org.apache.commons.math.geometry.RotationTest.testAxisAngle()" "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)"
reference "org.apache.commons.math.geometry.RotationTest.testAxisAngle()" "org.apache.commons.math.geometry.Vector3D.plusJ : Vector3D"
call "org.apache.commons.math.geometry.RotationTest.testAxisAngle()" "org.apache.commons.math.geometry.RotationTest.checkVector(Vector3D,Vector3D)"
reference "org.apache.commons.math.geometry.RotationTest.testAxisAngle()" "org.apache.commons.math.geometry.Vector3D.plusK : Vector3D"
call "org.apache.commons.math.geometry.RotationTest.testAxisAngle()" "org.apache.commons.math.geometry.Rotation.getAxis()"
call "org.apache.commons.math.geometry.RotationTest.testAxisAngle()" "org.apache.commons.math.geometry.Rotation.getAngle()"
call "org.apache.commons.math.geometry.RotationTest.testAxisAngle()" "org.apache.commons.math.geometry.RotationTest.checkAngle(double,double)"
call "org.apache.commons.math.geometry.RotationTest.testAxisAngle()" "org.apache.commons.math.geometry.RotationTest.fail(String)"
call "org.apache.commons.math.geometry.RotationTest.testAxisAngle()" "org.apache.commons.math.geometry.Rotation.Rotation()"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.testAxisAngle()"
call "org.apache.commons.math.geometry.RotationTest.testRevert()" "org.apache.commons.math.geometry.Rotation.Rotation(double,double,double,double,boolean)"
call "org.apache.commons.math.geometry.RotationTest.testRevert()" "org.apache.commons.math.geometry.Rotation.revert()"
call "org.apache.commons.math.geometry.RotationTest.testRevert()" "org.apache.commons.math.geometry.Rotation.applyTo(Rotation)"
call "org.apache.commons.math.geometry.RotationTest.testRevert()" "org.apache.commons.math.geometry.RotationTest.checkRotation(Rotation,double,double,double,double)"
call "org.apache.commons.math.geometry.RotationTest.testRevert()" "org.apache.commons.math.geometry.Rotation.getAngle()"
call "org.apache.commons.math.geometry.RotationTest.testRevert()" "org.apache.commons.math.geometry.RotationTest.assertEquals(double,double,double)"
call "org.apache.commons.math.geometry.RotationTest.testRevert()" "org.apache.commons.math.geometry.Rotation.getAxis()"
call "org.apache.commons.math.geometry.RotationTest.testRevert()" "org.apache.commons.math.geometry.Vector3D.dotProduct(Vector3D,Vector3D)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.testRevert()"
call "org.apache.commons.math.geometry.RotationTest.testVectorOnePair()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.RotationTest.testVectorOnePair()" "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.testVectorOnePair()" "org.apache.commons.math.geometry.Vector3D.getNorm()"
call "org.apache.commons.math.geometry.RotationTest.testVectorOnePair()" "org.apache.commons.math.geometry.Vector3D.multiply(double)"
call "org.apache.commons.math.geometry.RotationTest.testVectorOnePair()" "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.testVectorOnePair()" "org.apache.commons.math.geometry.RotationTest.checkVector(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.testVectorOnePair()" "org.apache.commons.math.geometry.Vector3D.negate()"
call "org.apache.commons.math.geometry.RotationTest.testVectorOnePair()" "org.apache.commons.math.geometry.Rotation.getAngle()"
call "org.apache.commons.math.geometry.RotationTest.testVectorOnePair()" "org.apache.commons.math.geometry.RotationTest.checkAngle(double,double)"
call "org.apache.commons.math.geometry.RotationTest.testVectorOnePair()" "org.apache.commons.math.geometry.Vector3D.Vector3D()"
call "org.apache.commons.math.geometry.RotationTest.testVectorOnePair()" "org.apache.commons.math.geometry.RotationTest.fail(String)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.testVectorOnePair()"
call "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)"
reference "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Vector3D.plusI : Vector3D"
call "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)"
reference "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Vector3D.plusK : Vector3D"
call "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.RotationTest.checkVector(Vector3D,Vector3D)"
reference "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Vector3D.plusJ : Vector3D"
reference "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Vector3D.minusI : Vector3D"
call "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Vector3D.negate()"
call "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Rotation.getAxis()"
call "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Vector3D.dotProduct(Vector3D,Vector3D)"
reference "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Vector3D.minusK : Vector3D"
call "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Rotation.getAngle()"
call "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.RotationTest.checkAngle(double,double)"
call "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.RotationTest.checkRotation(Rotation,double,double,double,double)"
call "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Vector3D.crossProduct(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.Vector3D.Vector3D()"
call "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()" "org.apache.commons.math.geometry.RotationTest.fail(String)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.testVectorTwoPairs()"
call "org.apache.commons.math.geometry.RotationTest.testMatrix()" "org.apache.commons.math.geometry.Rotation.Rotation(double[][],double)"
call "org.apache.commons.math.geometry.RotationTest.testMatrix()" "org.apache.commons.math.geometry.RotationTest.fail(String)"
call "org.apache.commons.math.geometry.RotationTest.testMatrix()" "org.apache.commons.math.geometry.RotationTest.checkRotation(Rotation,double,double,double,double)"
reference "org.apache.commons.math.geometry.RotationTest.testMatrix()" "org.apache.commons.math.geometry.Vector3D.plusI : Vector3D"
call "org.apache.commons.math.geometry.RotationTest.testMatrix()" "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)"
reference "org.apache.commons.math.geometry.RotationTest.testMatrix()" "org.apache.commons.math.geometry.Vector3D.plusK : Vector3D"
call "org.apache.commons.math.geometry.RotationTest.testMatrix()" "org.apache.commons.math.geometry.RotationTest.checkVector(Vector3D,Vector3D)"
reference "org.apache.commons.math.geometry.RotationTest.testMatrix()" "org.apache.commons.math.geometry.Vector3D.plusJ : Vector3D"
call "org.apache.commons.math.geometry.RotationTest.testMatrix()" "org.apache.commons.math.geometry.Rotation.getMatrix()"
call "org.apache.commons.math.geometry.RotationTest.testMatrix()" "org.apache.commons.math.geometry.RotationTest.assertTrue(boolean)"
call "org.apache.commons.math.geometry.RotationTest.testMatrix()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.RotationTest.testMatrix()" "org.apache.commons.math.geometry.Rotation.getAngle()"
call "org.apache.commons.math.geometry.RotationTest.testMatrix()" "org.apache.commons.math.geometry.RotationTest.checkAngle(double,double)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.testMatrix()"
reference "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.RotationOrder.XYZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.RotationOrder.XZY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.RotationOrder.YXZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.RotationOrder.YZX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.RotationOrder.ZXY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.RotationOrder.ZYX : RotationOrder"
call "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.Rotation.Rotation(RotationOrder,double,double,double)"
call "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)"
call "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.RotationTest.checkAngle(double,double)"
reference "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.RotationOrder.XYX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.RotationOrder.XZX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.RotationOrder.YXY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.RotationOrder.YZY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.RotationOrder.ZXZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testAngles()" "org.apache.commons.math.geometry.RotationOrder.ZYZ : RotationOrder"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.testAngles()"
reference "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.RotationOrder.XYZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.RotationOrder.XZY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.RotationOrder.YXZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.RotationOrder.YZX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.RotationOrder.ZXY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.RotationOrder.ZYX : RotationOrder"
call "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.Rotation.Rotation(RotationOrder,double,double,double)"
call "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.Rotation.getAngles(RotationOrder)"
call "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.RotationTest.fail(String)"
reference "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.RotationOrder.XYX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.RotationOrder.XZX : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.RotationOrder.YXY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.RotationOrder.YZY : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.RotationOrder.ZXZ : RotationOrder"
reference "org.apache.commons.math.geometry.RotationTest.testSingularities()" "org.apache.commons.math.geometry.RotationOrder.ZYZ : RotationOrder"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.testSingularities()"
call "org.apache.commons.math.geometry.RotationTest.testQuaternion()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.RotationTest.testQuaternion()" "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)"
call "org.apache.commons.math.geometry.RotationTest.testQuaternion()" "org.apache.commons.math.geometry.Rotation.getQ0()"
call "org.apache.commons.math.geometry.RotationTest.testQuaternion()" "org.apache.commons.math.geometry.Rotation.getQ1()"
call "org.apache.commons.math.geometry.RotationTest.testQuaternion()" "org.apache.commons.math.geometry.Rotation.getQ2()"
call "org.apache.commons.math.geometry.RotationTest.testQuaternion()" "org.apache.commons.math.geometry.Rotation.getQ3()"
call "org.apache.commons.math.geometry.RotationTest.testQuaternion()" "org.apache.commons.math.geometry.Rotation.Rotation(double,double,double,double,boolean)"
call "org.apache.commons.math.geometry.RotationTest.testQuaternion()" "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.testQuaternion()" "org.apache.commons.math.geometry.RotationTest.checkVector(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.testQuaternion()" "org.apache.commons.math.geometry.RotationTest.checkRotation(Rotation,double,double,double,double)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.testQuaternion()"
call "org.apache.commons.math.geometry.RotationTest.testCompose()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.RotationTest.testCompose()" "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)"
call "org.apache.commons.math.geometry.RotationTest.testCompose()" "org.apache.commons.math.geometry.Rotation.applyTo(Rotation)"
call "org.apache.commons.math.geometry.RotationTest.testCompose()" "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.testCompose()" "org.apache.commons.math.geometry.RotationTest.checkVector(Vector3D,Vector3D)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.testCompose()"
call "org.apache.commons.math.geometry.RotationTest.testComposeInverse()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.RotationTest.testComposeInverse()" "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)"
call "org.apache.commons.math.geometry.RotationTest.testComposeInverse()" "org.apache.commons.math.geometry.Rotation.applyInverseTo(Rotation)"
call "org.apache.commons.math.geometry.RotationTest.testComposeInverse()" "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.testComposeInverse()" "org.apache.commons.math.geometry.Rotation.applyInverseTo(Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.testComposeInverse()" "org.apache.commons.math.geometry.RotationTest.checkVector(Vector3D,Vector3D)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.testComposeInverse()"
call "org.apache.commons.math.geometry.RotationTest.testApplyInverseTo()" "org.apache.commons.math.geometry.Vector3D.Vector3D(double,double,double)"
call "org.apache.commons.math.geometry.RotationTest.testApplyInverseTo()" "org.apache.commons.math.geometry.Rotation.Rotation(Vector3D,double)"
call "org.apache.commons.math.geometry.RotationTest.testApplyInverseTo()" "org.apache.commons.math.geometry.Rotation.applyTo(Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.testApplyInverseTo()" "org.apache.commons.math.geometry.Rotation.applyInverseTo(Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.testApplyInverseTo()" "org.apache.commons.math.geometry.RotationTest.checkVector(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.testApplyInverseTo()" "org.apache.commons.math.geometry.Rotation.Rotation()"
reference "org.apache.commons.math.geometry.RotationTest.testApplyInverseTo()" "org.apache.commons.math.geometry.Vector3D.plusK : Vector3D"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.testApplyInverseTo()"
call "org.apache.commons.math.geometry.RotationTest.checkVector(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.subtract(Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.checkVector(Vector3D,Vector3D)" "org.apache.commons.math.geometry.Vector3D.getNorm()"
call "org.apache.commons.math.geometry.RotationTest.checkVector(Vector3D,Vector3D)" "org.apache.commons.math.geometry.RotationTest.assertTrue(boolean)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.checkVector(Vector3D,Vector3D)"
call "org.apache.commons.math.geometry.RotationTest.checkAngle(double,double)" "org.apache.commons.math.geometry.RotationTest.assertTrue(boolean)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.checkAngle(double,double)"
call "org.apache.commons.math.geometry.RotationTest.checkRotation(Rotation,double,double,double,double)" "org.apache.commons.math.geometry.Rotation.Rotation(double,double,double,double,boolean)"
call "org.apache.commons.math.geometry.RotationTest.checkRotation(Rotation,double,double,double,double)" "org.apache.commons.math.geometry.Rotation.applyInverseTo(Rotation)"
call "org.apache.commons.math.geometry.RotationTest.checkRotation(Rotation,double,double,double,double)" "org.apache.commons.math.geometry.Rotation.getAngle()"
call "org.apache.commons.math.geometry.RotationTest.checkRotation(Rotation,double,double,double,double)" "org.apache.commons.math.geometry.RotationTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.checkRotation(Rotation,double,double,double,double)"
reference "org.apache.commons.math.geometry.RotationTest.suite()" "org.apache.commons.math.geometry.RotationTest.class$org$apache$commons$math$geometry$RotationTest : Class"
call "org.apache.commons.math.geometry.RotationTest.suite()" "org.apache.commons.math.geometry.RotationTest.class$(String)"
call "org.apache.commons.math.geometry.RotationTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.suite()"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.class$(String)"
contain "org.apache.commons.math.geometry.RotationTest" "org.apache.commons.math.geometry.RotationTest.class$org$apache$commons$math$geometry$RotationTest : Class"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.WeightedMeasurement"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)" "org.apache.commons.math.estimation.WeightedMeasurement.WeightedMeasurement(double,double,boolean)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.factors : double[]"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.setIgnored(boolean)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.getTheoreticalValue()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.factors : double[]"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.getTheoreticalValue()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.getTheoreticalValue()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.getTheoreticalValue()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.parameters : EstimatedParameter[]"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.getPartial(EstimatedParameter)" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.factors : double[]"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.getPartial(EstimatedParameter)"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.getParameters()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.parameters : EstimatedParameter[]"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.getParameters()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.factors : double[]" "double[]"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.factors : double[]"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.parameters : EstimatedParameter[]" "org.apache.commons.math.estimation.EstimatedParameter[]"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.parameters : EstimatedParameter[]"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.serialVersionUID : long"
reference "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.EulerIntegrator"
reference "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.TestProblemAbstract"
reference "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.TestProblemHandler"
reference "org.apache.commons.math.ode.EulerIntegratorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.EulerIntegratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.TestProblemFactory"
reference "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.FirstOrderIntegrator"
call "org.apache.commons.math.ode.EulerIntegratorTest.EulerIntegratorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.EulerIntegratorTest.EulerIntegratorTest(String)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.EulerIntegrator.EulerIntegrator(double)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.EulerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDimensionCheck()" "org.apache.commons.math.ode.EulerIntegratorTest.fail(String)"
contain "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.EulerIntegratorTest.testDimensionCheck()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemFactory.getProblems()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.clone()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getFinalTime()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getInitialTime()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.EulerIntegrator.EulerIntegrator(double)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getSwitchingFunctions()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.addSwitchingFunction(SwitchingFunction,double,double,int)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getInitialState()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemAbstract.getDimension()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.EulerIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()" "org.apache.commons.math.ode.EulerIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.EulerIntegratorTest.testDecreasingSteps()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.EulerIntegrator.EulerIntegrator(double)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getLastError()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.EulerIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.EulerIntegratorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.getName()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()" "org.apache.commons.math.ode.EulerIntegratorTest.assertEquals(String,String)"
contain "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.EulerIntegratorTest.testSmallStep()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.EulerIntegrator.EulerIntegrator(double)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(TestProblemAbstract,FirstOrderIntegrator)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getLastError()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.EulerIntegratorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError()"
call "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()" "org.apache.commons.math.ode.EulerIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.EulerIntegratorTest.testBigStep()"
reference "org.apache.commons.math.ode.EulerIntegratorTest.suite()" "org.apache.commons.math.ode.EulerIntegratorTest.class$org$apache$commons$math$ode$EulerIntegratorTest : Class"
call "org.apache.commons.math.ode.EulerIntegratorTest.suite()" "org.apache.commons.math.ode.EulerIntegratorTest.class$(String)"
call "org.apache.commons.math.ode.EulerIntegratorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.EulerIntegratorTest.suite()"
contain "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.EulerIntegratorTest.class$(String)"
contain "org.apache.commons.math.ode.EulerIntegratorTest" "org.apache.commons.math.ode.EulerIntegratorTest.class$org$apache$commons$math$ode$EulerIntegratorTest : Class"
reference "org.apache.commons.math.optimization.NelderMeadTest.2" "org.apache.commons.math.optimization.CostFunction"
reference "org.apache.commons.math.optimization.NelderMeadTest.2" "org.apache.commons.math.optimization.NelderMeadTest"
reference "org.apache.commons.math.optimization.NelderMeadTest.2.{...}" "org.apache.commons.math.optimization.NelderMeadTest.2.this$0 : NelderMeadTest"
contain "org.apache.commons.math.optimization.NelderMeadTest.2" "org.apache.commons.math.optimization.NelderMeadTest.2.{...}"
reference "org.apache.commons.math.optimization.NelderMeadTest.2.cost(double[])" "org.apache.commons.math.optimization.NelderMeadTest.2.this$0 : NelderMeadTest"
call "org.apache.commons.math.optimization.NelderMeadTest.2.cost(double[])" "org.apache.commons.math.optimization.NelderMeadTest.access$004(NelderMeadTest)"
contain "org.apache.commons.math.optimization.NelderMeadTest.2" "org.apache.commons.math.optimization.NelderMeadTest.2.cost(double[])"
reference "org.apache.commons.math.optimization.NelderMeadTest.2.this$0 : NelderMeadTest" "org.apache.commons.math.optimization.NelderMeadTest"
contain "org.apache.commons.math.optimization.NelderMeadTest.2" "org.apache.commons.math.optimization.NelderMeadTest.2.this$0 : NelderMeadTest"
reference "org.apache.commons.math.optimization.NelderMeadTest.3" "org.apache.commons.math.optimization.CostFunction"
reference "org.apache.commons.math.optimization.NelderMeadTest.3" "org.apache.commons.math.optimization.NelderMeadTest"
reference "org.apache.commons.math.optimization.NelderMeadTest.3.{...}" "org.apache.commons.math.optimization.NelderMeadTest.3.this$0 : NelderMeadTest"
contain "org.apache.commons.math.optimization.NelderMeadTest.3" "org.apache.commons.math.optimization.NelderMeadTest.3.{...}"
reference "org.apache.commons.math.optimization.NelderMeadTest.3.cost(double[])" "org.apache.commons.math.optimization.NelderMeadTest.3.this$0 : NelderMeadTest"
call "org.apache.commons.math.optimization.NelderMeadTest.3.cost(double[])" "org.apache.commons.math.optimization.NelderMeadTest.access$004(NelderMeadTest)"
contain "org.apache.commons.math.optimization.NelderMeadTest.3" "org.apache.commons.math.optimization.NelderMeadTest.3.cost(double[])"
reference "org.apache.commons.math.optimization.NelderMeadTest.3.this$0 : NelderMeadTest" "org.apache.commons.math.optimization.NelderMeadTest"
contain "org.apache.commons.math.optimization.NelderMeadTest.3" "org.apache.commons.math.optimization.NelderMeadTest.3.this$0 : NelderMeadTest"
reference "org.apache.commons.math.optimization.NelderMeadTest.1" "org.apache.commons.math.optimization.CostException"
reference "org.apache.commons.math.optimization.NelderMeadTest.1" "org.apache.commons.math.optimization.CostFunction"
reference "org.apache.commons.math.optimization.NelderMeadTest.1.{...}" "org.apache.commons.math.optimization.NelderMeadTest.1.this$0 : NelderMeadTest"
contain "org.apache.commons.math.optimization.NelderMeadTest.1" "org.apache.commons.math.optimization.NelderMeadTest.1.{...}"
call "org.apache.commons.math.optimization.NelderMeadTest.1.cost(double[])" "org.apache.commons.math.optimization.CostException.CostException(String,Object[])"
call "org.apache.commons.math.optimization.NelderMeadTest.1.cost(double[])" "org.apache.commons.math.optimization.CostException.CostException(Throwable)"
contain "org.apache.commons.math.optimization.NelderMeadTest.1" "org.apache.commons.math.optimization.NelderMeadTest.1.cost(double[])"
reference "org.apache.commons.math.optimization.NelderMeadTest.1.this$0 : NelderMeadTest" "org.apache.commons.math.optimization.NelderMeadTest"
contain "org.apache.commons.math.optimization.NelderMeadTest.1" "org.apache.commons.math.optimization.NelderMeadTest.1.this$0 : NelderMeadTest"
reference "org.apache.commons.math.distribution.ExponentialDistributionTest" "org.apache.commons.math.distribution.ExponentialDistributionImpl"
reference "org.apache.commons.math.distribution.ExponentialDistributionTest" "org.apache.commons.math.distribution.ExponentialDistribution"
reference "org.apache.commons.math.distribution.ExponentialDistributionTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest"
reference "org.apache.commons.math.distribution.ExponentialDistributionTest" "org.apache.commons.math.distribution.ContinuousDistribution"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.ExponentialDistributionTest(String)" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(String)"
contain "org.apache.commons.math.distribution.ExponentialDistributionTest" "org.apache.commons.math.distribution.ExponentialDistributionTest.ExponentialDistributionTest(String)"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.makeDistribution()" "org.apache.commons.math.distribution.ExponentialDistributionImpl.ExponentialDistributionImpl(double)"
contain "org.apache.commons.math.distribution.ExponentialDistributionTest" "org.apache.commons.math.distribution.ExponentialDistributionTest.makeDistribution()"
contain "org.apache.commons.math.distribution.ExponentialDistributionTest" "org.apache.commons.math.distribution.ExponentialDistributionTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.ExponentialDistributionTest" "org.apache.commons.math.distribution.ExponentialDistributionTest.makeCumulativeTestValues()"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.ExponentialDistributionTest.setCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.ExponentialDistributionTest.setCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.ExponentialDistributionTest.verifyCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.ExponentialDistributionTest" "org.apache.commons.math.distribution.ExponentialDistributionTest.testCumulativeProbabilityExtremes()"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.ExponentialDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.ExponentialDistributionTest.setInverseCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.ExponentialDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.ExponentialDistributionTest" "org.apache.commons.math.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilityExtremes()"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testCumulativeProbability2()" "org.apache.commons.math.distribution.ExponentialDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testCumulativeProbability2()" "org.apache.commons.math.distribution.ContinuousDistribution.cumulativeProbability(double,double)"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testCumulativeProbability2()" "org.apache.commons.math.distribution.ExponentialDistributionTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.distribution.ExponentialDistributionTest" "org.apache.commons.math.distribution.ExponentialDistributionTest.testCumulativeProbability2()"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testMeanAccessors()" "org.apache.commons.math.distribution.ExponentialDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testMeanAccessors()" "org.apache.commons.math.distribution.ExponentialDistribution.getMean()"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testMeanAccessors()" "org.apache.commons.math.distribution.ExponentialDistributionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testMeanAccessors()" "org.apache.commons.math.distribution.ExponentialDistribution.setMean(double)"
call "org.apache.commons.math.distribution.ExponentialDistributionTest.testMeanAccessors()" "org.apache.commons.math.distribution.ExponentialDistributionTest.fail(String)"
contain "org.apache.commons.math.distribution.ExponentialDistributionTest" "org.apache.commons.math.distribution.ExponentialDistributionTest.testMeanAccessors()"
reference "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics"
reference "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.SynchronizedDescriptiveStatisticsTest(String)" "org.apache.commons.math.stat.descriptive.DescriptiveStatisticsAbstractTest.DescriptiveStatisticsAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.SynchronizedDescriptiveStatisticsTest(String)"
reference "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.suite()" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.class$org$apache$commons$math$stat$descriptive$SynchronizedDescriptiveStatisticsTest : Class"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.suite()" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.suite()"
call "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.createDescriptiveStatistics()" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.SynchronizedDescriptiveStatistics()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.createDescriptiveStatistics()"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.class$(String)"
contain "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest" "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest.class$org$apache$commons$math$stat$descriptive$SynchronizedDescriptiveStatisticsTest : Class"
reference "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.analysis.MullerSolver"
reference "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.analysis.QuinticFunction"
reference "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.analysis.Expm1Function"
reference "org.apache.commons.math.analysis.MullerSolverTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.analysis.UnivariateRealSolver"
call "org.apache.commons.math.analysis.MullerSolverTest.MullerSolverTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.analysis.MullerSolverTest.MullerSolverTest()"
call "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction()" "org.apache.commons.math.analysis.MullerSolver.MullerSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction()" "org.apache.commons.math.analysis.MullerSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction()"
call "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction2()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction2()" "org.apache.commons.math.analysis.MullerSolver.MullerSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction2()" "org.apache.commons.math.analysis.MullerSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction2()" "org.apache.commons.math.analysis.MullerSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction2()" "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)"
call "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction2()" "org.apache.commons.math.analysis.MullerSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.analysis.MullerSolverTest.testSinFunction2()"
call "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.MullerSolver.MullerSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction()" "org.apache.commons.math.analysis.MullerSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction()"
call "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction2()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction2()" "org.apache.commons.math.analysis.MullerSolver.MullerSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction2()" "org.apache.commons.math.analysis.MullerSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction2()" "org.apache.commons.math.analysis.MullerSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction2()" "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)"
call "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction2()" "org.apache.commons.math.analysis.MullerSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.analysis.MullerSolverTest.testQuinticFunction2()"
call "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function()" "org.apache.commons.math.analysis.Expm1Function.Expm1Function()"
call "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function()" "org.apache.commons.math.analysis.MullerSolver.MullerSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function()" "org.apache.commons.math.analysis.UnivariateRealSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function()" "org.apache.commons.math.analysis.UnivariateRealSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function()" "org.apache.commons.math.analysis.MullerSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function()"
call "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function2()" "org.apache.commons.math.analysis.Expm1Function.Expm1Function()"
call "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function2()" "org.apache.commons.math.analysis.MullerSolver.MullerSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function2()" "org.apache.commons.math.analysis.MullerSolver.getAbsoluteAccuracy()"
call "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function2()" "org.apache.commons.math.analysis.MullerSolver.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function2()" "org.apache.commons.math.analysis.MullerSolver.solve2(double,double)"
call "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function2()" "org.apache.commons.math.analysis.MullerSolverTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function2()"
call "org.apache.commons.math.analysis.MullerSolverTest.testParameters()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.MullerSolverTest.testParameters()" "org.apache.commons.math.analysis.MullerSolver.MullerSolver(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.MullerSolverTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealSolver.solve(double,double)"
call "org.apache.commons.math.analysis.MullerSolverTest.testParameters()" "org.apache.commons.math.analysis.MullerSolverTest.fail(String)"
contain "org.apache.commons.math.analysis.MullerSolverTest" "org.apache.commons.math.analysis.MullerSolverTest.testParameters()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.SimpleEstimationProblem"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])" "org.apache.commons.math.estimation.SimpleEstimationProblem.SimpleEstimationProblem()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.addMeasurement(WeightedMeasurement)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.getParameters()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.addParameter(EstimatedParameter)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler" "junit.framework.Assert"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.VariableStepHandler()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.reset()"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.VariableStepHandler()"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.reset()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.firstTime : boolean"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.reset()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.minStep : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.reset()" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.maxStep : double"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.reset()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.firstTime : boolean"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.minStep : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.maxStep : double"
call "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.handleStep(StepInterpolator,boolean)"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.firstTime : boolean"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.minStep : double"
contain "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler" "org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest.VariableStepHandler.maxStep : double"
reference "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "double[]"
reference "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic"
reference "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.moment.SecondMoment"
reference "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest"
reference "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest(String)"
reference "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.smallSamples : double[][]"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.getUnivariateStatistic()"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testIncrementation()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.getUnivariateStatistic()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testIncrementation()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.clear()"
reference "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testIncrementation()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testArray : double[]"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testIncrementation()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.increment(double)"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testIncrementation()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testIncrementation()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.getResult()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testIncrementation()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.getTolerance()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testIncrementation()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testIncrementation()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.getN()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testIncrementation()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.assertEquals(long,long)"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testIncrementation()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testIncrementation()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.getUnivariateStatistic()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerialization()" "org.apache.commons.math.TestUtils.checkSerializedEquality(Object)"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.clear()"
reference "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testArray : double[]"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.increment(double)"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerialization()" "org.apache.commons.math.TestUtils.serializeAndRecover(Object)"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.getResult()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.getTolerance()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerialization()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testSerialization()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.getUnivariateStatistic()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.assertEquals(String,int,int)"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.increment(double)"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testEqualsAndHashCode()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.clear()"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testEqualsAndHashCode()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testMomentSmallSamples()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.getUnivariateStatistic()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testMomentSmallSamples()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.getResult()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testMomentSmallSamples()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testMomentSmallSamples()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.increment(double)"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testMomentSmallSamples()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testMomentSmallSamples()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testConsistency()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testConsistency()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testArray : double[]"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testConsistency()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.incrementAll(double[])"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testConsistency()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.getResult()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testConsistency()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.evaluate(double[])"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testConsistency()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.getTolerance()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testConsistency()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.assertEquals(double,double,double)"
reference "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testConsistency()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.smallSamples : double[][]"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testConsistency()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.clear()"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testConsistency()" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic.increment(double)"
call "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testConsistency()" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.testConsistency()"
reference "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.smallSamples : double[][]" "double[][]"
contain "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.smallSamples : double[][]"
reference "org.apache.commons.math.estimation.MinpackTest.BardFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.BardFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.BardFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.BardFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.BardFunction.BardFunction(double,double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.BardFunction.buildArray(int,double)"
call "org.apache.commons.math.estimation.MinpackTest.BardFunction.BardFunction(double,double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.BardFunction" "org.apache.commons.math.estimation.MinpackTest.BardFunction.BardFunction(double,double,double,double[])"
reference "org.apache.commons.math.estimation.MinpackTest.BardFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.BardFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.BardFunction.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.BardFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.BardFunction.m : int"
contain "org.apache.commons.math.estimation.MinpackTest.BardFunction" "org.apache.commons.math.estimation.MinpackTest.BardFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.BardFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.BardFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.BardFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
reference "org.apache.commons.math.estimation.MinpackTest.BardFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.BardFunction.m : int"
reference "org.apache.commons.math.estimation.MinpackTest.BardFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.BardFunction.y : double[]"
contain "org.apache.commons.math.estimation.MinpackTest.BardFunction" "org.apache.commons.math.estimation.MinpackTest.BardFunction.getResiduals()"
reference "org.apache.commons.math.estimation.MinpackTest.BardFunction.static {...}" "org.apache.commons.math.estimation.MinpackTest.BardFunction.y : double[]"
contain "org.apache.commons.math.estimation.MinpackTest.BardFunction" "org.apache.commons.math.estimation.MinpackTest.BardFunction.static {...}"
reference "org.apache.commons.math.estimation.MinpackTest.BardFunction.y : double[]" "double[]"
contain "org.apache.commons.math.estimation.MinpackTest.BardFunction" "org.apache.commons.math.estimation.MinpackTest.BardFunction.y : double[]"
reference "org.apache.commons.math.analysis.SimpsonIntegratorTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.analysis.SimpsonIntegratorTest" "org.apache.commons.math.analysis.SimpsonIntegrator"
reference "org.apache.commons.math.analysis.SimpsonIntegratorTest" "org.apache.commons.math.analysis.QuinticFunction"
reference "org.apache.commons.math.analysis.SimpsonIntegratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.SimpsonIntegratorTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.SimpsonIntegratorTest" "org.apache.commons.math.analysis.UnivariateRealIntegrator"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.SimpsonIntegratorTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.analysis.SimpsonIntegratorTest" "org.apache.commons.math.analysis.SimpsonIntegratorTest.SimpsonIntegratorTest()"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.SimpsonIntegrator.SimpsonIntegrator(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.integrate(double,double)"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.SimpsonIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.SimpsonIntegratorTest" "org.apache.commons.math.analysis.SimpsonIntegratorTest.testSinFunction()"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.SimpsonIntegrator.SimpsonIntegrator(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.integrate(double,double)"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.SimpsonIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.SimpsonIntegratorTest" "org.apache.commons.math.analysis.SimpsonIntegratorTest.testQuinticFunction()"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testParameters()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testParameters()" "org.apache.commons.math.analysis.SimpsonIntegrator.SimpsonIntegrator(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.integrate(double,double)"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testParameters()" "org.apache.commons.math.analysis.SimpsonIntegratorTest.fail(String)"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.setMinimalIterationCount(int)"
call "org.apache.commons.math.analysis.SimpsonIntegratorTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.setMaximalIterationCount(int)"
contain "org.apache.commons.math.analysis.SimpsonIntegratorTest" "org.apache.commons.math.analysis.SimpsonIntegratorTest.testParameters()"
reference "org.apache.commons.math.analysis.TrapezoidIntegratorTest" "org.apache.commons.math.analysis.SinFunction"
reference "org.apache.commons.math.analysis.TrapezoidIntegratorTest" "org.apache.commons.math.analysis.TrapezoidIntegrator"
reference "org.apache.commons.math.analysis.TrapezoidIntegratorTest" "org.apache.commons.math.analysis.QuinticFunction"
reference "org.apache.commons.math.analysis.TrapezoidIntegratorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.TrapezoidIntegratorTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.TrapezoidIntegratorTest" "org.apache.commons.math.analysis.UnivariateRealIntegrator"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.TrapezoidIntegratorTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.analysis.TrapezoidIntegratorTest" "org.apache.commons.math.analysis.TrapezoidIntegratorTest.TrapezoidIntegratorTest()"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.TrapezoidIntegrator.TrapezoidIntegrator(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.integrate(double,double)"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testSinFunction()" "org.apache.commons.math.analysis.TrapezoidIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.TrapezoidIntegratorTest" "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testSinFunction()"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.TrapezoidIntegrator.TrapezoidIntegrator(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.getRelativeAccuracy()"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.integrate(double,double)"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testQuinticFunction()" "org.apache.commons.math.analysis.TrapezoidIntegratorTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.TrapezoidIntegratorTest" "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testQuinticFunction()"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testParameters()" "org.apache.commons.math.analysis.SinFunction.SinFunction()"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testParameters()" "org.apache.commons.math.analysis.TrapezoidIntegrator.TrapezoidIntegrator(UnivariateRealFunction)"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.integrate(double,double)"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testParameters()" "org.apache.commons.math.analysis.TrapezoidIntegratorTest.fail(String)"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.setMinimalIterationCount(int)"
call "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testParameters()" "org.apache.commons.math.analysis.UnivariateRealIntegrator.setMaximalIterationCount(int)"
contain "org.apache.commons.math.analysis.TrapezoidIntegratorTest" "org.apache.commons.math.analysis.TrapezoidIntegratorTest.testParameters()"
reference "org.apache.commons.math.ode.MidpointStepInterpolatorTest" "org.apache.commons.math.ode.TestProblem1"
reference "org.apache.commons.math.ode.MidpointStepInterpolatorTest" "org.apache.commons.math.ode.MidpointIntegrator"
reference "org.apache.commons.math.ode.MidpointStepInterpolatorTest" "org.apache.commons.math.ode.ContinuousOutputModel"
reference "org.apache.commons.math.ode.MidpointStepInterpolatorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.MidpointStepInterpolatorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.MidpointStepInterpolatorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.MidpointStepInterpolatorTest" "org.apache.commons.math.ode.IntegratorException"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.MidpointStepInterpolatorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.MidpointStepInterpolatorTest" "org.apache.commons.math.ode.MidpointStepInterpolatorTest.MidpointStepInterpolatorTest(String)"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem1.TestProblem1()"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem1.getFinalTime()"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem1.getInitialTime()"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.MidpointIntegrator.MidpointIntegrator(double)"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.MidpointIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem1.getInitialState()"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem1.getDimension()"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.MidpointIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.MidpointIntegrator.getStepHandler()"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.MidpointStepInterpolatorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem1.computeTheoreticalState(double)"
contain "org.apache.commons.math.ode.MidpointStepInterpolatorTest" "org.apache.commons.math.ode.MidpointStepInterpolatorTest.testSerialization()"
reference "org.apache.commons.math.ode.MidpointStepInterpolatorTest.suite()" "org.apache.commons.math.ode.MidpointStepInterpolatorTest.class$org$apache$commons$math$ode$MidpointStepInterpolatorTest : Class"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.suite()" "org.apache.commons.math.ode.MidpointStepInterpolatorTest.class$(String)"
call "org.apache.commons.math.ode.MidpointStepInterpolatorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.MidpointStepInterpolatorTest" "org.apache.commons.math.ode.MidpointStepInterpolatorTest.suite()"
contain "org.apache.commons.math.ode.MidpointStepInterpolatorTest" "org.apache.commons.math.ode.MidpointStepInterpolatorTest.class$(String)"
contain "org.apache.commons.math.ode.MidpointStepInterpolatorTest" "org.apache.commons.math.ode.MidpointStepInterpolatorTest.class$org$apache$commons$math$ode$MidpointStepInterpolatorTest : Class"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations" "org.apache.commons.math.ode.FirstOrderDifferentialEquations"
reference "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations" "org.apache.commons.math.ode.EulerStepInterpolatorTest"
contain "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations" "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations.DummyEquations()"
contain "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations" "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations.getDimension()"
contain "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations" "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations.computeDerivatives(double,double[],double[])"
call "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations.DummyEquations(EulerStepInterpolatorTest.1)" "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations.DummyEquations()"
contain "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations" "org.apache.commons.math.ode.EulerStepInterpolatorTest.DummyEquations.DummyEquations(EulerStepInterpolatorTest.1)"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest" "double[]"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegression"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest" "junit.framework.TestCase"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.SimpleRegressionTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.SimpleRegressionTest(String)" "org.apache.commons.math.stat.regression.SimpleRegressionTest.data : double[][]"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.SimpleRegressionTest(String)" "org.apache.commons.math.stat.regression.SimpleRegressionTest.corrData : double[][]"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.SimpleRegressionTest(String)" "org.apache.commons.math.stat.regression.SimpleRegressionTest.infData : double[][]"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.SimpleRegressionTest(String)" "org.apache.commons.math.stat.regression.SimpleRegressionTest.infData2 : double[][]"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.SimpleRegressionTest(String)"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.setUp()"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.suite()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.class$org$apache$commons$math$stat$regression$SimpleRegressionTest : Class"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.suite()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.class$(String)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.suite()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression()"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.data : double[][]"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlope()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeStdErr()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegression.getN()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertEquals(String,long,long)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegression.getIntercept()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegression.getInterceptStdErr()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegression.getRSquare()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegression.getRegressionSumSquares()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegression.getMeanSquareError()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()" "org.apache.commons.math.stat.regression.SimpleRegression.predict(double)"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNorris()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testCorr()" "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression()"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.testCorr()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.corrData : double[][]"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testCorr()" "org.apache.commons.math.stat.regression.SimpleRegression.addData(double[][])"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testCorr()" "org.apache.commons.math.stat.regression.SimpleRegression.getN()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testCorr()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertEquals(String,long,long)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testCorr()" "org.apache.commons.math.stat.regression.SimpleRegression.getRSquare()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testCorr()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testCorr()" "org.apache.commons.math.stat.regression.SimpleRegression.getR()"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.testCorr()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegression.getIntercept()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlope()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeStdErr()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegression.getInterceptStdErr()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegression.getMeanSquareError()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegression.getR()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegression.getRSquare()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegression.getRegressionSumSquares()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegression.getTotalSumSquares()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegression.predict(double)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()" "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.testNaNs()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testClear()" "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression()"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.testClear()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.corrData : double[][]"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testClear()" "org.apache.commons.math.stat.regression.SimpleRegression.addData(double[][])"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testClear()" "org.apache.commons.math.stat.regression.SimpleRegression.getN()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testClear()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertEquals(String,long,long)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testClear()" "org.apache.commons.math.stat.regression.SimpleRegression.clear()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testClear()" "org.apache.commons.math.stat.regression.SimpleRegression.getRSquare()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testClear()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertEquals(String,double,double,double)"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.testClear()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.data : double[][]"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.testClear()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()" "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression()"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.infData : double[][]"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()" "org.apache.commons.math.stat.regression.SimpleRegression.addData(double[][])"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeStdErr()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()" "org.apache.commons.math.stat.regression.SimpleRegression.getInterceptStdErr()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()" "org.apache.commons.math.stat.regression.SimpleRegression.getSignificance()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval()"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.infData2 : double[][]"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval(double)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.fail(String)"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfect()" "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfect()" "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfect()" "org.apache.commons.math.stat.regression.SimpleRegression.getSignificance()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfect()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfect()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlope()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfect()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfect()" "org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors()"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfect()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfectNegative()" "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfectNegative()" "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfectNegative()" "org.apache.commons.math.stat.regression.SimpleRegression.getSignificance()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfectNegative()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfectNegative()" "org.apache.commons.math.stat.regression.SimpleRegression.getSlope()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfectNegative()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.testPerfectNegative()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testRandom()" "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testRandom()" "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testRandom()" "org.apache.commons.math.stat.regression.SimpleRegression.getSignificance()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testRandom()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.testRandom()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testSSENonNegative()" "org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testSSENonNegative()" "org.apache.commons.math.stat.regression.SimpleRegression.addData(double,double)"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testSSENonNegative()" "org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors()"
call "org.apache.commons.math.stat.regression.SimpleRegressionTest.testSSENonNegative()" "org.apache.commons.math.stat.regression.SimpleRegressionTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.testSSENonNegative()"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.class$(String)"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.data : double[][]" "double[][]"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.data : double[][]"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.corrData : double[][]" "double[][]"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.corrData : double[][]"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.infData : double[][]" "double[][]"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.infData : double[][]"
reference "org.apache.commons.math.stat.regression.SimpleRegressionTest.infData2 : double[][]" "double[][]"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.infData2 : double[][]"
contain "org.apache.commons.math.stat.regression.SimpleRegressionTest" "org.apache.commons.math.stat.regression.SimpleRegressionTest.class$org$apache$commons$math$stat$regression$SimpleRegressionTest : Class"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler" "junit.framework.Assert"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.pb : TestProblem3"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.reset()"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.reset()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.nbSteps : int"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.reset()" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.maxError : double"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.reset()"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.nbSteps : int"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getPreviousTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.pb : TestProblem3"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedTime()"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.maxError : double"
call "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.nbSteps : int"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.maxError : double"
reference "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.pb : TestProblem3" "org.apache.commons.math.ode.TestProblem3"
contain "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.DormandPrince853IntegratorTest.KeplerHandler.pb : TestProblem3"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.EstimatedParameter[]"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.EstimationProblem"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.LinearProblem(LevenbergMarquardtEstimatorTest.LinearMeasurement[])" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.measurements : LinearMeasurement[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.LinearProblem(LevenbergMarquardtEstimatorTest.LinearMeasurement[])"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.getMeasurements()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.measurements : LinearMeasurement[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.getMeasurements()"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.getUnboundParameters()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.getAllParameters()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.getUnboundParameters()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.getAllParameters()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.measurements : LinearMeasurement[]"
call "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.getAllParameters()" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement.getParameters()"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.getAllParameters()"
reference "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.measurements : LinearMeasurement[]" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearMeasurement[]"
contain "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem" "org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest.LinearProblem.measurements : LinearMeasurement[]"
reference "org.apache.commons.math.MathConfigurationExceptionTest" "org.apache.commons.math.MathConfigurationException"
reference "org.apache.commons.math.MathConfigurationExceptionTest" "junit.framework.TestCase"
call "org.apache.commons.math.MathConfigurationExceptionTest.MathConfigurationExceptionTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.MathConfigurationExceptionTest" "org.apache.commons.math.MathConfigurationExceptionTest.MathConfigurationExceptionTest()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructor()" "org.apache.commons.math.MathConfigurationException.MathConfigurationException()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructor()" "org.apache.commons.math.MathConfigurationException.getCause()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructor()" "org.apache.commons.math.MathConfigurationExceptionTest.assertNull(Object)"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructor()" "org.apache.commons.math.MathConfigurationException.getMessage()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructor()" "org.apache.commons.math.MathConfigurationException.getMessage(Locale)"
contain "org.apache.commons.math.MathConfigurationExceptionTest" "org.apache.commons.math.MathConfigurationExceptionTest.testConstructor()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathConfigurationException.MathConfigurationException(String,Object[])"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathConfigurationException.getCause()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathConfigurationExceptionTest.assertNull(Object)"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathConfigurationException.getPattern()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathConfigurationExceptionTest.assertEquals(String,String)"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathConfigurationException.getArguments()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathConfigurationExceptionTest.assertEquals(int,int)"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathConfigurationExceptionTest.assertEquals(Object,Object)"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathConfigurationException.getMessage()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathConfigurationExceptionTest.assertFalse(boolean)"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathConfigurationException.getMessage(Locale)"
contain "org.apache.commons.math.MathConfigurationExceptionTest" "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArguments()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorCause()" "org.apache.commons.math.MathConfigurationException.MathConfigurationException(Throwable)"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorCause()" "org.apache.commons.math.MathConfigurationException.getCause()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorCause()" "org.apache.commons.math.MathConfigurationExceptionTest.assertEquals(Object,Object)"
contain "org.apache.commons.math.MathConfigurationExceptionTest" "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorCause()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathConfigurationException.MathConfigurationException(String,Object[],Throwable)"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathConfigurationException.getCause()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathConfigurationExceptionTest.assertEquals(Object,Object)"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathConfigurationException.getPattern()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathConfigurationExceptionTest.assertEquals(String,String)"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathConfigurationException.getArguments()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathConfigurationExceptionTest.assertEquals(int,int)"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathConfigurationException.getMessage()"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathConfigurationExceptionTest.assertFalse(boolean)"
call "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathConfigurationException.getMessage(Locale)"
contain "org.apache.commons.math.MathConfigurationExceptionTest" "org.apache.commons.math.MathConfigurationExceptionTest.testConstructorPatternArgumentsCause()"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.StepHandler"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.StepInterpolator"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler" "junit.framework.Assert"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.HighamHall54IntegratorTest"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.pb : TestProblem3"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.nbSteps : int"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.maxError : double"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.KeplerHandler(TestProblem3)"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.requiresDenseOutput()"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.reset()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.nbSteps : int"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.reset()" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.maxError : double"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.reset()"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.nbSteps : int"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getInterpolatedState()"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.pb : TestProblem3"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.StepInterpolator.getCurrentTime()"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.maxError : double"
call "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)" "junit.framework.Assert.assertTrue(boolean)"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.handleStep(StepInterpolator,boolean)"
reference "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.pb : TestProblem3" "org.apache.commons.math.ode.TestProblem3"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.pb : TestProblem3"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.nbSteps : int"
contain "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler" "org.apache.commons.math.ode.HighamHall54IntegratorTest.KeplerHandler.maxError : double"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest" "org.apache.commons.math.ode.ContinuousOutputModel"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest" "org.apache.commons.math.ode.IntegratorException"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.GraggBulirschStoerStepInterpolatorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.GraggBulirschStoerStepInterpolatorTest(String)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.getStepHandler()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.assertTrue(boolean)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()" "org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double)"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testSerialization()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testClone()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testClone()" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.1.{...}"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testClone()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testClone()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testClone()" "org.apache.commons.math.ode.GraggBulirschStoerIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.testClone()"
reference "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.suite()" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.class$org$apache$commons$math$ode$GraggBulirschStoerStepInterpolatorTest : Class"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.suite()" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.class$(String)"
call "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.suite()"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.class$(String)"
contain "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest" "org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest.class$org$apache$commons$math$ode$GraggBulirschStoerStepInterpolatorTest : Class"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimator"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.EstimationException"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "double[]"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "junit.framework.TestCase"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.GaussNewtonEstimatorTest(String)" "junit.framework.TestCase.TestCase(String)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.GaussNewtonEstimatorTest(String)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.GaussNewtonEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.getUnboundParameters()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTrivial()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTrivial()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.GaussNewtonEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testQRColumnsPermutation()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testQRColumnsPermutation()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.GaussNewtonEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNoDependency()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNoDependency()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.GaussNewtonEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testOneSet()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testOneSet()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.GaussNewtonEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTwoSets()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testTwoSets()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNonInversible()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.fail(String)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testNonInversible()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.GaussNewtonEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testIllConditioned()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testIllConditioned()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersSimple()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersSimple()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersSimple()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersSimple()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersSimple()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersSimple()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.fail(String)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersSimple()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersUnsorted()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.fail(String)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMoreEstimatedParametersUnsorted()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.GaussNewtonEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.getAllParameters()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.EstimatedParameter.getName()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testRedundantEquations()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testRedundantEquations()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.EstimatedParameter.EstimatedParameter(String,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearMeasurement.LinearMeasurement(double[],EstimatedParameter[],double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.LinearProblem.LinearProblem(GaussNewtonEstimatorTest.LinearMeasurement[])"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.GaussNewtonEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testInconsistentEquations()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.assertTrue(boolean)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testInconsistentEquations()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMaxIterations()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.Circle(double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMaxIterations()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.addPoint(double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMaxIterations()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMaxIterations()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMaxIterations()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.fail(String)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testMaxIterations()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.Circle(double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.addPoint(double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.GaussNewtonEstimator.getRMS(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getM()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.assertEquals(double,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getRadius()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getX()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFitting()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.getY()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFitting()"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.Circle(double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.Circle.addPoint(double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.GaussNewtonEstimator.GaussNewtonEstimator(int,double,double)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.GaussNewtonEstimator.estimate(EstimationProblem)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFittingBadInit()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.fail(String)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testCircleFittingBadInit()"
reference "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.suite()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.class$org$apache$commons$math$estimation$GaussNewtonEstimatorTest : Class"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.suite()" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.class$(String)"
call "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.suite()"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.class$(String)"
contain "org.apache.commons.math.estimation.GaussNewtonEstimatorTest" "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.class$org$apache$commons$math$estimation$GaussNewtonEstimatorTest : Class"
reference "org.apache.commons.math.MathExceptionTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.MathExceptionTest" "org.apache.commons.math.MathConfigurationException"
reference "org.apache.commons.math.MathExceptionTest" "junit.framework.TestCase"
reference "org.apache.commons.math.MathExceptionTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.MathExceptionTest.MathExceptionTest()" "junit.framework.TestCase.TestCase()"
contain "org.apache.commons.math.MathExceptionTest" "org.apache.commons.math.MathExceptionTest.MathExceptionTest()"
call "org.apache.commons.math.MathExceptionTest.testConstructor()" "org.apache.commons.math.MathException.MathException()"
call "org.apache.commons.math.MathExceptionTest.testConstructor()" "org.apache.commons.math.MathException.getCause()"
call "org.apache.commons.math.MathExceptionTest.testConstructor()" "org.apache.commons.math.MathExceptionTest.assertNull(Object)"
call "org.apache.commons.math.MathExceptionTest.testConstructor()" "org.apache.commons.math.MathException.getMessage()"
call "org.apache.commons.math.MathExceptionTest.testConstructor()" "org.apache.commons.math.MathException.getMessage(Locale)"
contain "org.apache.commons.math.MathExceptionTest" "org.apache.commons.math.MathExceptionTest.testConstructor()"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathException.MathException(String,Object[])"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathException.getCause()"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathExceptionTest.assertNull(Object)"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathException.getPattern()"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathExceptionTest.assertEquals(String,String)"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathException.getArguments()"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathExceptionTest.assertEquals(int,int)"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathExceptionTest.assertEquals(Object,Object)"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathException.getMessage()"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathExceptionTest.assertFalse(boolean)"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArguments()" "org.apache.commons.math.MathException.getMessage(Locale)"
contain "org.apache.commons.math.MathExceptionTest" "org.apache.commons.math.MathExceptionTest.testConstructorPatternArguments()"
call "org.apache.commons.math.MathExceptionTest.testConstructorCause()" "org.apache.commons.math.MathException.MathException(Throwable)"
call "org.apache.commons.math.MathExceptionTest.testConstructorCause()" "org.apache.commons.math.MathException.getCause()"
call "org.apache.commons.math.MathExceptionTest.testConstructorCause()" "org.apache.commons.math.MathExceptionTest.assertEquals(Object,Object)"
contain "org.apache.commons.math.MathExceptionTest" "org.apache.commons.math.MathExceptionTest.testConstructorCause()"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathException.MathException(String,Object[],Throwable)"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathException.getCause()"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathExceptionTest.assertEquals(Object,Object)"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathException.getPattern()"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathExceptionTest.assertEquals(String,String)"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathException.getArguments()"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathExceptionTest.assertEquals(int,int)"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathException.getMessage()"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathExceptionTest.assertFalse(boolean)"
call "org.apache.commons.math.MathExceptionTest.testConstructorPatternArgumentsCause()" "org.apache.commons.math.MathException.getMessage(Locale)"
contain "org.apache.commons.math.MathExceptionTest" "org.apache.commons.math.MathExceptionTest.testConstructorPatternArgumentsCause()"
call "org.apache.commons.math.MathExceptionTest.testPrintStackTrace()" "org.apache.commons.math.MathConfigurationException.MathConfigurationException(String,Object[])"
call "org.apache.commons.math.MathExceptionTest.testPrintStackTrace()" "org.apache.commons.math.MathException.MathException(String,Object[],Throwable)"
call "org.apache.commons.math.MathExceptionTest.testPrintStackTrace()" "org.apache.commons.math.MathException.printStackTrace(PrintStream)"
call "org.apache.commons.math.MathExceptionTest.testPrintStackTrace()" "org.apache.commons.math.MathExceptionTest.assertTrue(boolean)"
call "org.apache.commons.math.MathExceptionTest.testPrintStackTrace()" "org.apache.commons.math.MathException.printStackTrace(PrintWriter)"
contain "org.apache.commons.math.MathExceptionTest" "org.apache.commons.math.MathExceptionTest.testPrintStackTrace()"
call "org.apache.commons.math.MathExceptionTest.testSerialization()" "org.apache.commons.math.MathConfigurationException.MathConfigurationException(String,Object[])"
call "org.apache.commons.math.MathExceptionTest.testSerialization()" "org.apache.commons.math.MathException.MathException(String,Object[],Throwable)"
call "org.apache.commons.math.MathExceptionTest.testSerialization()" "org.apache.commons.math.TestUtils.serializeAndRecover(Object)"
call "org.apache.commons.math.MathExceptionTest.testSerialization()" "org.apache.commons.math.MathException.printStackTrace(PrintStream)"
reference "org.apache.commons.math.MathExceptionTest.testSerialization()" "org.apache.commons.math.MathExceptionTest.class$java$lang$Throwable : Class"
call "org.apache.commons.math.MathExceptionTest.testSerialization()" "org.apache.commons.math.MathExceptionTest.class$(String)"
call "org.apache.commons.math.MathExceptionTest.testSerialization()" "org.apache.commons.math.MathExceptionTest.assertEquals(String,String)"
call "org.apache.commons.math.MathExceptionTest.testSerialization()" "org.apache.commons.math.MathExceptionTest.assertTrue(boolean)"
contain "org.apache.commons.math.MathExceptionTest" "org.apache.commons.math.MathExceptionTest.testSerialization()"
contain "org.apache.commons.math.MathExceptionTest" "org.apache.commons.math.MathExceptionTest.class$(String)"
contain "org.apache.commons.math.MathExceptionTest" "org.apache.commons.math.MathExceptionTest.class$java$lang$Throwable : Class"
reference "org.apache.commons.math.analysis.MonitoredFunction" "org.apache.commons.math.analysis.UnivariateRealFunction"
reference "org.apache.commons.math.analysis.MonitoredFunction" "org.apache.commons.math.FunctionEvaluationException"
reference "org.apache.commons.math.analysis.MonitoredFunction.MonitoredFunction(UnivariateRealFunction)" "org.apache.commons.math.analysis.MonitoredFunction.callsCount : int"
reference "org.apache.commons.math.analysis.MonitoredFunction.MonitoredFunction(UnivariateRealFunction)" "org.apache.commons.math.analysis.MonitoredFunction.f : UnivariateRealFunction"
contain "org.apache.commons.math.analysis.MonitoredFunction" "org.apache.commons.math.analysis.MonitoredFunction.MonitoredFunction(UnivariateRealFunction)"
reference "org.apache.commons.math.analysis.MonitoredFunction.setCallsCount(int)" "org.apache.commons.math.analysis.MonitoredFunction.callsCount : int"
contain "org.apache.commons.math.analysis.MonitoredFunction" "org.apache.commons.math.analysis.MonitoredFunction.setCallsCount(int)"
reference "org.apache.commons.math.analysis.MonitoredFunction.getCallsCount()" "org.apache.commons.math.analysis.MonitoredFunction.callsCount : int"
contain "org.apache.commons.math.analysis.MonitoredFunction" "org.apache.commons.math.analysis.MonitoredFunction.getCallsCount()"
reference "org.apache.commons.math.analysis.MonitoredFunction.value(double)" "org.apache.commons.math.analysis.MonitoredFunction.callsCount : int"
reference "org.apache.commons.math.analysis.MonitoredFunction.value(double)" "org.apache.commons.math.analysis.MonitoredFunction.f : UnivariateRealFunction"
call "org.apache.commons.math.analysis.MonitoredFunction.value(double)" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
contain "org.apache.commons.math.analysis.MonitoredFunction" "org.apache.commons.math.analysis.MonitoredFunction.value(double)"
contain "org.apache.commons.math.analysis.MonitoredFunction" "org.apache.commons.math.analysis.MonitoredFunction.callsCount : int"
reference "org.apache.commons.math.analysis.MonitoredFunction.f : UnivariateRealFunction" "org.apache.commons.math.analysis.UnivariateRealFunction"
contain "org.apache.commons.math.analysis.MonitoredFunction" "org.apache.commons.math.analysis.MonitoredFunction.f : UnivariateRealFunction"
reference "org.apache.commons.math.distribution.CauchyDistributionTest" "org.apache.commons.math.distribution.CauchyDistributionImpl"
reference "org.apache.commons.math.distribution.CauchyDistributionTest" "org.apache.commons.math.distribution.CauchyDistribution"
reference "org.apache.commons.math.distribution.CauchyDistributionTest" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest"
call "org.apache.commons.math.distribution.CauchyDistributionTest.CauchyDistributionTest(String)" "org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(String)"
contain "org.apache.commons.math.distribution.CauchyDistributionTest" "org.apache.commons.math.distribution.CauchyDistributionTest.CauchyDistributionTest(String)"
call "org.apache.commons.math.distribution.CauchyDistributionTest.makeDistribution()" "org.apache.commons.math.distribution.CauchyDistributionImpl.CauchyDistributionImpl(double,double)"
contain "org.apache.commons.math.distribution.CauchyDistributionTest" "org.apache.commons.math.distribution.CauchyDistributionTest.makeDistribution()"
contain "org.apache.commons.math.distribution.CauchyDistributionTest" "org.apache.commons.math.distribution.CauchyDistributionTest.makeCumulativeTestPoints()"
contain "org.apache.commons.math.distribution.CauchyDistributionTest" "org.apache.commons.math.distribution.CauchyDistributionTest.makeCumulativeTestValues()"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.CauchyDistributionTest.setInverseCumulativeTestPoints(double[])"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.CauchyDistributionTest.setInverseCumulativeTestValues(double[])"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testInverseCumulativeProbabilityExtremes()" "org.apache.commons.math.distribution.CauchyDistributionTest.verifyInverseCumulativeProbabilities()"
contain "org.apache.commons.math.distribution.CauchyDistributionTest" "org.apache.commons.math.distribution.CauchyDistributionTest.testInverseCumulativeProbabilityExtremes()"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testMedian()" "org.apache.commons.math.distribution.CauchyDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testMedian()" "org.apache.commons.math.distribution.CauchyDistribution.setMedian(double)"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testMedian()" "org.apache.commons.math.distribution.CauchyDistribution.getMedian()"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testMedian()" "org.apache.commons.math.distribution.CauchyDistributionTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.distribution.CauchyDistributionTest" "org.apache.commons.math.distribution.CauchyDistributionTest.testMedian()"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testScale()" "org.apache.commons.math.distribution.CauchyDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testScale()" "org.apache.commons.math.distribution.CauchyDistribution.setScale(double)"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testScale()" "org.apache.commons.math.distribution.CauchyDistribution.getScale()"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testScale()" "org.apache.commons.math.distribution.CauchyDistributionTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.distribution.CauchyDistributionTest" "org.apache.commons.math.distribution.CauchyDistributionTest.testScale()"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testSetScale()" "org.apache.commons.math.distribution.CauchyDistributionTest.getDistribution()"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testSetScale()" "org.apache.commons.math.distribution.CauchyDistribution.setScale(double)"
call "org.apache.commons.math.distribution.CauchyDistributionTest.testSetScale()" "org.apache.commons.math.distribution.CauchyDistributionTest.fail(String)"
contain "org.apache.commons.math.distribution.CauchyDistributionTest" "org.apache.commons.math.distribution.CauchyDistributionTest.testSetScale()"
reference "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizer"
reference "org.apache.commons.math.ode.StepNormalizerTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.TestProblem3"
reference "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.DormandPrince54Integrator"
reference "org.apache.commons.math.ode.StepNormalizerTest" "junit.framework.TestCase"
reference "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.DerivativeException"
reference "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.IntegratorException"
reference "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.FirstOrderIntegrator"
call "org.apache.commons.math.ode.StepNormalizerTest.StepNormalizerTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.ode.StepNormalizerTest.StepNormalizerTest(String)" "org.apache.commons.math.ode.StepNormalizerTest.pb : TestProblem3"
reference "org.apache.commons.math.ode.StepNormalizerTest.StepNormalizerTest(String)" "org.apache.commons.math.ode.StepNormalizerTest.integ : FirstOrderIntegrator"
contain "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest.StepNormalizerTest(String)"
reference "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()" "org.apache.commons.math.ode.StepNormalizerTest.pb : TestProblem3"
call "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()" "org.apache.commons.math.ode.StepNormalizerTest.setLastSeen(boolean)"
reference "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()" "org.apache.commons.math.ode.StepNormalizerTest.integ : FirstOrderIntegrator"
call "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()" "org.apache.commons.math.ode.StepNormalizerTest.1.{...}"
call "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()" "org.apache.commons.math.ode.StepNormalizer.StepNormalizer(double,FixedStepHandler)"
call "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
reference "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()" "org.apache.commons.math.ode.StepNormalizerTest.lastSeen : boolean"
call "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()" "org.apache.commons.math.ode.StepNormalizerTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest.testBoundaries()"
reference "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()" "org.apache.commons.math.ode.StepNormalizerTest.pb : TestProblem3"
call "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()" "org.apache.commons.math.ode.StepNormalizerTest.setLastSeen(boolean)"
reference "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()" "org.apache.commons.math.ode.StepNormalizerTest.integ : FirstOrderIntegrator"
call "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()" "org.apache.commons.math.ode.StepNormalizerTest.2.{...}"
call "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()" "org.apache.commons.math.ode.StepNormalizer.StepNormalizer(double,FixedStepHandler)"
call "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()" "org.apache.commons.math.ode.FirstOrderIntegrator.setStepHandler(StepHandler)"
call "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()" "org.apache.commons.math.ode.TestProblem3.getInitialState()"
call "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()" "org.apache.commons.math.ode.TestProblem3.getDimension()"
call "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()" "org.apache.commons.math.ode.FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
reference "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()" "org.apache.commons.math.ode.StepNormalizerTest.lastSeen : boolean"
call "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()" "org.apache.commons.math.ode.StepNormalizerTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest.testBeforeEnd()"
call "org.apache.commons.math.ode.StepNormalizerTest.checkValue(double,double)" "org.apache.commons.math.ode.StepNormalizerTest.assertTrue(boolean)"
contain "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest.checkValue(double,double)"
reference "org.apache.commons.math.ode.StepNormalizerTest.setLastSeen(boolean)" "org.apache.commons.math.ode.StepNormalizerTest.lastSeen : boolean"
contain "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest.setLastSeen(boolean)"
reference "org.apache.commons.math.ode.StepNormalizerTest.suite()" "org.apache.commons.math.ode.StepNormalizerTest.class$org$apache$commons$math$ode$StepNormalizerTest : Class"
call "org.apache.commons.math.ode.StepNormalizerTest.suite()" "org.apache.commons.math.ode.StepNormalizerTest.class$(String)"
call "org.apache.commons.math.ode.StepNormalizerTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
contain "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest.suite()"
call "org.apache.commons.math.ode.StepNormalizerTest.setUp()" "org.apache.commons.math.ode.TestProblem3.TestProblem3(double)"
reference "org.apache.commons.math.ode.StepNormalizerTest.setUp()" "org.apache.commons.math.ode.StepNormalizerTest.pb : TestProblem3"
call "org.apache.commons.math.ode.StepNormalizerTest.setUp()" "org.apache.commons.math.ode.TestProblem3.getFinalTime()"
call "org.apache.commons.math.ode.StepNormalizerTest.setUp()" "org.apache.commons.math.ode.TestProblem3.getInitialTime()"
call "org.apache.commons.math.ode.StepNormalizerTest.setUp()" "org.apache.commons.math.ode.DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)"
reference "org.apache.commons.math.ode.StepNormalizerTest.setUp()" "org.apache.commons.math.ode.StepNormalizerTest.integ : FirstOrderIntegrator"
reference "org.apache.commons.math.ode.StepNormalizerTest.setUp()" "org.apache.commons.math.ode.StepNormalizerTest.lastSeen : boolean"
contain "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest.setUp()"
reference "org.apache.commons.math.ode.StepNormalizerTest.tearDown()" "org.apache.commons.math.ode.StepNormalizerTest.pb : TestProblem3"
reference "org.apache.commons.math.ode.StepNormalizerTest.tearDown()" "org.apache.commons.math.ode.StepNormalizerTest.integ : FirstOrderIntegrator"
contain "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest.tearDown()"
contain "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest.class$(String)"
reference "org.apache.commons.math.ode.StepNormalizerTest.pb : TestProblem3" "org.apache.commons.math.ode.TestProblem3"
contain "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest.pb : TestProblem3"
reference "org.apache.commons.math.ode.StepNormalizerTest.integ : FirstOrderIntegrator" "org.apache.commons.math.ode.FirstOrderIntegrator"
contain "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest.integ : FirstOrderIntegrator"
contain "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest.lastSeen : boolean"
contain "org.apache.commons.math.ode.StepNormalizerTest" "org.apache.commons.math.ode.StepNormalizerTest.class$org$apache$commons$math$ode$StepNormalizerTest : Class"
reference "org.apache.commons.math.analysis.PolynomialFunctionTest" "org.apache.commons.math.analysis.PolynomialFunction"
reference "org.apache.commons.math.analysis.PolynomialFunctionTest" "junit.framework.TestCase"
reference "org.apache.commons.math.analysis.PolynomialFunctionTest" "org.apache.commons.math.MathException"
reference "org.apache.commons.math.analysis.PolynomialFunctionTest" "org.apache.commons.math.analysis.UnivariateRealFunction"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.PolynomialFunctionTest()" "junit.framework.TestCase.TestCase()"
reference "org.apache.commons.math.analysis.PolynomialFunctionTest.PolynomialFunctionTest()" "org.apache.commons.math.analysis.PolynomialFunctionTest.tolerance : double"
contain "org.apache.commons.math.analysis.PolynomialFunctionTest" "org.apache.commons.math.analysis.PolynomialFunctionTest.PolynomialFunctionTest()"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testConstants()" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testConstants()" "org.apache.commons.math.analysis.PolynomialFunction.value(double)"
reference "org.apache.commons.math.analysis.PolynomialFunctionTest.testConstants()" "org.apache.commons.math.analysis.PolynomialFunctionTest.tolerance : double"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testConstants()" "org.apache.commons.math.analysis.PolynomialFunctionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testConstants()" "org.apache.commons.math.analysis.PolynomialFunction.degree()"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testConstants()" "org.apache.commons.math.analysis.PolynomialFunctionTest.assertEquals(int,int)"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testConstants()" "org.apache.commons.math.analysis.PolynomialFunction.derivative()"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testConstants()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testConstants()" "org.apache.commons.math.analysis.PolynomialFunction.polynomialDerivative()"
contain "org.apache.commons.math.analysis.PolynomialFunctionTest" "org.apache.commons.math.analysis.PolynomialFunctionTest.testConstants()"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testLinear()" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testLinear()" "org.apache.commons.math.analysis.PolynomialFunction.value(double)"
reference "org.apache.commons.math.analysis.PolynomialFunctionTest.testLinear()" "org.apache.commons.math.analysis.PolynomialFunctionTest.tolerance : double"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testLinear()" "org.apache.commons.math.analysis.PolynomialFunctionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testLinear()" "org.apache.commons.math.analysis.PolynomialFunction.degree()"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testLinear()" "org.apache.commons.math.analysis.PolynomialFunctionTest.assertEquals(int,int)"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testLinear()" "org.apache.commons.math.analysis.PolynomialFunction.polynomialDerivative()"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testLinear()" "org.apache.commons.math.analysis.PolynomialFunction.derivative()"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testLinear()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
contain "org.apache.commons.math.analysis.PolynomialFunctionTest" "org.apache.commons.math.analysis.PolynomialFunctionTest.testLinear()"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testQuadratic()" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testQuadratic()" "org.apache.commons.math.analysis.PolynomialFunction.value(double)"
reference "org.apache.commons.math.analysis.PolynomialFunctionTest.testQuadratic()" "org.apache.commons.math.analysis.PolynomialFunctionTest.tolerance : double"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testQuadratic()" "org.apache.commons.math.analysis.PolynomialFunctionTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.PolynomialFunctionTest" "org.apache.commons.math.analysis.PolynomialFunctionTest.testQuadratic()"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testQuintic()" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testQuintic()" "org.apache.commons.math.analysis.PolynomialFunction.value(double)"
reference "org.apache.commons.math.analysis.PolynomialFunctionTest.testQuintic()" "org.apache.commons.math.analysis.PolynomialFunctionTest.tolerance : double"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testQuintic()" "org.apache.commons.math.analysis.PolynomialFunctionTest.assertEquals(double,double,double)"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testQuintic()" "org.apache.commons.math.analysis.PolynomialFunction.degree()"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testQuintic()" "org.apache.commons.math.analysis.PolynomialFunctionTest.assertEquals(int,int)"
contain "org.apache.commons.math.analysis.PolynomialFunctionTest" "org.apache.commons.math.analysis.PolynomialFunctionTest.testQuintic()"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testfirstDerivativeComparison()" "org.apache.commons.math.analysis.PolynomialFunction.PolynomialFunction(double[])"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testfirstDerivativeComparison()" "org.apache.commons.math.analysis.PolynomialFunction.derivative()"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testfirstDerivativeComparison()" "org.apache.commons.math.analysis.UnivariateRealFunction.value(double)"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testfirstDerivativeComparison()" "org.apache.commons.math.analysis.PolynomialFunction.value(double)"
reference "org.apache.commons.math.analysis.PolynomialFunctionTest.testfirstDerivativeComparison()" "org.apache.commons.math.analysis.PolynomialFunctionTest.tolerance : double"
call "org.apache.commons.math.analysis.PolynomialFunctionTest.testfirstDerivativeComparison()" "org.apache.commons.math.analysis.PolynomialFunctionTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.analysis.PolynomialFunctionTest" "org.apache.commons.math.analysis.PolynomialFunctionTest.testfirstDerivativeComparison()"
contain "org.apache.commons.math.analysis.PolynomialFunctionTest" "org.apache.commons.math.analysis.PolynomialFunctionTest.tolerance : double"
reference "org.apache.commons.math.ode.FirstOrderConverterTest.Equations" "org.apache.commons.math.ode.SecondOrderDifferentialEquations"
reference "org.apache.commons.math.ode.FirstOrderConverterTest.Equations" "org.apache.commons.math.ode.FirstOrderConverterTest"
reference "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.Equations(int,double)" "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.n : int"
reference "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.Equations(int,double)" "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.omega2 : double"
contain "org.apache.commons.math.ode.FirstOrderConverterTest.Equations" "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.Equations(int,double)"
reference "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.getDimension()" "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.n : int"
contain "org.apache.commons.math.ode.FirstOrderConverterTest.Equations" "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.getDimension()"
reference "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.computeSecondDerivatives(double,double[],double[],double[])" "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.n : int"
reference "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.computeSecondDerivatives(double,double[],double[],double[])" "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.omega2 : double"
contain "org.apache.commons.math.ode.FirstOrderConverterTest.Equations" "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.computeSecondDerivatives(double,double[],double[],double[])"
contain "org.apache.commons.math.ode.FirstOrderConverterTest.Equations" "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.n : int"
contain "org.apache.commons.math.ode.FirstOrderConverterTest.Equations" "org.apache.commons.math.ode.FirstOrderConverterTest.Equations.omega2 : double"
reference "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction" "double[]"
reference "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction"
reference "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction" "org.apache.commons.math.estimation.EstimatedParameter"
reference "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction" "org.apache.commons.math.estimation.MinpackTest"
call "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction.FreudensteinRothFunction(double[],double,double,double[])" "org.apache.commons.math.estimation.MinpackTest.MinpackFunction.MinpackFunction(int,double[],double,double,double[])"
contain "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction" "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction.FreudensteinRothFunction(double[],double,double,double[])"
reference "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction.getJacobian()" "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction.getJacobian()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction" "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction.getJacobian()"
reference "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction.getResiduals()" "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction.parameters : EstimatedParameter[]"
call "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction.getResiduals()" "org.apache.commons.math.estimation.EstimatedParameter.getEstimate()"
contain "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction" "org.apache.commons.math.estimation.MinpackTest.FreudensteinRothFunction.getResiduals()"
reference "org.apache.commons.math.analysis.QuinticFunction" "org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction"
reference "org.apache.commons.math.analysis.QuinticFunction" "org.apache.commons.math.FunctionEvaluationException"
contain "org.apache.commons.math.analysis.QuinticFunction" "org.apache.commons.math.analysis.QuinticFunction.QuinticFunction()"
contain "org.apache.commons.math.analysis.QuinticFunction" "org.apache.commons.math.analysis.QuinticFunction.value(double)"
call "org.apache.commons.math.analysis.QuinticFunction.derivative()" "org.apache.commons.math.analysis.QuinticFunction.1.{...}"
contain "org.apache.commons.math.analysis.QuinticFunction" "org.apache.commons.math.analysis.QuinticFunction.derivative()"
contain "org.apache.commons.math.analysis.QuinticFunction" "org.apache.commons.math.analysis.QuinticFunction.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.summary.SumLogTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.descriptive.summary.SumLogTest" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs"
reference "org.apache.commons.math.stat.descriptive.summary.SumLogTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.summary.SumLogTest.SumLogTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.summary.SumLogTest" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.SumLogTest(String)"
reference "org.apache.commons.math.stat.descriptive.summary.SumLogTest.suite()" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.class$org$apache$commons$math$stat$descriptive$summary$SumLogTest : Class"
call "org.apache.commons.math.stat.descriptive.summary.SumLogTest.suite()" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.class$(String)"
call "org.apache.commons.math.stat.descriptive.summary.SumLogTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.descriptive.summary.SumLogTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.descriptive.summary.SumLogTest" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.suite()"
call "org.apache.commons.math.stat.descriptive.summary.SumLogTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.SumOfLogs()"
contain "org.apache.commons.math.stat.descriptive.summary.SumLogTest" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.summary.SumLogTest.expectedValue()" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.sumLog : double"
contain "org.apache.commons.math.stat.descriptive.summary.SumLogTest" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.expectedValue()"
call "org.apache.commons.math.stat.descriptive.summary.SumLogTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.SumOfLogs()"
call "org.apache.commons.math.stat.descriptive.summary.SumLogTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.getResult()"
call "org.apache.commons.math.stat.descriptive.summary.SumLogTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.assertTrue(boolean)"
call "org.apache.commons.math.stat.descriptive.summary.SumLogTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.increment(double)"
call "org.apache.commons.math.stat.descriptive.summary.SumLogTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.assertFalse(boolean)"
call "org.apache.commons.math.stat.descriptive.summary.SumLogTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.descriptive.summary.SumLogTest.testSpecialValues()" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.clear()"
contain "org.apache.commons.math.stat.descriptive.summary.SumLogTest" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.testSpecialValues()"
contain "org.apache.commons.math.stat.descriptive.summary.SumLogTest" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.class$(String)"
reference "org.apache.commons.math.stat.descriptive.summary.SumLogTest.stat : SumOfLogs" "org.apache.commons.math.stat.descriptive.summary.SumOfLogs"
contain "org.apache.commons.math.stat.descriptive.summary.SumLogTest" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.stat : SumOfLogs"
contain "org.apache.commons.math.stat.descriptive.summary.SumLogTest" "org.apache.commons.math.stat.descriptive.summary.SumLogTest.class$org$apache$commons$math$stat$descriptive$summary$SumLogTest : Class"
reference "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.Frequency"
reference "org.apache.commons.math.stat.FrequencyTest" "junit.framework.TestSuite"
reference "org.apache.commons.math.stat.FrequencyTest" "junit.framework.TestCase"
reference "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.TestUtils"
call "org.apache.commons.math.stat.FrequencyTest.FrequencyTest(String)" "junit.framework.TestCase.TestCase(String)"
reference "org.apache.commons.math.stat.FrequencyTest.FrequencyTest(String)" "org.apache.commons.math.stat.FrequencyTest.oneL : long"
reference "org.apache.commons.math.stat.FrequencyTest.FrequencyTest(String)" "org.apache.commons.math.stat.FrequencyTest.twoL : long"
reference "org.apache.commons.math.stat.FrequencyTest.FrequencyTest(String)" "org.apache.commons.math.stat.FrequencyTest.threeL : long"
reference "org.apache.commons.math.stat.FrequencyTest.FrequencyTest(String)" "org.apache.commons.math.stat.FrequencyTest.oneI : int"
reference "org.apache.commons.math.stat.FrequencyTest.FrequencyTest(String)" "org.apache.commons.math.stat.FrequencyTest.twoI : int"
reference "org.apache.commons.math.stat.FrequencyTest.FrequencyTest(String)" "org.apache.commons.math.stat.FrequencyTest.threeI : int"
reference "org.apache.commons.math.stat.FrequencyTest.FrequencyTest(String)" "org.apache.commons.math.stat.FrequencyTest.tolerance : double"
reference "org.apache.commons.math.stat.FrequencyTest.FrequencyTest(String)" "org.apache.commons.math.stat.FrequencyTest.f : Frequency"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.FrequencyTest(String)"
call "org.apache.commons.math.stat.FrequencyTest.setUp()" "org.apache.commons.math.stat.Frequency.Frequency()"
reference "org.apache.commons.math.stat.FrequencyTest.setUp()" "org.apache.commons.math.stat.FrequencyTest.f : Frequency"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.setUp()"
reference "org.apache.commons.math.stat.FrequencyTest.suite()" "org.apache.commons.math.stat.FrequencyTest.class$org$apache$commons$math$stat$FrequencyTest : Class"
call "org.apache.commons.math.stat.FrequencyTest.suite()" "org.apache.commons.math.stat.FrequencyTest.class$(String)"
call "org.apache.commons.math.stat.FrequencyTest.suite()" "junit.framework.TestSuite.TestSuite(Class)"
call "org.apache.commons.math.stat.FrequencyTest.suite()" "junit.framework.TestSuite.setName(String)"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.suite()"
reference "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.FrequencyTest.f : Frequency"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.getSumFreq()"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.FrequencyTest.assertEquals(String,long,long)"
reference "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.FrequencyTest.oneL : long"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.addValue(long)"
reference "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.FrequencyTest.twoL : long"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.addValue(int)"
reference "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.FrequencyTest.oneI : int"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.getCount(int)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.getCumFreq(int)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.getCumFreq(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.clear()"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.addValue(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.getCount(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.getCumPct(Object)"
reference "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.FrequencyTest.tolerance : double"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.FrequencyTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.Frequency()"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.addValue(Integer)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.getCumPct(int)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.getPct(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.Frequency(Comparator)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.getCount(char)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.FrequencyTest.assertEquals(long,long)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.getCumFreq(char)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.getPct(char)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.TestUtils.assertEquals(double,double,double)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.getCumPct(char)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.Frequency.addValue(char)"
call "org.apache.commons.math.stat.FrequencyTest.testCounts()" "org.apache.commons.math.stat.FrequencyTest.assertEquals(double,double,double)"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.testCounts()"
reference "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.FrequencyTest.f : Frequency"
reference "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.FrequencyTest.oneL : long"
call "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.Frequency.addValue(long)"
reference "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.FrequencyTest.twoL : long"
reference "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.FrequencyTest.oneI : int"
call "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.Frequency.addValue(int)"
reference "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.FrequencyTest.twoI : int"
reference "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.FrequencyTest.threeL : long"
reference "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.FrequencyTest.threeI : int"
call "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.Frequency.getPct(int)"
reference "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.FrequencyTest.tolerance : double"
call "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.FrequencyTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.Frequency.getPct(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.Frequency.getPct(long)"
call "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.Frequency.getCumPct(int)"
call "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.Frequency.getCumPct(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testPcts()" "org.apache.commons.math.stat.Frequency.getCumPct(long)"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.testPcts()"
reference "org.apache.commons.math.stat.FrequencyTest.testAdd()" "org.apache.commons.math.stat.FrequencyTest.f : Frequency"
call "org.apache.commons.math.stat.FrequencyTest.testAdd()" "org.apache.commons.math.stat.Frequency.addValue(char)"
call "org.apache.commons.math.stat.FrequencyTest.testAdd()" "org.apache.commons.math.stat.Frequency.addValue(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testAdd()" "org.apache.commons.math.stat.FrequencyTest.fail(String)"
call "org.apache.commons.math.stat.FrequencyTest.testAdd()" "org.apache.commons.math.stat.Frequency.getPct(char)"
reference "org.apache.commons.math.stat.FrequencyTest.testAdd()" "org.apache.commons.math.stat.FrequencyTest.tolerance : double"
call "org.apache.commons.math.stat.FrequencyTest.testAdd()" "org.apache.commons.math.stat.FrequencyTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.FrequencyTest.testAdd()" "org.apache.commons.math.stat.Frequency.getCumPct(char)"
call "org.apache.commons.math.stat.FrequencyTest.testAdd()" "org.apache.commons.math.stat.Frequency.getPct(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testAdd()" "org.apache.commons.math.stat.Frequency.getCumPct(Object)"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.testAdd()"
reference "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()" "org.apache.commons.math.stat.FrequencyTest.f : Frequency"
call "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()" "org.apache.commons.math.stat.Frequency.getSumFreq()"
call "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()" "org.apache.commons.math.stat.FrequencyTest.assertEquals(String,long,long)"
call "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()" "org.apache.commons.math.stat.Frequency.getCount(int)"
call "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()" "org.apache.commons.math.stat.Frequency.getCount(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()" "org.apache.commons.math.stat.Frequency.getCumFreq(int)"
call "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()" "org.apache.commons.math.stat.Frequency.getCumFreq(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()" "org.apache.commons.math.stat.Frequency.getPct(int)"
call "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()" "org.apache.commons.math.stat.FrequencyTest.assertTrue(String,boolean)"
call "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()" "org.apache.commons.math.stat.Frequency.getPct(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()" "org.apache.commons.math.stat.Frequency.getCumPct(int)"
call "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()" "org.apache.commons.math.stat.Frequency.getCumPct(Object)"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.testEmptyTable()"
reference "org.apache.commons.math.stat.FrequencyTest.testToString()" "org.apache.commons.math.stat.FrequencyTest.f : Frequency"
reference "org.apache.commons.math.stat.FrequencyTest.testToString()" "org.apache.commons.math.stat.FrequencyTest.oneL : long"
call "org.apache.commons.math.stat.FrequencyTest.testToString()" "org.apache.commons.math.stat.Frequency.addValue(long)"
reference "org.apache.commons.math.stat.FrequencyTest.testToString()" "org.apache.commons.math.stat.FrequencyTest.twoL : long"
reference "org.apache.commons.math.stat.FrequencyTest.testToString()" "org.apache.commons.math.stat.FrequencyTest.oneI : int"
call "org.apache.commons.math.stat.FrequencyTest.testToString()" "org.apache.commons.math.stat.Frequency.addValue(int)"
reference "org.apache.commons.math.stat.FrequencyTest.testToString()" "org.apache.commons.math.stat.FrequencyTest.twoI : int"
call "org.apache.commons.math.stat.FrequencyTest.testToString()" "org.apache.commons.math.stat.Frequency.toString()"
call "org.apache.commons.math.stat.FrequencyTest.testToString()" "org.apache.commons.math.stat.FrequencyTest.assertNotNull(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testToString()" "org.apache.commons.math.stat.FrequencyTest.assertNull(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testToString()" "org.apache.commons.math.stat.FrequencyTest.fail(String)"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.testToString()"
reference "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()" "org.apache.commons.math.stat.FrequencyTest.f : Frequency"
call "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()" "org.apache.commons.math.stat.Frequency.addValue(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()" "org.apache.commons.math.stat.Frequency.addValue(Integer)"
call "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()" "org.apache.commons.math.stat.Frequency.addValue(int)"
call "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()" "org.apache.commons.math.stat.Frequency.getCount(int)"
call "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()" "org.apache.commons.math.stat.FrequencyTest.assertEquals(String,long,long)"
call "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()" "org.apache.commons.math.stat.Frequency.getCount(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()" "org.apache.commons.math.stat.Frequency.getCumPct(int)"
reference "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()" "org.apache.commons.math.stat.FrequencyTest.tolerance : double"
call "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()" "org.apache.commons.math.stat.FrequencyTest.assertEquals(String,double,double,double)"
call "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()" "org.apache.commons.math.stat.Frequency.getCumPct(Object)"
call "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()" "org.apache.commons.math.stat.Frequency.valuesIterator()"
call "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()" "org.apache.commons.math.stat.FrequencyTest.assertTrue(boolean)"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.testIntegerValues()"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.class$(String)"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.oneL : long"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.twoL : long"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.threeL : long"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.oneI : int"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.twoI : int"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.threeI : int"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.tolerance : double"
reference "org.apache.commons.math.stat.FrequencyTest.f : Frequency" "org.apache.commons.math.stat.Frequency"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.f : Frequency"
contain "org.apache.commons.math.stat.FrequencyTest" "org.apache.commons.math.stat.FrequencyTest.class$org$apache$commons$math$stat$FrequencyTest : Class"
reference "org.apache.commons.math.ode.TestProblem4.Stop" "org.apache.commons.math.ode.SwitchingFunction"
reference "org.apache.commons.math.ode.TestProblem4.Stop" "org.apache.commons.math.ode.TestProblem4"
contain "org.apache.commons.math.ode.TestProblem4.Stop" "org.apache.commons.math.ode.TestProblem4.Stop.Stop()"
contain "org.apache.commons.math.ode.TestProblem4.Stop" "org.apache.commons.math.ode.TestProblem4.Stop.g(double,double[])"
contain "org.apache.commons.math.ode.TestProblem4.Stop" "org.apache.commons.math.ode.TestProblem4.Stop.eventOccurred(double,double[])"
contain "org.apache.commons.math.ode.TestProblem4.Stop" "org.apache.commons.math.ode.TestProblem4.Stop.resetState(double,double[])"
contain "org.apache.commons.math.ode.TestProblem4.Stop" "org.apache.commons.math.ode.TestProblem4.Stop.serialVersionUID : long"
reference "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest" "org.apache.commons.math.stat.descriptive.moment.SecondMoment"
reference "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest"
call "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest.SecondMomentTest(String)" "org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest(String)"
contain "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest" "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest.SecondMomentTest(String)"
call "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest.getUnivariateStatistic()" "org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment()"
contain "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest" "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest.getUnivariateStatistic()"
reference "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest.expectedValue()" "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest.secondMoment : double"
contain "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest" "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest.expectedValue()"
reference "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest.stat : SecondMoment" "org.apache.commons.math.stat.descriptive.moment.SecondMoment"
contain "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest" "org.apache.commons.math.stat.descriptive.moment.SecondMomentTest.stat : SecondMoment"
